
CurrentController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052bc  080052bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c4  080052c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000000c  080052d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080052d8  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135f2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad4  00000000  00000000  0003362e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  00036108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00037208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a5e  00000000  00000000  000381e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b9c  00000000  00000000  0005cc3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0a37  00000000  00000000  000717da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152211  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000478c  00000000  00000000  00152264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800518c 	.word	0x0800518c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800518c 	.word	0x0800518c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <appInit>:

#include "app.h"

// ======== Init =========== //
void appInit(App *app, GPIO_TypeDef* ledPort, uint16_t ledPin)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af02      	add	r7, sp, #8
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	4613      	mov	r3, r2
 8000514:	80fb      	strh	r3, [r7, #6]
	// ======== LED =========== //
	app->blinkDelay = DELAY_100_MILISECONDS;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800051c:	601a      	str	r2, [r3, #0]
	app->ledPort = ledPort;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	68ba      	ldr	r2, [r7, #8]
 8000522:	605a      	str	r2, [r3, #4]
	app->ledPin = ledPin;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	88fa      	ldrh	r2, [r7, #6]
 8000528:	811a      	strh	r2, [r3, #8]

	// ======== Controller =========== //
	pidInit(&app->pid, 1, 1, 0, PID_CONTROLLER);
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	f103 000c 	add.w	r0, r3, #12
 8000530:	2302      	movs	r3, #2
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2300      	movs	r3, #0
 8000536:	2201      	movs	r2, #1
 8000538:	2101      	movs	r1, #1
 800053a:	f004 fcf3 	bl	8004f24 <pidInit>
	pidSetSetpoint(&app->pid, 500);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	330c      	adds	r3, #12
 8000542:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000546:	4618      	mov	r0, r3
 8000548:	f004 fdb2 	bl	80050b0 <pidSetSetpoint>

	// ======== Data Packet Tx =========== //
	dataPacketTxInit(&app->dataPacketTx, 0xAA, 0x55);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	3330      	adds	r3, #48	; 0x30
 8000550:	2255      	movs	r2, #85	; 0x55
 8000552:	21aa      	movs	r1, #170	; 0xaa
 8000554:	4618      	mov	r0, r3
 8000556:	f001 f8dc 	bl	8001712 <dataPacketTxInit>
	app->processVariableReadyToSend = FALSE;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	2200      	movs	r2, #0
 800055e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	app->enableSendProcessVariable = FALSE;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

	// ======== Data Packet Rx =========== //
	dataPacketRxInit(&app->dataPacketRx, 0xAA, 0x55);
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3372      	adds	r3, #114	; 0x72
 800056e:	2255      	movs	r2, #85	; 0x55
 8000570:	21aa      	movs	r1, #170	; 0xaa
 8000572:	4618      	mov	r0, r3
 8000574:	f000 ff1e 	bl	80013b4 <dataPacketRxInit>
	app->decodeCommandStatus = FALSE;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2200      	movs	r2, #0
 800057c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	app->command = 0;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2200      	movs	r2, #0
 8000584:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	memset(app->data, 0x00, QTY_DATA_BYTES);
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	33ba      	adds	r3, #186	; 0xba
 800058c:	2219      	movs	r2, #25
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f004 fdf3 	bl	800517c <memset>
	app->dataLenght = 0;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2200      	movs	r2, #0
 800059a:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
}
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <appExecuteBlinkLed>:

// ======== LED =========== //
void appExecuteBlinkLed(App *app)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(app->ledPort, app->ledPin);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	891b      	ldrh	r3, [r3, #8]
 80005b6:	4619      	mov	r1, r3
 80005b8:	4610      	mov	r0, r2
 80005ba:	f002 fa68 	bl	8002a8e <HAL_GPIO_TogglePin>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <appGetBlinkDelay>:

uint32_t appGetBlinkDelay(App *app)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
	return app->blinkDelay;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <appRunController>:

// ======== Controller =========== //
void appRunController(App *app, DAC_HandleTypeDef hdac)
{
 80005de:	b084      	sub	sp, #16
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	f107 001c 	add.w	r0, r7, #28
 80005ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// pidSetProcessVariable(&app->pid, app->pid->processVariable);
	pidCompute(&app->pid);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	330c      	adds	r3, #12
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 fccb 	bl	8004f90 <pidCompute>
	uint32_t controlledVariable = pidGetControlledVariable(&app->pid);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	330c      	adds	r3, #12
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fd7e 	bl	8005100 <pidGetControlledVariable>
 8000604:	4603      	mov	r3, r0
 8000606:	60fb      	str	r3, [r7, #12]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, controlledVariable);
 8000608:	f107 001c 	add.w	r0, r7, #28
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	f001 ff88 	bl	8002526 <HAL_DAC_SetValue>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000620:	b004      	add	sp, #16
 8000622:	4770      	bx	lr

08000624 <appSetProcessVariable>:

void appSetProcessVariable(App *app, uint16_t value)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	807b      	strh	r3, [r7, #2]
	pidSetProcessVariable(&app->pid, value);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	330c      	adds	r3, #12
 8000634:	887a      	ldrh	r2, [r7, #2]
 8000636:	4611      	mov	r1, r2
 8000638:	4618      	mov	r0, r3
 800063a:	f004 fd47 	bl	80050cc <pidSetProcessVariable>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <appGetProcessVariable>:

uint16_t appGetProcessVariable(App *app)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	return pidGetProcessVariable(&app->pid);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	330c      	adds	r3, #12
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fd48 	bl	80050e8 <pidGetProcessVariable>
 8000658:	4603      	mov	r3, r0
 800065a:	b29b      	uxth	r3, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <appAppendReceivedByte>:

// ======== Data Packet Rx =========== //
void appAppendReceivedByte(App *app, uint8_t receivedByte)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
	dataPacketRxAppend(&app->dataPacketRx, receivedByte);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3372      	adds	r3, #114	; 0x72
 8000674:	78fa      	ldrb	r2, [r7, #3]
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fed6 	bl	800142a <dataPacketRxAppend>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <appTryDecodeReceivedDataPacket>:

void appTryDecodeReceivedDataPacket(App *app)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
	dataPacketRxDecode(&app->dataPacketRx);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3372      	adds	r3, #114	; 0x72
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fef3 	bl	800147e <dataPacketRxDecode>
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <appTryExtractCommandAndPayloadFromDecodedDataPacket>:

void appTryExtractCommandAndPayloadFromDecodedDataPacket(App *app)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	if (dataPacketRxGetDataPacketStatus(&app->dataPacketRx) == VALID_RX_DATA_PACKET)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3372      	adds	r3, #114	; 0x72
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 f823 	bl	80016f8 <dataPacketRxGetDataPacketStatus>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d12a      	bne.n	800070e <appTryExtractCommandAndPayloadFromDecodedDataPacket+0x6e>
	{
		uint8_t receivedCmd = dataPacketRxGetCommand(&app->dataPacketRx);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3372      	adds	r3, #114	; 0x72
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 ffde 	bl	800167e <dataPacketRxGetCommand>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
		uint8_t receivedPayloadDataLength = dataPacketRxGetPayloadDataLength(&app->dataPacketRx);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3372      	adds	r3, #114	; 0x72
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f808 	bl	80016e0 <dataPacketRxGetPayloadDataLength>
 80006d0:	4603      	mov	r3, r0
 80006d2:	73bb      	strb	r3, [r7, #14]

		if (receivedPayloadDataLength > 0)
 80006d4:	7bbb      	ldrb	r3, [r7, #14]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d00b      	beq.n	80006f2 <appTryExtractCommandAndPayloadFromDecodedDataPacket+0x52>
		{
			uint8_t *receivedPayloadData = dataPacketRxGetPayloadData(&app->dataPacketRx);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3372      	adds	r3, #114	; 0x72
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fff2 	bl	80016c8 <dataPacketRxGetPayloadData>
 80006e4:	60b8      	str	r0, [r7, #8]
			appSetData(app, receivedPayloadData, receivedPayloadDataLength);
 80006e6:	7bbb      	ldrb	r3, [r7, #14]
 80006e8:	461a      	mov	r2, r3
 80006ea:	68b9      	ldr	r1, [r7, #8]
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f87a 	bl	80007e6 <appSetData>
		}

		appSetCommand(app, receivedCmd);
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	4619      	mov	r1, r3
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 f848 	bl	800078c <appSetCommand>
		appSetDecodeStatus(app, TRUE);
 80006fc:	2101      	movs	r1, #1
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f854 	bl	80007ac <appSetDecodeStatus>
		dataPacketRxClear(&app->dataPacketRx);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3372      	adds	r3, #114	; 0x72
 8000708:	4618      	mov	r0, r3
 800070a:	f000 ff6d 	bl	80015e8 <dataPacketRxClear>
	}
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <appTryDecodeExtractedCommand>:

void appTryDecodeExtractedCommand(App *app)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
	if (appGetDecodeStatus(app) == TRUE)
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f854 	bl	80007cc <appGetDecodeStatus>
 8000724:	4603      	mov	r3, r0
 8000726:	2b01      	cmp	r3, #1
 8000728:	d106      	bne.n	8000738 <appTryDecodeExtractedCommand+0x22>
	{
		appDecodeReceivedCommand(app);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 f808 	bl	8000740 <appDecodeReceivedCommand>
		appSetDecodeStatus(app, FALSE);
 8000730:	2100      	movs	r1, #0
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f83a 	bl	80007ac <appSetDecodeStatus>
	}
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <appDecodeReceivedCommand>:

void appDecodeReceivedCommand(App *app)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	switch (app->command)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800074e:	2b40      	cmp	r3, #64	; 0x40
 8000750:	d113      	bne.n	800077a <appDecodeReceivedCommand+0x3a>
	{
		case CMD_SET_SEND_ADC_READ_STATUS:
			if (app->data[0] == 0x00)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 8000758:	2b00      	cmp	r3, #0
 800075a:	d104      	bne.n	8000766 <appDecodeReceivedCommand+0x26>
			{
				app->enableSendProcessVariable = FALSE;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			else if (app->data[0] == 0x01)
			{
				app->enableSendProcessVariable = TRUE;
			}
			break;
 8000764:	e00b      	b.n	800077e <appDecodeReceivedCommand+0x3e>
			else if (app->data[0] == 0x01)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800076c:	2b01      	cmp	r3, #1
 800076e:	d106      	bne.n	800077e <appDecodeReceivedCommand+0x3e>
				app->enableSendProcessVariable = TRUE;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2201      	movs	r2, #1
 8000774:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			break;
 8000778:	e001      	b.n	800077e <appDecodeReceivedCommand+0x3e>

		default:
			break;
 800077a:	bf00      	nop
 800077c:	e000      	b.n	8000780 <appDecodeReceivedCommand+0x40>
			break;
 800077e:	bf00      	nop
	}
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <appSetCommand>:

void appSetCommand(App *app, uint8_t command)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
	app->command = command;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	78fa      	ldrb	r2, [r7, #3]
 800079c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <appSetDecodeStatus>:

void appSetDecodeStatus(App *app, Bool status)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	70fb      	strb	r3, [r7, #3]
	app->decodeCommandStatus = status;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	78fa      	ldrb	r2, [r7, #3]
 80007bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <appGetDecodeStatus>:

Bool appGetDecodeStatus(App *app)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	return app->decodeCommandStatus;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
}
 80007da:	4618      	mov	r0, r3
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <appSetData>:

void appSetData(App *app, uint8_t *data, uint8_t dataLength)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b084      	sub	sp, #16
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	60f8      	str	r0, [r7, #12]
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71fb      	strb	r3, [r7, #7]
	if (dataLength <= QTY_DATA_BYTES)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b19      	cmp	r3, #25
 80007f8:	d80a      	bhi.n	8000810 <appSetData+0x2a>
	{
		app->dataLenght = dataLength;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
		memcpy(app->data, data, dataLength);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	33ba      	adds	r3, #186	; 0xba
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	4618      	mov	r0, r3
 800080c:	f004 fca8 	bl	8005160 <memcpy>
	}
}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <appSendProcessVariable>:

// ======== Data Packet Tx =========== //
void appSendProcessVariable(App *app, UART_HandleTypeDef huart)
{
 8000818:	b084      	sub	sp, #16
 800081a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081c:	b093      	sub	sp, #76	; 0x4c
 800081e:	af0e      	add	r7, sp, #56	; 0x38
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint16_t adcValue = appGetProcessVariable(app);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ff0b 	bl	8000646 <appGetProcessVariable>
 8000830:	4603      	mov	r3, r0
 8000832:	81fb      	strh	r3, [r7, #14]
	uint8_t bytes[2] = {0x00, 0x00};
 8000834:	2300      	movs	r3, #0
 8000836:	81bb      	strh	r3, [r7, #12]
	bytes[0] = ((adcValue >> 8) & 0x00FF);
 8000838:	89fb      	ldrh	r3, [r7, #14]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	b29b      	uxth	r3, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	733b      	strb	r3, [r7, #12]
	bytes[1] = (adcValue & 0x00FF);
 8000842:	89fb      	ldrh	r3, [r7, #14]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	737b      	strb	r3, [r7, #13]

	dataPacketTxSetCommand(&app->dataPacketTx, 0x51);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3330      	adds	r3, #48	; 0x30
 800084c:	2151      	movs	r1, #81	; 0x51
 800084e:	4618      	mov	r0, r3
 8000850:	f001 f82e 	bl	80018b0 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&app->dataPacketTx, bytes, 2);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3330      	adds	r3, #48	; 0x30
 8000858:	f107 010c 	add.w	r1, r7, #12
 800085c:	2202      	movs	r2, #2
 800085e:	4618      	mov	r0, r3
 8000860:	f001 f840 	bl	80018e4 <dataPacketTxSetPayloadData>
	dataPacketTxMount(&app->dataPacketTx);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3330      	adds	r3, #48	; 0x30
 8000868:	4618      	mov	r0, r3
 800086a:	f000 ff82 	bl	8001772 <dataPacketTxMount>
	dataPacketTxUartSend(&app->dataPacketTx, huart);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f103 0630 	add.w	r6, r3, #48	; 0x30
 8000874:	466d      	mov	r5, sp
 8000876:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800087a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800087c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800087e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800088a:	e885 0003 	stmia.w	r5, {r0, r1}
 800088e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000894:	4630      	mov	r0, r6
 8000896:	f000 ffb3 	bl	8001800 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&app->dataPacketTx);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	3330      	adds	r3, #48	; 0x30
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 ffea 	bl	8001878 <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&app->dataPacketTx);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3330      	adds	r3, #48	; 0x30
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 ffc9 	bl	8001840 <dataPacketTxClear>
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <appTrySendData>:

void appTrySendData(App *app, UART_HandleTypeDef huart)
{
 80008bc:	b084      	sub	sp, #16
 80008be:	b5b0      	push	{r4, r5, r7, lr}
 80008c0:	b090      	sub	sp, #64	; 0x40
 80008c2:	af0e      	add	r7, sp, #56	; 0x38
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	f107 001c 	add.w	r0, r7, #28
 80008ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (appGetProcessVariableReadyToSend(app) == TRUE)
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f000 f837 	bl	8000942 <appGetProcessVariableReadyToSend>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d11c      	bne.n	8000914 <appTrySendData+0x58>
	{
		if (appGetEnableSendProcessVariable(app) == TRUE)
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f83e 	bl	800095c <appGetEnableSendProcessVariable>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d112      	bne.n	800090c <appTrySendData+0x50>
		{
			appSendProcessVariable(app, huart);
 80008e6:	466d      	mov	r5, sp
 80008e8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80008ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ff86 	bl	8000818 <appSendProcessVariable>
		}
		appSetProcessVariableReadyToSend(app, FALSE);
 800090c:	2100      	movs	r1, #0
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 f807 	bl	8000922 <appSetProcessVariableReadyToSend>
	}
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800091e:	b004      	add	sp, #16
 8000920:	4770      	bx	lr

08000922 <appSetProcessVariableReadyToSend>:

void appSetProcessVariableReadyToSend(App *app, Bool status)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	460b      	mov	r3, r1
 800092c:	70fb      	strb	r3, [r7, #3]
	app->processVariableReadyToSend = status;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	78fa      	ldrb	r2, [r7, #3]
 8000932:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <appGetProcessVariableReadyToSend>:

Bool appGetProcessVariableReadyToSend(App *app)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
	return app->processVariableReadyToSend;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <appGetEnableSendProcessVariable>:

Bool appGetEnableSendProcessVariable(App *app)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	return app->enableSendProcessVariable;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d11d      	bne.n	80009c4 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		decodeDataPacketDelay++;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	b29a      	uxth	r2, r3
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000992:	801a      	strh	r2, [r3, #0]
		blinkLedDelay++;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800099e:	801a      	strh	r2, [r3, #0]
		sendDataDelay1++;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80009aa:	801a      	strh	r2, [r3, #0]
		samplingDelay++;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80009b6:	801a      	strh	r2, [r3, #0]
		controllerDelay++;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	b29a      	uxth	r2, r3
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80009c2:	801a      	strh	r2, [r3, #0]
	}
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	20000084 	.word	0x20000084
 80009d4:	20000156 	.word	0x20000156
 80009d8:	20000158 	.word	0x20000158
 80009dc:	2000015a 	.word	0x2000015a
 80009e0:	2000015c 	.word	0x2000015c
 80009e4:	2000015e 	.word	0x2000015e

080009e8 <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_UART_RxCpltCallback+0x34>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d10d      	bne.n	8000a14 <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 80009f8:	2201      	movs	r2, #1
 80009fa:	4909      	ldr	r1, [pc, #36]	; (8000a20 <HAL_UART_RxCpltCallback+0x38>)
 80009fc:	4807      	ldr	r0, [pc, #28]	; (8000a1c <HAL_UART_RxCpltCallback+0x34>)
 80009fe:	f003 faf8 	bl	8003ff2 <HAL_UART_Receive_IT>
		appAppendReceivedByte(&app, receivedByte);
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <HAL_UART_RxCpltCallback+0x38>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4619      	mov	r1, r3
 8000a08:	4806      	ldr	r0, [pc, #24]	; (8000a24 <HAL_UART_RxCpltCallback+0x3c>)
 8000a0a:	f7ff fe2b 	bl	8000664 <appAppendReceivedByte>
		receivedByte = 0x00;
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <HAL_UART_RxCpltCallback+0x38>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
	}
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000cc 	.word	0x200000cc
 8000a20:	20000154 	.word	0x20000154
 8000a24:	20000160 	.word	0x20000160

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2a:	b091      	sub	sp, #68	; 0x44
 8000a2c:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2e:	f000 ff73 	bl	8001918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a32:	f000 f8cf 	bl	8000bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a36:	f000 fa49 	bl	8000ecc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a3a:	f000 f93d 	bl	8000cb8 <MX_ADC1_Init>
  MX_TIM9_Init();
 8000a3e:	f000 f9b7 	bl	8000db0 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8000a42:	f000 f9ef 	bl	8000e24 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a46:	f000 fa17 	bl	8000e78 <MX_USART3_UART_Init>
  MX_DAC_Init();
 8000a4a:	f000 f987 	bl	8000d5c <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 8000a4e:	4854      	ldr	r0, [pc, #336]	; (8000ba0 <main+0x178>)
 8000a50:	f002 fe3a 	bl	80036c8 <HAL_TIM_Base_Start_IT>
  appInit(&app, LED_GPIO_Port, LED_Pin);
 8000a54:	2220      	movs	r2, #32
 8000a56:	4953      	ldr	r1, [pc, #332]	; (8000ba4 <main+0x17c>)
 8000a58:	4853      	ldr	r0, [pc, #332]	; (8000ba8 <main+0x180>)
 8000a5a:	f7ff fd55 	bl	8000508 <appInit>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4852      	ldr	r0, [pc, #328]	; (8000bac <main+0x184>)
 8000a62:	f001 fd0e 	bl	8002482 <HAL_DAC_Start>
  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	4951      	ldr	r1, [pc, #324]	; (8000bb0 <main+0x188>)
 8000a6a:	4852      	ldr	r0, [pc, #328]	; (8000bb4 <main+0x18c>)
 8000a6c:	f003 fac1 	bl	8003ff2 <HAL_UART_Receive_IT>

	  /********************************* TOP SLOT START ********************************/

	  /* Put here the code to be executed in all cycles before the state machine */

	  if (samplingDelay >= DELAY_10_MILISECONDS)
 8000a70:	4b51      	ldr	r3, [pc, #324]	; (8000bb8 <main+0x190>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	2b63      	cmp	r3, #99	; 0x63
 8000a76:	d91b      	bls.n	8000ab0 <main+0x88>
	  {
		  HAL_ADC_Start(&hadc1);
 8000a78:	4850      	ldr	r0, [pc, #320]	; (8000bbc <main+0x194>)
 8000a7a:	f001 f803 	bl	8001a84 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a7e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a82:	484e      	ldr	r0, [pc, #312]	; (8000bbc <main+0x194>)
 8000a84:	f001 f903 	bl	8001c8e <HAL_ADC_PollForConversion>
		  uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000a88:	484c      	ldr	r0, [pc, #304]	; (8000bbc <main+0x194>)
 8000a8a:	f001 f98b 	bl	8001da4 <HAL_ADC_GetValue>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
		  HAL_ADC_Stop(&hadc1);
 8000a92:	484a      	ldr	r0, [pc, #296]	; (8000bbc <main+0x194>)
 8000a94:	f001 f8c8 	bl	8001c28 <HAL_ADC_Stop>
		  appSetProcessVariable(&app, adcValue);
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4842      	ldr	r0, [pc, #264]	; (8000ba8 <main+0x180>)
 8000a9e:	f7ff fdc1 	bl	8000624 <appSetProcessVariable>
		  appSetProcessVariableReadyToSend(&app, TRUE);
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4840      	ldr	r0, [pc, #256]	; (8000ba8 <main+0x180>)
 8000aa6:	f7ff ff3c 	bl	8000922 <appSetProcessVariableReadyToSend>
		  samplingDelay = 0;
 8000aaa:	4b43      	ldr	r3, [pc, #268]	; (8000bb8 <main+0x190>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	801a      	strh	r2, [r3, #0]
	  }

	  if (controllerDelay >= DELAY_10_MILISECONDS)
 8000ab0:	4b43      	ldr	r3, [pc, #268]	; (8000bc0 <main+0x198>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	2b63      	cmp	r3, #99	; 0x63
 8000ab6:	d90e      	bls.n	8000ad6 <main+0xae>
	  {
		  appRunController(&app, hdac);
 8000ab8:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <main+0x184>)
 8000aba:	466c      	mov	r4, sp
 8000abc:	f103 020c 	add.w	r2, r3, #12
 8000ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ac4:	e884 0003 	stmia.w	r4, {r0, r1}
 8000ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aca:	4837      	ldr	r0, [pc, #220]	; (8000ba8 <main+0x180>)
 8000acc:	f7ff fd87 	bl	80005de <appRunController>
		  controllerDelay = 0;
 8000ad0:	4b3b      	ldr	r3, [pc, #236]	; (8000bc0 <main+0x198>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	801a      	strh	r2, [r3, #0]

	  /* ============================================================================= */

	  /****************************** STATE MACHINE START ******************************/

	  switch (stateMachine)
 8000ad6:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <main+0x19c>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d85a      	bhi.n	8000b94 <main+0x16c>
 8000ade:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <main+0xbc>)
 8000ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae4:	08000af9 	.word	0x08000af9
 8000ae8:	08000b15 	.word	0x08000b15
 8000aec:	08000b23 	.word	0x08000b23
 8000af0:	08000b31 	.word	0x08000b31
 8000af4:	08000b57 	.word	0x08000b57
	  {
	  	  case 0:
	  		  if (decodeDataPacketDelay >= DELAY_10_MILISECONDS)
 8000af8:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <main+0x1a0>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	2b63      	cmp	r3, #99	; 0x63
 8000afe:	d905      	bls.n	8000b0c <main+0xe4>
	  		  {
	  			appTryDecodeReceivedDataPacket(&app);
 8000b00:	4829      	ldr	r0, [pc, #164]	; (8000ba8 <main+0x180>)
 8000b02:	f7ff fdc0 	bl	8000686 <appTryDecodeReceivedDataPacket>
	  			decodeDataPacketDelay = 0;
 8000b06:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <main+0x1a0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  stateMachine = 1;
 8000b0c:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <main+0x19c>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000b12:	e043      	b.n	8000b9c <main+0x174>

		  case 1:
			  appTryExtractCommandAndPayloadFromDecodedDataPacket(&app);
 8000b14:	4824      	ldr	r0, [pc, #144]	; (8000ba8 <main+0x180>)
 8000b16:	f7ff fdc3 	bl	80006a0 <appTryExtractCommandAndPayloadFromDecodedDataPacket>
			  stateMachine = 2;
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <main+0x19c>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	701a      	strb	r2, [r3, #0]
			  break;
 8000b20:	e03c      	b.n	8000b9c <main+0x174>

		  case 2:
			  appTryDecodeExtractedCommand(&app);
 8000b22:	4821      	ldr	r0, [pc, #132]	; (8000ba8 <main+0x180>)
 8000b24:	f7ff fdf7 	bl	8000716 <appTryDecodeExtractedCommand>
			  stateMachine = 3;
 8000b28:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <main+0x19c>)
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	701a      	strb	r2, [r3, #0]
			  break;
 8000b2e:	e035      	b.n	8000b9c <main+0x174>

		  case 3:
			  if (blinkLedDelay >= appGetBlinkDelay(&app))
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <main+0x1a4>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	461c      	mov	r4, r3
 8000b36:	481c      	ldr	r0, [pc, #112]	; (8000ba8 <main+0x180>)
 8000b38:	f7ff fd45 	bl	80005c6 <appGetBlinkDelay>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	429c      	cmp	r4, r3
 8000b40:	d305      	bcc.n	8000b4e <main+0x126>
			  {
				  appExecuteBlinkLed(&app);
 8000b42:	4819      	ldr	r0, [pc, #100]	; (8000ba8 <main+0x180>)
 8000b44:	f7ff fd2f 	bl	80005a6 <appExecuteBlinkLed>
				  blinkLedDelay = 0;
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <main+0x1a4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 4;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <main+0x19c>)
 8000b50:	2204      	movs	r2, #4
 8000b52:	701a      	strb	r2, [r3, #0]
			  break;
 8000b54:	e022      	b.n	8000b9c <main+0x174>

		  case 4:
			  if (sendDataDelay1 >= DELAY_50_MILISECONDS)
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <main+0x1a8>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b5e:	d315      	bcc.n	8000b8c <main+0x164>
			  {
				  appTrySendData(&app, huart2);
 8000b60:	4e14      	ldr	r6, [pc, #80]	; (8000bb4 <main+0x18c>)
 8000b62:	466d      	mov	r5, sp
 8000b64:	f106 040c 	add.w	r4, r6, #12
 8000b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b78:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b7c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <main+0x180>)
 8000b82:	f7ff fe9b 	bl	80008bc <appTrySendData>
				  sendDataDelay1 = 0;
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <main+0x1a8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 0;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <main+0x19c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
			  break;
 8000b92:	e003      	b.n	8000b9c <main+0x174>

		  default:
			  stateMachine = 0;
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <main+0x19c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
			  break;
 8000b9a:	bf00      	nop
	  if (samplingDelay >= DELAY_10_MILISECONDS)
 8000b9c:	e768      	b.n	8000a70 <main+0x48>
 8000b9e:	bf00      	nop
 8000ba0:	20000084 	.word	0x20000084
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	20000160 	.word	0x20000160
 8000bac:	20000070 	.word	0x20000070
 8000bb0:	20000154 	.word	0x20000154
 8000bb4:	200000cc 	.word	0x200000cc
 8000bb8:	2000015c 	.word	0x2000015c
 8000bbc:	20000028 	.word	0x20000028
 8000bc0:	2000015e 	.word	0x2000015e
 8000bc4:	20000234 	.word	0x20000234
 8000bc8:	20000156 	.word	0x20000156
 8000bcc:	20000158 	.word	0x20000158
 8000bd0:	2000015a 	.word	0x2000015a

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b094      	sub	sp, #80	; 0x50
 8000bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	2234      	movs	r2, #52	; 0x34
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f004 faca 	bl	800517c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <SystemClock_Config+0xdc>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	4a2b      	ldr	r2, [pc, #172]	; (8000cb0 <SystemClock_Config+0xdc>)
 8000c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c06:	6413      	str	r3, [r2, #64]	; 0x40
 8000c08:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <SystemClock_Config+0xdc>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c14:	2300      	movs	r3, #0
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <SystemClock_Config+0xe0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a25      	ldr	r2, [pc, #148]	; (8000cb4 <SystemClock_Config+0xe0>)
 8000c1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <SystemClock_Config+0xe0>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c40:	2300      	movs	r3, #0
 8000c42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c44:	2308      	movs	r3, #8
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c48:	23b4      	movs	r3, #180	; 0xb4
 8000c4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fa45 	bl	80030ec <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c68:	f000 f982 	bl	8000f70 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c6c:	f001 ff2a 	bl	8002ac4 <HAL_PWREx_EnableOverDrive>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c76:	f000 f97b 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7a:	230f      	movs	r3, #15
 8000c7c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c86:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c90:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	2105      	movs	r1, #5
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 ff63 	bl	8002b64 <HAL_RCC_ClockConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ca4:	f000 f964 	bl	8000f70 <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3750      	adds	r7, #80	; 0x50
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000ccc:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <MX_ADC1_Init+0x9c>)
 8000cce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000cd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <MX_ADC1_Init+0xa0>)
 8000cfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000d1a:	f000 fe6f 	bl	80019fc <HAL_ADC_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d24:	f000 f924 	bl	8000f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_ADC1_Init+0x98>)
 8000d3a:	f001 f841 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d44:	f000 f914 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000028 	.word	0x20000028
 8000d54:	40012000 	.word	0x40012000
 8000d58:	0f000001 	.word	0x0f000001

08000d5c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_DAC_Init+0x4c>)
 8000d6c:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <MX_DAC_Init+0x50>)
 8000d6e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <MX_DAC_Init+0x4c>)
 8000d72:	f001 fb64 	bl	800243e <HAL_DAC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000d7c:	f000 f8f8 	bl	8000f70 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <MX_DAC_Init+0x4c>)
 8000d90:	f001 fbee 	bl	8002570 <HAL_DAC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000d9a:	f000 f8e9 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000070 	.word	0x20000070
 8000dac:	40007400 	.word	0x40007400

08000db0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	463b      	mov	r3, r7
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_TIM9_Init+0x6c>)
 8000dc4:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <MX_TIM9_Init+0x70>)
 8000dc6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_TIM9_Init+0x6c>)
 8000dca:	2204      	movs	r2, #4
 8000dcc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_TIM9_Init+0x6c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3665;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_TIM9_Init+0x6c>)
 8000dd6:	f640 6251 	movw	r2, #3665	; 0xe51
 8000dda:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_TIM9_Init+0x6c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_TIM9_Init+0x6c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <MX_TIM9_Init+0x6c>)
 8000dea:	f002 fc1d 	bl	8003628 <HAL_TIM_Base_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000df4:	f000 f8bc 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_TIM9_Init+0x6c>)
 8000e04:	f002 fdd8 	bl	80039b8 <HAL_TIM_ConfigClockSource>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000e0e:	f000 f8af 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000084 	.word	0x20000084
 8000e20:	40014000 	.word	0x40014000

08000e24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <MX_USART2_UART_Init+0x50>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_USART2_UART_Init+0x4c>)
 8000e5c:	f002 ffea 	bl	8003e34 <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e66:	f000 f883 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000cc 	.word	0x200000cc
 8000e74:	40004400 	.word	0x40004400

08000e78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <MX_USART3_UART_Init+0x50>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000eb0:	f002 ffc0 	bl	8003e34 <HAL_UART_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000eba:	f000 f859 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000110 	.word	0x20000110
 8000ec8:	40004800 	.word	0x40004800

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_GPIO_Init+0x98>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <MX_GPIO_Init+0x98>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_GPIO_Init+0x98>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <MX_GPIO_Init+0x98>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <MX_GPIO_Init+0x98>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_GPIO_Init+0x98>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	4812      	ldr	r0, [pc, #72]	; (8000f68 <MX_GPIO_Init+0x9c>)
 8000f20:	f001 fd9c 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4619      	mov	r1, r3
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <MX_GPIO_Init+0xa0>)
 8000f3a:	f001 fbfb 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f3e:	2320      	movs	r3, #32
 8000f40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_GPIO_Init+0x9c>)
 8000f56:	f001 fbed 	bl	8002734 <HAL_GPIO_Init>

}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40020800 	.word	0x40020800

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>
	...

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_ADC_MspInit+0x7c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d127      	bne.n	800103e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_ADC_MspInit+0x80>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a15      	ldr	r2, [pc, #84]	; (800104c <HAL_ADC_MspInit+0x80>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_ADC_MspInit+0x80>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_ADC_MspInit+0x80>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <HAL_ADC_MspInit+0x80>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_ADC_MspInit+0x80>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CURRENT_SENSE_Pin;
 8001026:	2302      	movs	r3, #2
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_ADC_MspInit+0x84>)
 800103a:	f001 fb7b 	bl	8002734 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	; 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40012000 	.word	0x40012000
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000

08001054 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <HAL_DAC_MspInit+0x7c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d127      	bne.n	80010c6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_DAC_MspInit+0x80>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <HAL_DAC_MspInit+0x80>)
 8001080:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <HAL_DAC_MspInit+0x80>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_DAC_MspInit+0x80>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <HAL_DAC_MspInit+0x80>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_DAC_MspInit+0x80>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = CURRENT_CTRL_Pin;
 80010ae:	2310      	movs	r3, #16
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b2:	2303      	movs	r3, #3
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_CTRL_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <HAL_DAC_MspInit+0x84>)
 80010c2:	f001 fb37 	bl	8002734 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40007400 	.word	0x40007400
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_TIM_Base_MspInit+0x48>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d115      	bne.n	800111a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_TIM_Base_MspInit+0x4c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <HAL_TIM_Base_MspInit+0x4c>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <HAL_TIM_Base_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2018      	movs	r0, #24
 8001110:	f001 f95f 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001114:	2018      	movs	r0, #24
 8001116:	f001 f978 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40014000 	.word	0x40014000
 8001128:	40023800 	.word	0x40023800

0800112c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	; 0x30
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a36      	ldr	r2, [pc, #216]	; (8001224 <HAL_UART_MspInit+0xf8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d134      	bne.n	80011b8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	4b35      	ldr	r3, [pc, #212]	; (8001228 <HAL_UART_MspInit+0xfc>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a34      	ldr	r2, [pc, #208]	; (8001228 <HAL_UART_MspInit+0xfc>)
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b32      	ldr	r3, [pc, #200]	; (8001228 <HAL_UART_MspInit+0xfc>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <HAL_UART_MspInit+0xfc>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a2d      	ldr	r2, [pc, #180]	; (8001228 <HAL_UART_MspInit+0xfc>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <HAL_UART_MspInit+0xfc>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001186:	230c      	movs	r3, #12
 8001188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001196:	2307      	movs	r3, #7
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4822      	ldr	r0, [pc, #136]	; (800122c <HAL_UART_MspInit+0x100>)
 80011a2:	f001 fac7 	bl	8002734 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2026      	movs	r0, #38	; 0x26
 80011ac:	f001 f911 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011b0:	2026      	movs	r0, #38	; 0x26
 80011b2:	f001 f92a 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011b6:	e031      	b.n	800121c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <HAL_UART_MspInit+0x104>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d12c      	bne.n	800121c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_UART_MspInit+0xfc>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <HAL_UART_MspInit+0xfc>)
 80011cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_UART_MspInit+0xfc>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_UART_MspInit+0xfc>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_UART_MspInit+0xfc>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_UART_MspInit+0xfc>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800120c:	2307      	movs	r3, #7
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <HAL_UART_MspInit+0x108>)
 8001218:	f001 fa8c 	bl	8002734 <HAL_GPIO_Init>
}
 800121c:	bf00      	nop
 800121e:	3730      	adds	r7, #48	; 0x30
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40004400 	.word	0x40004400
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000
 8001230:	40004800 	.word	0x40004800
 8001234:	40020800 	.word	0x40020800

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler+0x4>

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001284:	f000 fb9a 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001292:	f002 fa89 	bl	80037a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000084 	.word	0x20000084

080012a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <USART2_IRQHandler+0x10>)
 80012a6:	f002 fed5 	bl	8004054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000cc 	.word	0x200000cc

080012b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <SystemInit+0x20>)
 80012ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <SystemInit+0x20>)
 80012c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001310 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012de:	490e      	ldr	r1, [pc, #56]	; (8001318 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012e0:	4a0e      	ldr	r2, [pc, #56]	; (800131c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012f4:	4c0b      	ldr	r4, [pc, #44]	; (8001324 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001302:	f7ff ffd7 	bl	80012b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001306:	f003 ff07 	bl	8005118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130a:	f7ff fb8d 	bl	8000a28 <main>
  bx  lr    
 800130e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800131c:	080052cc 	.word	0x080052cc
  ldr r2, =_sbss
 8001320:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001324:	2000023c 	.word	0x2000023c

08001328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC_IRQHandler>

0800132a <genCrc>:

/**
  * Calcula o crc8 entre o range passado como parametro.
  */
uint8_t genCrc(uint8_t buffer[], uint16_t qtd_de_bytes_no_pacote)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b084      	sub	sp, #16
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 800133e:	2300      	movs	r3, #0
 8001340:	73bb      	strb	r3, [r7, #14]
 8001342:	e00d      	b.n	8001360 <genCrc+0x36>
    {
      crc = calcCrc8(crc, buffer[i]);
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f80f 	bl	8001374 <calcCrc8>
 8001356:	4603      	mov	r3, r0
 8001358:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	3301      	adds	r3, #1
 800135e:	73bb      	strb	r3, [r7, #14]
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	b29b      	uxth	r3, r3
 8001364:	887a      	ldrh	r2, [r7, #2]
 8001366:	429a      	cmp	r2, r3
 8001368:	d8ec      	bhi.n	8001344 <genCrc+0x1a>
    }

  return crc;
 800136a:	7bfb      	ldrb	r3, [r7, #15]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <calcCrc8>:

/**
  * Funcao que calcula o CRC8
  */
static uint8_t calcCrc8(uint8_t crc3, uint8_t b)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	460a      	mov	r2, r1
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	4613      	mov	r3, r2
 8001382:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]
    pos = (((crc3 & 0xff) ^ b) & 0xff);
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	79bb      	ldrb	r3, [r7, #6]
 800138c:	4053      	eors	r3, r2
 800138e:	73fb      	strb	r3, [r7, #15]

    return ((crc3) >> 8) ^ table[pos];
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	121b      	asrs	r3, r3, #8
 8001394:	b25a      	sxtb	r2, r3
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	4905      	ldr	r1, [pc, #20]	; (80013b0 <calcCrc8+0x3c>)
 800139a:	5ccb      	ldrb	r3, [r1, r3]
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4053      	eors	r3, r2
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	080051bc 	.word	0x080051bc

080013b4 <dataPacketRxInit>:
 */

#include "dataPacketRx.h"

void dataPacketRxInit(DataPacketRx *dataPacketRx, uint8_t start_1, uint8_t start_2)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	70fb      	strb	r3, [r7, #3]
 80013c0:	4613      	mov	r3, r2
 80013c2:	70bb      	strb	r3, [r7, #2]
	dataPacketRx->start_1 = start_1;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	78fa      	ldrb	r2, [r7, #3]
 80013c8:	701a      	strb	r2, [r3, #0]
	dataPacketRx->start_2 = start_2;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	78ba      	ldrb	r2, [r7, #2]
 80013ce:	705a      	strb	r2, [r3, #1]
	dataPacketRx->command = 0x00;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	709a      	strb	r2, [r3, #2]
	dataPacketRx->payloadDataLength = 0x00;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	70da      	strb	r2, [r3, #3]
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3304      	adds	r3, #4
 80013e0:	2219      	movs	r2, #25
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fec9 	bl	800517c <memset>
	dataPacketRx->crc8 = 0x00;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	775a      	strb	r2, [r3, #29]
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	331e      	adds	r3, #30
 80013f4:	221e      	movs	r2, #30
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 febf 	bl	800517c <memset>
	dataPacketRx->dataPacketLength = 0x00;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketRx->currentRxByteIndex = 0;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	87da      	strh	r2, [r3, #62]	; 0x3e
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	dataPacketRx->containsStarterBytes = FALSE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dataPacketRx->starterByteIndex = 0;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <dataPacketRxAppend>:

void dataPacketRxAppend(DataPacketRx *dataPacketRx, uint8_t newByte)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacket[dataPacketRx->currentRxByteIndex] = newByte;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800143a:	461a      	mov	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	78fa      	ldrb	r2, [r7, #3]
 8001442:	779a      	strb	r2, [r3, #30]
	dataPacketRx->currentRxByteIndex++;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001448:	3301      	adds	r3, #1
 800144a:	b29a      	uxth	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	87da      	strh	r2, [r3, #62]	; 0x3e
	dataPacketRx->dataPacketLength++;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001454:	3301      	adds	r3, #1
 8001456:	b29a      	uxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	879a      	strh	r2, [r3, #60]	; 0x3c

	if (dataPacketRx->currentRxByteIndex > QTY_PACKET_RX_BYTES)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001460:	2b1e      	cmp	r3, #30
 8001462:	d908      	bls.n	8001476 <dataPacketRxAppend+0x4c>
	{
		dataPacketRxClear(dataPacketRx);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f8bf 	bl	80015e8 <dataPacketRxClear>
		dataPacketRx->currentRxByteIndex = 0;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	87da      	strh	r2, [r3, #62]	; 0x3e
		dataPacketRx->dataPacketLength = 0;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	879a      	strh	r2, [r3, #60]	; 0x3c
	}
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <dataPacketRxDecode>:

void dataPacketRxDecode(DataPacketRx *dataPacketRx)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
	if (dataPacketRx->containsStarterBytes == TRUE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800148c:	2b01      	cmp	r3, #1
 800148e:	d174      	bne.n	800157a <dataPacketRxDecode+0xfc>
	{
		dataPacketRxSetCommand(dataPacketRx, dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 2]);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001496:	3302      	adds	r3, #2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	7f9b      	ldrb	r3, [r3, #30]
 800149e:	4619      	mov	r1, r3
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f8d2 	bl	800164a <dataPacketRxSetCommand>
		dataPacketRx->payloadDataLength = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 3];
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80014ac:	3303      	adds	r3, #3
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	7f9a      	ldrb	r2, [r3, #30]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	70da      	strb	r2, [r3, #3]

		if (dataPacketRx->payloadDataLength == 0)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	78db      	ldrb	r3, [r3, #3]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d122      	bne.n	8001506 <dataPacketRxDecode+0x88>
		{
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 4];
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80014c6:	3304      	adds	r3, #4
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	4413      	add	r3, r2
 80014cc:	7f9b      	ldrb	r3, [r3, #30]
 80014ce:	733b      	strb	r3, [r7, #12]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, 4);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	331e      	adds	r3, #30
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80014da:	4413      	add	r3, r2
 80014dc:	2104      	movs	r1, #4
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff23 	bl	800132a <genCrc>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	775a      	strb	r2, [r3, #29]

			if (dataPacketRx->crc8 == receivedCrc8)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7f5b      	ldrb	r3, [r3, #29]
 80014f0:	7b3a      	ldrb	r2, [r7, #12]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d174      	bne.n	80015e0 <dataPacketRxDecode+0x162>
			{
				dataPacketRx->currentRxByteIndex = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	87da      	strh	r2, [r3, #62]	; 0x3e
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			{
				dataPacketRxClear(dataPacketRx);
			}
		}
	}
}
 8001504:	e06c      	b.n	80015e0 <dataPacketRxDecode+0x162>
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + dataPacketRx->payloadDataLength + 4];
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800150c:	461a      	mov	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	78db      	ldrb	r3, [r3, #3]
 8001512:	4413      	add	r3, r2
 8001514:	3304      	adds	r3, #4
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	7f9b      	ldrb	r3, [r3, #30]
 800151c:	737b      	strb	r3, [r7, #13]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, dataPacketRx->payloadDataLength + 4);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	331e      	adds	r3, #30
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8001528:	441a      	add	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	78db      	ldrb	r3, [r3, #3]
 800152e:	b29b      	uxth	r3, r3
 8001530:	3304      	adds	r3, #4
 8001532:	b29b      	uxth	r3, r3
 8001534:	4619      	mov	r1, r3
 8001536:	4610      	mov	r0, r2
 8001538:	f7ff fef7 	bl	800132a <genCrc>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	775a      	strb	r2, [r3, #29]
			if (dataPacketRx->crc8 == receivedCrc8)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7f5b      	ldrb	r3, [r3, #29]
 8001548:	7b7a      	ldrb	r2, [r7, #13]
 800154a:	429a      	cmp	r2, r3
 800154c:	d148      	bne.n	80015e0 <dataPacketRxDecode+0x162>
				dataPacketRxSetPayloadData(dataPacketRx, dataPacketRx->dataPacket + dataPacketRx->starterByteIndex + 4, dataPacketRx->payloadDataLength);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f103 021e 	add.w	r2, r3, #30
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800155a:	3304      	adds	r3, #4
 800155c:	18d1      	adds	r1, r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	78db      	ldrb	r3, [r3, #3]
 8001562:	461a      	mov	r2, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f896 	bl	8001696 <dataPacketRxSetPayloadData>
				dataPacketRx->currentRxByteIndex = 0;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	87da      	strh	r2, [r3, #62]	; 0x3e
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8001578:	e032      	b.n	80015e0 <dataPacketRxDecode+0x162>
		if (dataPacketRx->dataPacketLength >= MIN_PACKET_RX_BYTES)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800157e:	2b04      	cmp	r3, #4
 8001580:	d92e      	bls.n	80015e0 <dataPacketRxDecode+0x162>
			uint16_t index = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	81fb      	strh	r3, [r7, #14]
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 8001586:	2300      	movs	r3, #0
 8001588:	81fb      	strh	r3, [r7, #14]
 800158a:	e01c      	b.n	80015c6 <dataPacketRxDecode+0x148>
				if ((dataPacketRx->dataPacket[index] == dataPacketRx->start_1) && (dataPacketRx->dataPacket[index+1] == dataPacketRx->start_2))
 800158c:	89fb      	ldrh	r3, [r7, #14]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	7f9a      	ldrb	r2, [r3, #30]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d111      	bne.n	80015c0 <dataPacketRxDecode+0x142>
 800159c:	89fb      	ldrh	r3, [r7, #14]
 800159e:	3301      	adds	r3, #1
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	4413      	add	r3, r2
 80015a4:	7f9a      	ldrb	r2, [r3, #30]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	785b      	ldrb	r3, [r3, #1]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d108      	bne.n	80015c0 <dataPacketRxDecode+0x142>
					dataPacketRx->containsStarterBytes = TRUE;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
					dataPacketRx->starterByteIndex = index;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	89fa      	ldrh	r2, [r7, #14]
 80015ba:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
					break;
 80015be:	e007      	b.n	80015d0 <dataPacketRxDecode+0x152>
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	3301      	adds	r3, #1
 80015c4:	81fb      	strh	r3, [r7, #14]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80015ca:	89fa      	ldrh	r2, [r7, #14]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d3dd      	bcc.n	800158c <dataPacketRxDecode+0x10e>
			if (dataPacketRx->containsStarterBytes == FALSE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <dataPacketRxDecode+0x162>
				dataPacketRxClear(dataPacketRx);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f804 	bl	80015e8 <dataPacketRxClear>
}
 80015e0:	bf00      	nop
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <dataPacketRxClear>:

void dataPacketRxClear(DataPacketRx *dataPacketRx)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	dataPacketRx->containsStarterBytes = FALSE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dataPacketRx->currentRxByteIndex = 0;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	87da      	strh	r2, [r3, #62]	; 0x3e
	dataPacketRx->dataPacketLength = 0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketRx->payloadDataLength = 0;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	70da      	strb	r2, [r3, #3]
	dataPacketRx->command = 0x00;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	709a      	strb	r2, [r3, #2]
	dataPacketRx->crc8 = 0x00;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	775a      	strb	r2, [r3, #29]
	dataPacketRx->starterByteIndex = 0;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3304      	adds	r3, #4
 800162a:	2219      	movs	r2, #25
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f003 fda4 	bl	800517c <memset>
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	331e      	adds	r3, #30
 8001638:	221e      	movs	r2, #30
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fd9d 	bl	800517c <memset>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <dataPacketRxSetCommand>:
	dataPacketRx->crc8 = 0x00;
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
}

void dataPacketRxSetCommand(DataPacketRx *dataPacketRx, uint8_t command)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	460b      	mov	r3, r1
 8001654:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	if ((command < 0x01) || (command > 0xFE))
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d006      	beq.n	8001672 <dataPacketRxSetCommand+0x28>
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	2bff      	cmp	r3, #255	; 0xff
 8001668:	d003      	beq.n	8001672 <dataPacketRxSetCommand+0x28>
	{
		return;
	}

	dataPacketRx->command = command;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	78fa      	ldrb	r2, [r7, #3]
 800166e:	709a      	strb	r2, [r3, #2]
 8001670:	e000      	b.n	8001674 <dataPacketRxSetCommand+0x2a>
		return;
 8001672:	bf00      	nop
}
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <dataPacketRxGetCommand>:

uint8_t dataPacketRxGetCommand(DataPacketRx *dataPacketRx)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
	return dataPacketRx->command;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	789b      	ldrb	r3, [r3, #2]
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <dataPacketRxSetPayloadData>:

void dataPacketRxSetPayloadData(DataPacketRx *dataPacketRx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	4613      	mov	r3, r2
 80016a2:	71fb      	strb	r3, [r7, #7]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	memcpy(dataPacketRx->payloadData, payloadData, payloadDataLength);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3304      	adds	r3, #4
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 fd53 	bl	8005160 <memcpy>
	dataPacketRx->payloadDataLength = payloadDataLength;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	79fa      	ldrb	r2, [r7, #7]
 80016be:	70da      	strb	r2, [r3, #3]
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <dataPacketRxGetPayloadData>:

uint8_t *dataPacketRxGetPayloadData(DataPacketRx *dataPacketRx)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadData;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3304      	adds	r3, #4
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <dataPacketRxGetPayloadDataLength>:

uint8_t dataPacketRxGetPayloadDataLength(DataPacketRx *dataPacketRx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadDataLength;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	78db      	ldrb	r3, [r3, #3]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <dataPacketRxGetDataPacketStatus>:
{
	return dataPacketRx->dataPacketLength;
}

DataPacketRxStatus dataPacketRxGetDataPacketStatus(DataPacketRx *dataPacketRx)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	return dataPacketRx->dataPacketRxStatus;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <dataPacketTxInit>:
 */

#include "dataPacketTx.h"

void dataPacketTxInit(DataPacketTx *dataPacketTx, uint8_t start_1, uint8_t start_2)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	460b      	mov	r3, r1
 800171c:	70fb      	strb	r3, [r7, #3]
 800171e:	4613      	mov	r3, r2
 8001720:	70bb      	strb	r3, [r7, #2]
	dataPacketTx->start_1 = start_1;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	701a      	strb	r2, [r3, #0]
	dataPacketTx->start_2 = start_2;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	78ba      	ldrb	r2, [r7, #2]
 800172c:	705a      	strb	r2, [r3, #1]
	dataPacketTx->command = 0x00;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	709a      	strb	r2, [r3, #2]
	dataPacketTx->payloadDataLength = 0x00;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	70da      	strb	r2, [r3, #3]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3304      	adds	r3, #4
 800173e:	2219      	movs	r2, #25
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fd1a 	bl	800517c <memset>
	dataPacketTx->crc8 = 0x00;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	775a      	strb	r2, [r3, #29]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	331e      	adds	r3, #30
 8001752:	221e      	movs	r2, #30
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f003 fd10 	bl	800517c <memset>
	dataPacketTx->dataPacketLength = 0x00;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <dataPacketTxMount>:

void dataPacketTxMount(DataPacketTx *dataPacketTx)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacket[0] = dataPacketTx->start_1;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	781a      	ldrb	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	779a      	strb	r2, [r3, #30]
	dataPacketTx->dataPacket[1] = dataPacketTx->start_2;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	785a      	ldrb	r2, [r3, #1]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	77da      	strb	r2, [r3, #31]
	dataPacketTx->dataPacket[2] = dataPacketTx->command;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	789a      	ldrb	r2, [r3, #2]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f883 2020 	strb.w	r2, [r3, #32]
	dataPacketTx->dataPacket[3] = dataPacketTx->payloadDataLength;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	78da      	ldrb	r2, [r3, #3]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	memcpy(dataPacketTx->dataPacket + 4, dataPacketTx->payloadData, dataPacketTx->payloadDataLength);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	331e      	adds	r3, #30
 80017a2:	1d18      	adds	r0, r3, #4
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	1d19      	adds	r1, r3, #4
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	78db      	ldrb	r3, [r3, #3]
 80017ac:	461a      	mov	r2, r3
 80017ae:	f003 fcd7 	bl	8005160 <memcpy>
	dataPacketTx->dataPacketLength = dataPacketTx->payloadDataLength + 4 + 1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	78db      	ldrb	r3, [r3, #3]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	3305      	adds	r3, #5
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->crc8 = genCrc(dataPacketTx->dataPacket, dataPacketTx->dataPacketLength - 1);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f103 021e 	add.w	r2, r3, #30
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f7ff fdaa 	bl	800132a <genCrc>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	775a      	strb	r2, [r3, #29]
	dataPacketTx->dataPacket[dataPacketTx->payloadDataLength + 4] = dataPacketTx->crc8;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	78db      	ldrb	r3, [r3, #3]
 80017e2:	3304      	adds	r3, #4
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	7f51      	ldrb	r1, [r2, #29]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	460a      	mov	r2, r1
 80017ee:	779a      	strb	r2, [r3, #30]
	dataPacketTx->dataPacketTxStatus = VALID_TX_DATA_PACKET;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <dataPacketTxUartSend>:

void dataPacketTxUartSend(DataPacketTx *dataPacketTx, UART_HandleTypeDef huart)
{
 8001800:	b084      	sub	sp, #16
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	f107 0014 	add.w	r0, r7, #20
 800180e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (dataPacketTx->dataPacketTxStatus == VALID_TX_DATA_PACKET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001818:	2b01      	cmp	r3, #1
 800181a:	d10a      	bne.n	8001832 <dataPacketTxUartSend+0x32>
	{
		HAL_UART_Transmit(&huart, dataPacketTx->dataPacket, dataPacketTx->dataPacketLength, HAL_MAX_DELAY);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f103 011e 	add.w	r1, r3, #30
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8001826:	f107 0014 	add.w	r0, r7, #20
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
 800182e:	f002 fb4e 	bl	8003ece <HAL_UART_Transmit>
	}
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800183c:	b004      	add	sp, #16
 800183e:	4770      	bx	lr

08001840 <dataPacketTxClear>:

void dataPacketTxClear(DataPacketTx *dataPacketTx)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	dataPacketTx->dataPacketLength = 0;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->crc8 = 0x00;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	775a      	strb	r2, [r3, #29]
	dataPacketTx->command = 0x00;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	331e      	adds	r3, #30
 8001866:	221e      	movs	r2, #30
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fc86 	bl	800517c <memset>
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <dataPacketTxPayloadDataClear>:

void dataPacketTxPayloadDataClear(DataPacketTx *dataPacketTx)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	dataPacketTx->dataPacketLength = 0;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->crc8 = 0x00;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	775a      	strb	r2, [r3, #29]
	dataPacketTx->command = 0x00;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3304      	adds	r3, #4
 800189e:	2219      	movs	r2, #25
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 fc6a 	bl	800517c <memset>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <dataPacketTxSetCommand>:

void dataPacketTxSetCommand(DataPacketTx *dataPacketTx, uint8_t command)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	if ((command < 0x01) || (command > 0xFE))
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <dataPacketTxSetCommand+0x28>
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	2bff      	cmp	r3, #255	; 0xff
 80018ce:	d003      	beq.n	80018d8 <dataPacketTxSetCommand+0x28>
	{
		return;
	}

	dataPacketTx->command = command;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	709a      	strb	r2, [r3, #2]
 80018d6:	e000      	b.n	80018da <dataPacketTxSetCommand+0x2a>
		return;
 80018d8:	bf00      	nop
}
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <dataPacketTxSetPayloadData>:
{
	return dataPacketTx->command;
}

void dataPacketTxSetPayloadData(DataPacketTx *dataPacketTx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	71fb      	strb	r3, [r7, #7]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	memcpy(dataPacketTx->payloadData, payloadData, payloadDataLength);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3304      	adds	r3, #4
 80018fe:	79fa      	ldrb	r2, [r7, #7]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	4618      	mov	r0, r3
 8001904:	f003 fc2c 	bl	8005160 <memcpy>
	dataPacketTx->payloadDataLength = payloadDataLength;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	70da      	strb	r2, [r3, #3]
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <HAL_Init+0x40>)
 8001922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001926:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_Init+0x40>)
 800192e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001932:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_Init+0x40>)
 800193a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001940:	2003      	movs	r0, #3
 8001942:	f000 fd3b 	bl	80023bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001946:	200f      	movs	r0, #15
 8001948:	f000 f808 	bl	800195c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800194c:	f7ff fb16 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023c00 	.word	0x40023c00

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_InitTick+0x54>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_InitTick+0x58>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	fbb3 f3f1 	udiv	r3, r3, r1
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f000 fd53 	bl	8002426 <HAL_SYSTICK_Config>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e00e      	b.n	80019a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d80a      	bhi.n	80019a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001990:	2200      	movs	r2, #0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f000 fd1b 	bl	80023d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800199c:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <HAL_InitTick+0x5c>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e000      	b.n	80019a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000008 	.word	0x20000008
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x20>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x24>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_IncTick+0x24>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000008 	.word	0x20000008
 80019e0:	20000238 	.word	0x20000238

080019e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_GetTick+0x14>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000238 	.word	0x20000238

080019fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e033      	b.n	8001a7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fad6 	bl	8000fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 0310 	and.w	r3, r3, #16
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d118      	bne.n	8001a6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a42:	f023 0302 	bic.w	r3, r3, #2
 8001a46:	f043 0202 	orr.w	r2, r3, #2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fae8 	bl	8002024 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f023 0303 	bic.w	r3, r3, #3
 8001a62:	f043 0201 	orr.w	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
 8001a6a:	e001      	b.n	8001a70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Start+0x1a>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e0b2      	b.n	8001c04 <HAL_ADC_Start+0x180>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d018      	beq.n	8001ae6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac4:	4b52      	ldr	r3, [pc, #328]	; (8001c10 <HAL_ADC_Start+0x18c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a52      	ldr	r2, [pc, #328]	; (8001c14 <HAL_ADC_Start+0x190>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0c9a      	lsrs	r2, r3, #18
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ad8:	e002      	b.n	8001ae0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f9      	bne.n	8001ada <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d17a      	bne.n	8001bea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b32:	d106      	bne.n	8001b42 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	f023 0206 	bic.w	r2, r3, #6
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44
 8001b40:	e002      	b.n	8001b48 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b50:	4b31      	ldr	r3, [pc, #196]	; (8001c18 <HAL_ADC_Start+0x194>)
 8001b52:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b5c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d12a      	bne.n	8001bc0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a2b      	ldr	r2, [pc, #172]	; (8001c1c <HAL_ADC_Start+0x198>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d015      	beq.n	8001ba0 <HAL_ADC_Start+0x11c>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <HAL_ADC_Start+0x19c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d105      	bne.n	8001b8a <HAL_ADC_Start+0x106>
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_ADC_Start+0x194>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 031f 	and.w	r3, r3, #31
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00a      	beq.n	8001ba0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a25      	ldr	r2, [pc, #148]	; (8001c24 <HAL_ADC_Start+0x1a0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d136      	bne.n	8001c02 <HAL_ADC_Start+0x17e>
 8001b94:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_ADC_Start+0x194>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d130      	bne.n	8001c02 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d129      	bne.n	8001c02 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bbc:	609a      	str	r2, [r3, #8]
 8001bbe:	e020      	b.n	8001c02 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <HAL_ADC_Start+0x198>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d11b      	bne.n	8001c02 <HAL_ADC_Start+0x17e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d114      	bne.n	8001c02 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	e00b      	b.n	8001c02 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f043 0210 	orr.w	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	20000000 	.word	0x20000000
 8001c14:	431bde83 	.word	0x431bde83
 8001c18:	40012300 	.word	0x40012300
 8001c1c:	40012000 	.word	0x40012000
 8001c20:	40012100 	.word	0x40012100
 8001c24:	40012200 	.word	0x40012200

08001c28 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_Stop+0x16>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e021      	b.n	8001c82 <HAL_ADC_Stop+0x5a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0201 	bic.w	r2, r2, #1
 8001c54:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001caa:	d113      	bne.n	8001cd4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cba:	d10b      	bne.n	8001cd4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e063      	b.n	8001d9c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cd4:	f7ff fe86 	bl	80019e4 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cda:	e021      	b.n	8001d20 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce2:	d01d      	beq.n	8001d20 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_ADC_PollForConversion+0x6c>
 8001cea:	f7ff fe7b 	bl	80019e4 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d212      	bcs.n	8001d20 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d00b      	beq.n	8001d20 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	f043 0204 	orr.w	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e03d      	b.n	8001d9c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d1d6      	bne.n	8001cdc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f06f 0212 	mvn.w	r2, #18
 8001d36:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d123      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11f      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d111      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d105      	bne.n	8001d9a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x1c>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e113      	b.n	8002004 <HAL_ADC_ConfigChannel+0x244>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	d925      	bls.n	8001e38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68d9      	ldr	r1, [r3, #12]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b1e      	subs	r3, #30
 8001e02:	2207      	movs	r2, #7
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43da      	mvns	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	400a      	ands	r2, r1
 8001e10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68d9      	ldr	r1, [r3, #12]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	4603      	mov	r3, r0
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4403      	add	r3, r0
 8001e2a:	3b1e      	subs	r3, #30
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	e022      	b.n	8001e7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6919      	ldr	r1, [r3, #16]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	400a      	ands	r2, r1
 8001e5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6919      	ldr	r1, [r3, #16]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4403      	add	r3, r0
 8001e74:	409a      	lsls	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d824      	bhi.n	8001ed0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	3b05      	subs	r3, #5
 8001e98:	221f      	movs	r2, #31
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b05      	subs	r3, #5
 8001ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ece:	e04c      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d824      	bhi.n	8001f22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b23      	subs	r3, #35	; 0x23
 8001eea:	221f      	movs	r2, #31
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	3b23      	subs	r3, #35	; 0x23
 8001f14:	fa00 f203 	lsl.w	r2, r0, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f20:	e023      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	3b41      	subs	r3, #65	; 0x41
 8001f34:	221f      	movs	r2, #31
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	400a      	ands	r2, r1
 8001f42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4618      	mov	r0, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b41      	subs	r3, #65	; 0x41
 8001f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f6a:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_ADC_ConfigChannel+0x250>)
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a28      	ldr	r2, [pc, #160]	; (8002014 <HAL_ADC_ConfigChannel+0x254>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d10f      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1d8>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b12      	cmp	r3, #18
 8001f7e:	d10b      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <HAL_ADC_ConfigChannel+0x254>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d12b      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x23a>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <HAL_ADC_ConfigChannel+0x258>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d003      	beq.n	8001fb4 <HAL_ADC_ConfigChannel+0x1f4>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b11      	cmp	r3, #17
 8001fb2:	d122      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a11      	ldr	r2, [pc, #68]	; (8002018 <HAL_ADC_ConfigChannel+0x258>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d111      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_ADC_ConfigChannel+0x25c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a11      	ldr	r2, [pc, #68]	; (8002020 <HAL_ADC_ConfigChannel+0x260>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	0c9a      	lsrs	r2, r3, #18
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fec:	e002      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f9      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40012300 	.word	0x40012300
 8002014:	40012000 	.word	0x40012000
 8002018:	10000012 	.word	0x10000012
 800201c:	20000000 	.word	0x20000000
 8002020:	431bde83 	.word	0x431bde83

08002024 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800202c:	4b79      	ldr	r3, [pc, #484]	; (8002214 <ADC_Init+0x1f0>)
 800202e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	431a      	orrs	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002058:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	021a      	lsls	r2, r3, #8
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800207c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800209e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6899      	ldr	r1, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b6:	4a58      	ldr	r2, [pc, #352]	; (8002218 <ADC_Init+0x1f4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d022      	beq.n	8002102 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6899      	ldr	r1, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6899      	ldr	r1, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	e00f      	b.n	8002122 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002110:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002120:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0202 	bic.w	r2, r2, #2
 8002130:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6899      	ldr	r1, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7e1b      	ldrb	r3, [r3, #24]
 800213c:	005a      	lsls	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01b      	beq.n	8002188 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800215e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800216e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6859      	ldr	r1, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	3b01      	subs	r3, #1
 800217c:	035a      	lsls	r2, r3, #13
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	e007      	b.n	8002198 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002196:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	051a      	lsls	r2, r3, #20
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6899      	ldr	r1, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021da:	025a      	lsls	r2, r3, #9
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6899      	ldr	r1, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	029a      	lsls	r2, r3, #10
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	609a      	str	r2, [r3, #8]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	40012300 	.word	0x40012300
 8002218:	0f000001 	.word	0x0f000001

0800221c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002238:	4013      	ands	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800224c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224e:	4a04      	ldr	r2, [pc, #16]	; (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	60d3      	str	r3, [r2, #12]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <__NVIC_GetPriorityGrouping+0x18>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	f003 0307 	and.w	r3, r3, #7
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	2b00      	cmp	r3, #0
 8002290:	db0b      	blt.n	80022aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	4907      	ldr	r1, [pc, #28]	; (80022b8 <__NVIC_EnableIRQ+0x38>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	2001      	movs	r0, #1
 80022a2:	fa00 f202 	lsl.w	r2, r0, r2
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000e100 	.word	0xe000e100

080022bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	db0a      	blt.n	80022e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	490c      	ldr	r1, [pc, #48]	; (8002308 <__NVIC_SetPriority+0x4c>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	0112      	lsls	r2, r2, #4
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	440b      	add	r3, r1
 80022e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e4:	e00a      	b.n	80022fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4908      	ldr	r1, [pc, #32]	; (800230c <__NVIC_SetPriority+0x50>)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	3b04      	subs	r3, #4
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	440b      	add	r3, r1
 80022fa:	761a      	strb	r2, [r3, #24]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000e100 	.word	0xe000e100
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f1c3 0307 	rsb	r3, r3, #7
 800232a:	2b04      	cmp	r3, #4
 800232c:	bf28      	it	cs
 800232e:	2304      	movcs	r3, #4
 8002330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3304      	adds	r3, #4
 8002336:	2b06      	cmp	r3, #6
 8002338:	d902      	bls.n	8002340 <NVIC_EncodePriority+0x30>
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3b03      	subs	r3, #3
 800233e:	e000      	b.n	8002342 <NVIC_EncodePriority+0x32>
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	f04f 32ff 	mov.w	r2, #4294967295
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	401a      	ands	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002358:	f04f 31ff 	mov.w	r1, #4294967295
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43d9      	mvns	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	4313      	orrs	r3, r2
         );
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002388:	d301      	bcc.n	800238e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238a:	2301      	movs	r3, #1
 800238c:	e00f      	b.n	80023ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238e:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <SysTick_Config+0x40>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002396:	210f      	movs	r1, #15
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	f7ff ff8e 	bl	80022bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <SysTick_Config+0x40>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a6:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <SysTick_Config+0x40>)
 80023a8:	2207      	movs	r2, #7
 80023aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	e000e010 	.word	0xe000e010

080023bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ff29 	bl	800221c <__NVIC_SetPriorityGrouping>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e4:	f7ff ff3e 	bl	8002264 <__NVIC_GetPriorityGrouping>
 80023e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	6978      	ldr	r0, [r7, #20]
 80023f0:	f7ff ff8e 	bl	8002310 <NVIC_EncodePriority>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff5d 	bl	80022bc <__NVIC_SetPriority>
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff31 	bl	8002280 <__NVIC_EnableIRQ>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ffa2 	bl	8002378 <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e014      	b.n	800247a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	791b      	ldrb	r3, [r3, #4]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7fe fdf7 	bl	8001054 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2202      	movs	r2, #2
 800246a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	795b      	ldrb	r3, [r3, #5]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_DAC_Start+0x16>
 8002494:	2302      	movs	r3, #2
 8002496:	e040      	b.n	800251a <HAL_DAC_Start+0x98>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2202      	movs	r2, #2
 80024a2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6819      	ldr	r1, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2201      	movs	r2, #1
 80024b2:	409a      	lsls	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10f      	bne.n	80024e2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80024cc:	2b3c      	cmp	r3, #60	; 0x3c
 80024ce:	d11d      	bne.n	800250c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	e014      	b.n	800250c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	213c      	movs	r1, #60	; 0x3c
 80024f4:	fa01 f303 	lsl.w	r3, r1, r3
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d107      	bne.n	800250c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0202 	orr.w	r2, r2, #2
 800250a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002526:	b480      	push	{r7}
 8002528:	b087      	sub	sp, #28
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d105      	bne.n	8002550 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	3308      	adds	r3, #8
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e004      	b.n	800255a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	3314      	adds	r3, #20
 8002558:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	461a      	mov	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	795b      	ldrb	r3, [r3, #5]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_DAC_ConfigChannel+0x18>
 8002584:	2302      	movs	r3, #2
 8002586:	e03c      	b.n	8002602 <HAL_DAC_ConfigChannel+0x92>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2202      	movs	r2, #2
 8002592:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4013      	ands	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6819      	ldr	r1, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	22c0      	movs	r2, #192	; 0xc0
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43da      	mvns	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	400a      	ands	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7ff f9e2 	bl	80019e4 <HAL_GetTick>
 8002620:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d008      	beq.n	8002640 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e052      	b.n	80026e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0216 	bic.w	r2, r2, #22
 800264e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800265e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	2b00      	cmp	r3, #0
 8002666:	d103      	bne.n	8002670 <HAL_DMA_Abort+0x62>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0208 	bic.w	r2, r2, #8
 800267e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002690:	e013      	b.n	80026ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002692:	f7ff f9a7 	bl	80019e4 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b05      	cmp	r3, #5
 800269e:	d90c      	bls.n	80026ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2203      	movs	r2, #3
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e015      	b.n	80026e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1e4      	bne.n	8002692 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	223f      	movs	r2, #63	; 0x3f
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d004      	beq.n	800270c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e00c      	b.n	8002726 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2205      	movs	r2, #5
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	e165      	b.n	8002a1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	f040 8154 	bne.w	8002a16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b01      	cmp	r3, #1
 8002778:	d005      	beq.n	8002786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002782:	2b02      	cmp	r3, #2
 8002784:	d130      	bne.n	80027e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 0201 	and.w	r2, r3, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d017      	beq.n	8002824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d123      	bne.n	8002878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	08da      	lsrs	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3208      	adds	r2, #8
 8002838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	220f      	movs	r2, #15
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	69b9      	ldr	r1, [r7, #24]
 8002874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0203 	and.w	r2, r3, #3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80ae 	beq.w	8002a16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b5d      	ldr	r3, [pc, #372]	; (8002a34 <HAL_GPIO_Init+0x300>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a5c      	ldr	r2, [pc, #368]	; (8002a34 <HAL_GPIO_Init+0x300>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b5a      	ldr	r3, [pc, #360]	; (8002a34 <HAL_GPIO_Init+0x300>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d6:	4a58      	ldr	r2, [pc, #352]	; (8002a38 <HAL_GPIO_Init+0x304>)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a4f      	ldr	r2, [pc, #316]	; (8002a3c <HAL_GPIO_Init+0x308>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d025      	beq.n	800294e <HAL_GPIO_Init+0x21a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a4e      	ldr	r2, [pc, #312]	; (8002a40 <HAL_GPIO_Init+0x30c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01f      	beq.n	800294a <HAL_GPIO_Init+0x216>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4d      	ldr	r2, [pc, #308]	; (8002a44 <HAL_GPIO_Init+0x310>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d019      	beq.n	8002946 <HAL_GPIO_Init+0x212>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4c      	ldr	r2, [pc, #304]	; (8002a48 <HAL_GPIO_Init+0x314>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <HAL_GPIO_Init+0x20e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4b      	ldr	r2, [pc, #300]	; (8002a4c <HAL_GPIO_Init+0x318>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00d      	beq.n	800293e <HAL_GPIO_Init+0x20a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4a      	ldr	r2, [pc, #296]	; (8002a50 <HAL_GPIO_Init+0x31c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d007      	beq.n	800293a <HAL_GPIO_Init+0x206>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a49      	ldr	r2, [pc, #292]	; (8002a54 <HAL_GPIO_Init+0x320>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_GPIO_Init+0x202>
 8002932:	2306      	movs	r3, #6
 8002934:	e00c      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 8002936:	2307      	movs	r3, #7
 8002938:	e00a      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 800293a:	2305      	movs	r3, #5
 800293c:	e008      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 800293e:	2304      	movs	r3, #4
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 8002942:	2303      	movs	r3, #3
 8002944:	e004      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 8002946:	2302      	movs	r3, #2
 8002948:	e002      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_GPIO_Init+0x21c>
 800294e:	2300      	movs	r3, #0
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f002 0203 	and.w	r2, r2, #3
 8002956:	0092      	lsls	r2, r2, #2
 8002958:	4093      	lsls	r3, r2
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002960:	4935      	ldr	r1, [pc, #212]	; (8002a38 <HAL_GPIO_Init+0x304>)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800296e:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <HAL_GPIO_Init+0x324>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002992:	4a31      	ldr	r2, [pc, #196]	; (8002a58 <HAL_GPIO_Init+0x324>)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002998:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <HAL_GPIO_Init+0x324>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029bc:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <HAL_GPIO_Init+0x324>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029c2:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <HAL_GPIO_Init+0x324>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e6:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <HAL_GPIO_Init+0x324>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <HAL_GPIO_Init+0x324>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a10:	4a11      	ldr	r2, [pc, #68]	; (8002a58 <HAL_GPIO_Init+0x324>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	f67f ae96 	bls.w	8002750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3724      	adds	r7, #36	; 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40013800 	.word	0x40013800
 8002a3c:	40020000 	.word	0x40020000
 8002a40:	40020400 	.word	0x40020400
 8002a44:	40020800 	.word	0x40020800
 8002a48:	40020c00 	.word	0x40020c00
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40021400 	.word	0x40021400
 8002a54:	40021800 	.word	0x40021800
 8002a58:	40013c00 	.word	0x40013c00

08002a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a6c:	787b      	ldrb	r3, [r7, #1]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a78:	e003      	b.n	8002a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a7a:	887b      	ldrh	r3, [r7, #2]
 8002a7c:	041a      	lsls	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	619a      	str	r2, [r3, #24]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	460b      	mov	r3, r1
 8002a98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aa0:	887a      	ldrh	r2, [r7, #2]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	041a      	lsls	r2, r3, #16
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43d9      	mvns	r1, r3
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	400b      	ands	r3, r1
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	619a      	str	r2, [r3, #24]
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	603b      	str	r3, [r7, #0]
 8002ad2:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ade:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_PWREx_EnableOverDrive+0x90>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_PWREx_EnableOverDrive+0x94>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002af0:	f7fe ff78 	bl	80019e4 <HAL_GetTick>
 8002af4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002af6:	e009      	b.n	8002b0c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002af8:	f7fe ff74 	bl	80019e4 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b06:	d901      	bls.n	8002b0c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e01f      	b.n	8002b4c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b18:	d1ee      	bne.n	8002af8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b20:	f7fe ff60 	bl	80019e4 <HAL_GetTick>
 8002b24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b26:	e009      	b.n	8002b3c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b28:	f7fe ff5c 	bl	80019e4 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b36:	d901      	bls.n	8002b3c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e007      	b.n	8002b4c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <HAL_PWREx_EnableOverDrive+0x98>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b48:	d1ee      	bne.n	8002b28 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40023800 	.word	0x40023800
 8002b58:	420e0040 	.word	0x420e0040
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	420e0044 	.word	0x420e0044

08002b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0cc      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d90c      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b65      	ldr	r3, [pc, #404]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0b8      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	494d      	ldr	r1, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d044      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d119      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e07f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e06f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e067      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c42:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4934      	ldr	r1, [pc, #208]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fec6 	bl	80019e4 <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7fe fec2 	bl	80019e4 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e04f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 020c 	and.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1eb      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d20c      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4916      	ldr	r1, [pc, #88]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cea:	f000 f855 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	490a      	ldr	r1, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	5ccb      	ldrb	r3, [r1, r3]
 8002cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1c8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fe26 	bl	800195c <HAL_InitTick>

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023c00 	.word	0x40023c00
 8002d20:	40023800 	.word	0x40023800
 8002d24:	080051a4 	.word	0x080051a4
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	20000004 	.word	0x20000004

08002d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000000 	.word	0x20000000

08002d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d4c:	f7ff fff0 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0a9b      	lsrs	r3, r3, #10
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	080051b4 	.word	0x080051b4

08002d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d74:	f7ff ffdc 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	0b5b      	lsrs	r3, r3, #13
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4903      	ldr	r1, [pc, #12]	; (8002d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40023800 	.word	0x40023800
 8002d94:	080051b4 	.word	0x080051b4

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d9c:	b0a6      	sub	sp, #152	; 0x98
 8002d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dbe:	4bc8      	ldr	r3, [pc, #800]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b0c      	cmp	r3, #12
 8002dc8:	f200 817e 	bhi.w	80030c8 <HAL_RCC_GetSysClockFreq+0x330>
 8002dcc:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	08002e09 	.word	0x08002e09
 8002dd8:	080030c9 	.word	0x080030c9
 8002ddc:	080030c9 	.word	0x080030c9
 8002de0:	080030c9 	.word	0x080030c9
 8002de4:	08002e11 	.word	0x08002e11
 8002de8:	080030c9 	.word	0x080030c9
 8002dec:	080030c9 	.word	0x080030c9
 8002df0:	080030c9 	.word	0x080030c9
 8002df4:	08002e19 	.word	0x08002e19
 8002df8:	080030c9 	.word	0x080030c9
 8002dfc:	080030c9 	.word	0x080030c9
 8002e00:	080030c9 	.word	0x080030c9
 8002e04:	08002f83 	.word	0x08002f83
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4bb6      	ldr	r3, [pc, #728]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002e0e:	e15f      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e10:	4bb5      	ldr	r3, [pc, #724]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e16:	e15b      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e18:	4bb1      	ldr	r3, [pc, #708]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e24:	4bae      	ldr	r3, [pc, #696]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d031      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e30:	4bab      	ldr	r3, [pc, #684]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	099b      	lsrs	r3, r3, #6
 8002e36:	2200      	movs	r2, #0
 8002e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e42:	663b      	str	r3, [r7, #96]	; 0x60
 8002e44:	2300      	movs	r3, #0
 8002e46:	667b      	str	r3, [r7, #100]	; 0x64
 8002e48:	4ba7      	ldr	r3, [pc, #668]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e4a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002e4e:	462a      	mov	r2, r5
 8002e50:	fb03 f202 	mul.w	r2, r3, r2
 8002e54:	2300      	movs	r3, #0
 8002e56:	4621      	mov	r1, r4
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	4aa2      	ldr	r2, [pc, #648]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e60:	4621      	mov	r1, r4
 8002e62:	fba1 1202 	umull	r1, r2, r1, r2
 8002e66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e68:	460a      	mov	r2, r1
 8002e6a:	67ba      	str	r2, [r7, #120]	; 0x78
 8002e6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e6e:	4413      	add	r3, r2
 8002e70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e76:	2200      	movs	r2, #0
 8002e78:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e7a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e80:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002e84:	f7fd f9be 	bl	8000204 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e92:	e064      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e94:	4b92      	ldr	r3, [pc, #584]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	653b      	str	r3, [r7, #80]	; 0x50
 8002e9e:	657a      	str	r2, [r7, #84]	; 0x54
 8002ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eac:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002eb0:	4622      	mov	r2, r4
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	f04f 0000 	mov.w	r0, #0
 8002eb8:	f04f 0100 	mov.w	r1, #0
 8002ebc:	0159      	lsls	r1, r3, #5
 8002ebe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ec2:	0150      	lsls	r0, r2, #5
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4621      	mov	r1, r4
 8002eca:	1a51      	subs	r1, r2, r1
 8002ecc:	6139      	str	r1, [r7, #16]
 8002ece:	4629      	mov	r1, r5
 8002ed0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ee2:	4659      	mov	r1, fp
 8002ee4:	018b      	lsls	r3, r1, #6
 8002ee6:	4651      	mov	r1, sl
 8002ee8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eec:	4651      	mov	r1, sl
 8002eee:	018a      	lsls	r2, r1, #6
 8002ef0:	4651      	mov	r1, sl
 8002ef2:	ebb2 0801 	subs.w	r8, r2, r1
 8002ef6:	4659      	mov	r1, fp
 8002ef8:	eb63 0901 	sbc.w	r9, r3, r1
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f10:	4690      	mov	r8, r2
 8002f12:	4699      	mov	r9, r3
 8002f14:	4623      	mov	r3, r4
 8002f16:	eb18 0303 	adds.w	r3, r8, r3
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	eb49 0303 	adc.w	r3, r9, r3
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f30:	4629      	mov	r1, r5
 8002f32:	028b      	lsls	r3, r1, #10
 8002f34:	4621      	mov	r1, r4
 8002f36:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	028a      	lsls	r2, r1, #10
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f46:	2200      	movs	r2, #0
 8002f48:	643b      	str	r3, [r7, #64]	; 0x40
 8002f4a:	647a      	str	r2, [r7, #68]	; 0x44
 8002f4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f50:	f7fd f958 	bl	8000204 <__aeabi_uldivmod>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4613      	mov	r3, r2
 8002f5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f5e:	4b60      	ldr	r3, [pc, #384]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	0c1b      	lsrs	r3, r3, #16
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	3301      	adds	r3, #1
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002f70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002f80:	e0a6      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f82:	4b57      	ldr	r3, [pc, #348]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f8e:	4b54      	ldr	r3, [pc, #336]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d02a      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9a:	4b51      	ldr	r3, [pc, #324]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fac:	2100      	movs	r1, #0
 8002fae:	4b4e      	ldr	r3, [pc, #312]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002fb0:	fb03 f201 	mul.w	r2, r3, r1
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	fb00 f303 	mul.w	r3, r0, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	4a4a      	ldr	r2, [pc, #296]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002fbe:	fba0 1202 	umull	r1, r2, r0, r2
 8002fc2:	677a      	str	r2, [r7, #116]	; 0x74
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	673a      	str	r2, [r7, #112]	; 0x70
 8002fc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002fca:	4413      	add	r3, r2
 8002fcc:	677b      	str	r3, [r7, #116]	; 0x74
 8002fce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd6:	637a      	str	r2, [r7, #52]	; 0x34
 8002fd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fdc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002fe0:	f7fd f910 	bl	8000204 <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002fee:	e05b      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003002:	623b      	str	r3, [r7, #32]
 8003004:	2300      	movs	r3, #0
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
 8003008:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800300c:	4642      	mov	r2, r8
 800300e:	464b      	mov	r3, r9
 8003010:	f04f 0000 	mov.w	r0, #0
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	0159      	lsls	r1, r3, #5
 800301a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800301e:	0150      	lsls	r0, r2, #5
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4641      	mov	r1, r8
 8003026:	ebb2 0a01 	subs.w	sl, r2, r1
 800302a:	4649      	mov	r1, r9
 800302c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800303c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003040:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003044:	ebb2 040a 	subs.w	r4, r2, sl
 8003048:	eb63 050b 	sbc.w	r5, r3, fp
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	00eb      	lsls	r3, r5, #3
 8003056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800305a:	00e2      	lsls	r2, r4, #3
 800305c:	4614      	mov	r4, r2
 800305e:	461d      	mov	r5, r3
 8003060:	4643      	mov	r3, r8
 8003062:	18e3      	adds	r3, r4, r3
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	464b      	mov	r3, r9
 8003068:	eb45 0303 	adc.w	r3, r5, r3
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	e9d7 4500 	ldrd	r4, r5, [r7]
 800307a:	4629      	mov	r1, r5
 800307c:	028b      	lsls	r3, r1, #10
 800307e:	4621      	mov	r1, r4
 8003080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003084:	4621      	mov	r1, r4
 8003086:	028a      	lsls	r2, r1, #10
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003090:	2200      	movs	r2, #0
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	61fa      	str	r2, [r7, #28]
 8003096:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800309a:	f7fd f8b3 	bl	8000204 <__aeabi_uldivmod>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4613      	mov	r3, r2
 80030a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030a8:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x348>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	0f1b      	lsrs	r3, r3, #28
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80030b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80030c6:	e003      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80030ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80030ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3798      	adds	r7, #152	; 0x98
 80030d8:	46bd      	mov	sp, r7
 80030da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	00f42400 	.word	0x00f42400
 80030e8:	017d7840 	.word	0x017d7840

080030ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e28d      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 8083 	beq.w	8003212 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800310c:	4b94      	ldr	r3, [pc, #592]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b04      	cmp	r3, #4
 8003116:	d019      	beq.n	800314c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003118:	4b91      	ldr	r3, [pc, #580]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003120:	2b08      	cmp	r3, #8
 8003122:	d106      	bne.n	8003132 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003124:	4b8e      	ldr	r3, [pc, #568]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003130:	d00c      	beq.n	800314c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003132:	4b8b      	ldr	r3, [pc, #556]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d112      	bne.n	8003164 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800313e:	4b88      	ldr	r3, [pc, #544]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800314a:	d10b      	bne.n	8003164 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314c:	4b84      	ldr	r3, [pc, #528]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d05b      	beq.n	8003210 <HAL_RCC_OscConfig+0x124>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d157      	bne.n	8003210 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e25a      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316c:	d106      	bne.n	800317c <HAL_RCC_OscConfig+0x90>
 800316e:	4b7c      	ldr	r3, [pc, #496]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a7b      	ldr	r2, [pc, #492]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e01d      	b.n	80031b8 <HAL_RCC_OscConfig+0xcc>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0xb4>
 8003186:	4b76      	ldr	r3, [pc, #472]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a75      	ldr	r2, [pc, #468]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 800318c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	4b73      	ldr	r3, [pc, #460]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a72      	ldr	r2, [pc, #456]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e00b      	b.n	80031b8 <HAL_RCC_OscConfig+0xcc>
 80031a0:	4b6f      	ldr	r3, [pc, #444]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6e      	ldr	r2, [pc, #440]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 80031a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	4b6c      	ldr	r3, [pc, #432]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a6b      	ldr	r2, [pc, #428]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 80031b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fc10 	bl	80019e4 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c8:	f7fe fc0c 	bl	80019e4 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	; 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e21f      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	4b61      	ldr	r3, [pc, #388]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0xdc>
 80031e6:	e014      	b.n	8003212 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe fbfc 	bl	80019e4 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fe fbf8 	bl	80019e4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e20b      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	4b57      	ldr	r3, [pc, #348]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x104>
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d06f      	beq.n	80032fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800321e:	4b50      	ldr	r3, [pc, #320]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b00      	cmp	r3, #0
 8003228:	d017      	beq.n	800325a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800322a:	4b4d      	ldr	r3, [pc, #308]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003232:	2b08      	cmp	r3, #8
 8003234:	d105      	bne.n	8003242 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003236:	4b4a      	ldr	r3, [pc, #296]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003242:	4b47      	ldr	r3, [pc, #284]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800324a:	2b0c      	cmp	r3, #12
 800324c:	d11c      	bne.n	8003288 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324e:	4b44      	ldr	r3, [pc, #272]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d116      	bne.n	8003288 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800325a:	4b41      	ldr	r3, [pc, #260]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_RCC_OscConfig+0x186>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d001      	beq.n	8003272 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e1d3      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003272:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4937      	ldr	r1, [pc, #220]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003286:	e03a      	b.n	80032fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d020      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003290:	4b34      	ldr	r3, [pc, #208]	; (8003364 <HAL_RCC_OscConfig+0x278>)
 8003292:	2201      	movs	r2, #1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003296:	f7fe fba5 	bl	80019e4 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329e:	f7fe fba1 	bl	80019e4 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e1b4      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	4b2b      	ldr	r3, [pc, #172]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0f0      	beq.n	800329e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032bc:	4b28      	ldr	r3, [pc, #160]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4925      	ldr	r1, [pc, #148]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	600b      	str	r3, [r1, #0]
 80032d0:	e015      	b.n	80032fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_RCC_OscConfig+0x278>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe fb84 	bl	80019e4 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e0:	f7fe fb80 	bl	80019e4 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e193      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d036      	beq.n	8003378 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_RCC_OscConfig+0x27c>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fe fb64 	bl	80019e4 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003320:	f7fe fb60 	bl	80019e4 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e173      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_RCC_OscConfig+0x274>)
 8003334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x234>
 800333e:	e01b      	b.n	8003378 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003340:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_RCC_OscConfig+0x27c>)
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7fe fb4d 	bl	80019e4 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334c:	e00e      	b.n	800336c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800334e:	f7fe fb49 	bl	80019e4 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d907      	bls.n	800336c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e15c      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
 8003360:	40023800 	.word	0x40023800
 8003364:	42470000 	.word	0x42470000
 8003368:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800336c:	4b8a      	ldr	r3, [pc, #552]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 800336e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1ea      	bne.n	800334e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8097 	beq.w	80034b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003386:	2300      	movs	r3, #0
 8003388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338a:	4b83      	ldr	r3, [pc, #524]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10f      	bne.n	80033b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	4b7f      	ldr	r3, [pc, #508]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	4a7e      	ldr	r2, [pc, #504]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 80033a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a4:	6413      	str	r3, [r2, #64]	; 0x40
 80033a6:	4b7c      	ldr	r3, [pc, #496]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b6:	4b79      	ldr	r3, [pc, #484]	; (800359c <HAL_RCC_OscConfig+0x4b0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d118      	bne.n	80033f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c2:	4b76      	ldr	r3, [pc, #472]	; (800359c <HAL_RCC_OscConfig+0x4b0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a75      	ldr	r2, [pc, #468]	; (800359c <HAL_RCC_OscConfig+0x4b0>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ce:	f7fe fb09 	bl	80019e4 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d6:	f7fe fb05 	bl	80019e4 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e118      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	4b6c      	ldr	r3, [pc, #432]	; (800359c <HAL_RCC_OscConfig+0x4b0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d106      	bne.n	800340a <HAL_RCC_OscConfig+0x31e>
 80033fc:	4b66      	ldr	r3, [pc, #408]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	4a65      	ldr	r2, [pc, #404]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6713      	str	r3, [r2, #112]	; 0x70
 8003408:	e01c      	b.n	8003444 <HAL_RCC_OscConfig+0x358>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b05      	cmp	r3, #5
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x340>
 8003412:	4b61      	ldr	r3, [pc, #388]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	4a60      	ldr	r2, [pc, #384]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 8003418:	f043 0304 	orr.w	r3, r3, #4
 800341c:	6713      	str	r3, [r2, #112]	; 0x70
 800341e:	4b5e      	ldr	r3, [pc, #376]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	4a5d      	ldr	r2, [pc, #372]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6713      	str	r3, [r2, #112]	; 0x70
 800342a:	e00b      	b.n	8003444 <HAL_RCC_OscConfig+0x358>
 800342c:	4b5a      	ldr	r3, [pc, #360]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	4a59      	ldr	r2, [pc, #356]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	6713      	str	r3, [r2, #112]	; 0x70
 8003438:	4b57      	ldr	r3, [pc, #348]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	4a56      	ldr	r2, [pc, #344]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 800343e:	f023 0304 	bic.w	r3, r3, #4
 8003442:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d015      	beq.n	8003478 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fe faca 	bl	80019e4 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003452:	e00a      	b.n	800346a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003454:	f7fe fac6 	bl	80019e4 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e0d7      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346a:	4b4b      	ldr	r3, [pc, #300]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0ee      	beq.n	8003454 <HAL_RCC_OscConfig+0x368>
 8003476:	e014      	b.n	80034a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003478:	f7fe fab4 	bl	80019e4 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347e:	e00a      	b.n	8003496 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003480:	f7fe fab0 	bl	80019e4 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e0c1      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003496:	4b40      	ldr	r3, [pc, #256]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 8003498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1ee      	bne.n	8003480 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a2:	7dfb      	ldrb	r3, [r7, #23]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d105      	bne.n	80034b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a8:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	4a3a      	ldr	r2, [pc, #232]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 80034ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80ad 	beq.w	8003618 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034be:	4b36      	ldr	r3, [pc, #216]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d060      	beq.n	800358c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d145      	bne.n	800355e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d2:	4b33      	ldr	r3, [pc, #204]	; (80035a0 <HAL_RCC_OscConfig+0x4b4>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fe fa84 	bl	80019e4 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e0:	f7fe fa80 	bl	80019e4 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e093      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	4b29      	ldr	r3, [pc, #164]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	019b      	lsls	r3, r3, #6
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	3b01      	subs	r3, #1
 8003518:	041b      	lsls	r3, r3, #16
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	061b      	lsls	r3, r3, #24
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	071b      	lsls	r3, r3, #28
 800352a:	491b      	ldr	r1, [pc, #108]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 800352c:	4313      	orrs	r3, r2
 800352e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003530:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <HAL_RCC_OscConfig+0x4b4>)
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fe fa55 	bl	80019e4 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353e:	f7fe fa51 	bl	80019e4 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e064      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003550:	4b11      	ldr	r3, [pc, #68]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x452>
 800355c:	e05c      	b.n	8003618 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <HAL_RCC_OscConfig+0x4b4>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe fa3e 	bl	80019e4 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356c:	f7fe fa3a 	bl	80019e4 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e04d      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_RCC_OscConfig+0x4ac>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x480>
 800358a:	e045      	b.n	8003618 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e040      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
 8003598:	40023800 	.word	0x40023800
 800359c:	40007000 	.word	0x40007000
 80035a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035a4:	4b1f      	ldr	r3, [pc, #124]	; (8003624 <HAL_RCC_OscConfig+0x538>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d030      	beq.n	8003614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035bc:	429a      	cmp	r2, r3
 80035be:	d129      	bne.n	8003614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d122      	bne.n	8003614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035dc:	4293      	cmp	r3, r2
 80035de:	d119      	bne.n	8003614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	085b      	lsrs	r3, r3, #1
 80035ec:	3b01      	subs	r3, #1
 80035ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d10f      	bne.n	8003614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d107      	bne.n	8003614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800

08003628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e041      	b.n	80036be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fd44 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f000 fa96 	bl	8003b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d001      	beq.n	80036e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e04e      	b.n	800377e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a23      	ldr	r2, [pc, #140]	; (800378c <HAL_TIM_Base_Start_IT+0xc4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d022      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370a:	d01d      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <HAL_TIM_Base_Start_IT+0xc8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d018      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <HAL_TIM_Base_Start_IT+0xcc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d013      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1c      	ldr	r2, [pc, #112]	; (8003798 <HAL_TIM_Base_Start_IT+0xd0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00e      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1b      	ldr	r2, [pc, #108]	; (800379c <HAL_TIM_Base_Start_IT+0xd4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d009      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x80>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d111      	bne.n	800376c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b06      	cmp	r3, #6
 8003758:	d010      	beq.n	800377c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376a:	e007      	b.n	800377c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40010000 	.word	0x40010000
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800
 8003798:	40000c00 	.word	0x40000c00
 800379c:	40010400 	.word	0x40010400
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40001800 	.word	0x40001800

080037a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d122      	bne.n	8003804 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d11b      	bne.n	8003804 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0202 	mvn.w	r2, #2
 80037d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f9b5 	bl	8003b5a <HAL_TIM_IC_CaptureCallback>
 80037f0:	e005      	b.n	80037fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f9a7 	bl	8003b46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f9b8 	bl	8003b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b04      	cmp	r3, #4
 8003810:	d122      	bne.n	8003858 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d11b      	bne.n	8003858 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0204 	mvn.w	r2, #4
 8003828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f98b 	bl	8003b5a <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f97d 	bl	8003b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f98e 	bl	8003b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b08      	cmp	r3, #8
 8003864:	d122      	bne.n	80038ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b08      	cmp	r3, #8
 8003872:	d11b      	bne.n	80038ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0208 	mvn.w	r2, #8
 800387c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2204      	movs	r2, #4
 8003882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f961 	bl	8003b5a <HAL_TIM_IC_CaptureCallback>
 8003898:	e005      	b.n	80038a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f953 	bl	8003b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f964 	bl	8003b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d122      	bne.n	8003900 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d11b      	bne.n	8003900 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0210 	mvn.w	r2, #16
 80038d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2208      	movs	r2, #8
 80038d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f937 	bl	8003b5a <HAL_TIM_IC_CaptureCallback>
 80038ec:	e005      	b.n	80038fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f929 	bl	8003b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f93a 	bl	8003b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b01      	cmp	r3, #1
 800390c:	d10e      	bne.n	800392c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d107      	bne.n	800392c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0201 	mvn.w	r2, #1
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd f826 	bl	8000978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003936:	2b80      	cmp	r3, #128	; 0x80
 8003938:	d10e      	bne.n	8003958 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d107      	bne.n	8003958 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fa64 	bl	8003e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003962:	2b40      	cmp	r3, #64	; 0x40
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b40      	cmp	r3, #64	; 0x40
 8003972:	d107      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8ff 	bl	8003b82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b20      	cmp	r3, #32
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b20      	cmp	r3, #32
 800399e:	d107      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0220 	mvn.w	r2, #32
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fa2e 	bl	8003e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_TIM_ConfigClockSource+0x1c>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e0b4      	b.n	8003b3e <HAL_TIM_ConfigClockSource+0x186>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0c:	d03e      	beq.n	8003a8c <HAL_TIM_ConfigClockSource+0xd4>
 8003a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a12:	f200 8087 	bhi.w	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1a:	f000 8086 	beq.w	8003b2a <HAL_TIM_ConfigClockSource+0x172>
 8003a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a22:	d87f      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b70      	cmp	r3, #112	; 0x70
 8003a26:	d01a      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0xa6>
 8003a28:	2b70      	cmp	r3, #112	; 0x70
 8003a2a:	d87b      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a2c:	2b60      	cmp	r3, #96	; 0x60
 8003a2e:	d050      	beq.n	8003ad2 <HAL_TIM_ConfigClockSource+0x11a>
 8003a30:	2b60      	cmp	r3, #96	; 0x60
 8003a32:	d877      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a34:	2b50      	cmp	r3, #80	; 0x50
 8003a36:	d03c      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0xfa>
 8003a38:	2b50      	cmp	r3, #80	; 0x50
 8003a3a:	d873      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d058      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0x13a>
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d86f      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b30      	cmp	r3, #48	; 0x30
 8003a46:	d064      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15a>
 8003a48:	2b30      	cmp	r3, #48	; 0x30
 8003a4a:	d86b      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d060      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15a>
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d867      	bhi.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d05c      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15a>
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d05a      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x15a>
 8003a5c:	e062      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6899      	ldr	r1, [r3, #8]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f000 f9ad 	bl	8003dcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	609a      	str	r2, [r3, #8]
      break;
 8003a8a:	e04f      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	6899      	ldr	r1, [r3, #8]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f000 f996 	bl	8003dcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aae:	609a      	str	r2, [r3, #8]
      break;
 8003ab0:	e03c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f000 f90a 	bl	8003cd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2150      	movs	r1, #80	; 0x50
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f963 	bl	8003d96 <TIM_ITRx_SetConfig>
      break;
 8003ad0:	e02c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6859      	ldr	r1, [r3, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f000 f929 	bl	8003d36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2160      	movs	r1, #96	; 0x60
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 f953 	bl	8003d96 <TIM_ITRx_SetConfig>
      break;
 8003af0:	e01c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f000 f8ea 	bl	8003cd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2140      	movs	r1, #64	; 0x40
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f943 	bl	8003d96 <TIM_ITRx_SetConfig>
      break;
 8003b10:	e00c      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f000 f93a 	bl	8003d96 <TIM_ITRx_SetConfig>
      break;
 8003b22:	e003      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      break;
 8003b28:	e000      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a40      	ldr	r2, [pc, #256]	; (8003cac <TIM_Base_SetConfig+0x114>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb6:	d00f      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3d      	ldr	r2, [pc, #244]	; (8003cb0 <TIM_Base_SetConfig+0x118>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a3c      	ldr	r2, [pc, #240]	; (8003cb4 <TIM_Base_SetConfig+0x11c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3b      	ldr	r2, [pc, #236]	; (8003cb8 <TIM_Base_SetConfig+0x120>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a3a      	ldr	r2, [pc, #232]	; (8003cbc <TIM_Base_SetConfig+0x124>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d108      	bne.n	8003bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <TIM_Base_SetConfig+0x114>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d02b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf8:	d027      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <TIM_Base_SetConfig+0x118>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d023      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2b      	ldr	r2, [pc, #172]	; (8003cb4 <TIM_Base_SetConfig+0x11c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01f      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <TIM_Base_SetConfig+0x120>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a29      	ldr	r2, [pc, #164]	; (8003cbc <TIM_Base_SetConfig+0x124>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d017      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <TIM_Base_SetConfig+0x128>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a27      	ldr	r2, [pc, #156]	; (8003cc4 <TIM_Base_SetConfig+0x12c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00f      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a26      	ldr	r2, [pc, #152]	; (8003cc8 <TIM_Base_SetConfig+0x130>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a25      	ldr	r2, [pc, #148]	; (8003ccc <TIM_Base_SetConfig+0x134>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a24      	ldr	r2, [pc, #144]	; (8003cd0 <TIM_Base_SetConfig+0x138>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a23      	ldr	r2, [pc, #140]	; (8003cd4 <TIM_Base_SetConfig+0x13c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d108      	bne.n	8003c5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <TIM_Base_SetConfig+0x114>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_Base_SetConfig+0xf8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <TIM_Base_SetConfig+0x124>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d103      	bne.n	8003c98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800
 8003cb8:	40000c00 	.word	0x40000c00
 8003cbc:	40010400 	.word	0x40010400
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	40014400 	.word	0x40014400
 8003cc8:	40014800 	.word	0x40014800
 8003ccc:	40001800 	.word	0x40001800
 8003cd0:	40001c00 	.word	0x40001c00
 8003cd4:	40002000 	.word	0x40002000

08003cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	f023 0201 	bic.w	r2, r3, #1
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 030a 	bic.w	r3, r3, #10
 8003d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	621a      	str	r2, [r3, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b087      	sub	sp, #28
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 0210 	bic.w	r2, r3, #16
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	031b      	lsls	r3, r3, #12
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f043 0307 	orr.w	r3, r3, #7
 8003db8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	609a      	str	r2, [r3, #8]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003de6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	609a      	str	r2, [r3, #8]
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e03f      	b.n	8003ec6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fd f966 	bl	800112c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2224      	movs	r2, #36	; 0x24
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fddf 	bl	8004a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695a      	ldr	r2, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b08a      	sub	sp, #40	; 0x28
 8003ed2:	af02      	add	r7, sp, #8
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	4613      	mov	r3, r2
 8003edc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b20      	cmp	r3, #32
 8003eec:	d17c      	bne.n	8003fe8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_UART_Transmit+0x2c>
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e075      	b.n	8003fea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_UART_Transmit+0x3e>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e06e      	b.n	8003fea <HAL_UART_Transmit+0x11c>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2221      	movs	r2, #33	; 0x21
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f22:	f7fd fd5f 	bl	80019e4 <HAL_GetTick>
 8003f26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	88fa      	ldrh	r2, [r7, #6]
 8003f2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	88fa      	ldrh	r2, [r7, #6]
 8003f32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3c:	d108      	bne.n	8003f50 <HAL_UART_Transmit+0x82>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d104      	bne.n	8003f50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	e003      	b.n	8003f58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f60:	e02a      	b.n	8003fb8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2180      	movs	r1, #128	; 0x80
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 fb1f 	bl	80045b0 <UART_WaitOnFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e036      	b.n	8003fea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	3302      	adds	r3, #2
 8003f96:	61bb      	str	r3, [r7, #24]
 8003f98:	e007      	b.n	8003faa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1cf      	bne.n	8003f62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2140      	movs	r1, #64	; 0x40
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 faef 	bl	80045b0 <UART_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e006      	b.n	8003fea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e000      	b.n	8003fea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b20      	cmp	r3, #32
 800400a:	d11d      	bne.n	8004048 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_UART_Receive_IT+0x26>
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e016      	b.n	800404a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_UART_Receive_IT+0x38>
 8004026:	2302      	movs	r3, #2
 8004028:	e00f      	b.n	800404a <HAL_UART_Receive_IT+0x58>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004038:	88fb      	ldrh	r3, [r7, #6]
 800403a:	461a      	mov	r2, r3
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fb24 	bl	800468c <UART_Start_Receive_IT>
 8004044:	4603      	mov	r3, r0
 8004046:	e000      	b.n	800404a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b0ba      	sub	sp, #232	; 0xe8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800407a:	2300      	movs	r3, #0
 800407c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004080:	2300      	movs	r3, #0
 8004082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10f      	bne.n	80040ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_UART_IRQHandler+0x66>
 80040a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 fc07 	bl	80048c6 <UART_Receive_IT>
      return;
 80040b8:	e256      	b.n	8004568 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80de 	beq.w	8004280 <HAL_UART_IRQHandler+0x22c>
 80040c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80d1 	beq.w	8004280 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <HAL_UART_IRQHandler+0xae>
 80040ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f043 0201 	orr.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <HAL_UART_IRQHandler+0xd2>
 800410e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f043 0202 	orr.w	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00b      	beq.n	800414a <HAL_UART_IRQHandler+0xf6>
 8004132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f043 0204 	orr.w	r2, r3, #4
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800414a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d011      	beq.n	800417a <HAL_UART_IRQHandler+0x126>
 8004156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d105      	bne.n	800416e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f043 0208 	orr.w	r2, r3, #8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 81ed 	beq.w	800455e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_UART_IRQHandler+0x14e>
 8004190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fb92 	bl	80048c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d103      	bne.n	80041ce <HAL_UART_IRQHandler+0x17a>
 80041c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d04f      	beq.n	800426e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fa9a 	bl	8004708 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d141      	bne.n	8004266 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3314      	adds	r3, #20
 80041e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004200:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3314      	adds	r3, #20
 800420a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800420e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800421a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1d9      	bne.n	80041e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	2b00      	cmp	r3, #0
 8004234:	d013      	beq.n	800425e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	4a7d      	ldr	r2, [pc, #500]	; (8004430 <HAL_UART_IRQHandler+0x3dc>)
 800423c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe fa53 	bl	80026ee <HAL_DMA_Abort_IT>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d016      	beq.n	800427c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004258:	4610      	mov	r0, r2
 800425a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425c:	e00e      	b.n	800427c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f990 	bl	8004584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004264:	e00a      	b.n	800427c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f98c 	bl	8004584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426c:	e006      	b.n	800427c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f988 	bl	8004584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800427a:	e170      	b.n	800455e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427c:	bf00      	nop
    return;
 800427e:	e16e      	b.n	800455e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	2b01      	cmp	r3, #1
 8004286:	f040 814a 	bne.w	800451e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8143 	beq.w	800451e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 813c 	beq.w	800451e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042a6:	2300      	movs	r3, #0
 80042a8:	60bb      	str	r3, [r7, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	f040 80b4 	bne.w	8004434 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 8140 	beq.w	8004562 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ea:	429a      	cmp	r2, r3
 80042ec:	f080 8139 	bcs.w	8004562 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004302:	f000 8088 	beq.w	8004416 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	330c      	adds	r3, #12
 800430c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800431c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	330c      	adds	r3, #12
 800432e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004332:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800433e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800434a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1d9      	bne.n	8004306 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3314      	adds	r3, #20
 8004358:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004376:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800437a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800437e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e1      	bne.n	8004352 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800439e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3314      	adds	r3, #20
 80043ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e3      	bne.n	800438e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	330c      	adds	r3, #12
 80043da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e6:	f023 0310 	bic.w	r3, r3, #16
 80043ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	330c      	adds	r3, #12
 80043f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80043f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80043fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e3      	bne.n	80043d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe f8fc 	bl	800260e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800441e:	b29b      	uxth	r3, r3
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	b29b      	uxth	r3, r3
 8004424:	4619      	mov	r1, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f8b6 	bl	8004598 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800442c:	e099      	b.n	8004562 <HAL_UART_IRQHandler+0x50e>
 800442e:	bf00      	nop
 8004430:	080047cf 	.word	0x080047cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800443c:	b29b      	uxth	r3, r3
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 808b 	beq.w	8004566 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8086 	beq.w	8004566 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	330c      	adds	r3, #12
 8004460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800446a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004470:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800447e:	647a      	str	r2, [r7, #68]	; 0x44
 8004480:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800448c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e3      	bne.n	800445a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3314      	adds	r3, #20
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	623b      	str	r3, [r7, #32]
   return(result);
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	f023 0301 	bic.w	r3, r3, #1
 80044a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3314      	adds	r3, #20
 80044b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044b6:	633a      	str	r2, [r7, #48]	; 0x30
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e3      	bne.n	8004492 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0310 	bic.w	r3, r3, #16
 80044ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80044fc:	61fa      	str	r2, [r7, #28]
 80044fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	69b9      	ldr	r1, [r7, #24]
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	617b      	str	r3, [r7, #20]
   return(result);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e3      	bne.n	80044d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f83e 	bl	8004598 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800451c:	e023      	b.n	8004566 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800451e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_UART_IRQHandler+0x4ea>
 800452a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800452e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f95d 	bl	80047f6 <UART_Transmit_IT>
    return;
 800453c:	e014      	b.n	8004568 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800453e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00e      	beq.n	8004568 <HAL_UART_IRQHandler+0x514>
 800454a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800454e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d008      	beq.n	8004568 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f99d 	bl	8004896 <UART_EndTransmit_IT>
    return;
 800455c:	e004      	b.n	8004568 <HAL_UART_IRQHandler+0x514>
    return;
 800455e:	bf00      	nop
 8004560:	e002      	b.n	8004568 <HAL_UART_IRQHandler+0x514>
      return;
 8004562:	bf00      	nop
 8004564:	e000      	b.n	8004568 <HAL_UART_IRQHandler+0x514>
      return;
 8004566:	bf00      	nop
  }
}
 8004568:	37e8      	adds	r7, #232	; 0xe8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop

08004570 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b090      	sub	sp, #64	; 0x40
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c0:	e050      	b.n	8004664 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d04c      	beq.n	8004664 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045d0:	f7fd fa08 	bl	80019e4 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045dc:	429a      	cmp	r2, r3
 80045de:	d241      	bcs.n	8004664 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	330c      	adds	r3, #12
 80045fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004600:	637a      	str	r2, [r7, #52]	; 0x34
 8004602:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e5      	bne.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3314      	adds	r3, #20
 800461a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	613b      	str	r3, [r7, #16]
   return(result);
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	63bb      	str	r3, [r7, #56]	; 0x38
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3314      	adds	r3, #20
 8004632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004634:	623a      	str	r2, [r7, #32]
 8004636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	69f9      	ldr	r1, [r7, #28]
 800463a:	6a3a      	ldr	r2, [r7, #32]
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	61bb      	str	r3, [r7, #24]
   return(result);
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e5      	bne.n	8004614 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e00f      	b.n	8004684 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4013      	ands	r3, r2
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	429a      	cmp	r2, r3
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	429a      	cmp	r2, r3
 8004680:	d09f      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3740      	adds	r7, #64	; 0x40
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	4613      	mov	r3, r2
 8004698:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	88fa      	ldrh	r2, [r7, #6]
 80046aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2222      	movs	r2, #34	; 0x22
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695a      	ldr	r2, [r3, #20]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0201 	orr.w	r2, r2, #1
 80046e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0220 	orr.w	r2, r2, #32
 80046f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3714      	adds	r7, #20
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b095      	sub	sp, #84	; 0x54
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	330c      	adds	r3, #12
 800472e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004730:	643a      	str	r2, [r7, #64]	; 0x40
 8004732:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004734:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004736:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004738:	e841 2300 	strex	r3, r2, [r1]
 800473c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e5      	bne.n	8004710 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3314      	adds	r3, #20
 800474a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	e853 3f00 	ldrex	r3, [r3]
 8004752:	61fb      	str	r3, [r7, #28]
   return(result);
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f023 0301 	bic.w	r3, r3, #1
 800475a:	64bb      	str	r3, [r7, #72]	; 0x48
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3314      	adds	r3, #20
 8004762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004764:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800476a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e5      	bne.n	8004744 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	2b01      	cmp	r3, #1
 800477e:	d119      	bne.n	80047b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f023 0310 	bic.w	r3, r3, #16
 8004796:	647b      	str	r3, [r7, #68]	; 0x44
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047a0:	61ba      	str	r2, [r7, #24]
 80047a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	6979      	ldr	r1, [r7, #20]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	613b      	str	r3, [r7, #16]
   return(result);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e5      	bne.n	8004780 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047c2:	bf00      	nop
 80047c4:	3754      	adds	r7, #84	; 0x54
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f7ff fecb 	bl	8004584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ee:	bf00      	nop
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b085      	sub	sp, #20
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b21      	cmp	r3, #33	; 0x21
 8004808:	d13e      	bne.n	8004888 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004812:	d114      	bne.n	800483e <UART_Transmit_IT+0x48>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d110      	bne.n	800483e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004830:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	1c9a      	adds	r2, r3, #2
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	621a      	str	r2, [r3, #32]
 800483c:	e008      	b.n	8004850 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	1c59      	adds	r1, r3, #1
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6211      	str	r1, [r2, #32]
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29b      	uxth	r3, r3
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	4619      	mov	r1, r3
 800485e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10f      	bne.n	8004884 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004872:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004882:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	e000      	b.n	800488a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004888:	2302      	movs	r3, #2
  }
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fe5a 	bl	8004570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b08c      	sub	sp, #48	; 0x30
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b22      	cmp	r3, #34	; 0x22
 80048d8:	f040 80ab 	bne.w	8004a32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e4:	d117      	bne.n	8004916 <UART_Receive_IT+0x50>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d113      	bne.n	8004916 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004904:	b29a      	uxth	r2, r3
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	1c9a      	adds	r2, r3, #2
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	629a      	str	r2, [r3, #40]	; 0x28
 8004914:	e026      	b.n	8004964 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800491c:	2300      	movs	r3, #0
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004928:	d007      	beq.n	800493a <UART_Receive_IT+0x74>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <UART_Receive_IT+0x82>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	e008      	b.n	800495a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004954:	b2da      	uxtb	r2, r3
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29b      	uxth	r3, r3
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4619      	mov	r1, r3
 8004972:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004974:	2b00      	cmp	r3, #0
 8004976:	d15a      	bne.n	8004a2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0220 	bic.w	r2, r2, #32
 8004986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004996:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695a      	ldr	r2, [r3, #20]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0201 	bic.w	r2, r2, #1
 80049a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d135      	bne.n	8004a24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	330c      	adds	r3, #12
 80049c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	613b      	str	r3, [r7, #16]
   return(result);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f023 0310 	bic.w	r3, r3, #16
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049de:	623a      	str	r2, [r7, #32]
 80049e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	69f9      	ldr	r1, [r7, #28]
 80049e4:	6a3a      	ldr	r2, [r7, #32]
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e5      	bne.n	80049be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d10a      	bne.n	8004a16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff fdbb 	bl	8004598 <HAL_UARTEx_RxEventCallback>
 8004a22:	e002      	b.n	8004a2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fb ffdf 	bl	80009e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e002      	b.n	8004a34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e000      	b.n	8004a34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3730      	adds	r7, #48	; 0x30
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a40:	b0c0      	sub	sp, #256	; 0x100
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	68d9      	ldr	r1, [r3, #12]
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	ea40 0301 	orr.w	r3, r0, r1
 8004a64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a94:	f021 010c 	bic.w	r1, r1, #12
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab6:	6999      	ldr	r1, [r3, #24]
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	ea40 0301 	orr.w	r3, r0, r1
 8004ac2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b8f      	ldr	r3, [pc, #572]	; (8004d08 <UART_SetConfig+0x2cc>)
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d005      	beq.n	8004adc <UART_SetConfig+0xa0>
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b8d      	ldr	r3, [pc, #564]	; (8004d0c <UART_SetConfig+0x2d0>)
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d104      	bne.n	8004ae6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7fe f948 	bl	8002d70 <HAL_RCC_GetPCLK2Freq>
 8004ae0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ae4:	e003      	b.n	8004aee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ae6:	f7fe f92f 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 8004aea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af8:	f040 810c 	bne.w	8004d14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b0e:	4622      	mov	r2, r4
 8004b10:	462b      	mov	r3, r5
 8004b12:	1891      	adds	r1, r2, r2
 8004b14:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b16:	415b      	adcs	r3, r3
 8004b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b1e:	4621      	mov	r1, r4
 8004b20:	eb12 0801 	adds.w	r8, r2, r1
 8004b24:	4629      	mov	r1, r5
 8004b26:	eb43 0901 	adc.w	r9, r3, r1
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b3e:	4690      	mov	r8, r2
 8004b40:	4699      	mov	r9, r3
 8004b42:	4623      	mov	r3, r4
 8004b44:	eb18 0303 	adds.w	r3, r8, r3
 8004b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	eb49 0303 	adc.w	r3, r9, r3
 8004b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	18db      	adds	r3, r3, r3
 8004b6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b70:	4613      	mov	r3, r2
 8004b72:	eb42 0303 	adc.w	r3, r2, r3
 8004b76:	657b      	str	r3, [r7, #84]	; 0x54
 8004b78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b80:	f7fb fb40 	bl	8000204 <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	011c      	lsls	r4, r3, #4
 8004b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ba0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	1891      	adds	r1, r2, r2
 8004baa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bac:	415b      	adcs	r3, r3
 8004bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	eb12 0a01 	adds.w	sl, r2, r1
 8004bba:	4649      	mov	r1, r9
 8004bbc:	eb43 0b01 	adc.w	fp, r3, r1
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bd4:	4692      	mov	sl, r2
 8004bd6:	469b      	mov	fp, r3
 8004bd8:	4643      	mov	r3, r8
 8004bda:	eb1a 0303 	adds.w	r3, sl, r3
 8004bde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004be2:	464b      	mov	r3, r9
 8004be4:	eb4b 0303 	adc.w	r3, fp, r3
 8004be8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c00:	460b      	mov	r3, r1
 8004c02:	18db      	adds	r3, r3, r3
 8004c04:	643b      	str	r3, [r7, #64]	; 0x40
 8004c06:	4613      	mov	r3, r2
 8004c08:	eb42 0303 	adc.w	r3, r2, r3
 8004c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c16:	f7fb faf5 	bl	8000204 <__aeabi_uldivmod>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4b3b      	ldr	r3, [pc, #236]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004c22:	fba3 2301 	umull	r2, r3, r3, r1
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	2264      	movs	r2, #100	; 0x64
 8004c2a:	fb02 f303 	mul.w	r3, r2, r3
 8004c2e:	1acb      	subs	r3, r1, r3
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c36:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004c38:	fba3 2302 	umull	r2, r3, r3, r2
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c44:	441c      	add	r4, r3
 8004c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c58:	4642      	mov	r2, r8
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	1891      	adds	r1, r2, r2
 8004c5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c60:	415b      	adcs	r3, r3
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c68:	4641      	mov	r1, r8
 8004c6a:	1851      	adds	r1, r2, r1
 8004c6c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c6e:	4649      	mov	r1, r9
 8004c70:	414b      	adcs	r3, r1
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c80:	4659      	mov	r1, fp
 8004c82:	00cb      	lsls	r3, r1, #3
 8004c84:	4651      	mov	r1, sl
 8004c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	00ca      	lsls	r2, r1, #3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4619      	mov	r1, r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	4642      	mov	r2, r8
 8004c96:	189b      	adds	r3, r3, r2
 8004c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	460a      	mov	r2, r1
 8004ca0:	eb42 0303 	adc.w	r3, r2, r3
 8004ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	18db      	adds	r3, r3, r3
 8004cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	eb42 0303 	adc.w	r3, r2, r3
 8004cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cd2:	f7fb fa97 	bl	8000204 <__aeabi_uldivmod>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	2164      	movs	r1, #100	; 0x64
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	3332      	adds	r3, #50	; 0x32
 8004cee:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	f003 0207 	and.w	r2, r3, #7
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4422      	add	r2, r4
 8004d02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d04:	e105      	b.n	8004f12 <UART_SetConfig+0x4d6>
 8004d06:	bf00      	nop
 8004d08:	40011000 	.word	0x40011000
 8004d0c:	40011400 	.word	0x40011400
 8004d10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d26:	4642      	mov	r2, r8
 8004d28:	464b      	mov	r3, r9
 8004d2a:	1891      	adds	r1, r2, r2
 8004d2c:	6239      	str	r1, [r7, #32]
 8004d2e:	415b      	adcs	r3, r3
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
 8004d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d36:	4641      	mov	r1, r8
 8004d38:	1854      	adds	r4, r2, r1
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	eb43 0501 	adc.w	r5, r3, r1
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	00eb      	lsls	r3, r5, #3
 8004d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d4e:	00e2      	lsls	r2, r4, #3
 8004d50:	4614      	mov	r4, r2
 8004d52:	461d      	mov	r5, r3
 8004d54:	4643      	mov	r3, r8
 8004d56:	18e3      	adds	r3, r4, r3
 8004d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	eb45 0303 	adc.w	r3, r5, r3
 8004d62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d82:	4629      	mov	r1, r5
 8004d84:	008b      	lsls	r3, r1, #2
 8004d86:	4621      	mov	r1, r4
 8004d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	008a      	lsls	r2, r1, #2
 8004d90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d94:	f7fb fa36 	bl	8000204 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4b60      	ldr	r3, [pc, #384]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	011c      	lsls	r4, r3, #4
 8004da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004db0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004db4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004db8:	4642      	mov	r2, r8
 8004dba:	464b      	mov	r3, r9
 8004dbc:	1891      	adds	r1, r2, r2
 8004dbe:	61b9      	str	r1, [r7, #24]
 8004dc0:	415b      	adcs	r3, r3
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dc8:	4641      	mov	r1, r8
 8004dca:	1851      	adds	r1, r2, r1
 8004dcc:	6139      	str	r1, [r7, #16]
 8004dce:	4649      	mov	r1, r9
 8004dd0:	414b      	adcs	r3, r1
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004de0:	4659      	mov	r1, fp
 8004de2:	00cb      	lsls	r3, r1, #3
 8004de4:	4651      	mov	r1, sl
 8004de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dea:	4651      	mov	r1, sl
 8004dec:	00ca      	lsls	r2, r1, #3
 8004dee:	4610      	mov	r0, r2
 8004df0:	4619      	mov	r1, r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	4642      	mov	r2, r8
 8004df6:	189b      	adds	r3, r3, r2
 8004df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	460a      	mov	r2, r1
 8004e00:	eb42 0303 	adc.w	r3, r2, r3
 8004e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e20:	4649      	mov	r1, r9
 8004e22:	008b      	lsls	r3, r1, #2
 8004e24:	4641      	mov	r1, r8
 8004e26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	008a      	lsls	r2, r1, #2
 8004e2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e32:	f7fb f9e7 	bl	8000204 <__aeabi_uldivmod>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4b39      	ldr	r3, [pc, #228]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	2164      	movs	r1, #100	; 0x64
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	3332      	adds	r3, #50	; 0x32
 8004e4e:	4a34      	ldr	r2, [pc, #208]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e5a:	441c      	add	r4, r3
 8004e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e60:	2200      	movs	r2, #0
 8004e62:	673b      	str	r3, [r7, #112]	; 0x70
 8004e64:	677a      	str	r2, [r7, #116]	; 0x74
 8004e66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e6a:	4642      	mov	r2, r8
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	1891      	adds	r1, r2, r2
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	415b      	adcs	r3, r3
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e7a:	4641      	mov	r1, r8
 8004e7c:	1851      	adds	r1, r2, r1
 8004e7e:	6039      	str	r1, [r7, #0]
 8004e80:	4649      	mov	r1, r9
 8004e82:	414b      	adcs	r3, r1
 8004e84:	607b      	str	r3, [r7, #4]
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e92:	4659      	mov	r1, fp
 8004e94:	00cb      	lsls	r3, r1, #3
 8004e96:	4651      	mov	r1, sl
 8004e98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e9c:	4651      	mov	r1, sl
 8004e9e:	00ca      	lsls	r2, r1, #3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4642      	mov	r2, r8
 8004ea8:	189b      	adds	r3, r3, r2
 8004eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eac:	464b      	mov	r3, r9
 8004eae:	460a      	mov	r2, r1
 8004eb0:	eb42 0303 	adc.w	r3, r2, r3
 8004eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8004ec0:	667a      	str	r2, [r7, #100]	; 0x64
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ece:	4649      	mov	r1, r9
 8004ed0:	008b      	lsls	r3, r1, #2
 8004ed2:	4641      	mov	r1, r8
 8004ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed8:	4641      	mov	r1, r8
 8004eda:	008a      	lsls	r2, r1, #2
 8004edc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ee0:	f7fb f990 	bl	8000204 <__aeabi_uldivmod>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004eea:	fba3 1302 	umull	r1, r3, r3, r2
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	2164      	movs	r1, #100	; 0x64
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	3332      	adds	r3, #50	; 0x32
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	f003 020f 	and.w	r2, r3, #15
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4422      	add	r2, r4
 8004f10:	609a      	str	r2, [r3, #8]
}
 8004f12:	bf00      	nop
 8004f14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f1e:	bf00      	nop
 8004f20:	51eb851f 	.word	0x51eb851f

08004f24 <pidInit>:
 */

#include "pid.h"

void pidInit(PidController *pidController, uint8_t kp, uint8_t ki, uint8_t kd, ControllerTopology controllerTopology)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	4611      	mov	r1, r2
 8004f30:	461a      	mov	r2, r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	70fb      	strb	r3, [r7, #3]
 8004f36:	460b      	mov	r3, r1
 8004f38:	70bb      	strb	r3, [r7, #2]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	707b      	strb	r3, [r7, #1]
	pidController->kp = kp;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	78fa      	ldrb	r2, [r7, #3]
 8004f42:	701a      	strb	r2, [r3, #0]
	pidController->ki = ki;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	78ba      	ldrb	r2, [r7, #2]
 8004f48:	705a      	strb	r2, [r3, #1]
	pidController->kd = kd;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	787a      	ldrb	r2, [r7, #1]
 8004f4e:	709a      	strb	r2, [r3, #2]
	pidController->controllerTopology = controllerTopology;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	7c3a      	ldrb	r2, [r7, #16]
 8004f54:	f883 2020 	strb.w	r2, [r3, #32]
	pidController->currentError = 0;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	605a      	str	r2, [r3, #4]
	pidController->previousError = 0;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	609a      	str	r2, [r3, #8]
	pidController->sumOfErrors = 0;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	60da      	str	r2, [r3, #12]
	pidController->setpoint = 0;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	611a      	str	r2, [r3, #16]
	pidController->controlledVariable = 0;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	615a      	str	r2, [r3, #20]
	pidController->processVariable = 0;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	619a      	str	r2, [r3, #24]
	pidController->differenceOfErrors = 0;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	61da      	str	r2, [r3, #28]
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <pidCompute>:

void pidCompute(PidController *pidController)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	pidController->currentError = pidController->setpoint - pidController->processVariable;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	1ad2      	subs	r2, r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	605a      	str	r2, [r3, #4]
	pidController->sumOfErrors += pidController->currentError;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	441a      	add	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60da      	str	r2, [r3, #12]
	pidController->differenceOfErrors = pidController->currentError - pidController->previousError;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	1ad2      	subs	r2, r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	61da      	str	r2, [r3, #28]

	if (pidController->sumOfErrors > MAX_SUM_OF_ERRORS)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004fca:	dd04      	ble.n	8004fd6 <pidCompute+0x46>
	{
		pidController->sumOfErrors = MAX_SUM_OF_ERRORS;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004fd2:	60da      	str	r2, [r3, #12]
 8004fd4:	e007      	b.n	8004fe6 <pidCompute+0x56>
	}
	else if (pidController->sumOfErrors < MIN_SUM_OF_ERRORS)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8004fde:	da02      	bge.n	8004fe6 <pidCompute+0x56>
	{
		pidController->sumOfErrors = MIN_SUM_OF_ERRORS;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a32      	ldr	r2, [pc, #200]	; (80050ac <pidCompute+0x11c>)
 8004fe4:	60da      	str	r2, [r3, #12]
	}

	if (pidController->controllerTopology == P_CONTROLLER)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d109      	bne.n	8005004 <pidCompute+0x74>
	{
		pidController->controlledVariable = (pidController->kp * pidController->currentError);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	fb03 f202 	mul.w	r2, r3, r2
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	615a      	str	r2, [r3, #20]
 8005002:	e038      	b.n	8005076 <pidCompute+0xe6>
	}
	else if (pidController->controllerTopology == PI_CONTROLLER)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3020 	ldrb.w	r3, [r3, #32]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d111      	bne.n	8005032 <pidCompute+0xa2>
	{
		pidController->controlledVariable = (pidController->kp * pidController->currentError) + (pidController->ki * pidController->sumOfErrors);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	fb03 f202 	mul.w	r2, r3, r2
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	785b      	ldrb	r3, [r3, #1]
 8005020:	4619      	mov	r1, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	441a      	add	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	615a      	str	r2, [r3, #20]
 8005030:	e021      	b.n	8005076 <pidCompute+0xe6>
	}
	else if (pidController->controllerTopology == PID_CONTROLLER)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005038:	2b02      	cmp	r3, #2
 800503a:	d119      	bne.n	8005070 <pidCompute+0xe0>
	{
		pidController->controlledVariable = (pidController->kp * pidController->currentError) + (pidController->ki * pidController->sumOfErrors) + (pidController->kd * pidController->differenceOfErrors);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	fb03 f202 	mul.w	r2, r3, r2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	785b      	ldrb	r3, [r3, #1]
 800504e:	4619      	mov	r1, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	441a      	add	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	789b      	ldrb	r3, [r3, #2]
 800505e:	4619      	mov	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	441a      	add	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	615a      	str	r2, [r3, #20]
 800506e:	e002      	b.n	8005076 <pidCompute+0xe6>
	}
	else
	{
		pidController->controlledVariable = 0;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	615a      	str	r2, [r3, #20]
	}

	if (pidController->controlledVariable > MAX_CONTROLLED_VARIABLE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507e:	db04      	blt.n	800508a <pidCompute+0xfa>
	{
		pidController->controlledVariable = MAX_CONTROLLED_VARIABLE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005086:	615a      	str	r2, [r3, #20]
 8005088:	e006      	b.n	8005098 <pidCompute+0x108>
	}
	else if (pidController->controlledVariable < MIN_CONTROLLED_VARIABLE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	2b00      	cmp	r3, #0
 8005090:	da02      	bge.n	8005098 <pidCompute+0x108>
	{
		pidController->controlledVariable = MIN_CONTROLLED_VARIABLE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	615a      	str	r2, [r3, #20]
	}

	pidController->previousError = pidController->currentError;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	609a      	str	r2, [r3, #8]
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	fffff830 	.word	0xfffff830

080050b0 <pidSetSetpoint>:

void pidSetSetpoint(PidController *pidController, int32_t setpoint)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
	pidController->setpoint = setpoint;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	611a      	str	r2, [r3, #16]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <pidSetProcessVariable>:
{
	return pidController->setpoint;
}

void pidSetProcessVariable(PidController *pidController, int32_t processVariable)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
	pidController->processVariable = processVariable;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	619a      	str	r2, [r3, #24]
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <pidGetProcessVariable>:

int32_t pidGetProcessVariable(PidController *pidController)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	return pidController->processVariable;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <pidGetControlledVariable>:

int32_t pidGetControlledVariable(PidController *pidController)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	return pidController->controlledVariable;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <__libc_init_array>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	4d0d      	ldr	r5, [pc, #52]	; (8005150 <__libc_init_array+0x38>)
 800511c:	4c0d      	ldr	r4, [pc, #52]	; (8005154 <__libc_init_array+0x3c>)
 800511e:	1b64      	subs	r4, r4, r5
 8005120:	10a4      	asrs	r4, r4, #2
 8005122:	2600      	movs	r6, #0
 8005124:	42a6      	cmp	r6, r4
 8005126:	d109      	bne.n	800513c <__libc_init_array+0x24>
 8005128:	4d0b      	ldr	r5, [pc, #44]	; (8005158 <__libc_init_array+0x40>)
 800512a:	4c0c      	ldr	r4, [pc, #48]	; (800515c <__libc_init_array+0x44>)
 800512c:	f000 f82e 	bl	800518c <_init>
 8005130:	1b64      	subs	r4, r4, r5
 8005132:	10a4      	asrs	r4, r4, #2
 8005134:	2600      	movs	r6, #0
 8005136:	42a6      	cmp	r6, r4
 8005138:	d105      	bne.n	8005146 <__libc_init_array+0x2e>
 800513a:	bd70      	pop	{r4, r5, r6, pc}
 800513c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005140:	4798      	blx	r3
 8005142:	3601      	adds	r6, #1
 8005144:	e7ee      	b.n	8005124 <__libc_init_array+0xc>
 8005146:	f855 3b04 	ldr.w	r3, [r5], #4
 800514a:	4798      	blx	r3
 800514c:	3601      	adds	r6, #1
 800514e:	e7f2      	b.n	8005136 <__libc_init_array+0x1e>
 8005150:	080052c4 	.word	0x080052c4
 8005154:	080052c4 	.word	0x080052c4
 8005158:	080052c4 	.word	0x080052c4
 800515c:	080052c8 	.word	0x080052c8

08005160 <memcpy>:
 8005160:	440a      	add	r2, r1
 8005162:	4291      	cmp	r1, r2
 8005164:	f100 33ff 	add.w	r3, r0, #4294967295
 8005168:	d100      	bne.n	800516c <memcpy+0xc>
 800516a:	4770      	bx	lr
 800516c:	b510      	push	{r4, lr}
 800516e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005176:	4291      	cmp	r1, r2
 8005178:	d1f9      	bne.n	800516e <memcpy+0xe>
 800517a:	bd10      	pop	{r4, pc}

0800517c <memset>:
 800517c:	4402      	add	r2, r0
 800517e:	4603      	mov	r3, r0
 8005180:	4293      	cmp	r3, r2
 8005182:	d100      	bne.n	8005186 <memset+0xa>
 8005184:	4770      	bx	lr
 8005186:	f803 1b01 	strb.w	r1, [r3], #1
 800518a:	e7f9      	b.n	8005180 <memset+0x4>

0800518c <_init>:
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	bf00      	nop
 8005190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005192:	bc08      	pop	{r3}
 8005194:	469e      	mov	lr, r3
 8005196:	4770      	bx	lr

08005198 <_fini>:
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519a:	bf00      	nop
 800519c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519e:	bc08      	pop	{r3}
 80051a0:	469e      	mov	lr, r3
 80051a2:	4770      	bx	lr
