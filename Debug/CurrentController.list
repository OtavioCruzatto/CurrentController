
CurrentController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005374  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005538  08005538  00015538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005650  08005650  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005650  08005650  00015650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005658  08005658  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000000c  0800566c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  0800566c  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001392f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5d  00000000  00000000  0003396b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  000364c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  00037620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a5e  00000000  00000000  00038650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d6b  00000000  00000000  0005d0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0cc6  00000000  00000000  00071e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152adf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004948  00000000  00000000  00152b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005520 	.word	0x08005520

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005520 	.word	0x08005520

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <appInit>:

#include "app.h"

// ======== Init =========== //
void appInit(App *app, GPIO_TypeDef* ledPort, uint16_t ledPin, UART_HandleTypeDef huart)
{
 8000508:	b082      	sub	sp, #8
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af02      	add	r7, sp, #8
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	61fb      	str	r3, [r7, #28]
 8000516:	4613      	mov	r3, r2
 8000518:	80fb      	strh	r3, [r7, #6]
	// ======== LED =========== //
	app->blinkDelay = DELAY_100_MILISECONDS;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000520:	601a      	str	r2, [r3, #0]
	app->ledPort = ledPort;
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	68ba      	ldr	r2, [r7, #8]
 8000526:	605a      	str	r2, [r3, #4]
	app->ledPin = ledPin;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	88fa      	ldrh	r2, [r7, #6]
 800052c:	811a      	strh	r2, [r3, #8]

	// ======== UART =========== //
	app->huart = huart;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	330c      	adds	r3, #12
 8000532:	f107 011c 	add.w	r1, r7, #28
 8000536:	2244      	movs	r2, #68	; 0x44
 8000538:	4618      	mov	r0, r3
 800053a:	f004 ffdb 	bl	80054f4 <memcpy>

	// ======== Controller =========== //
	pidInit(&app->pid, 1, 2, 3, PID_CONTROLLER);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8000544:	2302      	movs	r3, #2
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2303      	movs	r3, #3
 800054a:	2202      	movs	r2, #2
 800054c:	2101      	movs	r1, #1
 800054e:	f004 feb3 	bl	80052b8 <pidInit>
	pidSetSetpoint(&app->pid, 500);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3350      	adds	r3, #80	; 0x50
 8000556:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800055a:	4618      	mov	r0, r3
 800055c:	f004 ff72 	bl	8005444 <pidSetSetpoint>
	app->samplingDelay = DELAY_10_MILISECONDS;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2264      	movs	r2, #100	; 0x64
 8000564:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	app->pidComputeDelay = DELAY_10_MILISECONDS;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2264      	movs	r2, #100	; 0x64
 800056c:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	// ======== Data Packet Tx =========== //
	dataPacketTxInit(&app->dataPacketTx, 0xAA, 0x55);
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	3378      	adds	r3, #120	; 0x78
 8000574:	2255      	movs	r2, #85	; 0x55
 8000576:	21aa      	movs	r1, #170	; 0xaa
 8000578:	4618      	mov	r0, r3
 800057a:	f001 fa94 	bl	8001aa6 <dataPacketTxInit>
	app->processVariableReadyToSend = FALSE;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2200      	movs	r2, #0
 8000582:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	app->enableSendProcessVariable = FALSE;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2200      	movs	r2, #0
 800058a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	app->enableSendPidKsParameterValues = FALSE;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	2200      	movs	r2, #0
 8000592:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	app->enableSendPidControllerParameterValues = FALSE;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2200      	movs	r2, #0
 800059a:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb

	// ======== Data Packet Rx =========== //
	dataPacketRxInit(&app->dataPacketRx, 0xAA, 0x55);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	33bc      	adds	r3, #188	; 0xbc
 80005a2:	2255      	movs	r2, #85	; 0x55
 80005a4:	21aa      	movs	r1, #170	; 0xaa
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f8ce 	bl	8001748 <dataPacketRxInit>
	app->decodeCommandStatus = FALSE;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2200      	movs	r2, #0
 80005b0:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	app->command = 0;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
	memset(app->data, 0x00, QTY_DATA_BYTES);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80005c2:	2219      	movs	r2, #25
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 ffa2 	bl	8005510 <memset>
	app->dataLenght = 0;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005de:	b002      	add	sp, #8
 80005e0:	4770      	bx	lr

080005e2 <appExecuteBlinkLed>:

// ======== LED =========== //
void appExecuteBlinkLed(App *app)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(app->ledPort, app->ledPin);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	891b      	ldrh	r3, [r3, #8]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4610      	mov	r0, r2
 80005f6:	f002 fc14 	bl	8002e22 <HAL_GPIO_TogglePin>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <appGetBlinkDelay>:

uint32_t appGetBlinkDelay(App *app)
{
 8000602:	b480      	push	{r7}
 8000604:	b083      	sub	sp, #12
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
	return app->blinkDelay;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <appRunController>:

// ======== Controller =========== //
void appRunController(App *app, DAC_HandleTypeDef hdac)
{
 800061a:	b084      	sub	sp, #16
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	f107 001c 	add.w	r0, r7, #28
 8000628:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// pidSetProcessVariable(&app->pid, app->pid->processVariable);
	pidCompute(&app->pid);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3350      	adds	r3, #80	; 0x50
 8000630:	4618      	mov	r0, r3
 8000632:	f004 fe77 	bl	8005324 <pidCompute>
	uint32_t controlledVariable = pidGetControlledVariable(&app->pid);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3350      	adds	r3, #80	; 0x50
 800063a:	4618      	mov	r0, r3
 800063c:	f004 ff2a 	bl	8005494 <pidGetControlledVariable>
 8000640:	4603      	mov	r3, r0
 8000642:	60fb      	str	r3, [r7, #12]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, controlledVariable);
 8000644:	f107 001c 	add.w	r0, r7, #28
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	f002 f934 	bl	80028ba <HAL_DAC_SetValue>
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800065c:	b004      	add	sp, #16
 800065e:	4770      	bx	lr

08000660 <appSetProcessVariable>:

void appSetProcessVariable(App *app, uint16_t value)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	807b      	strh	r3, [r7, #2]
	pidSetProcessVariable(&app->pid, value);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3350      	adds	r3, #80	; 0x50
 8000670:	887a      	ldrh	r2, [r7, #2]
 8000672:	4611      	mov	r1, r2
 8000674:	4618      	mov	r0, r3
 8000676:	f004 fef3 	bl	8005460 <pidSetProcessVariable>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <appGetProcessVariable>:

uint16_t appGetProcessVariable(App *app)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b082      	sub	sp, #8
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
	return pidGetProcessVariable(&app->pid);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3350      	adds	r3, #80	; 0x50
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fef4 	bl	800547c <pidGetProcessVariable>
 8000694:	4603      	mov	r3, r0
 8000696:	b29b      	uxth	r3, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <appAppendReceivedByte>:

// ======== Data Packet Rx =========== //
void appAppendReceivedByte(App *app, uint8_t receivedByte)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
	dataPacketRxAppend(&app->dataPacketRx, receivedByte);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	33bc      	adds	r3, #188	; 0xbc
 80006b0:	78fa      	ldrb	r2, [r7, #3]
 80006b2:	4611      	mov	r1, r2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 f882 	bl	80017be <dataPacketRxAppend>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <appTryDecodeReceivedDataPacket>:

void appTryDecodeReceivedDataPacket(App *app)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b082      	sub	sp, #8
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
	dataPacketRxDecode(&app->dataPacketRx);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	33bc      	adds	r3, #188	; 0xbc
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f89f 	bl	8001812 <dataPacketRxDecode>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <appTryExtractCommandAndPayloadFromDecodedDataPacket>:

void appTryExtractCommandAndPayloadFromDecodedDataPacket(App *app)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	if (dataPacketRxGetDataPacketStatus(&app->dataPacketRx) == VALID_RX_DATA_PACKET)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	33bc      	adds	r3, #188	; 0xbc
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 f9cf 	bl	8001a8c <dataPacketRxGetDataPacketStatus>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d12a      	bne.n	800074a <appTryExtractCommandAndPayloadFromDecodedDataPacket+0x6e>
	{
		uint8_t receivedCmd = dataPacketRxGetCommand(&app->dataPacketRx);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	33bc      	adds	r3, #188	; 0xbc
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 f98a 	bl	8001a12 <dataPacketRxGetCommand>
 80006fe:	4603      	mov	r3, r0
 8000700:	73fb      	strb	r3, [r7, #15]
		uint8_t receivedPayloadDataLength = dataPacketRxGetPayloadDataLength(&app->dataPacketRx);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	33bc      	adds	r3, #188	; 0xbc
 8000706:	4618      	mov	r0, r3
 8000708:	f001 f9b4 	bl	8001a74 <dataPacketRxGetPayloadDataLength>
 800070c:	4603      	mov	r3, r0
 800070e:	73bb      	strb	r3, [r7, #14]

		if (receivedPayloadDataLength > 0)
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d00b      	beq.n	800072e <appTryExtractCommandAndPayloadFromDecodedDataPacket+0x52>
		{
			uint8_t *receivedPayloadData = dataPacketRxGetPayloadData(&app->dataPacketRx);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	33bc      	adds	r3, #188	; 0xbc
 800071a:	4618      	mov	r0, r3
 800071c:	f001 f99e 	bl	8001a5c <dataPacketRxGetPayloadData>
 8000720:	60b8      	str	r0, [r7, #8]
			appSetData(app, receivedPayloadData, receivedPayloadDataLength);
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	461a      	mov	r2, r3
 8000726:	68b9      	ldr	r1, [r7, #8]
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 f88b 	bl	8000844 <appSetData>
		}

		appSetCommand(app, receivedCmd);
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	4619      	mov	r1, r3
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f859 	bl	80007ea <appSetCommand>
		appSetDecodeStatus(app, TRUE);
 8000738:	2101      	movs	r1, #1
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f865 	bl	800080a <appSetDecodeStatus>
		dataPacketRxClear(&app->dataPacketRx);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	33bc      	adds	r3, #188	; 0xbc
 8000744:	4618      	mov	r0, r3
 8000746:	f001 f919 	bl	800197c <dataPacketRxClear>
	}
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <appTryDecodeExtractedCommand>:

void appTryDecodeExtractedCommand(App *app)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
	if (appGetDecodeStatus(app) == TRUE)
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f865 	bl	800082a <appGetDecodeStatus>
 8000760:	4603      	mov	r3, r0
 8000762:	2b01      	cmp	r3, #1
 8000764:	d106      	bne.n	8000774 <appTryDecodeExtractedCommand+0x22>
	{
		appDecodeReceivedCommand(app);
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 f808 	bl	800077c <appDecodeReceivedCommand>
		appSetDecodeStatus(app, FALSE);
 800076c:	2100      	movs	r1, #0
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f84b 	bl	800080a <appSetDecodeStatus>
	}
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <appDecodeReceivedCommand>:

void appDecodeReceivedCommand(App *app)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	switch (app->command)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f893 3103 	ldrb.w	r3, [r3, #259]	; 0x103
 800078a:	2b22      	cmp	r3, #34	; 0x22
 800078c:	d006      	beq.n	800079c <appDecodeReceivedCommand+0x20>
 800078e:	2b22      	cmp	r3, #34	; 0x22
 8000790:	dc22      	bgt.n	80007d8 <appDecodeReceivedCommand+0x5c>
 8000792:	2b13      	cmp	r3, #19
 8000794:	d016      	beq.n	80007c4 <appDecodeReceivedCommand+0x48>
 8000796:	2b16      	cmp	r3, #22
 8000798:	d019      	beq.n	80007ce <appDecodeReceivedCommand+0x52>
		case CMD_RX_ASK_FOR_PID_CONTROLLER_PARAMETERS:
			app->enableSendPidControllerParameterValues = TRUE;
			break;

		default:
			break;
 800079a:	e01d      	b.n	80007d8 <appDecodeReceivedCommand+0x5c>
			if (app->data[0] == 0x00)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d104      	bne.n	80007b0 <appDecodeReceivedCommand+0x34>
				app->enableSendProcessVariable = FALSE;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			break;
 80007ae:	e015      	b.n	80007dc <appDecodeReceivedCommand+0x60>
			else if (app->data[0] == 0x01)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d110      	bne.n	80007dc <appDecodeReceivedCommand+0x60>
				app->enableSendProcessVariable = TRUE;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2201      	movs	r2, #1
 80007be:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			break;
 80007c2:	e00b      	b.n	80007dc <appDecodeReceivedCommand+0x60>
			app->enableSendPidKsParameterValues = TRUE;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2201      	movs	r2, #1
 80007c8:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
			break;
 80007cc:	e007      	b.n	80007de <appDecodeReceivedCommand+0x62>
			app->enableSendPidControllerParameterValues = TRUE;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2201      	movs	r2, #1
 80007d2:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			break;
 80007d6:	e002      	b.n	80007de <appDecodeReceivedCommand+0x62>
			break;
 80007d8:	bf00      	nop
 80007da:	e000      	b.n	80007de <appDecodeReceivedCommand+0x62>
			break;
 80007dc:	bf00      	nop
	}
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <appSetCommand>:

void appSetCommand(App *app, uint8_t command)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	460b      	mov	r3, r1
 80007f4:	70fb      	strb	r3, [r7, #3]
	app->command = command;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	78fa      	ldrb	r2, [r7, #3]
 80007fa:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <appSetDecodeStatus>:

void appSetDecodeStatus(App *app, Bool status)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	460b      	mov	r3, r1
 8000814:	70fb      	strb	r3, [r7, #3]
	app->decodeCommandStatus = status;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	78fa      	ldrb	r2, [r7, #3]
 800081a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <appGetDecodeStatus>:

Bool appGetDecodeStatus(App *app)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	return app->decodeCommandStatus;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <appSetData>:

void appSetData(App *app, uint8_t *data, uint8_t dataLength)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	4613      	mov	r3, r2
 8000850:	71fb      	strb	r3, [r7, #7]
	if (dataLength <= QTY_DATA_BYTES)
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b19      	cmp	r3, #25
 8000856:	d80b      	bhi.n	8000870 <appSetData+0x2c>
	{
		app->dataLenght = dataLength;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
		memcpy(app->data, data, dataLength);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	4618      	mov	r0, r3
 800086c:	f004 fe42 	bl	80054f4 <memcpy>
	}
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <appSendProcessVariable>:

// ======== Data Packet Tx =========== //
void appSendProcessVariable(App *app)
{
 8000878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800087c:	b094      	sub	sp, #80	; 0x50
 800087e:	af0e      	add	r7, sp, #56	; 0x38
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	466b      	mov	r3, sp
 8000884:	469a      	mov	sl, r3
	uint16_t processVariableValue = appGetProcessVariable(app);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff fefb 	bl	8000682 <appGetProcessVariable>
 800088c:	4603      	mov	r3, r0
 800088e:	82fb      	strh	r3, [r7, #22]
	uint8_t qtyOfBytes = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	757b      	strb	r3, [r7, #21]
	uint8_t bytes[qtyOfBytes];
 8000894:	7d79      	ldrb	r1, [r7, #21]
 8000896:	460b      	mov	r3, r1
 8000898:	3b01      	subs	r3, #1
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	b2cb      	uxtb	r3, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	4698      	mov	r8, r3
 80008a2:	4691      	mov	r9, r2
 80008a4:	f04f 0200 	mov.w	r2, #0
 80008a8:	f04f 0300 	mov.w	r3, #0
 80008ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008b8:	b2cb      	uxtb	r3, r1
 80008ba:	2200      	movs	r2, #0
 80008bc:	461c      	mov	r4, r3
 80008be:	4615      	mov	r5, r2
 80008c0:	f04f 0200 	mov.w	r2, #0
 80008c4:	f04f 0300 	mov.w	r3, #0
 80008c8:	00eb      	lsls	r3, r5, #3
 80008ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008ce:	00e2      	lsls	r2, r4, #3
 80008d0:	460b      	mov	r3, r1
 80008d2:	3307      	adds	r3, #7
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	ebad 0d03 	sub.w	sp, sp, r3
 80008dc:	ab0e      	add	r3, sp, #56	; 0x38
 80008de:	3300      	adds	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
	bytes[0] = ((processVariableValue >> 8) & 0x00FF);
 80008e2:	8afb      	ldrh	r3, [r7, #22]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	701a      	strb	r2, [r3, #0]
	bytes[1] = (processVariableValue & 0x00FF);
 80008ee:	8afb      	ldrh	r3, [r7, #22]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	705a      	strb	r2, [r3, #1]

	dataPacketTxSetCommand(&app->dataPacketTx, CMD_TX_PROCESS_VARIABLE_VALUE);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3378      	adds	r3, #120	; 0x78
 80008fa:	2121      	movs	r1, #33	; 0x21
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 f9a1 	bl	8001c44 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&app->dataPacketTx, bytes, qtyOfBytes);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3378      	adds	r3, #120	; 0x78
 8000906:	7d7a      	ldrb	r2, [r7, #21]
 8000908:	68f9      	ldr	r1, [r7, #12]
 800090a:	4618      	mov	r0, r3
 800090c:	f001 f9b4 	bl	8001c78 <dataPacketTxSetPayloadData>
	dataPacketTxMount(&app->dataPacketTx);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3378      	adds	r3, #120	; 0x78
 8000914:	4618      	mov	r0, r3
 8000916:	f001 f8f6 	bl	8001b06 <dataPacketTxMount>
	dataPacketTxUartSend(&app->dataPacketTx, app->huart);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 8000920:	687e      	ldr	r6, [r7, #4]
 8000922:	466d      	mov	r5, sp
 8000924:	f106 0418 	add.w	r4, r6, #24
 8000928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800092a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800092c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800092e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000938:	e885 0003 	stmia.w	r5, {r0, r1}
 800093c:	f106 030c 	add.w	r3, r6, #12
 8000940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000942:	4660      	mov	r0, ip
 8000944:	f001 f926 	bl	8001b94 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&app->dataPacketTx);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3378      	adds	r3, #120	; 0x78
 800094c:	4618      	mov	r0, r3
 800094e:	f001 f95d 	bl	8001c0c <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&app->dataPacketTx);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3378      	adds	r3, #120	; 0x78
 8000956:	4618      	mov	r0, r3
 8000958:	f001 f93c 	bl	8001bd4 <dataPacketTxClear>
 800095c:	46d5      	mov	sp, sl
}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000968 <appSendPidKsParameterValues>:

void appSendPidKsParameterValues(App *app)
{
 8000968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800096c:	b094      	sub	sp, #80	; 0x50
 800096e:	af0e      	add	r7, sp, #56	; 0x38
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	466b      	mov	r3, sp
 8000974:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 3;
 8000976:	2303      	movs	r3, #3
 8000978:	75fb      	strb	r3, [r7, #23]
	uint8_t bytes[qtyOfBytes];
 800097a:	7df9      	ldrb	r1, [r7, #23]
 800097c:	460b      	mov	r3, r1
 800097e:	3b01      	subs	r3, #1
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	b2cb      	uxtb	r3, r1
 8000984:	2200      	movs	r2, #0
 8000986:	4698      	mov	r8, r3
 8000988:	4691      	mov	r9, r2
 800098a:	f04f 0200 	mov.w	r2, #0
 800098e:	f04f 0300 	mov.w	r3, #0
 8000992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800099a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800099e:	b2cb      	uxtb	r3, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	461c      	mov	r4, r3
 80009a4:	4615      	mov	r5, r2
 80009a6:	f04f 0200 	mov.w	r2, #0
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	00eb      	lsls	r3, r5, #3
 80009b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009b4:	00e2      	lsls	r2, r4, #3
 80009b6:	460b      	mov	r3, r1
 80009b8:	3307      	adds	r3, #7
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	ebad 0d03 	sub.w	sp, sp, r3
 80009c2:	ab0e      	add	r3, sp, #56	; 0x38
 80009c4:	3300      	adds	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
	bytes[0] = app->pid.kp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	701a      	strb	r2, [r3, #0]
	bytes[1] = app->pid.ki;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	705a      	strb	r2, [r3, #1]
	bytes[2] = app->pid.kd;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	709a      	strb	r2, [r3, #2]

	dataPacketTxSetCommand(&app->dataPacketTx, CMD_TX_PID_KS_PARAMETER_VALUES);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3378      	adds	r3, #120	; 0x78
 80009ea:	2114      	movs	r1, #20
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 f929 	bl	8001c44 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&app->dataPacketTx, bytes, qtyOfBytes);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3378      	adds	r3, #120	; 0x78
 80009f6:	7dfa      	ldrb	r2, [r7, #23]
 80009f8:	68f9      	ldr	r1, [r7, #12]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 f93c 	bl	8001c78 <dataPacketTxSetPayloadData>
	dataPacketTxMount(&app->dataPacketTx);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3378      	adds	r3, #120	; 0x78
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 f87e 	bl	8001b06 <dataPacketTxMount>
	dataPacketTxUartSend(&app->dataPacketTx, app->huart);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 8000a10:	687e      	ldr	r6, [r7, #4]
 8000a12:	466d      	mov	r5, sp
 8000a14:	f106 0418 	add.w	r4, r6, #24
 8000a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a28:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a2c:	f106 030c 	add.w	r3, r6, #12
 8000a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a32:	4660      	mov	r0, ip
 8000a34:	f001 f8ae 	bl	8001b94 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&app->dataPacketTx);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3378      	adds	r3, #120	; 0x78
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 f8e5 	bl	8001c0c <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&app->dataPacketTx);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3378      	adds	r3, #120	; 0x78
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 f8c4 	bl	8001bd4 <dataPacketTxClear>
 8000a4c:	46d5      	mov	sp, sl
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000a58 <appSendPidControllerParameterValues>:

void appSendPidControllerParameterValues(App *app)
{
 8000a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a5c:	b094      	sub	sp, #80	; 0x50
 8000a5e:	af0e      	add	r7, sp, #56	; 0x38
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	466b      	mov	r3, sp
 8000a64:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 8;
 8000a66:	2308      	movs	r3, #8
 8000a68:	75fb      	strb	r3, [r7, #23]
	uint8_t bytes[qtyOfBytes];
 8000a6a:	7df9      	ldrb	r1, [r7, #23]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	b2cb      	uxtb	r3, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	4698      	mov	r8, r3
 8000a78:	4691      	mov	r9, r2
 8000a7a:	f04f 0200 	mov.w	r2, #0
 8000a7e:	f04f 0300 	mov.w	r3, #0
 8000a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a8e:	b2cb      	uxtb	r3, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	461c      	mov	r4, r3
 8000a94:	4615      	mov	r5, r2
 8000a96:	f04f 0200 	mov.w	r2, #0
 8000a9a:	f04f 0300 	mov.w	r3, #0
 8000a9e:	00eb      	lsls	r3, r5, #3
 8000aa0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000aa4:	00e2      	lsls	r2, r4, #3
 8000aa6:	460b      	mov	r3, r1
 8000aa8:	3307      	adds	r3, #7
 8000aaa:	08db      	lsrs	r3, r3, #3
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	ebad 0d03 	sub.w	sp, sp, r3
 8000ab2:	ab0e      	add	r3, sp, #56	; 0x38
 8000ab4:	3300      	adds	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]

	bytes[0] = ((app->samplingDelay >> 8) & 0x00FF);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	701a      	strb	r2, [r3, #0]
	bytes[1] = (app->samplingDelay & 0x00FF);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((app->pidComputeDelay >> 8) & 0x00FF);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	709a      	strb	r2, [r3, #2]
	bytes[3] = (app->pidComputeDelay & 0x00FF);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	70da      	strb	r2, [r3, #3]
	bytes[4] = ((app->pid.setpoint >> 24) & 0x000000FF);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af4:	0e1b      	lsrs	r3, r3, #24
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	711a      	strb	r2, [r3, #4]
	bytes[5] = ((app->pid.setpoint >> 16) & 0x000000FF);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b00:	141b      	asrs	r3, r3, #16
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	715a      	strb	r2, [r3, #5]
	bytes[6] = ((app->pid.setpoint >> 8) & 0x000000FF);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0c:	121b      	asrs	r3, r3, #8
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	719a      	strb	r2, [r3, #6]
	bytes[7] = (app->pid.setpoint & 0x000000FF);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	71da      	strb	r2, [r3, #7]

	dataPacketTxSetCommand(&app->dataPacketTx, CMD_TX_PID_CONTROLLER_PARAMETER_VALUES);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3378      	adds	r3, #120	; 0x78
 8000b22:	2117      	movs	r1, #23
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 f88d 	bl	8001c44 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&app->dataPacketTx, bytes, qtyOfBytes);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3378      	adds	r3, #120	; 0x78
 8000b2e:	7dfa      	ldrb	r2, [r7, #23]
 8000b30:	68f9      	ldr	r1, [r7, #12]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 f8a0 	bl	8001c78 <dataPacketTxSetPayloadData>
	dataPacketTxMount(&app->dataPacketTx);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3378      	adds	r3, #120	; 0x78
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 ffe2 	bl	8001b06 <dataPacketTxMount>
	dataPacketTxUartSend(&app->dataPacketTx, app->huart);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 8000b48:	687e      	ldr	r6, [r7, #4]
 8000b4a:	466d      	mov	r5, sp
 8000b4c:	f106 0418 	add.w	r4, r6, #24
 8000b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b60:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b64:	f106 030c 	add.w	r3, r6, #12
 8000b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b6a:	4660      	mov	r0, ip
 8000b6c:	f001 f812 	bl	8001b94 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&app->dataPacketTx);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3378      	adds	r3, #120	; 0x78
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 f849 	bl	8001c0c <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&app->dataPacketTx);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3378      	adds	r3, #120	; 0x78
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f828 	bl	8001bd4 <dataPacketTxClear>
 8000b84:	46d5      	mov	sp, sl
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000b90 <appTrySendData>:

void appTrySendData(App *app)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if (appGetEnableSendPidKsParameterValues(app) == TRUE)
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f000 f85a 	bl	8000c52 <appGetEnableSendPidKsParameterValues>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d107      	bne.n	8000bb4 <appTrySendData+0x24>
	{
		appSendPidKsParameterValues(app);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fedf 	bl	8000968 <appSendPidKsParameterValues>
		appSetEnableSendPidKsParameterValues(app, FALSE);
 8000baa:	2100      	movs	r1, #0
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 f85d 	bl	8000c6c <appSetEnableSendPidKsParameterValues>
		{
			appSendProcessVariable(app);
		}
		appSetProcessVariableReadyToSend(app, FALSE);
	}
}
 8000bb2:	e020      	b.n	8000bf6 <appTrySendData+0x66>
	else if (appGetEnableSendPidControllerParameterValues(app) == TRUE)
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 f883 	bl	8000cc0 <appGetEnableSendPidControllerParameterValues>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d107      	bne.n	8000bd0 <appTrySendData+0x40>
		appSendPidControllerParameterValues(app);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff49 	bl	8000a58 <appSendPidControllerParameterValues>
		appSetEnableSendPidControllerParameterValues(app, FALSE);
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 f886 	bl	8000cda <appSetEnableSendPidControllerParameterValues>
}
 8000bce:	e012      	b.n	8000bf6 <appTrySendData+0x66>
	else if (appGetProcessVariableReadyToSend(app) == TRUE)
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 f824 	bl	8000c1e <appGetProcessVariableReadyToSend>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d10c      	bne.n	8000bf6 <appTrySendData+0x66>
		if (appGetEnableSendProcessVariable(app) == TRUE)
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f82b 	bl	8000c38 <appGetEnableSendProcessVariable>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d102      	bne.n	8000bee <appTrySendData+0x5e>
			appSendProcessVariable(app);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff fe45 	bl	8000878 <appSendProcessVariable>
		appSetProcessVariableReadyToSend(app, FALSE);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 f804 	bl	8000bfe <appSetProcessVariableReadyToSend>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <appSetProcessVariableReadyToSend>:

void appSetProcessVariableReadyToSend(App *app, Bool status)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	460b      	mov	r3, r1
 8000c08:	70fb      	strb	r3, [r7, #3]
	app->processVariableReadyToSend = status;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	78fa      	ldrb	r2, [r7, #3]
 8000c0e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <appGetProcessVariableReadyToSend>:

Bool appGetProcessVariableReadyToSend(App *app)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
	return app->processVariableReadyToSend;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <appGetEnableSendProcessVariable>:

Bool appGetEnableSendProcessVariable(App *app)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	return app->enableSendProcessVariable;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <appGetEnableSendPidKsParameterValues>:
{
	app->enableSendProcessVariable = status;
}

Bool appGetEnableSendPidKsParameterValues(App *app)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
	return app->enableSendPidKsParameterValues;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <appSetEnableSendPidKsParameterValues>:

void appSetEnableSendPidKsParameterValues(App *app, Bool status)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	70fb      	strb	r3, [r7, #3]
	app->enableSendPidKsParameterValues = status;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	78fa      	ldrb	r2, [r7, #3]
 8000c7c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <appGetSamplingDelay>:
{
	app->samplingDelay = samplingDelay;
}

uint16_t appGetSamplingDelay(App *app)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	return app->samplingDelay;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <appGetPidComputeDelay>:
{
	app->pidComputeDelay = pidComputeDelay;
}

uint16_t appGetPidComputeDelay(App *app)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	return app->pidComputeDelay;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <appGetEnableSendPidControllerParameterValues>:

Bool appGetEnableSendPidControllerParameterValues(App *app)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	return app->enableSendPidControllerParameterValues;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <appSetEnableSendPidControllerParameterValues>:

void appSetEnableSendPidControllerParameterValues(App *app, Bool status)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	70fb      	strb	r3, [r7, #3]
	app->enableSendPidControllerParameterValues = status;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	78fa      	ldrb	r2, [r7, #3]
 8000cea:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d11d      	bne.n	8000d48 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		decodeDataPacketDelay++;
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d16:	801a      	strh	r2, [r3, #0]
		blinkLedDelay++;
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d22:	801a      	strh	r2, [r3, #0]
		sendDataDelay1++;
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d2e:	801a      	strh	r2, [r3, #0]
		samplingDelay++;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	3301      	adds	r3, #1
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d3a:	801a      	strh	r2, [r3, #0]
		controllerDelay++;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000d46:	801a      	strh	r2, [r3, #0]
	}
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	20000084 	.word	0x20000084
 8000d58:	20000156 	.word	0x20000156
 8000d5c:	20000158 	.word	0x20000158
 8000d60:	2000015a 	.word	0x2000015a
 8000d64:	2000015c 	.word	0x2000015c
 8000d68:	2000015e 	.word	0x2000015e

08000d6c <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_UART_RxCpltCallback+0x34>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d10d      	bne.n	8000d98 <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4909      	ldr	r1, [pc, #36]	; (8000da4 <HAL_UART_RxCpltCallback+0x38>)
 8000d80:	4807      	ldr	r0, [pc, #28]	; (8000da0 <HAL_UART_RxCpltCallback+0x34>)
 8000d82:	f003 fb00 	bl	8004386 <HAL_UART_Receive_IT>
		appAppendReceivedByte(&app, receivedByte);
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <HAL_UART_RxCpltCallback+0x38>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4806      	ldr	r0, [pc, #24]	; (8000da8 <HAL_UART_RxCpltCallback+0x3c>)
 8000d8e:	f7ff fc87 	bl	80006a0 <appAppendReceivedByte>
		receivedByte = 0x00;
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <HAL_UART_RxCpltCallback+0x38>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
	}
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200000cc 	.word	0x200000cc
 8000da4:	20000154 	.word	0x20000154
 8000da8:	20000160 	.word	0x20000160

08000dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dae:	b093      	sub	sp, #76	; 0x4c
 8000db0:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db2:	f000 ff7b 	bl	8001cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db6:	f000 f8d7 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dba:	f000 fa51 	bl	8001260 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dbe:	f000 f945 	bl	800104c <MX_ADC1_Init>
  MX_TIM9_Init();
 8000dc2:	f000 f9bf 	bl	8001144 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8000dc6:	f000 f9f7 	bl	80011b8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000dca:	f000 fa1f 	bl	800120c <MX_USART3_UART_Init>
  MX_DAC_Init();
 8000dce:	f000 f98f 	bl	80010f0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 8000dd2:	4858      	ldr	r0, [pc, #352]	; (8000f34 <main+0x188>)
 8000dd4:	f002 fe42 	bl	8003a5c <HAL_TIM_Base_Start_IT>
  appInit(&app, LED_GPIO_Port, LED_Pin, huart2);
 8000dd8:	4e57      	ldr	r6, [pc, #348]	; (8000f38 <main+0x18c>)
 8000dda:	466d      	mov	r5, sp
 8000ddc:	1d34      	adds	r4, r6, #4
 8000dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000df2:	6833      	ldr	r3, [r6, #0]
 8000df4:	2220      	movs	r2, #32
 8000df6:	4951      	ldr	r1, [pc, #324]	; (8000f3c <main+0x190>)
 8000df8:	4851      	ldr	r0, [pc, #324]	; (8000f40 <main+0x194>)
 8000dfa:	f7ff fb85 	bl	8000508 <appInit>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4850      	ldr	r0, [pc, #320]	; (8000f44 <main+0x198>)
 8000e02:	f001 fd08 	bl	8002816 <HAL_DAC_Start>
  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8000e06:	2201      	movs	r2, #1
 8000e08:	494f      	ldr	r1, [pc, #316]	; (8000f48 <main+0x19c>)
 8000e0a:	484b      	ldr	r0, [pc, #300]	; (8000f38 <main+0x18c>)
 8000e0c:	f003 fabb 	bl	8004386 <HAL_UART_Receive_IT>

	  /********************************* TOP SLOT START ********************************/

	  /* Put here the code to be executed in all cycles before the state machine */

	  if (samplingDelay >= appGetSamplingDelay(&app))
 8000e10:	484b      	ldr	r0, [pc, #300]	; (8000f40 <main+0x194>)
 8000e12:	f7ff ff3b 	bl	8000c8c <appGetSamplingDelay>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b4c      	ldr	r3, [pc, #304]	; (8000f4c <main+0x1a0>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d81b      	bhi.n	8000e5a <main+0xae>
	  {
		  HAL_ADC_Start(&hadc1);
 8000e22:	484b      	ldr	r0, [pc, #300]	; (8000f50 <main+0x1a4>)
 8000e24:	f000 fff8 	bl	8001e18 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	4848      	ldr	r0, [pc, #288]	; (8000f50 <main+0x1a4>)
 8000e2e:	f001 f8f8 	bl	8002022 <HAL_ADC_PollForConversion>
		  uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000e32:	4847      	ldr	r0, [pc, #284]	; (8000f50 <main+0x1a4>)
 8000e34:	f001 f980 	bl	8002138 <HAL_ADC_GetValue>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	80fb      	strh	r3, [r7, #6]
		  HAL_ADC_Stop(&hadc1);
 8000e3c:	4844      	ldr	r0, [pc, #272]	; (8000f50 <main+0x1a4>)
 8000e3e:	f001 f8bd 	bl	8001fbc <HAL_ADC_Stop>
		  appSetProcessVariable(&app, adcValue);
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	4619      	mov	r1, r3
 8000e46:	483e      	ldr	r0, [pc, #248]	; (8000f40 <main+0x194>)
 8000e48:	f7ff fc0a 	bl	8000660 <appSetProcessVariable>
		  appSetProcessVariableReadyToSend(&app, TRUE);
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	483c      	ldr	r0, [pc, #240]	; (8000f40 <main+0x194>)
 8000e50:	f7ff fed5 	bl	8000bfe <appSetProcessVariableReadyToSend>
		  samplingDelay = 0;
 8000e54:	4b3d      	ldr	r3, [pc, #244]	; (8000f4c <main+0x1a0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	801a      	strh	r2, [r3, #0]
	  }

	  if (controllerDelay >= appGetPidComputeDelay(&app))
 8000e5a:	4839      	ldr	r0, [pc, #228]	; (8000f40 <main+0x194>)
 8000e5c:	f7ff ff23 	bl	8000ca6 <appGetPidComputeDelay>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b3b      	ldr	r3, [pc, #236]	; (8000f54 <main+0x1a8>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d80e      	bhi.n	8000e8a <main+0xde>
	  {
		  appRunController(&app, hdac);
 8000e6c:	4b35      	ldr	r3, [pc, #212]	; (8000f44 <main+0x198>)
 8000e6e:	466c      	mov	r4, sp
 8000e70:	f103 020c 	add.w	r2, r3, #12
 8000e74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e78:	e884 0003 	stmia.w	r4, {r0, r1}
 8000e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e7e:	4830      	ldr	r0, [pc, #192]	; (8000f40 <main+0x194>)
 8000e80:	f7ff fbcb 	bl	800061a <appRunController>
		  controllerDelay = 0;
 8000e84:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <main+0x1a8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	801a      	strh	r2, [r3, #0]

	  /* ============================================================================= */

	  /****************************** STATE MACHINE START ******************************/

	  switch (stateMachine)
 8000e8a:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <main+0x1ac>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d84a      	bhi.n	8000f28 <main+0x17c>
 8000e92:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <main+0xec>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000ead 	.word	0x08000ead
 8000e9c:	08000ec9 	.word	0x08000ec9
 8000ea0:	08000ed7 	.word	0x08000ed7
 8000ea4:	08000ee5 	.word	0x08000ee5
 8000ea8:	08000f0b 	.word	0x08000f0b
	  {
	  	  case 0:
	  		  if (decodeDataPacketDelay >= DELAY_10_MILISECONDS)
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <main+0x1b0>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	2b63      	cmp	r3, #99	; 0x63
 8000eb2:	d905      	bls.n	8000ec0 <main+0x114>
	  		  {
	  			appTryDecodeReceivedDataPacket(&app);
 8000eb4:	4822      	ldr	r0, [pc, #136]	; (8000f40 <main+0x194>)
 8000eb6:	f7ff fc04 	bl	80006c2 <appTryDecodeReceivedDataPacket>
	  			decodeDataPacketDelay = 0;
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <main+0x1b0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  stateMachine = 1;
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <main+0x1ac>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000ec6:	e033      	b.n	8000f30 <main+0x184>

		  case 1:
			  appTryExtractCommandAndPayloadFromDecodedDataPacket(&app);
 8000ec8:	481d      	ldr	r0, [pc, #116]	; (8000f40 <main+0x194>)
 8000eca:	f7ff fc07 	bl	80006dc <appTryExtractCommandAndPayloadFromDecodedDataPacket>
			  stateMachine = 2;
 8000ece:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <main+0x1ac>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	701a      	strb	r2, [r3, #0]
			  break;
 8000ed4:	e02c      	b.n	8000f30 <main+0x184>

		  case 2:
			  appTryDecodeExtractedCommand(&app);
 8000ed6:	481a      	ldr	r0, [pc, #104]	; (8000f40 <main+0x194>)
 8000ed8:	f7ff fc3b 	bl	8000752 <appTryDecodeExtractedCommand>
			  stateMachine = 3;
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <main+0x1ac>)
 8000ede:	2203      	movs	r2, #3
 8000ee0:	701a      	strb	r2, [r3, #0]
			  break;
 8000ee2:	e025      	b.n	8000f30 <main+0x184>

		  case 3:
			  if (blinkLedDelay >= appGetBlinkDelay(&app))
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <main+0x1b4>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	461c      	mov	r4, r3
 8000eea:	4815      	ldr	r0, [pc, #84]	; (8000f40 <main+0x194>)
 8000eec:	f7ff fb89 	bl	8000602 <appGetBlinkDelay>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	429c      	cmp	r4, r3
 8000ef4:	d305      	bcc.n	8000f02 <main+0x156>
			  {
				  appExecuteBlinkLed(&app);
 8000ef6:	4812      	ldr	r0, [pc, #72]	; (8000f40 <main+0x194>)
 8000ef8:	f7ff fb73 	bl	80005e2 <appExecuteBlinkLed>
				  blinkLedDelay = 0;
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <main+0x1b4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 4;
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <main+0x1ac>)
 8000f04:	2204      	movs	r2, #4
 8000f06:	701a      	strb	r2, [r3, #0]
			  break;
 8000f08:	e012      	b.n	8000f30 <main+0x184>

		  case 4:
			  if (sendDataDelay1 >= DELAY_100_MILISECONDS)
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <main+0x1b8>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f12:	d305      	bcc.n	8000f20 <main+0x174>
			  {
				  appTrySendData(&app);
 8000f14:	480a      	ldr	r0, [pc, #40]	; (8000f40 <main+0x194>)
 8000f16:	f7ff fe3b 	bl	8000b90 <appTrySendData>
				  sendDataDelay1 = 0;
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <main+0x1b8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 0;
 8000f20:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <main+0x1ac>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
			  break;
 8000f26:	e003      	b.n	8000f30 <main+0x184>

		  default:
			  stateMachine = 0;
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <main+0x1ac>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
			  break;
 8000f2e:	bf00      	nop
	  if (samplingDelay >= appGetSamplingDelay(&app))
 8000f30:	e76e      	b.n	8000e10 <main+0x64>
 8000f32:	bf00      	nop
 8000f34:	20000084 	.word	0x20000084
 8000f38:	200000cc 	.word	0x200000cc
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	20000160 	.word	0x20000160
 8000f44:	20000070 	.word	0x20000070
 8000f48:	20000154 	.word	0x20000154
 8000f4c:	2000015c 	.word	0x2000015c
 8000f50:	20000028 	.word	0x20000028
 8000f54:	2000015e 	.word	0x2000015e
 8000f58:	20000280 	.word	0x20000280
 8000f5c:	20000156 	.word	0x20000156
 8000f60:	20000158 	.word	0x20000158
 8000f64:	2000015a 	.word	0x2000015a

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b094      	sub	sp, #80	; 0x50
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	2234      	movs	r2, #52	; 0x34
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f004 faca 	bl	8005510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <SystemClock_Config+0xdc>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	4a2b      	ldr	r2, [pc, #172]	; (8001044 <SystemClock_Config+0xdc>)
 8000f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <SystemClock_Config+0xdc>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <SystemClock_Config+0xe0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a25      	ldr	r2, [pc, #148]	; (8001048 <SystemClock_Config+0xe0>)
 8000fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <SystemClock_Config+0xe0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fdc:	23b4      	movs	r3, #180	; 0xb4
 8000fde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 fa45 	bl	8003480 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ffc:	f000 f982 	bl	8001304 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001000:	f001 ff2a 	bl	8002e58 <HAL_PWREx_EnableOverDrive>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800100a:	f000 f97b 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001012:	2302      	movs	r3, #2
 8001014:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800101a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800101e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001024:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	2105      	movs	r1, #5
 800102c:	4618      	mov	r0, r3
 800102e:	f001 ff63 	bl	8002ef8 <HAL_RCC_ClockConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001038:	f000 f964 	bl	8001304 <Error_Handler>
  }
}
 800103c:	bf00      	nop
 800103e:	3750      	adds	r7, #80	; 0x50
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000

0800104c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	463b      	mov	r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MX_ADC1_Init+0x98>)
 8001060:	4a21      	ldr	r2, [pc, #132]	; (80010e8 <MX_ADC1_Init+0x9c>)
 8001062:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_ADC1_Init+0x98>)
 8001066:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800106a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_ADC1_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_ADC1_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_ADC1_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_ADC1_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_ADC1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_ADC1_Init+0x98>)
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <MX_ADC1_Init+0xa0>)
 8001090:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_ADC1_Init+0x98>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_ADC1_Init+0x98>)
 800109a:	2201      	movs	r2, #1
 800109c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_ADC1_Init+0x98>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_ADC1_Init+0x98>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <MX_ADC1_Init+0x98>)
 80010ae:	f000 fe6f 	bl	8001d90 <HAL_ADC_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010b8:	f000 f924 	bl	8001304 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010bc:	2301      	movs	r3, #1
 80010be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_ADC1_Init+0x98>)
 80010ce:	f001 f841 	bl	8002154 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010d8:	f000 f914 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000028 	.word	0x20000028
 80010e8:	40012000 	.word	0x40012000
 80010ec:	0f000001 	.word	0x0f000001

080010f0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_DAC_Init+0x4c>)
 8001100:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <MX_DAC_Init+0x50>)
 8001102:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_DAC_Init+0x4c>)
 8001106:	f001 fb64 	bl	80027d2 <HAL_DAC_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001110:	f000 f8f8 	bl	8001304 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001114:	2300      	movs	r3, #0
 8001116:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <MX_DAC_Init+0x4c>)
 8001124:	f001 fbee 	bl	8002904 <HAL_DAC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800112e:	f000 f8e9 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000070 	.word	0x20000070
 8001140:	40007400 	.word	0x40007400

08001144 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_TIM9_Init+0x6c>)
 8001158:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <MX_TIM9_Init+0x70>)
 800115a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_TIM9_Init+0x6c>)
 800115e:	2204      	movs	r2, #4
 8001160:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_TIM9_Init+0x6c>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3665;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_TIM9_Init+0x6c>)
 800116a:	f640 6251 	movw	r2, #3665	; 0xe51
 800116e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_TIM9_Init+0x6c>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_TIM9_Init+0x6c>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_TIM9_Init+0x6c>)
 800117e:	f002 fc1d 	bl	80039bc <HAL_TIM_Base_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001188:	f000 f8bc 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001192:	463b      	mov	r3, r7
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_TIM9_Init+0x6c>)
 8001198:	f002 fdd8 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80011a2:	f000 f8af 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000084 	.word	0x20000084
 80011b4:	40014000 	.word	0x40014000

080011b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_USART2_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f002 ffea 	bl	80041c8 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fa:	f000 f883 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200000cc 	.word	0x200000cc
 8001208:	40004400 	.word	0x40004400

0800120c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <MX_USART3_UART_Init+0x50>)
 8001214:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_USART3_UART_Init+0x4c>)
 8001244:	f002 ffc0 	bl	80041c8 <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800124e:	f000 f859 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000110 	.word	0x20000110
 800125c:	40004800 	.word	0x40004800

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_GPIO_Init+0x98>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a1e      	ldr	r2, [pc, #120]	; (80012f8 <MX_GPIO_Init+0x98>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_GPIO_Init+0x98>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <MX_GPIO_Init+0x98>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <MX_GPIO_Init+0x98>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <MX_GPIO_Init+0x98>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2120      	movs	r1, #32
 80012b2:	4812      	ldr	r0, [pc, #72]	; (80012fc <MX_GPIO_Init+0x9c>)
 80012b4:	f001 fd9c 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80012b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <MX_GPIO_Init+0xa0>)
 80012ce:	f001 fbfb 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012d2:	2320      	movs	r3, #32
 80012d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4619      	mov	r1, r3
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_GPIO_Init+0x9c>)
 80012ea:	f001 fbed 	bl	8002ac8 <HAL_GPIO_Init>

}
 80012ee:	bf00      	nop
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020800 	.word	0x40020800

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <HAL_MspInit+0x4c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_MspInit+0x4c>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a17      	ldr	r2, [pc, #92]	; (80013dc <HAL_ADC_MspInit+0x7c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d127      	bne.n	80013d2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_ADC_MspInit+0x80>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a15      	ldr	r2, [pc, #84]	; (80013e0 <HAL_ADC_MspInit+0x80>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_ADC_MspInit+0x80>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_ADC_MspInit+0x80>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <HAL_ADC_MspInit+0x80>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_ADC_MspInit+0x80>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CURRENT_SENSE_Pin;
 80013ba:	2302      	movs	r3, #2
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013be:	2303      	movs	r3, #3
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_SENSE_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <HAL_ADC_MspInit+0x84>)
 80013ce:	f001 fb7b 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40012000 	.word	0x40012000
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000

080013e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_DAC_MspInit+0x7c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d127      	bne.n	800145a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_DAC_MspInit+0x80>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a15      	ldr	r2, [pc, #84]	; (8001468 <HAL_DAC_MspInit+0x80>)
 8001414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_DAC_MspInit+0x80>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_DAC_MspInit+0x80>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <HAL_DAC_MspInit+0x80>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <HAL_DAC_MspInit+0x80>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = CURRENT_CTRL_Pin;
 8001442:	2310      	movs	r3, #16
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001446:	2303      	movs	r3, #3
 8001448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_CTRL_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_DAC_MspInit+0x84>)
 8001456:	f001 fb37 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40007400 	.word	0x40007400
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_TIM_Base_MspInit+0x48>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d115      	bne.n	80014ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_TIM_Base_MspInit+0x4c>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <HAL_TIM_Base_MspInit+0x4c>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_TIM_Base_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2018      	movs	r0, #24
 80014a4:	f001 f95f 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80014a8:	2018      	movs	r0, #24
 80014aa:	f001 f978 	bl	800279e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40014000 	.word	0x40014000
 80014bc:	40023800 	.word	0x40023800

080014c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a36      	ldr	r2, [pc, #216]	; (80015b8 <HAL_UART_MspInit+0xf8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d134      	bne.n	800154c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	4b35      	ldr	r3, [pc, #212]	; (80015bc <HAL_UART_MspInit+0xfc>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	4a34      	ldr	r2, [pc, #208]	; (80015bc <HAL_UART_MspInit+0xfc>)
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40
 80014f2:	4b32      	ldr	r3, [pc, #200]	; (80015bc <HAL_UART_MspInit+0xfc>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <HAL_UART_MspInit+0xfc>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a2d      	ldr	r2, [pc, #180]	; (80015bc <HAL_UART_MspInit+0xfc>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_UART_MspInit+0xfc>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800151a:	230c      	movs	r3, #12
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800152a:	2307      	movs	r3, #7
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4822      	ldr	r0, [pc, #136]	; (80015c0 <HAL_UART_MspInit+0x100>)
 8001536:	f001 fac7 	bl	8002ac8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2026      	movs	r0, #38	; 0x26
 8001540:	f001 f911 	bl	8002766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001544:	2026      	movs	r0, #38	; 0x26
 8001546:	f001 f92a 	bl	800279e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800154a:	e031      	b.n	80015b0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <HAL_UART_MspInit+0x104>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d12c      	bne.n	80015b0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_UART_MspInit+0xfc>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a17      	ldr	r2, [pc, #92]	; (80015bc <HAL_UART_MspInit+0xfc>)
 8001560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_UART_MspInit+0xfc>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_UART_MspInit+0xfc>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a10      	ldr	r2, [pc, #64]	; (80015bc <HAL_UART_MspInit+0xfc>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_UART_MspInit+0xfc>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800158e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a0:	2307      	movs	r3, #7
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <HAL_UART_MspInit+0x108>)
 80015ac:	f001 fa8c 	bl	8002ac8 <HAL_GPIO_Init>
}
 80015b0:	bf00      	nop
 80015b2:	3730      	adds	r7, #48	; 0x30
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40004400 	.word	0x40004400
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40004800 	.word	0x40004800
 80015c8:	40020800 	.word	0x40020800

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <NMI_Handler+0x4>

080015d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <MemManage_Handler+0x4>

080015de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001618:	f000 fb9a 	bl	8001d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001626:	f002 fa89 	bl	8003b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000084 	.word	0x20000084

08001634 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <USART2_IRQHandler+0x10>)
 800163a:	f002 fed5 	bl	80043e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200000cc 	.word	0x200000cc

08001648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001672:	490e      	ldr	r1, [pc, #56]	; (80016ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800167c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001688:	4c0b      	ldr	r4, [pc, #44]	; (80016b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001696:	f7ff ffd7 	bl	8001648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169a:	f003 ff07 	bl	80054ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169e:	f7ff fb85 	bl	8000dac <main>
  bx  lr    
 80016a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016b0:	08005660 	.word	0x08005660
  ldr r2, =_sbss
 80016b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016b8:	20000288 	.word	0x20000288

080016bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>

080016be <genCrc>:

/**
  * Calcula o crc8 entre o range passado como parametro.
  */
uint8_t genCrc(uint8_t buffer[], uint16_t qtd_de_bytes_no_pacote)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	73bb      	strb	r3, [r7, #14]
 80016d6:	e00d      	b.n	80016f4 <genCrc+0x36>
    {
      crc = calcCrc8(crc, buffer[i]);
 80016d8:	7bbb      	ldrb	r3, [r7, #14]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	781a      	ldrb	r2, [r3, #0]
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 f80f 	bl	8001708 <calcCrc8>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 80016ee:	7bbb      	ldrb	r3, [r7, #14]
 80016f0:	3301      	adds	r3, #1
 80016f2:	73bb      	strb	r3, [r7, #14]
 80016f4:	7bbb      	ldrb	r3, [r7, #14]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	887a      	ldrh	r2, [r7, #2]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d8ec      	bhi.n	80016d8 <genCrc+0x1a>
    }

  return crc;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <calcCrc8>:

/**
  * Funcao que calcula o CRC8
  */
static uint8_t calcCrc8(uint8_t crc3, uint8_t b)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	460a      	mov	r2, r1
 8001712:	71fb      	strb	r3, [r7, #7]
 8001714:	4613      	mov	r3, r2
 8001716:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
    pos = (((crc3 & 0xff) ^ b) & 0xff);
 800171c:	79fa      	ldrb	r2, [r7, #7]
 800171e:	79bb      	ldrb	r3, [r7, #6]
 8001720:	4053      	eors	r3, r2
 8001722:	73fb      	strb	r3, [r7, #15]

    return ((crc3) >> 8) ^ table[pos];
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	121b      	asrs	r3, r3, #8
 8001728:	b25a      	sxtb	r2, r3
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	4905      	ldr	r1, [pc, #20]	; (8001744 <calcCrc8+0x3c>)
 800172e:	5ccb      	ldrb	r3, [r1, r3]
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4053      	eors	r3, r2
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2db      	uxtb	r3, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	08005550 	.word	0x08005550

08001748 <dataPacketRxInit>:
 */

#include "dataPacketRx.h"

void dataPacketRxInit(DataPacketRx *dataPacketRx, uint8_t start_1, uint8_t start_2)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
 8001754:	4613      	mov	r3, r2
 8001756:	70bb      	strb	r3, [r7, #2]
	dataPacketRx->start_1 = start_1;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	701a      	strb	r2, [r3, #0]
	dataPacketRx->start_2 = start_2;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	78ba      	ldrb	r2, [r7, #2]
 8001762:	705a      	strb	r2, [r3, #1]
	dataPacketRx->command = 0x00;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	709a      	strb	r2, [r3, #2]
	dataPacketRx->payloadDataLength = 0x00;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	70da      	strb	r2, [r3, #3]
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3304      	adds	r3, #4
 8001774:	2219      	movs	r2, #25
 8001776:	2100      	movs	r1, #0
 8001778:	4618      	mov	r0, r3
 800177a:	f003 fec9 	bl	8005510 <memset>
	dataPacketRx->crc8 = 0x00;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	775a      	strb	r2, [r3, #29]
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	331e      	adds	r3, #30
 8001788:	221e      	movs	r2, #30
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f003 febf 	bl	8005510 <memset>
	dataPacketRx->dataPacketLength = 0x00;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketRx->currentRxByteIndex = 0;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	87da      	strh	r2, [r3, #62]	; 0x3e
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	dataPacketRx->containsStarterBytes = FALSE;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dataPacketRx->starterByteIndex = 0;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <dataPacketRxAppend>:

void dataPacketRxAppend(DataPacketRx *dataPacketRx, uint8_t newByte)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacket[dataPacketRx->currentRxByteIndex] = newByte;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017ce:	461a      	mov	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	779a      	strb	r2, [r3, #30]
	dataPacketRx->currentRxByteIndex++;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017dc:	3301      	adds	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	87da      	strh	r2, [r3, #62]	; 0x3e
	dataPacketRx->dataPacketLength++;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80017e8:	3301      	adds	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	879a      	strh	r2, [r3, #60]	; 0x3c

	if (dataPacketRx->currentRxByteIndex > QTY_PACKET_RX_BYTES)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017f4:	2b1e      	cmp	r3, #30
 80017f6:	d908      	bls.n	800180a <dataPacketRxAppend+0x4c>
	{
		dataPacketRxClear(dataPacketRx);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f8bf 	bl	800197c <dataPacketRxClear>
		dataPacketRx->currentRxByteIndex = 0;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	87da      	strh	r2, [r3, #62]	; 0x3e
		dataPacketRx->dataPacketLength = 0;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	879a      	strh	r2, [r3, #60]	; 0x3c
	}
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <dataPacketRxDecode>:

void dataPacketRxDecode(DataPacketRx *dataPacketRx)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	if (dataPacketRx->containsStarterBytes == TRUE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001820:	2b01      	cmp	r3, #1
 8001822:	d174      	bne.n	800190e <dataPacketRxDecode+0xfc>
	{
		dataPacketRxSetCommand(dataPacketRx, dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 2]);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800182a:	3302      	adds	r3, #2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	4413      	add	r3, r2
 8001830:	7f9b      	ldrb	r3, [r3, #30]
 8001832:	4619      	mov	r1, r3
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f8d2 	bl	80019de <dataPacketRxSetCommand>
		dataPacketRx->payloadDataLength = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 3];
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001840:	3303      	adds	r3, #3
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	7f9a      	ldrb	r2, [r3, #30]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	70da      	strb	r2, [r3, #3]

		if (dataPacketRx->payloadDataLength == 0)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	78db      	ldrb	r3, [r3, #3]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d122      	bne.n	800189a <dataPacketRxDecode+0x88>
		{
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 4];
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800185a:	3304      	adds	r3, #4
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	4413      	add	r3, r2
 8001860:	7f9b      	ldrb	r3, [r3, #30]
 8001862:	733b      	strb	r3, [r7, #12]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, 4);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	331e      	adds	r3, #30
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 800186e:	4413      	add	r3, r2
 8001870:	2104      	movs	r1, #4
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff23 	bl	80016be <genCrc>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	775a      	strb	r2, [r3, #29]

			if (dataPacketRx->crc8 == receivedCrc8)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7f5b      	ldrb	r3, [r3, #29]
 8001884:	7b3a      	ldrb	r2, [r7, #12]
 8001886:	429a      	cmp	r2, r3
 8001888:	d174      	bne.n	8001974 <dataPacketRxDecode+0x162>
			{
				dataPacketRx->currentRxByteIndex = 0;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	87da      	strh	r2, [r3, #62]	; 0x3e
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			{
				dataPacketRxClear(dataPacketRx);
			}
		}
	}
}
 8001898:	e06c      	b.n	8001974 <dataPacketRxDecode+0x162>
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + dataPacketRx->payloadDataLength + 4];
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80018a0:	461a      	mov	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	78db      	ldrb	r3, [r3, #3]
 80018a6:	4413      	add	r3, r2
 80018a8:	3304      	adds	r3, #4
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	7f9b      	ldrb	r3, [r3, #30]
 80018b0:	737b      	strb	r3, [r7, #13]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, dataPacketRx->payloadDataLength + 4);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	331e      	adds	r3, #30
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80018bc:	441a      	add	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	78db      	ldrb	r3, [r3, #3]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3304      	adds	r3, #4
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4619      	mov	r1, r3
 80018ca:	4610      	mov	r0, r2
 80018cc:	f7ff fef7 	bl	80016be <genCrc>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	775a      	strb	r2, [r3, #29]
			if (dataPacketRx->crc8 == receivedCrc8)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7f5b      	ldrb	r3, [r3, #29]
 80018dc:	7b7a      	ldrb	r2, [r7, #13]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d148      	bne.n	8001974 <dataPacketRxDecode+0x162>
				dataPacketRxSetPayloadData(dataPacketRx, dataPacketRx->dataPacket + dataPacketRx->starterByteIndex + 4, dataPacketRx->payloadDataLength);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f103 021e 	add.w	r2, r3, #30
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80018ee:	3304      	adds	r3, #4
 80018f0:	18d1      	adds	r1, r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	78db      	ldrb	r3, [r3, #3]
 80018f6:	461a      	mov	r2, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f896 	bl	8001a2a <dataPacketRxSetPayloadData>
				dataPacketRx->currentRxByteIndex = 0;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	87da      	strh	r2, [r3, #62]	; 0x3e
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 800190c:	e032      	b.n	8001974 <dataPacketRxDecode+0x162>
		if (dataPacketRx->dataPacketLength >= MIN_PACKET_RX_BYTES)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001912:	2b04      	cmp	r3, #4
 8001914:	d92e      	bls.n	8001974 <dataPacketRxDecode+0x162>
			uint16_t index = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	81fb      	strh	r3, [r7, #14]
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 800191a:	2300      	movs	r3, #0
 800191c:	81fb      	strh	r3, [r7, #14]
 800191e:	e01c      	b.n	800195a <dataPacketRxDecode+0x148>
				if ((dataPacketRx->dataPacket[index] == dataPacketRx->start_1) && (dataPacketRx->dataPacket[index+1] == dataPacketRx->start_2))
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	7f9a      	ldrb	r2, [r3, #30]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d111      	bne.n	8001954 <dataPacketRxDecode+0x142>
 8001930:	89fb      	ldrh	r3, [r7, #14]
 8001932:	3301      	adds	r3, #1
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	7f9a      	ldrb	r2, [r3, #30]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	785b      	ldrb	r3, [r3, #1]
 800193e:	429a      	cmp	r2, r3
 8001940:	d108      	bne.n	8001954 <dataPacketRxDecode+0x142>
					dataPacketRx->containsStarterBytes = TRUE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
					dataPacketRx->starterByteIndex = index;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	89fa      	ldrh	r2, [r7, #14]
 800194e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
					break;
 8001952:	e007      	b.n	8001964 <dataPacketRxDecode+0x152>
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 8001954:	89fb      	ldrh	r3, [r7, #14]
 8001956:	3301      	adds	r3, #1
 8001958:	81fb      	strh	r3, [r7, #14]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800195e:	89fa      	ldrh	r2, [r7, #14]
 8001960:	429a      	cmp	r2, r3
 8001962:	d3dd      	bcc.n	8001920 <dataPacketRxDecode+0x10e>
			if (dataPacketRx->containsStarterBytes == FALSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <dataPacketRxDecode+0x162>
				dataPacketRxClear(dataPacketRx);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f804 	bl	800197c <dataPacketRxClear>
}
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <dataPacketRxClear>:

void dataPacketRxClear(DataPacketRx *dataPacketRx)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	dataPacketRx->containsStarterBytes = FALSE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dataPacketRx->currentRxByteIndex = 0;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	87da      	strh	r2, [r3, #62]	; 0x3e
	dataPacketRx->dataPacketLength = 0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketRx->payloadDataLength = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	70da      	strb	r2, [r3, #3]
	dataPacketRx->command = 0x00;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	709a      	strb	r2, [r3, #2]
	dataPacketRx->crc8 = 0x00;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	775a      	strb	r2, [r3, #29]
	dataPacketRx->starterByteIndex = 0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3304      	adds	r3, #4
 80019be:	2219      	movs	r2, #25
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fda4 	bl	8005510 <memset>
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	331e      	adds	r3, #30
 80019cc:	221e      	movs	r2, #30
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 fd9d 	bl	8005510 <memset>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <dataPacketRxSetCommand>:
	dataPacketRx->crc8 = 0x00;
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
}

void dataPacketRxSetCommand(DataPacketRx *dataPacketRx, uint8_t command)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	if ((command < 0x01) || (command > 0xFE))
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <dataPacketRxSetCommand+0x28>
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	2bff      	cmp	r3, #255	; 0xff
 80019fc:	d003      	beq.n	8001a06 <dataPacketRxSetCommand+0x28>
	{
		return;
	}

	dataPacketRx->command = command;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	709a      	strb	r2, [r3, #2]
 8001a04:	e000      	b.n	8001a08 <dataPacketRxSetCommand+0x2a>
		return;
 8001a06:	bf00      	nop
}
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <dataPacketRxGetCommand>:

uint8_t dataPacketRxGetCommand(DataPacketRx *dataPacketRx)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
	return dataPacketRx->command;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	789b      	ldrb	r3, [r3, #2]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <dataPacketRxSetPayloadData>:

void dataPacketRxSetPayloadData(DataPacketRx *dataPacketRx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71fb      	strb	r3, [r7, #7]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	memcpy(dataPacketRx->payloadData, payloadData, payloadDataLength);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3304      	adds	r3, #4
 8001a44:	79fa      	ldrb	r2, [r7, #7]
 8001a46:	68b9      	ldr	r1, [r7, #8]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 fd53 	bl	80054f4 <memcpy>
	dataPacketRx->payloadDataLength = payloadDataLength;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	79fa      	ldrb	r2, [r7, #7]
 8001a52:	70da      	strb	r2, [r3, #3]
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <dataPacketRxGetPayloadData>:

uint8_t *dataPacketRxGetPayloadData(DataPacketRx *dataPacketRx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadData;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3304      	adds	r3, #4
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <dataPacketRxGetPayloadDataLength>:

uint8_t dataPacketRxGetPayloadDataLength(DataPacketRx *dataPacketRx)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadDataLength;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	78db      	ldrb	r3, [r3, #3]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <dataPacketRxGetDataPacketStatus>:
{
	return dataPacketRx->dataPacketLength;
}

DataPacketRxStatus dataPacketRxGetDataPacketStatus(DataPacketRx *dataPacketRx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	return dataPacketRx->dataPacketRxStatus;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <dataPacketTxInit>:
 */

#include "dataPacketTx.h"

void dataPacketTxInit(DataPacketTx *dataPacketTx, uint8_t start_1, uint8_t start_2)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70fb      	strb	r3, [r7, #3]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	70bb      	strb	r3, [r7, #2]
	dataPacketTx->start_1 = start_1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	701a      	strb	r2, [r3, #0]
	dataPacketTx->start_2 = start_2;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	78ba      	ldrb	r2, [r7, #2]
 8001ac0:	705a      	strb	r2, [r3, #1]
	dataPacketTx->command = 0x00;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	709a      	strb	r2, [r3, #2]
	dataPacketTx->payloadDataLength = 0x00;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	70da      	strb	r2, [r3, #3]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	2219      	movs	r2, #25
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fd1a 	bl	8005510 <memset>
	dataPacketTx->crc8 = 0x00;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	775a      	strb	r2, [r3, #29]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	331e      	adds	r3, #30
 8001ae6:	221e      	movs	r2, #30
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fd10 	bl	8005510 <memset>
	dataPacketTx->dataPacketLength = 0x00;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <dataPacketTxMount>:

void dataPacketTxMount(DataPacketTx *dataPacketTx)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacket[0] = dataPacketTx->start_1;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	779a      	strb	r2, [r3, #30]
	dataPacketTx->dataPacket[1] = dataPacketTx->start_2;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	785a      	ldrb	r2, [r3, #1]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	77da      	strb	r2, [r3, #31]
	dataPacketTx->dataPacket[2] = dataPacketTx->command;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	789a      	ldrb	r2, [r3, #2]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f883 2020 	strb.w	r2, [r3, #32]
	dataPacketTx->dataPacket[3] = dataPacketTx->payloadDataLength;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	78da      	ldrb	r2, [r3, #3]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	memcpy(dataPacketTx->dataPacket + 4, dataPacketTx->payloadData, dataPacketTx->payloadDataLength);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	331e      	adds	r3, #30
 8001b36:	1d18      	adds	r0, r3, #4
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	1d19      	adds	r1, r3, #4
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	78db      	ldrb	r3, [r3, #3]
 8001b40:	461a      	mov	r2, r3
 8001b42:	f003 fcd7 	bl	80054f4 <memcpy>
	dataPacketTx->dataPacketLength = dataPacketTx->payloadDataLength + 4 + 1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	78db      	ldrb	r3, [r3, #3]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3305      	adds	r3, #5
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->crc8 = genCrc(dataPacketTx->dataPacket, dataPacketTx->dataPacketLength - 1);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f103 021e 	add.w	r2, r3, #30
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4619      	mov	r1, r3
 8001b64:	4610      	mov	r0, r2
 8001b66:	f7ff fdaa 	bl	80016be <genCrc>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	775a      	strb	r2, [r3, #29]
	dataPacketTx->dataPacket[dataPacketTx->payloadDataLength + 4] = dataPacketTx->crc8;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	78db      	ldrb	r3, [r3, #3]
 8001b76:	3304      	adds	r3, #4
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	7f51      	ldrb	r1, [r2, #29]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	460a      	mov	r2, r1
 8001b82:	779a      	strb	r2, [r3, #30]
	dataPacketTx->dataPacketTxStatus = VALID_TX_DATA_PACKET;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <dataPacketTxUartSend>:

void dataPacketTxUartSend(DataPacketTx *dataPacketTx, UART_HandleTypeDef huart)
{
 8001b94:	b084      	sub	sp, #16
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	f107 0014 	add.w	r0, r7, #20
 8001ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (dataPacketTx->dataPacketTxStatus == VALID_TX_DATA_PACKET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10a      	bne.n	8001bc6 <dataPacketTxUartSend+0x32>
	{
		HAL_UART_Transmit(&huart, dataPacketTx->dataPacket, dataPacketTx->dataPacketLength, HAL_MAX_DELAY);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f103 011e 	add.w	r1, r3, #30
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8001bba:	f107 0014 	add.w	r0, r7, #20
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	f002 fb4e 	bl	8004262 <HAL_UART_Transmit>
	}
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bd0:	b004      	add	sp, #16
 8001bd2:	4770      	bx	lr

08001bd4 <dataPacketTxClear>:

void dataPacketTxClear(DataPacketTx *dataPacketTx)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	dataPacketTx->dataPacketLength = 0;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->crc8 = 0x00;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	775a      	strb	r2, [r3, #29]
	dataPacketTx->command = 0x00;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	331e      	adds	r3, #30
 8001bfa:	221e      	movs	r2, #30
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 fc86 	bl	8005510 <memset>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <dataPacketTxPayloadDataClear>:

void dataPacketTxPayloadDataClear(DataPacketTx *dataPacketTx)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	dataPacketTx->dataPacketLength = 0;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->crc8 = 0x00;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	775a      	strb	r2, [r3, #29]
	dataPacketTx->command = 0x00;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2219      	movs	r2, #25
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 fc6a 	bl	8005510 <memset>
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <dataPacketTxSetCommand>:

void dataPacketTxSetCommand(DataPacketTx *dataPacketTx, uint8_t command)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	70fb      	strb	r3, [r7, #3]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	if ((command < 0x01) || (command > 0xFE))
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <dataPacketTxSetCommand+0x28>
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	2bff      	cmp	r3, #255	; 0xff
 8001c62:	d003      	beq.n	8001c6c <dataPacketTxSetCommand+0x28>
	{
		return;
	}

	dataPacketTx->command = command;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	78fa      	ldrb	r2, [r7, #3]
 8001c68:	709a      	strb	r2, [r3, #2]
 8001c6a:	e000      	b.n	8001c6e <dataPacketTxSetCommand+0x2a>
		return;
 8001c6c:	bf00      	nop
}
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <dataPacketTxSetPayloadData>:
{
	return dataPacketTx->command;
}

void dataPacketTxSetPayloadData(DataPacketTx *dataPacketTx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	4613      	mov	r3, r2
 8001c84:	71fb      	strb	r3, [r7, #7]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	memcpy(dataPacketTx->payloadData, payloadData, payloadDataLength);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3304      	adds	r3, #4
 8001c92:	79fa      	ldrb	r2, [r7, #7]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 fc2c 	bl	80054f4 <memcpy>
	dataPacketTx->payloadDataLength = payloadDataLength;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	79fa      	ldrb	r2, [r7, #7]
 8001ca0:	70da      	strb	r2, [r3, #3]
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_Init+0x40>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <HAL_Init+0x40>)
 8001cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <HAL_Init+0x40>)
 8001cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	; (8001cec <HAL_Init+0x40>)
 8001cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	f000 fd3b 	bl	8002750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cda:	200f      	movs	r0, #15
 8001cdc:	f000 f808 	bl	8001cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce0:	f7ff fb16 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023c00 	.word	0x40023c00

08001cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_InitTick+0x54>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x58>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4619      	mov	r1, r3
 8001d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fd53 	bl	80027ba <HAL_SYSTICK_Config>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00e      	b.n	8001d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b0f      	cmp	r3, #15
 8001d22:	d80a      	bhi.n	8001d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d24:	2200      	movs	r2, #0
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f000 fd1b 	bl	8002766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d30:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <HAL_InitTick+0x5c>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e000      	b.n	8001d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	20000004 	.word	0x20000004

08001d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_IncTick+0x20>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_IncTick+0x24>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <HAL_IncTick+0x24>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000284 	.word	0x20000284

08001d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <HAL_GetTick+0x14>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000284 	.word	0x20000284

08001d90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e033      	b.n	8001e0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fad6 	bl	8001360 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dd6:	f023 0302 	bic.w	r3, r3, #2
 8001dda:	f043 0202 	orr.w	r2, r3, #2
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fae8 	bl	80023b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f023 0303 	bic.w	r3, r3, #3
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
 8001dfe:	e001      	b.n	8001e04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_Start+0x1a>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e0b2      	b.n	8001f98 <HAL_ADC_Start+0x180>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d018      	beq.n	8001e7a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e58:	4b52      	ldr	r3, [pc, #328]	; (8001fa4 <HAL_ADC_Start+0x18c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a52      	ldr	r2, [pc, #328]	; (8001fa8 <HAL_ADC_Start+0x190>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	0c9a      	lsrs	r2, r3, #18
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e6c:	e002      	b.n	8001e74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f9      	bne.n	8001e6e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d17a      	bne.n	8001f7e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec6:	d106      	bne.n	8001ed6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f023 0206 	bic.w	r2, r3, #6
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ed4:	e002      	b.n	8001edc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_ADC_Start+0x194>)
 8001ee6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ef0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d12a      	bne.n	8001f54 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a2b      	ldr	r2, [pc, #172]	; (8001fb0 <HAL_ADC_Start+0x198>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d015      	beq.n	8001f34 <HAL_ADC_Start+0x11c>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <HAL_ADC_Start+0x19c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d105      	bne.n	8001f1e <HAL_ADC_Start+0x106>
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_ADC_Start+0x194>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a25      	ldr	r2, [pc, #148]	; (8001fb8 <HAL_ADC_Start+0x1a0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d136      	bne.n	8001f96 <HAL_ADC_Start+0x17e>
 8001f28:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_ADC_Start+0x194>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d130      	bne.n	8001f96 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d129      	bne.n	8001f96 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	e020      	b.n	8001f96 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a15      	ldr	r2, [pc, #84]	; (8001fb0 <HAL_ADC_Start+0x198>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d11b      	bne.n	8001f96 <HAL_ADC_Start+0x17e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d114      	bne.n	8001f96 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	e00b      	b.n	8001f96 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f043 0210 	orr.w	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	431bde83 	.word	0x431bde83
 8001fac:	40012300 	.word	0x40012300
 8001fb0:	40012000 	.word	0x40012000
 8001fb4:	40012100 	.word	0x40012100
 8001fb8:	40012200 	.word	0x40012200

08001fbc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_Stop+0x16>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e021      	b.n	8002016 <HAL_ADC_Stop+0x5a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0201 	bic.w	r2, r2, #1
 8001fe8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d109      	bne.n	800200c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	f043 0201 	orr.w	r2, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203e:	d113      	bne.n	8002068 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800204a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800204e:	d10b      	bne.n	8002068 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f043 0220 	orr.w	r2, r3, #32
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e063      	b.n	8002130 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002068:	f7ff fe86 	bl	8001d78 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800206e:	e021      	b.n	80020b4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002076:	d01d      	beq.n	80020b4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_ADC_PollForConversion+0x6c>
 800207e:	f7ff fe7b 	bl	8001d78 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d212      	bcs.n	80020b4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b02      	cmp	r3, #2
 800209a:	d00b      	beq.n	80020b4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f043 0204 	orr.w	r2, r3, #4
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e03d      	b.n	8002130 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d1d6      	bne.n	8002070 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f06f 0212 	mvn.w	r2, #18
 80020ca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d123      	bne.n	800212e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d11f      	bne.n	800212e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002106:	2b00      	cmp	r3, #0
 8002108:	d111      	bne.n	800212e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d105      	bne.n	800212e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f043 0201 	orr.w	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x1c>
 800216c:	2302      	movs	r3, #2
 800216e:	e113      	b.n	8002398 <HAL_ADC_ConfigChannel+0x244>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b09      	cmp	r3, #9
 800217e:	d925      	bls.n	80021cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68d9      	ldr	r1, [r3, #12]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	3b1e      	subs	r3, #30
 8002196:	2207      	movs	r2, #7
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43da      	mvns	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	400a      	ands	r2, r1
 80021a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68d9      	ldr	r1, [r3, #12]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	4603      	mov	r3, r0
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4403      	add	r3, r0
 80021be:	3b1e      	subs	r3, #30
 80021c0:	409a      	lsls	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	e022      	b.n	8002212 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6919      	ldr	r1, [r3, #16]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	2207      	movs	r2, #7
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	400a      	ands	r2, r1
 80021ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6919      	ldr	r1, [r3, #16]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	4603      	mov	r3, r0
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4403      	add	r3, r0
 8002208:	409a      	lsls	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b06      	cmp	r3, #6
 8002218:	d824      	bhi.n	8002264 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	3b05      	subs	r3, #5
 800222c:	221f      	movs	r2, #31
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	400a      	ands	r2, r1
 800223a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	4618      	mov	r0, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3b05      	subs	r3, #5
 8002256:	fa00 f203 	lsl.w	r2, r0, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	635a      	str	r2, [r3, #52]	; 0x34
 8002262:	e04c      	b.n	80022fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b0c      	cmp	r3, #12
 800226a:	d824      	bhi.n	80022b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	3b23      	subs	r3, #35	; 0x23
 800227e:	221f      	movs	r2, #31
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43da      	mvns	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	400a      	ands	r2, r1
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	4618      	mov	r0, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	3b23      	subs	r3, #35	; 0x23
 80022a8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
 80022b4:	e023      	b.n	80022fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	3b41      	subs	r3, #65	; 0x41
 80022c8:	221f      	movs	r2, #31
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	400a      	ands	r2, r1
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4618      	mov	r0, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3b41      	subs	r3, #65	; 0x41
 80022f2:	fa00 f203 	lsl.w	r2, r0, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022fe:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_ADC_ConfigChannel+0x250>)
 8002300:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a28      	ldr	r2, [pc, #160]	; (80023a8 <HAL_ADC_ConfigChannel+0x254>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d10f      	bne.n	800232c <HAL_ADC_ConfigChannel+0x1d8>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b12      	cmp	r3, #18
 8002312:	d10b      	bne.n	800232c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a1d      	ldr	r2, [pc, #116]	; (80023a8 <HAL_ADC_ConfigChannel+0x254>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d12b      	bne.n	800238e <HAL_ADC_ConfigChannel+0x23a>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a1c      	ldr	r2, [pc, #112]	; (80023ac <HAL_ADC_ConfigChannel+0x258>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d003      	beq.n	8002348 <HAL_ADC_ConfigChannel+0x1f4>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b11      	cmp	r3, #17
 8002346:	d122      	bne.n	800238e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a11      	ldr	r2, [pc, #68]	; (80023ac <HAL_ADC_ConfigChannel+0x258>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d111      	bne.n	800238e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_ADC_ConfigChannel+0x25c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <HAL_ADC_ConfigChannel+0x260>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	0c9a      	lsrs	r2, r3, #18
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002380:	e002      	b.n	8002388 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3b01      	subs	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40012300 	.word	0x40012300
 80023a8:	40012000 	.word	0x40012000
 80023ac:	10000012 	.word	0x10000012
 80023b0:	20000000 	.word	0x20000000
 80023b4:	431bde83 	.word	0x431bde83

080023b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c0:	4b79      	ldr	r3, [pc, #484]	; (80025a8 <ADC_Init+0x1f0>)
 80023c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	431a      	orrs	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	021a      	lsls	r2, r3, #8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6899      	ldr	r1, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	4a58      	ldr	r2, [pc, #352]	; (80025ac <ADC_Init+0x1f4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d022      	beq.n	8002496 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800245e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6899      	ldr	r1, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	e00f      	b.n	80024b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0202 	bic.w	r2, r2, #2
 80024c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6899      	ldr	r1, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7e1b      	ldrb	r3, [r3, #24]
 80024d0:	005a      	lsls	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01b      	beq.n	800251c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002502:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6859      	ldr	r1, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	3b01      	subs	r3, #1
 8002510:	035a      	lsls	r2, r3, #13
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	e007      	b.n	800252c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800252a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	3b01      	subs	r3, #1
 8002548:	051a      	lsls	r2, r3, #20
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256e:	025a      	lsls	r2, r3, #9
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6899      	ldr	r1, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	029a      	lsls	r2, r3, #10
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	609a      	str	r2, [r3, #8]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40012300 	.word	0x40012300
 80025ac:	0f000001 	.word	0x0f000001

080025b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025cc:	4013      	ands	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e2:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <__NVIC_SetPriorityGrouping+0x44>)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	60d3      	str	r3, [r2, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <__NVIC_GetPriorityGrouping+0x18>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	f003 0307 	and.w	r3, r3, #7
}
 8002606:	4618      	mov	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	2b00      	cmp	r3, #0
 8002624:	db0b      	blt.n	800263e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	f003 021f 	and.w	r2, r3, #31
 800262c:	4907      	ldr	r1, [pc, #28]	; (800264c <__NVIC_EnableIRQ+0x38>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2001      	movs	r0, #1
 8002636:	fa00 f202 	lsl.w	r2, r0, r2
 800263a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000e100 	.word	0xe000e100

08002650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	6039      	str	r1, [r7, #0]
 800265a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002660:	2b00      	cmp	r3, #0
 8002662:	db0a      	blt.n	800267a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	490c      	ldr	r1, [pc, #48]	; (800269c <__NVIC_SetPriority+0x4c>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	0112      	lsls	r2, r2, #4
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	440b      	add	r3, r1
 8002674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002678:	e00a      	b.n	8002690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4908      	ldr	r1, [pc, #32]	; (80026a0 <__NVIC_SetPriority+0x50>)
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	3b04      	subs	r3, #4
 8002688:	0112      	lsls	r2, r2, #4
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	440b      	add	r3, r1
 800268e:	761a      	strb	r2, [r3, #24]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000e100 	.word	0xe000e100
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b089      	sub	sp, #36	; 0x24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f1c3 0307 	rsb	r3, r3, #7
 80026be:	2b04      	cmp	r3, #4
 80026c0:	bf28      	it	cs
 80026c2:	2304      	movcs	r3, #4
 80026c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3304      	adds	r3, #4
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d902      	bls.n	80026d4 <NVIC_EncodePriority+0x30>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3b03      	subs	r3, #3
 80026d2:	e000      	b.n	80026d6 <NVIC_EncodePriority+0x32>
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	f04f 32ff 	mov.w	r2, #4294967295
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43da      	mvns	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	401a      	ands	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ec:	f04f 31ff 	mov.w	r1, #4294967295
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	43d9      	mvns	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	4313      	orrs	r3, r2
         );
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3724      	adds	r7, #36	; 0x24
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800271c:	d301      	bcc.n	8002722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271e:	2301      	movs	r3, #1
 8002720:	e00f      	b.n	8002742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <SysTick_Config+0x40>)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3b01      	subs	r3, #1
 8002728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800272a:	210f      	movs	r1, #15
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	f7ff ff8e 	bl	8002650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <SysTick_Config+0x40>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <SysTick_Config+0x40>)
 800273c:	2207      	movs	r2, #7
 800273e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	e000e010 	.word	0xe000e010

08002750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ff29 	bl	80025b0 <__NVIC_SetPriorityGrouping>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002778:	f7ff ff3e 	bl	80025f8 <__NVIC_GetPriorityGrouping>
 800277c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	f7ff ff8e 	bl	80026a4 <NVIC_EncodePriority>
 8002788:	4602      	mov	r2, r0
 800278a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff5d 	bl	8002650 <__NVIC_SetPriority>
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4603      	mov	r3, r0
 80027a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff31 	bl	8002614 <__NVIC_EnableIRQ>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ffa2 	bl	800270c <SysTick_Config>
 80027c8:	4603      	mov	r3, r0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e014      	b.n	800280e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	791b      	ldrb	r3, [r3, #4]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d105      	bne.n	80027fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7fe fdf7 	bl	80013e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	795b      	ldrb	r3, [r3, #5]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_DAC_Start+0x16>
 8002828:	2302      	movs	r3, #2
 800282a:	e040      	b.n	80028ae <HAL_DAC_Start+0x98>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6819      	ldr	r1, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2201      	movs	r2, #1
 8002846:	409a      	lsls	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10f      	bne.n	8002876 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002860:	2b3c      	cmp	r3, #60	; 0x3c
 8002862:	d11d      	bne.n	80028a0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	e014      	b.n	80028a0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	213c      	movs	r1, #60	; 0x3c
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	429a      	cmp	r2, r3
 800288e:	d107      	bne.n	80028a0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0202 	orr.w	r2, r2, #2
 800289e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b087      	sub	sp, #28
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	3308      	adds	r3, #8
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e004      	b.n	80028ee <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	3314      	adds	r3, #20
 80028ec:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	461a      	mov	r2, r3
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	795b      	ldrb	r3, [r3, #5]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_DAC_ConfigChannel+0x18>
 8002918:	2302      	movs	r3, #2
 800291a:	e03c      	b.n	8002996 <HAL_DAC_ConfigChannel+0x92>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2202      	movs	r2, #2
 8002926:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	f640 72fe 	movw	r2, #4094	; 0xffe
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4013      	ands	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6819      	ldr	r1, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	22c0      	movs	r2, #192	; 0xc0
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	400a      	ands	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2201      	movs	r2, #1
 800298c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029b0:	f7ff f9e2 	bl	8001d78 <HAL_GetTick>
 80029b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d008      	beq.n	80029d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2280      	movs	r2, #128	; 0x80
 80029c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e052      	b.n	8002a7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0216 	bic.w	r2, r2, #22
 80029e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d103      	bne.n	8002a04 <HAL_DMA_Abort+0x62>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0208 	bic.w	r2, r2, #8
 8002a12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a24:	e013      	b.n	8002a4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a26:	f7ff f9a7 	bl	8001d78 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d90c      	bls.n	8002a4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e015      	b.n	8002a7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e4      	bne.n	8002a26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	223f      	movs	r2, #63	; 0x3f
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d004      	beq.n	8002aa0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2280      	movs	r2, #128	; 0x80
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e00c      	b.n	8002aba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2205      	movs	r2, #5
 8002aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b089      	sub	sp, #36	; 0x24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	e165      	b.n	8002db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	f040 8154 	bne.w	8002daa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d005      	beq.n	8002b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d130      	bne.n	8002b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b50:	2201      	movs	r2, #1
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 0201 	and.w	r2, r3, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d017      	beq.n	8002bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d123      	bne.n	8002c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	08da      	lsrs	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3208      	adds	r2, #8
 8002bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	220f      	movs	r2, #15
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	08da      	lsrs	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3208      	adds	r2, #8
 8002c06:	69b9      	ldr	r1, [r7, #24]
 8002c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0203 	and.w	r2, r3, #3
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80ae 	beq.w	8002daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b5d      	ldr	r3, [pc, #372]	; (8002dc8 <HAL_GPIO_Init+0x300>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	4a5c      	ldr	r2, [pc, #368]	; (8002dc8 <HAL_GPIO_Init+0x300>)
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5e:	4b5a      	ldr	r3, [pc, #360]	; (8002dc8 <HAL_GPIO_Init+0x300>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c6a:	4a58      	ldr	r2, [pc, #352]	; (8002dcc <HAL_GPIO_Init+0x304>)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	3302      	adds	r3, #2
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	220f      	movs	r2, #15
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4f      	ldr	r2, [pc, #316]	; (8002dd0 <HAL_GPIO_Init+0x308>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d025      	beq.n	8002ce2 <HAL_GPIO_Init+0x21a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4e      	ldr	r2, [pc, #312]	; (8002dd4 <HAL_GPIO_Init+0x30c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01f      	beq.n	8002cde <HAL_GPIO_Init+0x216>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4d      	ldr	r2, [pc, #308]	; (8002dd8 <HAL_GPIO_Init+0x310>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d019      	beq.n	8002cda <HAL_GPIO_Init+0x212>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	; (8002ddc <HAL_GPIO_Init+0x314>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_GPIO_Init+0x20e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4b      	ldr	r2, [pc, #300]	; (8002de0 <HAL_GPIO_Init+0x318>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00d      	beq.n	8002cd2 <HAL_GPIO_Init+0x20a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4a      	ldr	r2, [pc, #296]	; (8002de4 <HAL_GPIO_Init+0x31c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <HAL_GPIO_Init+0x206>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a49      	ldr	r2, [pc, #292]	; (8002de8 <HAL_GPIO_Init+0x320>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_GPIO_Init+0x202>
 8002cc6:	2306      	movs	r3, #6
 8002cc8:	e00c      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cca:	2307      	movs	r3, #7
 8002ccc:	e00a      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cce:	2305      	movs	r3, #5
 8002cd0:	e008      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	e006      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e004      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e002      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_GPIO_Init+0x21c>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	f002 0203 	and.w	r2, r2, #3
 8002cea:	0092      	lsls	r2, r2, #2
 8002cec:	4093      	lsls	r3, r2
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf4:	4935      	ldr	r1, [pc, #212]	; (8002dcc <HAL_GPIO_Init+0x304>)
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d02:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d26:	4a31      	ldr	r2, [pc, #196]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d2c:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d50:	4a26      	ldr	r2, [pc, #152]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d56:	4b25      	ldr	r3, [pc, #148]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d80:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002da4:	4a11      	ldr	r2, [pc, #68]	; (8002dec <HAL_GPIO_Init+0x324>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3301      	adds	r3, #1
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b0f      	cmp	r3, #15
 8002db4:	f67f ae96 	bls.w	8002ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40020400 	.word	0x40020400
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	40020c00 	.word	0x40020c00
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40021400 	.word	0x40021400
 8002de8:	40021800 	.word	0x40021800
 8002dec:	40013c00 	.word	0x40013c00

08002df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e00:	787b      	ldrb	r3, [r7, #1]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e0c:	e003      	b.n	8002e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e0e:	887b      	ldrh	r3, [r7, #2]
 8002e10:	041a      	lsls	r2, r3, #16
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	619a      	str	r2, [r3, #24]
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e34:	887a      	ldrh	r2, [r7, #2]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	041a      	lsls	r2, r3, #16
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	43d9      	mvns	r1, r3
 8002e40:	887b      	ldrh	r3, [r7, #2]
 8002e42:	400b      	ands	r3, r1
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	619a      	str	r2, [r3, #24]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	4a1f      	ldr	r2, [pc, #124]	; (8002ee8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	; 0x40
 8002e72:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <HAL_PWREx_EnableOverDrive+0x94>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e84:	f7fe ff78 	bl	8001d78 <HAL_GetTick>
 8002e88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e8a:	e009      	b.n	8002ea0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e8c:	f7fe ff74 	bl	8001d78 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e9a:	d901      	bls.n	8002ea0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e01f      	b.n	8002ee0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ea0:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eac:	d1ee      	bne.n	8002e8c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002eae:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eb4:	f7fe ff60 	bl	8001d78 <HAL_GetTick>
 8002eb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002eba:	e009      	b.n	8002ed0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ebc:	f7fe ff5c 	bl	8001d78 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eca:	d901      	bls.n	8002ed0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e007      	b.n	8002ee0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ed0:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002edc:	d1ee      	bne.n	8002ebc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	420e0040 	.word	0x420e0040
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	420e0044 	.word	0x420e0044

08002ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0cc      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b68      	ldr	r3, [pc, #416]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d90c      	bls.n	8002f34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b65      	ldr	r3, [pc, #404]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f22:	4b63      	ldr	r3, [pc, #396]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d001      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0b8      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f4c:	4b59      	ldr	r3, [pc, #356]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a58      	ldr	r2, [pc, #352]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f64:	4b53      	ldr	r3, [pc, #332]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f70:	4b50      	ldr	r3, [pc, #320]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	494d      	ldr	r1, [pc, #308]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d044      	beq.n	8003018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b47      	ldr	r3, [pc, #284]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d119      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e07f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb6:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e06f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc6:	4b3b      	ldr	r3, [pc, #236]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e067      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd6:	4b37      	ldr	r3, [pc, #220]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f023 0203 	bic.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4934      	ldr	r1, [pc, #208]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe fec6 	bl	8001d78 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff0:	f7fe fec2 	bl	8001d78 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e04f      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 020c 	and.w	r2, r3, #12
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	429a      	cmp	r2, r3
 8003016:	d1eb      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d20c      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e032      	b.n	80030a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800304c:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4916      	ldr	r1, [pc, #88]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	490e      	ldr	r1, [pc, #56]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800307e:	f000 f855 	bl	800312c <HAL_RCC_GetSysClockFreq>
 8003082:	4602      	mov	r2, r0
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	490a      	ldr	r1, [pc, #40]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	5ccb      	ldrb	r3, [r1, r3]
 8003092:	fa22 f303 	lsr.w	r3, r2, r3
 8003096:	4a09      	ldr	r2, [pc, #36]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe fe26 	bl	8001cf0 <HAL_InitTick>

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023c00 	.word	0x40023c00
 80030b4:	40023800 	.word	0x40023800
 80030b8:	08005538 	.word	0x08005538
 80030bc:	20000000 	.word	0x20000000
 80030c0:	20000004 	.word	0x20000004

080030c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000000 	.word	0x20000000

080030dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030e0:	f7ff fff0 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0a9b      	lsrs	r3, r3, #10
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	08005548 	.word	0x08005548

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003108:	f7ff ffdc 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0b5b      	lsrs	r3, r3, #13
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4903      	ldr	r1, [pc, #12]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	08005548 	.word	0x08005548

0800312c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800312c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003130:	b0a6      	sub	sp, #152	; 0x98
 8003132:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003152:	4bc8      	ldr	r3, [pc, #800]	; (8003474 <HAL_RCC_GetSysClockFreq+0x348>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b0c      	cmp	r3, #12
 800315c:	f200 817e 	bhi.w	800345c <HAL_RCC_GetSysClockFreq+0x330>
 8003160:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003166:	bf00      	nop
 8003168:	0800319d 	.word	0x0800319d
 800316c:	0800345d 	.word	0x0800345d
 8003170:	0800345d 	.word	0x0800345d
 8003174:	0800345d 	.word	0x0800345d
 8003178:	080031a5 	.word	0x080031a5
 800317c:	0800345d 	.word	0x0800345d
 8003180:	0800345d 	.word	0x0800345d
 8003184:	0800345d 	.word	0x0800345d
 8003188:	080031ad 	.word	0x080031ad
 800318c:	0800345d 	.word	0x0800345d
 8003190:	0800345d 	.word	0x0800345d
 8003194:	0800345d 	.word	0x0800345d
 8003198:	08003317 	.word	0x08003317
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4bb6      	ldr	r3, [pc, #728]	; (8003478 <HAL_RCC_GetSysClockFreq+0x34c>)
 800319e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80031a2:	e15f      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031a4:	4bb5      	ldr	r3, [pc, #724]	; (800347c <HAL_RCC_GetSysClockFreq+0x350>)
 80031a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80031aa:	e15b      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031ac:	4bb1      	ldr	r3, [pc, #708]	; (8003474 <HAL_RCC_GetSysClockFreq+0x348>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031b8:	4bae      	ldr	r3, [pc, #696]	; (8003474 <HAL_RCC_GetSysClockFreq+0x348>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d031      	beq.n	8003228 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c4:	4bab      	ldr	r3, [pc, #684]	; (8003474 <HAL_RCC_GetSysClockFreq+0x348>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	2200      	movs	r2, #0
 80031cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80031ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d6:	663b      	str	r3, [r7, #96]	; 0x60
 80031d8:	2300      	movs	r3, #0
 80031da:	667b      	str	r3, [r7, #100]	; 0x64
 80031dc:	4ba7      	ldr	r3, [pc, #668]	; (800347c <HAL_RCC_GetSysClockFreq+0x350>)
 80031de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80031e2:	462a      	mov	r2, r5
 80031e4:	fb03 f202 	mul.w	r2, r3, r2
 80031e8:	2300      	movs	r3, #0
 80031ea:	4621      	mov	r1, r4
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	4aa2      	ldr	r2, [pc, #648]	; (800347c <HAL_RCC_GetSysClockFreq+0x350>)
 80031f4:	4621      	mov	r1, r4
 80031f6:	fba1 1202 	umull	r1, r2, r1, r2
 80031fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031fc:	460a      	mov	r2, r1
 80031fe:	67ba      	str	r2, [r7, #120]	; 0x78
 8003200:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003202:	4413      	add	r3, r2
 8003204:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800320a:	2200      	movs	r2, #0
 800320c:	65bb      	str	r3, [r7, #88]	; 0x58
 800320e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003210:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003214:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003218:	f7fc fff4 	bl	8000204 <__aeabi_uldivmod>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4613      	mov	r3, r2
 8003222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003226:	e064      	b.n	80032f2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003228:	4b92      	ldr	r3, [pc, #584]	; (8003474 <HAL_RCC_GetSysClockFreq+0x348>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	2200      	movs	r2, #0
 8003230:	653b      	str	r3, [r7, #80]	; 0x50
 8003232:	657a      	str	r2, [r7, #84]	; 0x54
 8003234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
 800323c:	2300      	movs	r3, #0
 800323e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003240:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003244:	4622      	mov	r2, r4
 8003246:	462b      	mov	r3, r5
 8003248:	f04f 0000 	mov.w	r0, #0
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	0159      	lsls	r1, r3, #5
 8003252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003256:	0150      	lsls	r0, r2, #5
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4621      	mov	r1, r4
 800325e:	1a51      	subs	r1, r2, r1
 8003260:	6139      	str	r1, [r7, #16]
 8003262:	4629      	mov	r1, r5
 8003264:	eb63 0301 	sbc.w	r3, r3, r1
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003276:	4659      	mov	r1, fp
 8003278:	018b      	lsls	r3, r1, #6
 800327a:	4651      	mov	r1, sl
 800327c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003280:	4651      	mov	r1, sl
 8003282:	018a      	lsls	r2, r1, #6
 8003284:	4651      	mov	r1, sl
 8003286:	ebb2 0801 	subs.w	r8, r2, r1
 800328a:	4659      	mov	r1, fp
 800328c:	eb63 0901 	sbc.w	r9, r3, r1
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800329c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032a4:	4690      	mov	r8, r2
 80032a6:	4699      	mov	r9, r3
 80032a8:	4623      	mov	r3, r4
 80032aa:	eb18 0303 	adds.w	r3, r8, r3
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	462b      	mov	r3, r5
 80032b2:	eb49 0303 	adc.w	r3, r9, r3
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032c4:	4629      	mov	r1, r5
 80032c6:	028b      	lsls	r3, r1, #10
 80032c8:	4621      	mov	r1, r4
 80032ca:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032ce:	4621      	mov	r1, r4
 80032d0:	028a      	lsls	r2, r1, #10
 80032d2:	4610      	mov	r0, r2
 80032d4:	4619      	mov	r1, r3
 80032d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032da:	2200      	movs	r2, #0
 80032dc:	643b      	str	r3, [r7, #64]	; 0x40
 80032de:	647a      	str	r2, [r7, #68]	; 0x44
 80032e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032e4:	f7fc ff8e 	bl	8000204 <__aeabi_uldivmod>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4613      	mov	r3, r2
 80032ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032f2:	4b60      	ldr	r3, [pc, #384]	; (8003474 <HAL_RCC_GetSysClockFreq+0x348>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	0c1b      	lsrs	r3, r3, #16
 80032f8:	f003 0303 	and.w	r3, r3, #3
 80032fc:	3301      	adds	r3, #1
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003304:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003308:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003314:	e0a6      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003316:	4b57      	ldr	r3, [pc, #348]	; (8003474 <HAL_RCC_GetSysClockFreq+0x348>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800331e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003322:	4b54      	ldr	r3, [pc, #336]	; (8003474 <HAL_RCC_GetSysClockFreq+0x348>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d02a      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800332e:	4b51      	ldr	r3, [pc, #324]	; (8003474 <HAL_RCC_GetSysClockFreq+0x348>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	099b      	lsrs	r3, r3, #6
 8003334:	2200      	movs	r2, #0
 8003336:	63bb      	str	r3, [r7, #56]	; 0x38
 8003338:	63fa      	str	r2, [r7, #60]	; 0x3c
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003340:	2100      	movs	r1, #0
 8003342:	4b4e      	ldr	r3, [pc, #312]	; (800347c <HAL_RCC_GetSysClockFreq+0x350>)
 8003344:	fb03 f201 	mul.w	r2, r3, r1
 8003348:	2300      	movs	r3, #0
 800334a:	fb00 f303 	mul.w	r3, r0, r3
 800334e:	4413      	add	r3, r2
 8003350:	4a4a      	ldr	r2, [pc, #296]	; (800347c <HAL_RCC_GetSysClockFreq+0x350>)
 8003352:	fba0 1202 	umull	r1, r2, r0, r2
 8003356:	677a      	str	r2, [r7, #116]	; 0x74
 8003358:	460a      	mov	r2, r1
 800335a:	673a      	str	r2, [r7, #112]	; 0x70
 800335c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800335e:	4413      	add	r3, r2
 8003360:	677b      	str	r3, [r7, #116]	; 0x74
 8003362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003366:	2200      	movs	r2, #0
 8003368:	633b      	str	r3, [r7, #48]	; 0x30
 800336a:	637a      	str	r2, [r7, #52]	; 0x34
 800336c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003370:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003374:	f7fc ff46 	bl	8000204 <__aeabi_uldivmod>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	4613      	mov	r3, r2
 800337e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003382:	e05b      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003384:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <HAL_RCC_GetSysClockFreq+0x348>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	099b      	lsrs	r3, r3, #6
 800338a:	2200      	movs	r2, #0
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
 800338e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003396:	623b      	str	r3, [r7, #32]
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
 800339c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033a0:	4642      	mov	r2, r8
 80033a2:	464b      	mov	r3, r9
 80033a4:	f04f 0000 	mov.w	r0, #0
 80033a8:	f04f 0100 	mov.w	r1, #0
 80033ac:	0159      	lsls	r1, r3, #5
 80033ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033b2:	0150      	lsls	r0, r2, #5
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4641      	mov	r1, r8
 80033ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80033be:	4649      	mov	r1, r9
 80033c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033d8:	ebb2 040a 	subs.w	r4, r2, sl
 80033dc:	eb63 050b 	sbc.w	r5, r3, fp
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	00eb      	lsls	r3, r5, #3
 80033ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ee:	00e2      	lsls	r2, r4, #3
 80033f0:	4614      	mov	r4, r2
 80033f2:	461d      	mov	r5, r3
 80033f4:	4643      	mov	r3, r8
 80033f6:	18e3      	adds	r3, r4, r3
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	464b      	mov	r3, r9
 80033fc:	eb45 0303 	adc.w	r3, r5, r3
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800340e:	4629      	mov	r1, r5
 8003410:	028b      	lsls	r3, r1, #10
 8003412:	4621      	mov	r1, r4
 8003414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003418:	4621      	mov	r1, r4
 800341a:	028a      	lsls	r2, r1, #10
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003424:	2200      	movs	r2, #0
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	61fa      	str	r2, [r7, #28]
 800342a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800342e:	f7fc fee9 	bl	8000204 <__aeabi_uldivmod>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4613      	mov	r3, r2
 8003438:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800343c:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_RCC_GetSysClockFreq+0x348>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0f1b      	lsrs	r3, r3, #28
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800344a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800344e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003452:	fbb2 f3f3 	udiv	r3, r2, r3
 8003456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800345a:	e003      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_GetSysClockFreq+0x34c>)
 800345e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003462:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003468:	4618      	mov	r0, r3
 800346a:	3798      	adds	r7, #152	; 0x98
 800346c:	46bd      	mov	sp, r7
 800346e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	00f42400 	.word	0x00f42400
 800347c:	017d7840 	.word	0x017d7840

08003480 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e28d      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 8083 	beq.w	80035a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034a0:	4b94      	ldr	r3, [pc, #592]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d019      	beq.n	80034e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034ac:	4b91      	ldr	r3, [pc, #580]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d106      	bne.n	80034c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034b8:	4b8e      	ldr	r3, [pc, #568]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c4:	d00c      	beq.n	80034e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c6:	4b8b      	ldr	r3, [pc, #556]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034ce:	2b0c      	cmp	r3, #12
 80034d0:	d112      	bne.n	80034f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d2:	4b88      	ldr	r3, [pc, #544]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034de:	d10b      	bne.n	80034f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e0:	4b84      	ldr	r3, [pc, #528]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d05b      	beq.n	80035a4 <HAL_RCC_OscConfig+0x124>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d157      	bne.n	80035a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e25a      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003500:	d106      	bne.n	8003510 <HAL_RCC_OscConfig+0x90>
 8003502:	4b7c      	ldr	r3, [pc, #496]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a7b      	ldr	r2, [pc, #492]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e01d      	b.n	800354c <HAL_RCC_OscConfig+0xcc>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003518:	d10c      	bne.n	8003534 <HAL_RCC_OscConfig+0xb4>
 800351a:	4b76      	ldr	r3, [pc, #472]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a75      	ldr	r2, [pc, #468]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b73      	ldr	r3, [pc, #460]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a72      	ldr	r2, [pc, #456]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e00b      	b.n	800354c <HAL_RCC_OscConfig+0xcc>
 8003534:	4b6f      	ldr	r3, [pc, #444]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a6e      	ldr	r2, [pc, #440]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 800353a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	4b6c      	ldr	r3, [pc, #432]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a6b      	ldr	r2, [pc, #428]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d013      	beq.n	800357c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe fc10 	bl	8001d78 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800355c:	f7fe fc0c 	bl	8001d78 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e21f      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b61      	ldr	r3, [pc, #388]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f0      	beq.n	800355c <HAL_RCC_OscConfig+0xdc>
 800357a:	e014      	b.n	80035a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe fbfc 	bl	8001d78 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003584:	f7fe fbf8 	bl	8001d78 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e20b      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003596:	4b57      	ldr	r3, [pc, #348]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x104>
 80035a2:	e000      	b.n	80035a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d06f      	beq.n	8003692 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035b2:	4b50      	ldr	r3, [pc, #320]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d017      	beq.n	80035ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035be:	4b4d      	ldr	r3, [pc, #308]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d105      	bne.n	80035d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035ca:	4b4a      	ldr	r3, [pc, #296]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035d6:	4b47      	ldr	r3, [pc, #284]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d11c      	bne.n	800361c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e2:	4b44      	ldr	r3, [pc, #272]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d116      	bne.n	800361c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	4b41      	ldr	r3, [pc, #260]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d005      	beq.n	8003606 <HAL_RCC_OscConfig+0x186>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d001      	beq.n	8003606 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e1d3      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003606:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4937      	ldr	r1, [pc, #220]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361a:	e03a      	b.n	8003692 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d020      	beq.n	8003666 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003624:	4b34      	ldr	r3, [pc, #208]	; (80036f8 <HAL_RCC_OscConfig+0x278>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fe fba5 	bl	8001d78 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003632:	f7fe fba1 	bl	8001d78 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e1b4      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003644:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003650:	4b28      	ldr	r3, [pc, #160]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4925      	ldr	r1, [pc, #148]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]
 8003664:	e015      	b.n	8003692 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <HAL_RCC_OscConfig+0x278>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fe fb84 	bl	8001d78 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003674:	f7fe fb80 	bl	8001d78 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e193      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d036      	beq.n	800370c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d016      	beq.n	80036d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a6:	4b15      	ldr	r3, [pc, #84]	; (80036fc <HAL_RCC_OscConfig+0x27c>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ac:	f7fe fb64 	bl	8001d78 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b4:	f7fe fb60 	bl	8001d78 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e173      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_RCC_OscConfig+0x274>)
 80036c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x234>
 80036d2:	e01b      	b.n	800370c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d4:	4b09      	ldr	r3, [pc, #36]	; (80036fc <HAL_RCC_OscConfig+0x27c>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fe fb4d 	bl	8001d78 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e0:	e00e      	b.n	8003700 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e2:	f7fe fb49 	bl	8001d78 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d907      	bls.n	8003700 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e15c      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
 80036f4:	40023800 	.word	0x40023800
 80036f8:	42470000 	.word	0x42470000
 80036fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003700:	4b8a      	ldr	r3, [pc, #552]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 8003702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ea      	bne.n	80036e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 8097 	beq.w	8003848 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371e:	4b83      	ldr	r3, [pc, #524]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10f      	bne.n	800374a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	4b7f      	ldr	r3, [pc, #508]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	4a7e      	ldr	r2, [pc, #504]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 8003734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003738:	6413      	str	r3, [r2, #64]	; 0x40
 800373a:	4b7c      	ldr	r3, [pc, #496]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003746:	2301      	movs	r3, #1
 8003748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374a:	4b79      	ldr	r3, [pc, #484]	; (8003930 <HAL_RCC_OscConfig+0x4b0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d118      	bne.n	8003788 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003756:	4b76      	ldr	r3, [pc, #472]	; (8003930 <HAL_RCC_OscConfig+0x4b0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a75      	ldr	r2, [pc, #468]	; (8003930 <HAL_RCC_OscConfig+0x4b0>)
 800375c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003762:	f7fe fb09 	bl	8001d78 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376a:	f7fe fb05 	bl	8001d78 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e118      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <HAL_RCC_OscConfig+0x4b0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d106      	bne.n	800379e <HAL_RCC_OscConfig+0x31e>
 8003790:	4b66      	ldr	r3, [pc, #408]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	4a65      	ldr	r2, [pc, #404]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6713      	str	r3, [r2, #112]	; 0x70
 800379c:	e01c      	b.n	80037d8 <HAL_RCC_OscConfig+0x358>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b05      	cmp	r3, #5
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x340>
 80037a6:	4b61      	ldr	r3, [pc, #388]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	4a60      	ldr	r2, [pc, #384]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 80037ac:	f043 0304 	orr.w	r3, r3, #4
 80037b0:	6713      	str	r3, [r2, #112]	; 0x70
 80037b2:	4b5e      	ldr	r3, [pc, #376]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a5d      	ldr	r2, [pc, #372]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
 80037be:	e00b      	b.n	80037d8 <HAL_RCC_OscConfig+0x358>
 80037c0:	4b5a      	ldr	r3, [pc, #360]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	4a59      	ldr	r2, [pc, #356]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	6713      	str	r3, [r2, #112]	; 0x70
 80037cc:	4b57      	ldr	r3, [pc, #348]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4a56      	ldr	r2, [pc, #344]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 80037d2:	f023 0304 	bic.w	r3, r3, #4
 80037d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d015      	beq.n	800380c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7fe faca 	bl	8001d78 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7fe fac6 	bl	8001d78 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e0d7      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fe:	4b4b      	ldr	r3, [pc, #300]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0ee      	beq.n	80037e8 <HAL_RCC_OscConfig+0x368>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fe fab4 	bl	8001d78 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003812:	e00a      	b.n	800382a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f7fe fab0 	bl	8001d78 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e0c1      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382a:	4b40      	ldr	r3, [pc, #256]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1ee      	bne.n	8003814 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d105      	bne.n	8003848 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383c:	4b3b      	ldr	r3, [pc, #236]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	4a3a      	ldr	r2, [pc, #232]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 8003842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003846:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80ad 	beq.w	80039ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003852:	4b36      	ldr	r3, [pc, #216]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b08      	cmp	r3, #8
 800385c:	d060      	beq.n	8003920 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d145      	bne.n	80038f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b33      	ldr	r3, [pc, #204]	; (8003934 <HAL_RCC_OscConfig+0x4b4>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fe fa84 	bl	8001d78 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003874:	f7fe fa80 	bl	8001d78 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e093      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	4b29      	ldr	r3, [pc, #164]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	019b      	lsls	r3, r3, #6
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	3b01      	subs	r3, #1
 80038ac:	041b      	lsls	r3, r3, #16
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	071b      	lsls	r3, r3, #28
 80038be:	491b      	ldr	r1, [pc, #108]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c4:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <HAL_RCC_OscConfig+0x4b4>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ca:	f7fe fa55 	bl	8001d78 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d2:	f7fe fa51 	bl	8001d78 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e064      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e4:	4b11      	ldr	r3, [pc, #68]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x452>
 80038f0:	e05c      	b.n	80039ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <HAL_RCC_OscConfig+0x4b4>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fe fa3e 	bl	8001d78 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003900:	f7fe fa3a 	bl	8001d78 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e04d      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_RCC_OscConfig+0x4ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x480>
 800391e:	e045      	b.n	80039ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d107      	bne.n	8003938 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e040      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
 800392c:	40023800 	.word	0x40023800
 8003930:	40007000 	.word	0x40007000
 8003934:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003938:	4b1f      	ldr	r3, [pc, #124]	; (80039b8 <HAL_RCC_OscConfig+0x538>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d030      	beq.n	80039a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d129      	bne.n	80039a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d122      	bne.n	80039a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003968:	4013      	ands	r3, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800396e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003970:	4293      	cmp	r3, r2
 8003972:	d119      	bne.n	80039a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	3b01      	subs	r3, #1
 8003982:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d10f      	bne.n	80039a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800

080039bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e041      	b.n	8003a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fd fd44 	bl	8001470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f000 fa96 	bl	8003f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d001      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e04e      	b.n	8003b12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a23      	ldr	r2, [pc, #140]	; (8003b20 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d022      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9e:	d01d      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1f      	ldr	r2, [pc, #124]	; (8003b24 <HAL_TIM_Base_Start_IT+0xc8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d018      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1c      	ldr	r2, [pc, #112]	; (8003b2c <HAL_TIM_Base_Start_IT+0xd0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00e      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d009      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a19      	ldr	r2, [pc, #100]	; (8003b34 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d111      	bne.n	8003b00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d010      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	e007      	b.n	8003b10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40010000 	.word	0x40010000
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800
 8003b2c:	40000c00 	.word	0x40000c00
 8003b30:	40010400 	.word	0x40010400
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40001800 	.word	0x40001800

08003b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d122      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0202 	mvn.w	r2, #2
 8003b68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f9b5 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f9a7 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f9b8 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d122      	bne.n	8003bec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d11b      	bne.n	8003bec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0204 	mvn.w	r2, #4
 8003bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f98b 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e005      	b.n	8003be6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f97d 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f98e 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d122      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d11b      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0208 	mvn.w	r2, #8
 8003c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2204      	movs	r2, #4
 8003c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f961 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003c2c:	e005      	b.n	8003c3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f953 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f964 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	2b10      	cmp	r3, #16
 8003c4c:	d122      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d11b      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0210 	mvn.w	r2, #16
 8003c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2208      	movs	r2, #8
 8003c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f937 	bl	8003eee <HAL_TIM_IC_CaptureCallback>
 8003c80:	e005      	b.n	8003c8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f929 	bl	8003eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f93a 	bl	8003f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d107      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0201 	mvn.w	r2, #1
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd f81e 	bl	8000cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cca:	2b80      	cmp	r3, #128	; 0x80
 8003ccc:	d10e      	bne.n	8003cec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b80      	cmp	r3, #128	; 0x80
 8003cda:	d107      	bne.n	8003cec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fa64 	bl	80041b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d10e      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d107      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f8ff 	bl	8003f16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d10e      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d107      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0220 	mvn.w	r2, #32
 8003d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fa2e 	bl	80041a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIM_ConfigClockSource+0x1c>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e0b4      	b.n	8003ed2 <HAL_TIM_ConfigClockSource+0x186>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da0:	d03e      	beq.n	8003e20 <HAL_TIM_ConfigClockSource+0xd4>
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da6:	f200 8087 	bhi.w	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dae:	f000 8086 	beq.w	8003ebe <HAL_TIM_ConfigClockSource+0x172>
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db6:	d87f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b70      	cmp	r3, #112	; 0x70
 8003dba:	d01a      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xa6>
 8003dbc:	2b70      	cmp	r3, #112	; 0x70
 8003dbe:	d87b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	2b60      	cmp	r3, #96	; 0x60
 8003dc2:	d050      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x11a>
 8003dc4:	2b60      	cmp	r3, #96	; 0x60
 8003dc6:	d877      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b50      	cmp	r3, #80	; 0x50
 8003dca:	d03c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xfa>
 8003dcc:	2b50      	cmp	r3, #80	; 0x50
 8003dce:	d873      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d058      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x13a>
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	d86f      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd8:	2b30      	cmp	r3, #48	; 0x30
 8003dda:	d064      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ddc:	2b30      	cmp	r3, #48	; 0x30
 8003dde:	d86b      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d060      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	d867      	bhi.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05c      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d05a      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8003df0:	e062      	b.n	8003eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f000 f9ad 	bl	8004160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	609a      	str	r2, [r3, #8]
      break;
 8003e1e:	e04f      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6899      	ldr	r1, [r3, #8]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f000 f996 	bl	8004160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e42:	609a      	str	r2, [r3, #8]
      break;
 8003e44:	e03c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 f90a 	bl	800406c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2150      	movs	r1, #80	; 0x50
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f963 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003e64:	e02c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f000 f929 	bl	80040ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2160      	movs	r1, #96	; 0x60
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f953 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003e84:	e01c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f000 f8ea 	bl	800406c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f943 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003ea4:	e00c      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f000 f93a 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003eb6:	e003      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	73fb      	strb	r3, [r7, #15]
      break;
 8003ebc:	e000      	b.n	8003ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a40      	ldr	r2, [pc, #256]	; (8004040 <TIM_Base_SetConfig+0x114>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4a:	d00f      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a3d      	ldr	r2, [pc, #244]	; (8004044 <TIM_Base_SetConfig+0x118>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00b      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a3c      	ldr	r2, [pc, #240]	; (8004048 <TIM_Base_SetConfig+0x11c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d007      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a3b      	ldr	r2, [pc, #236]	; (800404c <TIM_Base_SetConfig+0x120>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_Base_SetConfig+0x40>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a3a      	ldr	r2, [pc, #232]	; (8004050 <TIM_Base_SetConfig+0x124>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d108      	bne.n	8003f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a2f      	ldr	r2, [pc, #188]	; (8004040 <TIM_Base_SetConfig+0x114>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d02b      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8c:	d027      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a2c      	ldr	r2, [pc, #176]	; (8004044 <TIM_Base_SetConfig+0x118>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d023      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a2b      	ldr	r2, [pc, #172]	; (8004048 <TIM_Base_SetConfig+0x11c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01f      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a2a      	ldr	r2, [pc, #168]	; (800404c <TIM_Base_SetConfig+0x120>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01b      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a29      	ldr	r2, [pc, #164]	; (8004050 <TIM_Base_SetConfig+0x124>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d017      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a28      	ldr	r2, [pc, #160]	; (8004054 <TIM_Base_SetConfig+0x128>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a27      	ldr	r2, [pc, #156]	; (8004058 <TIM_Base_SetConfig+0x12c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00f      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a26      	ldr	r2, [pc, #152]	; (800405c <TIM_Base_SetConfig+0x130>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d00b      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a25      	ldr	r2, [pc, #148]	; (8004060 <TIM_Base_SetConfig+0x134>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d007      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a24      	ldr	r2, [pc, #144]	; (8004064 <TIM_Base_SetConfig+0x138>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d003      	beq.n	8003fde <TIM_Base_SetConfig+0xb2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a23      	ldr	r2, [pc, #140]	; (8004068 <TIM_Base_SetConfig+0x13c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d108      	bne.n	8003ff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <TIM_Base_SetConfig+0x114>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0xf8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <TIM_Base_SetConfig+0x124>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d103      	bne.n	800402c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	615a      	str	r2, [r3, #20]
}
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40010400 	.word	0x40010400
 8004054:	40014000 	.word	0x40014000
 8004058:	40014400 	.word	0x40014400
 800405c:	40014800 	.word	0x40014800
 8004060:	40001800 	.word	0x40001800
 8004064:	40001c00 	.word	0x40001c00
 8004068:	40002000 	.word	0x40002000

0800406c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f023 030a 	bic.w	r3, r3, #10
 80040a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f023 0210 	bic.w	r2, r3, #16
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	f043 0307 	orr.w	r3, r3, #7
 800414c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	609a      	str	r2, [r3, #8]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800417a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	021a      	lsls	r2, r3, #8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	431a      	orrs	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4313      	orrs	r3, r2
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	609a      	str	r2, [r3, #8]
}
 8004194:	bf00      	nop
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e03f      	b.n	800425a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fd f966 	bl	80014c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2224      	movs	r2, #36	; 0x24
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800420a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fddf 	bl	8004dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004220:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004230:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004240:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b08a      	sub	sp, #40	; 0x28
 8004266:	af02      	add	r7, sp, #8
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	603b      	str	r3, [r7, #0]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b20      	cmp	r3, #32
 8004280:	d17c      	bne.n	800437c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_UART_Transmit+0x2c>
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e075      	b.n	800437e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_UART_Transmit+0x3e>
 800429c:	2302      	movs	r3, #2
 800429e:	e06e      	b.n	800437e <HAL_UART_Transmit+0x11c>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2221      	movs	r2, #33	; 0x21
 80042b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042b6:	f7fd fd5f 	bl	8001d78 <HAL_GetTick>
 80042ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	88fa      	ldrh	r2, [r7, #6]
 80042c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	88fa      	ldrh	r2, [r7, #6]
 80042c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d0:	d108      	bne.n	80042e4 <HAL_UART_Transmit+0x82>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d104      	bne.n	80042e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	e003      	b.n	80042ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042f4:	e02a      	b.n	800434c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2180      	movs	r1, #128	; 0x80
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 fb1f 	bl	8004944 <UART_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e036      	b.n	800437e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004324:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	3302      	adds	r3, #2
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	e007      	b.n	800433e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1cf      	bne.n	80042f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2200      	movs	r2, #0
 800435e:	2140      	movs	r1, #64	; 0x40
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 faef 	bl	8004944 <UART_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e006      	b.n	800437e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	e000      	b.n	800437e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
  }
}
 800437e:	4618      	mov	r0, r3
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	4613      	mov	r3, r2
 8004392:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b20      	cmp	r3, #32
 800439e:	d11d      	bne.n	80043dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <HAL_UART_Receive_IT+0x26>
 80043a6:	88fb      	ldrh	r3, [r7, #6]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e016      	b.n	80043de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_UART_Receive_IT+0x38>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e00f      	b.n	80043de <HAL_UART_Receive_IT+0x58>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	461a      	mov	r2, r3
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fb24 	bl	8004a20 <UART_Start_Receive_IT>
 80043d8:	4603      	mov	r3, r0
 80043da:	e000      	b.n	80043de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b0ba      	sub	sp, #232	; 0xe8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800440e:	2300      	movs	r3, #0
 8004410:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004414:	2300      	movs	r3, #0
 8004416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10f      	bne.n	800444e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800442e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <HAL_UART_IRQHandler+0x66>
 800443a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fc07 	bl	8004c5a <UART_Receive_IT>
      return;
 800444c:	e256      	b.n	80048fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800444e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80de 	beq.w	8004614 <HAL_UART_IRQHandler+0x22c>
 8004458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d106      	bne.n	8004472 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004468:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80d1 	beq.w	8004614 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <HAL_UART_IRQHandler+0xae>
 800447e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f043 0201 	orr.w	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00b      	beq.n	80044ba <HAL_UART_IRQHandler+0xd2>
 80044a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f043 0202 	orr.w	r2, r3, #2
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00b      	beq.n	80044de <HAL_UART_IRQHandler+0xf6>
 80044c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0204 	orr.w	r2, r3, #4
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d011      	beq.n	800450e <HAL_UART_IRQHandler+0x126>
 80044ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d105      	bne.n	8004502 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f043 0208 	orr.w	r2, r3, #8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 81ed 	beq.w	80048f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_UART_IRQHandler+0x14e>
 8004524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fb92 	bl	8004c5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004540:	2b40      	cmp	r3, #64	; 0x40
 8004542:	bf0c      	ite	eq
 8004544:	2301      	moveq	r3, #1
 8004546:	2300      	movne	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <HAL_UART_IRQHandler+0x17a>
 800455a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d04f      	beq.n	8004602 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fa9a 	bl	8004a9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d141      	bne.n	80045fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3314      	adds	r3, #20
 800457c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800458c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3314      	adds	r3, #20
 800459e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1d9      	bne.n	8004576 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d013      	beq.n	80045f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	4a7d      	ldr	r2, [pc, #500]	; (80047c4 <HAL_UART_IRQHandler+0x3dc>)
 80045d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe fa53 	bl	8002a82 <HAL_DMA_Abort_IT>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d016      	beq.n	8004610 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045ec:	4610      	mov	r0, r2
 80045ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f0:	e00e      	b.n	8004610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f990 	bl	8004918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f8:	e00a      	b.n	8004610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f98c 	bl	8004918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004600:	e006      	b.n	8004610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f988 	bl	8004918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800460e:	e170      	b.n	80048f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004610:	bf00      	nop
    return;
 8004612:	e16e      	b.n	80048f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	2b01      	cmp	r3, #1
 800461a:	f040 814a 	bne.w	80048b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 8143 	beq.w	80048b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800462c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 813c 	beq.w	80048b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b40      	cmp	r3, #64	; 0x40
 800465c:	f040 80b4 	bne.w	80047c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800466c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8140 	beq.w	80048f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800467a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800467e:	429a      	cmp	r2, r3
 8004680:	f080 8139 	bcs.w	80048f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800468a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004696:	f000 8088 	beq.w	80047aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80046c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046d6:	e841 2300 	strex	r3, r2, [r1]
 80046da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1d9      	bne.n	800469a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3314      	adds	r3, #20
 80046ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3314      	adds	r3, #20
 8004706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800470a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800470e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004712:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800471c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e1      	bne.n	80046e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3314      	adds	r3, #20
 8004728:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3314      	adds	r3, #20
 8004742:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004746:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004748:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800474c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e3      	bne.n	8004722 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800477a:	f023 0310 	bic.w	r3, r3, #16
 800477e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800478c:	65ba      	str	r2, [r7, #88]	; 0x58
 800478e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004792:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004794:	e841 2300 	strex	r3, r2, [r1]
 8004798:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800479a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e3      	bne.n	8004768 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe f8fc 	bl	80029a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8b6 	bl	800492c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047c0:	e099      	b.n	80048f6 <HAL_UART_IRQHandler+0x50e>
 80047c2:	bf00      	nop
 80047c4:	08004b63 	.word	0x08004b63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 808b 	beq.w	80048fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 8086 	beq.w	80048fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	330c      	adds	r3, #12
 80047f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004812:	647a      	str	r2, [r7, #68]	; 0x44
 8004814:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e3      	bne.n	80047ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3314      	adds	r3, #20
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	623b      	str	r3, [r7, #32]
   return(result);
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800484a:	633a      	str	r2, [r7, #48]	; 0x30
 800484c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e3      	bne.n	8004826 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	330c      	adds	r3, #12
 8004872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	60fb      	str	r3, [r7, #12]
   return(result);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0310 	bic.w	r3, r3, #16
 8004882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	330c      	adds	r3, #12
 800488c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004890:	61fa      	str	r2, [r7, #28]
 8004892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	69b9      	ldr	r1, [r7, #24]
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	617b      	str	r3, [r7, #20]
   return(result);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e3      	bne.n	800486c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f83e 	bl	800492c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048b0:	e023      	b.n	80048fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d009      	beq.n	80048d2 <HAL_UART_IRQHandler+0x4ea>
 80048be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f95d 	bl	8004b8a <UART_Transmit_IT>
    return;
 80048d0:	e014      	b.n	80048fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00e      	beq.n	80048fc <HAL_UART_IRQHandler+0x514>
 80048de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f99d 	bl	8004c2a <UART_EndTransmit_IT>
    return;
 80048f0:	e004      	b.n	80048fc <HAL_UART_IRQHandler+0x514>
    return;
 80048f2:	bf00      	nop
 80048f4:	e002      	b.n	80048fc <HAL_UART_IRQHandler+0x514>
      return;
 80048f6:	bf00      	nop
 80048f8:	e000      	b.n	80048fc <HAL_UART_IRQHandler+0x514>
      return;
 80048fa:	bf00      	nop
  }
}
 80048fc:	37e8      	adds	r7, #232	; 0xe8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop

08004904 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b090      	sub	sp, #64	; 0x40
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004954:	e050      	b.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495c:	d04c      	beq.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800495e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <UART_WaitOnFlagUntilTimeout+0x30>
 8004964:	f7fd fa08 	bl	8001d78 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004970:	429a      	cmp	r2, r3
 8004972:	d241      	bcs.n	80049f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	330c      	adds	r3, #12
 800497a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800498a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004994:	637a      	str	r2, [r7, #52]	; 0x34
 8004996:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800499a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e5      	bne.n	8004974 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3314      	adds	r3, #20
 80049ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	613b      	str	r3, [r7, #16]
   return(result);
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3314      	adds	r3, #20
 80049c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049c8:	623a      	str	r2, [r7, #32]
 80049ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	69f9      	ldr	r1, [r7, #28]
 80049ce:	6a3a      	ldr	r2, [r7, #32]
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e5      	bne.n	80049a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e00f      	b.n	8004a18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	4013      	ands	r3, r2
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d09f      	beq.n	8004956 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3740      	adds	r7, #64	; 0x40
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	88fa      	ldrh	r2, [r7, #6]
 8004a38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	88fa      	ldrh	r2, [r7, #6]
 8004a3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2222      	movs	r2, #34	; 0x22
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a6c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695a      	ldr	r2, [r3, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f042 0201 	orr.w	r2, r2, #1
 8004a7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0220 	orr.w	r2, r2, #32
 8004a8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b095      	sub	sp, #84	; 0x54
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ac4:	643a      	str	r2, [r7, #64]	; 0x40
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004aca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e5      	bne.n	8004aa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3314      	adds	r3, #20
 8004ade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3314      	adds	r3, #20
 8004af6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e5      	bne.n	8004ad8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d119      	bne.n	8004b48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f023 0310 	bic.w	r3, r3, #16
 8004b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b34:	61ba      	str	r2, [r7, #24]
 8004b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6979      	ldr	r1, [r7, #20]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	613b      	str	r3, [r7, #16]
   return(result);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e5      	bne.n	8004b14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b56:	bf00      	nop
 8004b58:	3754      	adds	r7, #84	; 0x54
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7ff fecb 	bl	8004918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b085      	sub	sp, #20
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b21      	cmp	r3, #33	; 0x21
 8004b9c:	d13e      	bne.n	8004c1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba6:	d114      	bne.n	8004bd2 <UART_Transmit_IT+0x48>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d110      	bne.n	8004bd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	1c9a      	adds	r2, r3, #2
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	621a      	str	r2, [r3, #32]
 8004bd0:	e008      	b.n	8004be4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	1c59      	adds	r1, r3, #1
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6211      	str	r1, [r2, #32]
 8004bdc:	781a      	ldrb	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10f      	bne.n	8004c18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e000      	b.n	8004c1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c1c:	2302      	movs	r3, #2
  }
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff fe5a 	bl	8004904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b08c      	sub	sp, #48	; 0x30
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b22      	cmp	r3, #34	; 0x22
 8004c6c:	f040 80ab 	bne.w	8004dc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c78:	d117      	bne.n	8004caa <UART_Receive_IT+0x50>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d113      	bne.n	8004caa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	1c9a      	adds	r2, r3, #2
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ca8:	e026      	b.n	8004cf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbc:	d007      	beq.n	8004cce <UART_Receive_IT+0x74>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <UART_Receive_IT+0x82>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	e008      	b.n	8004cee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	4619      	mov	r1, r3
 8004d06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d15a      	bne.n	8004dc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0220 	bic.w	r2, r2, #32
 8004d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d135      	bne.n	8004db8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	613b      	str	r3, [r7, #16]
   return(result);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f023 0310 	bic.w	r3, r3, #16
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d72:	623a      	str	r2, [r7, #32]
 8004d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	69f9      	ldr	r1, [r7, #28]
 8004d78:	6a3a      	ldr	r2, [r7, #32]
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e5      	bne.n	8004d52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d10a      	bne.n	8004daa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff fdbb 	bl	800492c <HAL_UARTEx_RxEventCallback>
 8004db6:	e002      	b.n	8004dbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7fb ffd7 	bl	8000d6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e002      	b.n	8004dc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e000      	b.n	8004dc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004dc6:	2302      	movs	r3, #2
  }
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3730      	adds	r7, #48	; 0x30
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd4:	b0c0      	sub	sp, #256	; 0x100
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dec:	68d9      	ldr	r1, [r3, #12]
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	ea40 0301 	orr.w	r3, r0, r1
 8004df8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e28:	f021 010c 	bic.w	r1, r1, #12
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e36:	430b      	orrs	r3, r1
 8004e38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4a:	6999      	ldr	r1, [r3, #24]
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	ea40 0301 	orr.w	r3, r0, r1
 8004e56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4b8f      	ldr	r3, [pc, #572]	; (800509c <UART_SetConfig+0x2cc>)
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d005      	beq.n	8004e70 <UART_SetConfig+0xa0>
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b8d      	ldr	r3, [pc, #564]	; (80050a0 <UART_SetConfig+0x2d0>)
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d104      	bne.n	8004e7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e70:	f7fe f948 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8004e74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e78:	e003      	b.n	8004e82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e7a:	f7fe f92f 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8004e7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8c:	f040 810c 	bne.w	80050a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e94:	2200      	movs	r2, #0
 8004e96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	462b      	mov	r3, r5
 8004ea6:	1891      	adds	r1, r2, r2
 8004ea8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004eaa:	415b      	adcs	r3, r3
 8004eac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	eb12 0801 	adds.w	r8, r2, r1
 8004eb8:	4629      	mov	r1, r5
 8004eba:	eb43 0901 	adc.w	r9, r3, r1
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ed2:	4690      	mov	r8, r2
 8004ed4:	4699      	mov	r9, r3
 8004ed6:	4623      	mov	r3, r4
 8004ed8:	eb18 0303 	adds.w	r3, r8, r3
 8004edc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	eb49 0303 	adc.w	r3, r9, r3
 8004ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ef6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004efa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004efe:	460b      	mov	r3, r1
 8004f00:	18db      	adds	r3, r3, r3
 8004f02:	653b      	str	r3, [r7, #80]	; 0x50
 8004f04:	4613      	mov	r3, r2
 8004f06:	eb42 0303 	adc.w	r3, r2, r3
 8004f0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004f14:	f7fb f976 	bl	8000204 <__aeabi_uldivmod>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4b61      	ldr	r3, [pc, #388]	; (80050a4 <UART_SetConfig+0x2d4>)
 8004f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	011c      	lsls	r4, r3, #4
 8004f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f38:	4642      	mov	r2, r8
 8004f3a:	464b      	mov	r3, r9
 8004f3c:	1891      	adds	r1, r2, r2
 8004f3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f40:	415b      	adcs	r3, r3
 8004f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f48:	4641      	mov	r1, r8
 8004f4a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f4e:	4649      	mov	r1, r9
 8004f50:	eb43 0b01 	adc.w	fp, r3, r1
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f68:	4692      	mov	sl, r2
 8004f6a:	469b      	mov	fp, r3
 8004f6c:	4643      	mov	r3, r8
 8004f6e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f76:	464b      	mov	r3, r9
 8004f78:	eb4b 0303 	adc.w	r3, fp, r3
 8004f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f94:	460b      	mov	r3, r1
 8004f96:	18db      	adds	r3, r3, r3
 8004f98:	643b      	str	r3, [r7, #64]	; 0x40
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	eb42 0303 	adc.w	r3, r2, r3
 8004fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004faa:	f7fb f92b 	bl	8000204 <__aeabi_uldivmod>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <UART_SetConfig+0x2d4>)
 8004fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	2264      	movs	r2, #100	; 0x64
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	1acb      	subs	r3, r1, r3
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fca:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <UART_SetConfig+0x2d4>)
 8004fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fd8:	441c      	add	r4, r3
 8004fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fe4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fe8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fec:	4642      	mov	r2, r8
 8004fee:	464b      	mov	r3, r9
 8004ff0:	1891      	adds	r1, r2, r2
 8004ff2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ff4:	415b      	adcs	r3, r3
 8004ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ff8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	1851      	adds	r1, r2, r1
 8005000:	6339      	str	r1, [r7, #48]	; 0x30
 8005002:	4649      	mov	r1, r9
 8005004:	414b      	adcs	r3, r1
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005014:	4659      	mov	r1, fp
 8005016:	00cb      	lsls	r3, r1, #3
 8005018:	4651      	mov	r1, sl
 800501a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800501e:	4651      	mov	r1, sl
 8005020:	00ca      	lsls	r2, r1, #3
 8005022:	4610      	mov	r0, r2
 8005024:	4619      	mov	r1, r3
 8005026:	4603      	mov	r3, r0
 8005028:	4642      	mov	r2, r8
 800502a:	189b      	adds	r3, r3, r2
 800502c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005030:	464b      	mov	r3, r9
 8005032:	460a      	mov	r2, r1
 8005034:	eb42 0303 	adc.w	r3, r2, r3
 8005038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005048:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800504c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005050:	460b      	mov	r3, r1
 8005052:	18db      	adds	r3, r3, r3
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
 8005056:	4613      	mov	r3, r2
 8005058:	eb42 0303 	adc.w	r3, r2, r3
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800505e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005062:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005066:	f7fb f8cd 	bl	8000204 <__aeabi_uldivmod>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4b0d      	ldr	r3, [pc, #52]	; (80050a4 <UART_SetConfig+0x2d4>)
 8005070:	fba3 1302 	umull	r1, r3, r3, r2
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	2164      	movs	r1, #100	; 0x64
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	3332      	adds	r3, #50	; 0x32
 8005082:	4a08      	ldr	r2, [pc, #32]	; (80050a4 <UART_SetConfig+0x2d4>)
 8005084:	fba2 2303 	umull	r2, r3, r2, r3
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	f003 0207 	and.w	r2, r3, #7
 800508e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4422      	add	r2, r4
 8005096:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005098:	e105      	b.n	80052a6 <UART_SetConfig+0x4d6>
 800509a:	bf00      	nop
 800509c:	40011000 	.word	0x40011000
 80050a0:	40011400 	.word	0x40011400
 80050a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80050b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80050ba:	4642      	mov	r2, r8
 80050bc:	464b      	mov	r3, r9
 80050be:	1891      	adds	r1, r2, r2
 80050c0:	6239      	str	r1, [r7, #32]
 80050c2:	415b      	adcs	r3, r3
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
 80050c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ca:	4641      	mov	r1, r8
 80050cc:	1854      	adds	r4, r2, r1
 80050ce:	4649      	mov	r1, r9
 80050d0:	eb43 0501 	adc.w	r5, r3, r1
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	00eb      	lsls	r3, r5, #3
 80050de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050e2:	00e2      	lsls	r2, r4, #3
 80050e4:	4614      	mov	r4, r2
 80050e6:	461d      	mov	r5, r3
 80050e8:	4643      	mov	r3, r8
 80050ea:	18e3      	adds	r3, r4, r3
 80050ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050f0:	464b      	mov	r3, r9
 80050f2:	eb45 0303 	adc.w	r3, r5, r3
 80050f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005106:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005116:	4629      	mov	r1, r5
 8005118:	008b      	lsls	r3, r1, #2
 800511a:	4621      	mov	r1, r4
 800511c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005120:	4621      	mov	r1, r4
 8005122:	008a      	lsls	r2, r1, #2
 8005124:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005128:	f7fb f86c 	bl	8000204 <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4b60      	ldr	r3, [pc, #384]	; (80052b4 <UART_SetConfig+0x4e4>)
 8005132:	fba3 2302 	umull	r2, r3, r3, r2
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	011c      	lsls	r4, r3, #4
 800513a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800513e:	2200      	movs	r2, #0
 8005140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005144:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005148:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800514c:	4642      	mov	r2, r8
 800514e:	464b      	mov	r3, r9
 8005150:	1891      	adds	r1, r2, r2
 8005152:	61b9      	str	r1, [r7, #24]
 8005154:	415b      	adcs	r3, r3
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800515c:	4641      	mov	r1, r8
 800515e:	1851      	adds	r1, r2, r1
 8005160:	6139      	str	r1, [r7, #16]
 8005162:	4649      	mov	r1, r9
 8005164:	414b      	adcs	r3, r1
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005174:	4659      	mov	r1, fp
 8005176:	00cb      	lsls	r3, r1, #3
 8005178:	4651      	mov	r1, sl
 800517a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800517e:	4651      	mov	r1, sl
 8005180:	00ca      	lsls	r2, r1, #3
 8005182:	4610      	mov	r0, r2
 8005184:	4619      	mov	r1, r3
 8005186:	4603      	mov	r3, r0
 8005188:	4642      	mov	r2, r8
 800518a:	189b      	adds	r3, r3, r2
 800518c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005190:	464b      	mov	r3, r9
 8005192:	460a      	mov	r2, r1
 8005194:	eb42 0303 	adc.w	r3, r2, r3
 8005198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80051a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051b4:	4649      	mov	r1, r9
 80051b6:	008b      	lsls	r3, r1, #2
 80051b8:	4641      	mov	r1, r8
 80051ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051be:	4641      	mov	r1, r8
 80051c0:	008a      	lsls	r2, r1, #2
 80051c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80051c6:	f7fb f81d 	bl	8000204 <__aeabi_uldivmod>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4b39      	ldr	r3, [pc, #228]	; (80052b4 <UART_SetConfig+0x4e4>)
 80051d0:	fba3 1302 	umull	r1, r3, r3, r2
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	2164      	movs	r1, #100	; 0x64
 80051d8:	fb01 f303 	mul.w	r3, r1, r3
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	3332      	adds	r3, #50	; 0x32
 80051e2:	4a34      	ldr	r2, [pc, #208]	; (80052b4 <UART_SetConfig+0x4e4>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ee:	441c      	add	r4, r3
 80051f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051f4:	2200      	movs	r2, #0
 80051f6:	673b      	str	r3, [r7, #112]	; 0x70
 80051f8:	677a      	str	r2, [r7, #116]	; 0x74
 80051fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051fe:	4642      	mov	r2, r8
 8005200:	464b      	mov	r3, r9
 8005202:	1891      	adds	r1, r2, r2
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	415b      	adcs	r3, r3
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800520e:	4641      	mov	r1, r8
 8005210:	1851      	adds	r1, r2, r1
 8005212:	6039      	str	r1, [r7, #0]
 8005214:	4649      	mov	r1, r9
 8005216:	414b      	adcs	r3, r1
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005226:	4659      	mov	r1, fp
 8005228:	00cb      	lsls	r3, r1, #3
 800522a:	4651      	mov	r1, sl
 800522c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005230:	4651      	mov	r1, sl
 8005232:	00ca      	lsls	r2, r1, #3
 8005234:	4610      	mov	r0, r2
 8005236:	4619      	mov	r1, r3
 8005238:	4603      	mov	r3, r0
 800523a:	4642      	mov	r2, r8
 800523c:	189b      	adds	r3, r3, r2
 800523e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005240:	464b      	mov	r3, r9
 8005242:	460a      	mov	r2, r1
 8005244:	eb42 0303 	adc.w	r3, r2, r3
 8005248:	66fb      	str	r3, [r7, #108]	; 0x6c
 800524a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	663b      	str	r3, [r7, #96]	; 0x60
 8005254:	667a      	str	r2, [r7, #100]	; 0x64
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005262:	4649      	mov	r1, r9
 8005264:	008b      	lsls	r3, r1, #2
 8005266:	4641      	mov	r1, r8
 8005268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800526c:	4641      	mov	r1, r8
 800526e:	008a      	lsls	r2, r1, #2
 8005270:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005274:	f7fa ffc6 	bl	8000204 <__aeabi_uldivmod>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4b0d      	ldr	r3, [pc, #52]	; (80052b4 <UART_SetConfig+0x4e4>)
 800527e:	fba3 1302 	umull	r1, r3, r3, r2
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	2164      	movs	r1, #100	; 0x64
 8005286:	fb01 f303 	mul.w	r3, r1, r3
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	3332      	adds	r3, #50	; 0x32
 8005290:	4a08      	ldr	r2, [pc, #32]	; (80052b4 <UART_SetConfig+0x4e4>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	f003 020f 	and.w	r2, r3, #15
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4422      	add	r2, r4
 80052a4:	609a      	str	r2, [r3, #8]
}
 80052a6:	bf00      	nop
 80052a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052ac:	46bd      	mov	sp, r7
 80052ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b2:	bf00      	nop
 80052b4:	51eb851f 	.word	0x51eb851f

080052b8 <pidInit>:
 */

#include "pid.h"

void pidInit(PidController *pidController, uint8_t kp, uint8_t ki, uint8_t kd, ControllerTopology controllerTopology)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	4608      	mov	r0, r1
 80052c2:	4611      	mov	r1, r2
 80052c4:	461a      	mov	r2, r3
 80052c6:	4603      	mov	r3, r0
 80052c8:	70fb      	strb	r3, [r7, #3]
 80052ca:	460b      	mov	r3, r1
 80052cc:	70bb      	strb	r3, [r7, #2]
 80052ce:	4613      	mov	r3, r2
 80052d0:	707b      	strb	r3, [r7, #1]
	pidController->kp = kp;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	78fa      	ldrb	r2, [r7, #3]
 80052d6:	701a      	strb	r2, [r3, #0]
	pidController->ki = ki;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	78ba      	ldrb	r2, [r7, #2]
 80052dc:	705a      	strb	r2, [r3, #1]
	pidController->kd = kd;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	787a      	ldrb	r2, [r7, #1]
 80052e2:	709a      	strb	r2, [r3, #2]
	pidController->controllerTopology = controllerTopology;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7c3a      	ldrb	r2, [r7, #16]
 80052e8:	f883 2020 	strb.w	r2, [r3, #32]
	pidController->currentError = 0;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	605a      	str	r2, [r3, #4]
	pidController->previousError = 0;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	609a      	str	r2, [r3, #8]
	pidController->sumOfErrors = 0;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	60da      	str	r2, [r3, #12]
	pidController->setpoint = 0;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	611a      	str	r2, [r3, #16]
	pidController->controlledVariable = 0;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	615a      	str	r2, [r3, #20]
	pidController->processVariable = 0;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	619a      	str	r2, [r3, #24]
	pidController->differenceOfErrors = 0;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	61da      	str	r2, [r3, #28]
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
	...

08005324 <pidCompute>:

void pidCompute(PidController *pidController)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	pidController->currentError = pidController->setpoint - pidController->processVariable;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	1ad2      	subs	r2, r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	605a      	str	r2, [r3, #4]
	pidController->sumOfErrors += pidController->currentError;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	441a      	add	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	60da      	str	r2, [r3, #12]
	pidController->differenceOfErrors = pidController->currentError - pidController->previousError;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	1ad2      	subs	r2, r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	61da      	str	r2, [r3, #28]

	if (pidController->sumOfErrors > MAX_SUM_OF_ERRORS)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800535e:	dd04      	ble.n	800536a <pidCompute+0x46>
	{
		pidController->sumOfErrors = MAX_SUM_OF_ERRORS;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005366:	60da      	str	r2, [r3, #12]
 8005368:	e007      	b.n	800537a <pidCompute+0x56>
	}
	else if (pidController->sumOfErrors < MIN_SUM_OF_ERRORS)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8005372:	da02      	bge.n	800537a <pidCompute+0x56>
	{
		pidController->sumOfErrors = MIN_SUM_OF_ERRORS;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a32      	ldr	r2, [pc, #200]	; (8005440 <pidCompute+0x11c>)
 8005378:	60da      	str	r2, [r3, #12]
	}

	if (pidController->controllerTopology == P_CONTROLLER)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d109      	bne.n	8005398 <pidCompute+0x74>
	{
		pidController->controlledVariable = (pidController->kp * pidController->currentError);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	461a      	mov	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	fb03 f202 	mul.w	r2, r3, r2
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	615a      	str	r2, [r3, #20]
 8005396:	e038      	b.n	800540a <pidCompute+0xe6>
	}
	else if (pidController->controllerTopology == PI_CONTROLLER)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d111      	bne.n	80053c6 <pidCompute+0xa2>
	{
		pidController->controlledVariable = (pidController->kp * pidController->currentError) + (pidController->ki * pidController->sumOfErrors);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	fb03 f202 	mul.w	r2, r3, r2
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	785b      	ldrb	r3, [r3, #1]
 80053b4:	4619      	mov	r1, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	fb01 f303 	mul.w	r3, r1, r3
 80053be:	441a      	add	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	615a      	str	r2, [r3, #20]
 80053c4:	e021      	b.n	800540a <pidCompute+0xe6>
	}
	else if (pidController->controllerTopology == PID_CONTROLLER)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d119      	bne.n	8005404 <pidCompute+0xe0>
	{
		pidController->controlledVariable = (pidController->kp * pidController->currentError) + (pidController->ki * pidController->sumOfErrors) + (pidController->kd * pidController->differenceOfErrors);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	fb03 f202 	mul.w	r2, r3, r2
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	785b      	ldrb	r3, [r3, #1]
 80053e2:	4619      	mov	r1, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	441a      	add	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	789b      	ldrb	r3, [r3, #2]
 80053f2:	4619      	mov	r1, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	fb01 f303 	mul.w	r3, r1, r3
 80053fc:	441a      	add	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	615a      	str	r2, [r3, #20]
 8005402:	e002      	b.n	800540a <pidCompute+0xe6>
	}
	else
	{
		pidController->controlledVariable = 0;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	615a      	str	r2, [r3, #20]
	}

	if (pidController->controlledVariable > MAX_CONTROLLED_VARIABLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005412:	db04      	blt.n	800541e <pidCompute+0xfa>
	{
		pidController->controlledVariable = MAX_CONTROLLED_VARIABLE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f640 72ff 	movw	r2, #4095	; 0xfff
 800541a:	615a      	str	r2, [r3, #20]
 800541c:	e006      	b.n	800542c <pidCompute+0x108>
	}
	else if (pidController->controlledVariable < MIN_CONTROLLED_VARIABLE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	da02      	bge.n	800542c <pidCompute+0x108>
	{
		pidController->controlledVariable = MIN_CONTROLLED_VARIABLE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	615a      	str	r2, [r3, #20]
	}

	pidController->previousError = pidController->currentError;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	609a      	str	r2, [r3, #8]
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	fffff830 	.word	0xfffff830

08005444 <pidSetSetpoint>:

void pidSetSetpoint(PidController *pidController, int32_t setpoint)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
	pidController->setpoint = setpoint;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	611a      	str	r2, [r3, #16]
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <pidSetProcessVariable>:
{
	return pidController->setpoint;
}

void pidSetProcessVariable(PidController *pidController, int32_t processVariable)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
	pidController->processVariable = processVariable;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	619a      	str	r2, [r3, #24]
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <pidGetProcessVariable>:

int32_t pidGetProcessVariable(PidController *pidController)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	return pidController->processVariable;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
}
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <pidGetControlledVariable>:

int32_t pidGetControlledVariable(PidController *pidController)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
	return pidController->controlledVariable;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <__libc_init_array>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	4d0d      	ldr	r5, [pc, #52]	; (80054e4 <__libc_init_array+0x38>)
 80054b0:	4c0d      	ldr	r4, [pc, #52]	; (80054e8 <__libc_init_array+0x3c>)
 80054b2:	1b64      	subs	r4, r4, r5
 80054b4:	10a4      	asrs	r4, r4, #2
 80054b6:	2600      	movs	r6, #0
 80054b8:	42a6      	cmp	r6, r4
 80054ba:	d109      	bne.n	80054d0 <__libc_init_array+0x24>
 80054bc:	4d0b      	ldr	r5, [pc, #44]	; (80054ec <__libc_init_array+0x40>)
 80054be:	4c0c      	ldr	r4, [pc, #48]	; (80054f0 <__libc_init_array+0x44>)
 80054c0:	f000 f82e 	bl	8005520 <_init>
 80054c4:	1b64      	subs	r4, r4, r5
 80054c6:	10a4      	asrs	r4, r4, #2
 80054c8:	2600      	movs	r6, #0
 80054ca:	42a6      	cmp	r6, r4
 80054cc:	d105      	bne.n	80054da <__libc_init_array+0x2e>
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
 80054d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d4:	4798      	blx	r3
 80054d6:	3601      	adds	r6, #1
 80054d8:	e7ee      	b.n	80054b8 <__libc_init_array+0xc>
 80054da:	f855 3b04 	ldr.w	r3, [r5], #4
 80054de:	4798      	blx	r3
 80054e0:	3601      	adds	r6, #1
 80054e2:	e7f2      	b.n	80054ca <__libc_init_array+0x1e>
 80054e4:	08005658 	.word	0x08005658
 80054e8:	08005658 	.word	0x08005658
 80054ec:	08005658 	.word	0x08005658
 80054f0:	0800565c 	.word	0x0800565c

080054f4 <memcpy>:
 80054f4:	440a      	add	r2, r1
 80054f6:	4291      	cmp	r1, r2
 80054f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054fc:	d100      	bne.n	8005500 <memcpy+0xc>
 80054fe:	4770      	bx	lr
 8005500:	b510      	push	{r4, lr}
 8005502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800550a:	4291      	cmp	r1, r2
 800550c:	d1f9      	bne.n	8005502 <memcpy+0xe>
 800550e:	bd10      	pop	{r4, pc}

08005510 <memset>:
 8005510:	4402      	add	r2, r0
 8005512:	4603      	mov	r3, r0
 8005514:	4293      	cmp	r3, r2
 8005516:	d100      	bne.n	800551a <memset+0xa>
 8005518:	4770      	bx	lr
 800551a:	f803 1b01 	strb.w	r1, [r3], #1
 800551e:	e7f9      	b.n	8005514 <memset+0x4>

08005520 <_init>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr

0800552c <_fini>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr
