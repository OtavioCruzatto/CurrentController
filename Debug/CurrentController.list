
CurrentController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007394  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800755c  0800755c  0001755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007674  08007674  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800767c  0800767c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800767c  0800767c  0001767c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007680  08007680  00017680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  2000000c  08007690  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  08007690  00020840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fc2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ae  00000000  00000000  00036ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0003a1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249eb  00000000  00000000  0003c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017170  00000000  00000000  00061383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfab2  00000000  00000000  000784f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157fa5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b4  00000000  00000000  00157ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007544 	.word	0x08007544

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08007544 	.word	0x08007544

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b974 	b.w	8000d44 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468e      	mov	lr, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14d      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	d969      	bls.n	8000b5c <__udivmoddi4+0xe8>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b152      	cbz	r2, 8000aa4 <__udivmoddi4+0x30>
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	f1c2 0120 	rsb	r1, r2, #32
 8000a96:	fa20 f101 	lsr.w	r1, r0, r1
 8000a9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa8:	0c21      	lsrs	r1, r4, #16
 8000aaa:	fbbe f6f8 	udiv	r6, lr, r8
 8000aae:	fa1f f78c 	uxth.w	r7, ip
 8000ab2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ab6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aba:	fb06 f107 	mul.w	r1, r6, r7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aca:	f080 811f 	bcs.w	8000d0c <__udivmoddi4+0x298>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 811c 	bls.w	8000d0c <__udivmoddi4+0x298>
 8000ad4:	3e02      	subs	r6, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae8:	fb00 f707 	mul.w	r7, r0, r7
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	d90a      	bls.n	8000b06 <__udivmoddi4+0x92>
 8000af0:	eb1c 0404 	adds.w	r4, ip, r4
 8000af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af8:	f080 810a 	bcs.w	8000d10 <__udivmoddi4+0x29c>
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	f240 8107 	bls.w	8000d10 <__udivmoddi4+0x29c>
 8000b02:	4464      	add	r4, ip
 8000b04:	3802      	subs	r0, #2
 8000b06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0a:	1be4      	subs	r4, r4, r7
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	b11d      	cbz	r5, 8000b18 <__udivmoddi4+0xa4>
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	2300      	movs	r3, #0
 8000b14:	e9c5 4300 	strd	r4, r3, [r5]
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d909      	bls.n	8000b36 <__udivmoddi4+0xc2>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	f000 80ef 	beq.w	8000d06 <__udivmoddi4+0x292>
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2e:	4630      	mov	r0, r6
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	fab3 f683 	clz	r6, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d14a      	bne.n	8000bd4 <__udivmoddi4+0x160>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xd4>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80f9 	bhi.w	8000d3a <__udivmoddi4+0x2c6>
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	469e      	mov	lr, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d0e0      	beq.n	8000b18 <__udivmoddi4+0xa4>
 8000b56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b5a:	e7dd      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000b5c:	b902      	cbnz	r2, 8000b60 <__udivmoddi4+0xec>
 8000b5e:	deff      	udf	#255	; 0xff
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	f040 8092 	bne.w	8000c8e <__udivmoddi4+0x21a>
 8000b6a:	eba1 010c 	sub.w	r1, r1, ip
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2601      	movs	r6, #1
 8000b78:	0c20      	lsrs	r0, r4, #16
 8000b7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b86:	fb0e f003 	mul.w	r0, lr, r3
 8000b8a:	4288      	cmp	r0, r1
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x12c>
 8000b8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x12a>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2c0>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x156>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x154>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bd2:	e79c      	b.n	8000b0e <__udivmoddi4+0x9a>
 8000bd4:	f1c6 0720 	rsb	r7, r6, #32
 8000bd8:	40b3      	lsls	r3, r6
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa20 f407 	lsr.w	r4, r0, r7
 8000be6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bea:	431c      	orrs	r4, r3
 8000bec:	40f9      	lsrs	r1, r7
 8000bee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bfa:	0c20      	lsrs	r0, r4, #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fb09 1118 	mls	r1, r9, r8, r1
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	fb08 f00e 	mul.w	r0, r8, lr
 8000c0c:	4288      	cmp	r0, r1
 8000c0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b8>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2bc>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2bc>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1a09      	subs	r1, r1, r0
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c34:	fb09 1110 	mls	r1, r9, r0, r1
 8000c38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	458e      	cmp	lr, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1e2>
 8000c44:	eb1c 0101 	adds.w	r1, ip, r1
 8000c48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2b4>
 8000c4e:	458e      	cmp	lr, r1
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2b4>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4461      	add	r1, ip
 8000c56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c5e:	eba1 010e 	sub.w	r1, r1, lr
 8000c62:	42a1      	cmp	r1, r4
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46a6      	mov	lr, r4
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x2a4>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x2a0>
 8000c6c:	b15d      	cbz	r5, 8000c86 <__udivmoddi4+0x212>
 8000c6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c72:	eb61 010e 	sbc.w	r1, r1, lr
 8000c76:	fa01 f707 	lsl.w	r7, r1, r7
 8000c7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c7e:	40f1      	lsrs	r1, r6
 8000c80:	431f      	orrs	r7, r3
 8000c82:	e9c5 7100 	strd	r7, r1, [r5]
 8000c86:	2600      	movs	r6, #0
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	f1c2 0320 	rsb	r3, r2, #32
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c98:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4301      	orrs	r1, r0
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cac:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb0:	0c0b      	lsrs	r3, r1, #16
 8000cb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x260>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b8>
 8000ccc:	429e      	cmp	r6, r3
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b8>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	b289      	uxth	r1, r1
 8000cd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x28a>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cfa:	3e02      	subs	r6, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0x104>
 8000d06:	462e      	mov	r6, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e705      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	e6e3      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000d10:	4618      	mov	r0, r3
 8000d12:	e6f8      	b.n	8000b06 <__udivmoddi4+0x92>
 8000d14:	454b      	cmp	r3, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f8>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d20:	3801      	subs	r0, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f8>
 8000d24:	4646      	mov	r6, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x28a>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1e2>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b8>
 8000d34:	3b02      	subs	r3, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x12c>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e709      	b.n	8000b52 <__udivmoddi4+0xde>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x156>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <appInit>:

#include "app.h"

// ======== Init =========== //
void appInit(App *app, GPIO_TypeDef* ledPort, uint16_t ledPin, UART_HandleTypeDef huart, DAC_HandleTypeDef hdac, UART_HandleTypeDef huartDebug)
{
 8000d48:	b082      	sub	sp, #8
 8000d4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4c:	b0a5      	sub	sp, #148	; 0x94
 8000d4e:	af20      	add	r7, sp, #128	; 0x80
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d56:	4613      	mov	r3, r2
 8000d58:	80fb      	strh	r3, [r7, #6]
	// ======== LED =========== //
	app->blinkDelay = DELAY_100_MILISECONDS;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d60:	601a      	str	r2, [r3, #0]
	app->ledPort = ledPort;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	605a      	str	r2, [r3, #4]
	app->ledPin = ledPin;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	88fa      	ldrh	r2, [r7, #6]
 8000d6c:	811a      	strh	r2, [r3, #8]

	// ======== Comm ======== //
	commInit(&app->comm, huart, huartDebug);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f103 060c 	add.w	r6, r3, #12
 8000d74:	a80e      	add	r0, sp, #56	; 0x38
 8000d76:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d7a:	2244      	movs	r2, #68	; 0x44
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f006 fbcb 	bl	8007518 <memcpy>
 8000d82:	466d      	mov	r5, sp
 8000d84:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d98:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000da2:	4630      	mov	r0, r6
 8000da4:	f000 fb50 	bl	8001448 <commInit>

	// ======== Controller =========== //
	controllerInit(&app->controller, hdac);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 8000dae:	466a      	mov	r2, sp
 8000db0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000db4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000db8:	e882 0003 	stmia.w	r2, {r0, r1}
 8000dbc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000dc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f001 fa80 	bl	80022c8 <controllerInit>

	// ======== Filter =========== //
	movingAverageInit(&app->movingAverageFilter, 128);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000dce:	2180      	movs	r1, #128	; 0x80
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f005 ffc1 	bl	8006d58 <movingAverageInit>
}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000de0:	b002      	add	sp, #8
 8000de2:	4770      	bx	lr

08000de4 <appExecuteBlinkLed>:

// ======== LED =========== //
void appExecuteBlinkLed(App *app)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(app->ledPort, app->ledPin);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	891b      	ldrh	r3, [r3, #8]
 8000df4:	4619      	mov	r1, r3
 8000df6:	4610      	mov	r0, r2
 8000df8:	f003 fd63 	bl	80048c2 <HAL_GPIO_TogglePin>
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <appGetBlinkDelay>:

uint32_t appGetBlinkDelay(App *app)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	return app->blinkDelay;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <appRunController>:

// ======== Controller =========== //
void appRunController(App *app)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	controllerRunPidController(&app->controller);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fa90 	bl	8002350 <controllerRunPidController>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <appGetCurrentInMiliAmps>:

uint32_t appGetCurrentInMiliAmps(uint16_t adcValue)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
	uint32_t electronicCircuitGain = 10;
 8000e42:	230a      	movs	r3, #10
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t shuntResistorInOhms = 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	623b      	str	r3, [r7, #32]
  	float measuredSignalInVolts = ((3.3 * adcValue) / 4095);
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb2d 	bl	80004ac <__aeabi_i2d>
 8000e52:	a322      	add	r3, pc, #136	; (adr r3, 8000edc <appGetCurrentInMiliAmps+0xa4>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	f7ff fb92 	bl	8000580 <__aeabi_dmul>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	a31f      	add	r3, pc, #124	; (adr r3, 8000ee4 <appGetCurrentInMiliAmps+0xac>)
 8000e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6a:	f7ff fcb3 	bl	80007d4 <__aeabi_ddiv>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fd95 	bl	80009a4 <__aeabi_d2f>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	61fb      	str	r3, [r7, #28]
  	float conditionedSignalInVolts = measuredSignalInVolts / electronicCircuitGain;
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	ee07 3a90 	vmov	s15, r3
 8000e84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8000e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e90:	edc7 7a06 	vstr	s15, [r7, #24]
  	float calculatedCurrentInAmps = conditionedSignalInVolts / shuntResistorInOhms;
 8000e94:	6a3b      	ldr	r3, [r7, #32]
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e9e:	edd7 6a06 	vldr	s13, [r7, #24]
 8000ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ea6:	edc7 7a05 	vstr	s15, [r7, #20]
  	float calculatedCurrentInMiliAmpsAux = 1000 * calculatedCurrentInAmps;
 8000eaa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eae:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000ed8 <appGetCurrentInMiliAmps+0xa0>
 8000eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eb6:	edc7 7a04 	vstr	s15, [r7, #16]
  	uint32_t calculatedCurrentInMiliAmps = (uint32_t) calculatedCurrentInMiliAmpsAux;
 8000eba:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ec2:	ee17 3a90 	vmov	r3, s15
 8000ec6:	60fb      	str	r3, [r7, #12]
  	return calculatedCurrentInMiliAmps;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	447a0000 	.word	0x447a0000
 8000edc:	66666666 	.word	0x66666666
 8000ee0:	400a6666 	.word	0x400a6666
 8000ee4:	00000000 	.word	0x00000000
 8000ee8:	40affe00 	.word	0x40affe00

08000eec <appAddNewValueToFilter>:

// ======== Filter =========== //
void appAddNewValueToFilter(App *app, uint32_t newValue)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	movingAverageAddValue(&app->movingAverageFilter, newValue);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f005 ff49 	bl	8006d98 <movingAverageAddValue>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <appGetFilterResult>:

uint32_t appGetFilterResult(App *app)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
	return movingAverageGetMean(&app->movingAverageFilter);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f005 ff76 	bl	8006e0e <movingAverageGetMean>
 8000f22:	4603      	mov	r3, r0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <appAppendReceivedByte>:

// ======== Data Packet Rx =========== //
void appAppendReceivedByte(App *app, uint8_t receivedByte)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
	commAppendReceivedByte(&app->comm, receivedByte);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	330c      	adds	r3, #12
 8000f3c:	78fa      	ldrb	r2, [r7, #3]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fe81 	bl	8001c48 <commAppendReceivedByte>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <appDecodeReceivedData>:

void appDecodeReceivedData(App *app)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	commTryDecodeReceivedDataPacket(&app->comm);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	330c      	adds	r3, #12
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fe85 	bl	8001c6a <commTryDecodeReceivedDataPacket>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <appExtractCommandAndPayloadFromDecodedData>:

void appExtractCommandAndPayloadFromDecodedData(App *app)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	commTryExtractCommandAndPayloadFromDecodedDataPacket(&app->comm);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	330c      	adds	r3, #12
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fe85 	bl	8001c84 <commTryExtractCommandAndPayloadFromDecodedDataPacket>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <appDecodeExtractedCommand>:

void appDecodeExtractedCommand(App *app)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
	commTryDecodeExtractedCommand(&app->comm, app);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	330c      	adds	r3, #12
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 feb2 	bl	8001cfa <commTryDecodeExtractedCommand>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <appSendData>:

// ======== Data Packet Tx =========== //
void appSendData(App *app)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	commTrySendData(&app->comm, app);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	330c      	adds	r3, #12
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fa98 	bl	80014e2 <commTrySendData>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <appGetPidKp>:

// ======= Getters and Setters ======== //
float appGetPidKp(App *app)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	return controllerGetPidKp(&app->controller);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 f9e0 	bl	800238e <controllerGetPidKp>
 8000fce:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <appSetPidKp>:

void appSetPidKp(App *app, float kp)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidKp(&app->controller, kp);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000fee:	ed97 0a00 	vldr	s0, [r7]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 f9da 	bl	80023ac <controllerSetPidKp>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <appGetPidKi>:

float appGetPidKi(App *app)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	return controllerGetPidKi(&app->controller);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800100e:	4618      	mov	r0, r3
 8001010:	f001 f9dc 	bl	80023cc <controllerGetPidKi>
 8001014:	eef0 7a40 	vmov.f32	s15, s0
}
 8001018:	eeb0 0a67 	vmov.f32	s0, s15
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <appSetPidKi>:

void appSetPidKi(App *app, float ki)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidKi(&app->controller, ki);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001034:	ed97 0a00 	vldr	s0, [r7]
 8001038:	4618      	mov	r0, r3
 800103a:	f001 f9d6 	bl	80023ea <controllerSetPidKi>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <appGetPidKd>:

float appGetPidKd(App *app)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
	return controllerGetPidKd(&app->controller);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001054:	4618      	mov	r0, r3
 8001056:	f001 f9d8 	bl	800240a <controllerGetPidKd>
 800105a:	eef0 7a40 	vmov.f32	s15, s0
}
 800105e:	eeb0 0a67 	vmov.f32	s0, s15
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <appSetPidKd>:

void appSetPidKd(App *app, float kd)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidKd(&app->controller, kd);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800107a:	ed97 0a00 	vldr	s0, [r7]
 800107e:	4618      	mov	r0, r3
 8001080:	f001 f9d2 	bl	8002428 <controllerSetPidKd>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <appGetPidInterval>:

uint16_t appGetPidInterval(App *app)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	return (uint16_t) (10000 * controllerGetPidInterval(&app->controller));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800109a:	4618      	mov	r0, r3
 800109c:	f001 f9d4 	bl	8002448 <controllerGetPidInterval>
 80010a0:	eef0 7a40 	vmov.f32	s15, s0
 80010a4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80010c0 <appGetPidInterval+0x34>
 80010a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b0:	ee17 3a90 	vmov	r3, s15
 80010b4:	b29b      	uxth	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	461c4000 	.word	0x461c4000

080010c4 <appSetPidInterval>:

void appSetPidInterval(App *app, uint16_t pidInterval)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
	if ((pidInterval >= 0) && (pidInterval <= DELAY_5000_MILISECONDS))
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d810      	bhi.n	80010fc <appSetPidInterval+0x38>
	{
		controllerSetPidInterval(&app->controller, ((float) pidInterval) / 10000);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010e0:	887a      	ldrh	r2, [r7, #2]
 80010e2:	ee07 2a90 	vmov	s15, r2
 80010e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ea:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001104 <appSetPidInterval+0x40>
 80010ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010f2:	eeb0 0a47 	vmov.f32	s0, s14
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 f9b5 	bl	8002466 <controllerSetPidInterval>
	}
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	461c4000 	.word	0x461c4000

08001108 <appGetPidMinSumOfErrors>:

int32_t appGetPidMinSumOfErrors(App *app)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	return controllerGetPidMinSumOfErrors(&app->controller);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001116:	4618      	mov	r0, r3
 8001118:	f001 f9b5 	bl	8002486 <controllerGetPidMinSumOfErrors>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <appSetPidMinSumOfErrors>:

void appSetPidMinSumOfErrors(App *app, int32_t minSumOfErrors)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
	controllerSetPidMinSumOfErrors(&app->controller, minSumOfErrors);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001136:	6839      	ldr	r1, [r7, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f001 f9b1 	bl	80024a0 <controllerSetPidMinSumOfErrors>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <appGetPidMaxSumOfErrors>:

int32_t appGetPidMaxSumOfErrors(App *app)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	return controllerGetPidMaxSumOfErrors(&app->controller);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001154:	4618      	mov	r0, r3
 8001156:	f001 f9b1 	bl	80024bc <controllerGetPidMaxSumOfErrors>
 800115a:	4603      	mov	r3, r0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <appSetPidMaxSumOfErrors>:

void appSetPidMaxSumOfErrors(App *app, int32_t maxSumOfErrors)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
	controllerSetPidMaxSumOfErrors(&app->controller, maxSumOfErrors);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001174:	6839      	ldr	r1, [r7, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f001 f9ad 	bl	80024d6 <controllerSetPidMaxSumOfErrors>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <appGetPidMinControlledVariable>:

int32_t appGetPidMinControlledVariable(App *app)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	return controllerGetPidMinControlledVariable(&app->controller);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001192:	4618      	mov	r0, r3
 8001194:	f001 f9ad 	bl	80024f2 <controllerGetPidMinControlledVariable>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <appSetPidMinControlledVariable>:

void appSetPidMinControlledVariable(App *app, int32_t minControlledVariable)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	6039      	str	r1, [r7, #0]
	controllerSetPidMinControlledVariable(&app->controller, minControlledVariable);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011b2:	6839      	ldr	r1, [r7, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 f9a9 	bl	800250c <controllerSetPidMinControlledVariable>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <appGetPidMaxControlledVariable>:

int32_t appGetPidMaxControlledVariable(App *app)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
	return controllerGetPidMaxControlledVariable(&app->controller);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 f9a9 	bl	8002528 <controllerGetPidMaxControlledVariable>
 80011d6:	4603      	mov	r3, r0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <appSetPidMaxControlledVariable>:

void appSetPidMaxControlledVariable(App *app, int32_t maxControlledVariable)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	controllerSetPidMaxControlledVariable(&app->controller, maxControlledVariable);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 f9a5 	bl	8002542 <controllerSetPidMaxControlledVariable>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <appGetPidOffset>:

float appGetPidOffset(App *app)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	return controllerGetPidOffset(&app->controller);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800120e:	4618      	mov	r0, r3
 8001210:	f001 f9a5 	bl	800255e <controllerGetPidOffset>
 8001214:	eef0 7a40 	vmov.f32	s15, s0
}
 8001218:	eeb0 0a67 	vmov.f32	s0, s15
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <appSetPidOffset>:

void appSetPidOffset(App *app, float offset)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidOffset(&app->controller, offset);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001234:	ed97 0a00 	vldr	s0, [r7]
 8001238:	4618      	mov	r0, r3
 800123a:	f001 f99f 	bl	800257c <controllerSetPidOffset>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <appGetPidBias>:

float appGetPidBias(App *app)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	return controllerGetPidBias(&app->controller);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001254:	4618      	mov	r0, r3
 8001256:	f001 f9a1 	bl	800259c <controllerGetPidBias>
 800125a:	eef0 7a40 	vmov.f32	s15, s0
}
 800125e:	eeb0 0a67 	vmov.f32	s0, s15
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <appSetPidBias>:

void appSetPidBias(App *app, float bias)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidBias(&app->controller, bias);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800127a:	ed97 0a00 	vldr	s0, [r7]
 800127e:	4618      	mov	r0, r3
 8001280:	f001 f99b 	bl	80025ba <controllerSetPidBias>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <appGetPidSetpoint>:

float appGetPidSetpoint(App *app)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	return controllerGetPidSetpoint(&app->controller);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800129a:	4618      	mov	r0, r3
 800129c:	f001 f99d 	bl	80025da <controllerGetPidSetpoint>
 80012a0:	eef0 7a40 	vmov.f32	s15, s0
}
 80012a4:	eeb0 0a67 	vmov.f32	s0, s15
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <appSetPidSetpoint>:

void appSetPidSetpoint(App *app, float setpoint)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	ed87 0a00 	vstr	s0, [r7]
	if ((setpoint >= MIN_CURRENT_IN_MICRO_AMPS) && (setpoint <= MAX_CURRENT_IN_MICRO_AMPS))
 80012bc:	edd7 7a00 	vldr	s15, [r7]
 80012c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	da00      	bge.n	80012cc <appSetPidSetpoint+0x1c>
	{
		controllerSetPidSetpoint(&app->controller, setpoint);
		commSetEnableSendCurrentPidSetpointValue(&app->comm, TRUE);
	}
}
 80012ca:	e017      	b.n	80012fc <appSetPidSetpoint+0x4c>
	if ((setpoint >= MIN_CURRENT_IN_MICRO_AMPS) && (setpoint <= MAX_CURRENT_IN_MICRO_AMPS))
 80012cc:	edd7 7a00 	vldr	s15, [r7]
 80012d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001304 <appSetPidSetpoint+0x54>
 80012d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	d900      	bls.n	80012e0 <appSetPidSetpoint+0x30>
}
 80012de:	e00d      	b.n	80012fc <appSetPidSetpoint+0x4c>
		controllerSetPidSetpoint(&app->controller, setpoint);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012e6:	ed97 0a00 	vldr	s0, [r7]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 f984 	bl	80025f8 <controllerSetPidSetpoint>
		commSetEnableSendCurrentPidSetpointValue(&app->comm, TRUE);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	330c      	adds	r3, #12
 80012f4:	2101      	movs	r1, #1
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 ff6f 	bl	80021da <commSetEnableSendCurrentPidSetpointValue>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	48927c00 	.word	0x48927c00

08001308 <appGetPidProcessVariable>:

float appGetPidProcessVariable(App *app)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	return controllerGetPidProcessVariable(&app->controller);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001316:	4618      	mov	r0, r3
 8001318:	f001 f97e 	bl	8002618 <controllerGetPidProcessVariable>
 800131c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001320:	eeb0 0a67 	vmov.f32	s0, s15
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <appSetPidProcessVariable>:

void appSetPidProcessVariable(App *app, uint32_t value)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
	controllerSetPidProcessVariable(&app->controller, (float) value);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	ee07 2a90 	vmov	s15, r2
 8001340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001344:	eeb0 0a67 	vmov.f32	s0, s15
 8001348:	4618      	mov	r0, r3
 800134a:	f001 f974 	bl	8002636 <controllerSetPidProcessVariable>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <appGetRunPidControllerStatus>:

Bool appGetRunPidControllerStatus(App *app)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
	return controllerGetRunPidControllerStatus(&app->controller);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001364:	4618      	mov	r0, r3
 8001366:	f001 f976 	bl	8002656 <controllerGetRunPidControllerStatus>
 800136a:	4603      	mov	r3, r0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <appSetRunPidControllerStatus>:

void appSetRunPidControllerStatus(App *app, Bool status)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	70fb      	strb	r3, [r7, #3]
	controllerSetRunPidControllerStatus(&app->controller, status);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001386:	78fa      	ldrb	r2, [r7, #3]
 8001388:	4611      	mov	r1, r2
 800138a:	4618      	mov	r0, r3
 800138c:	f001 f970 	bl	8002670 <controllerSetRunPidControllerStatus>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <appGetSamplingInterval>:

uint16_t appGetSamplingInterval(App *app)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	return controllerGetSamplingInterval(&app->controller);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 f97f 	bl	80026aa <controllerGetSamplingInterval>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <appSetSamplingInterval>:

void appSetSamplingInterval(App *app, uint16_t samplingInterval)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]
	if ((samplingInterval >= 0) && (samplingInterval <= DELAY_5000_MILISECONDS))
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d807      	bhi.n	80013dc <appSetSamplingInterval+0x26>
	{
		controllerSetSamplingInterval(&app->controller, samplingInterval);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f001 f974 	bl	80026c4 <controllerSetSamplingInterval>
	}
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <appGetMovingAverageFilterWindow>:

uint16_t appGetMovingAverageFilterWindow(App *app)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	return movingAverageGetWindow(&app->movingAverageFilter);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 fd18 	bl	8006e28 <movingAverageGetWindow>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <appSetMovingAverageFilterWindow>:

void appSetMovingAverageFilterWindow(App *app, uint16_t movingAverageFilterWindow)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	807b      	strh	r3, [r7, #2]
	movingAverageSetWindow(&app->movingAverageFilter, movingAverageFilterWindow);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001414:	887a      	ldrh	r2, [r7, #2]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f005 fd11 	bl	8006e40 <movingAverageSetWindow>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <appSetEnableSendKeepAliveMessage>:
{
	return commGetEnableSendKeepAliveMessage(&app->comm);
}

void appSetEnableSendKeepAliveMessage(App *app, Bool status)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	70fb      	strb	r3, [r7, #3]
	commSetEnableSendKeepAliveMessage(&app->comm, status);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	330c      	adds	r3, #12
 8001436:	78fa      	ldrb	r2, [r7, #3]
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f000 feea 	bl	8002214 <commSetEnableSendKeepAliveMessage>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <commInit>:

#include "comm.h"

// ======== Init ======== //
void commInit(Comm *comm, UART_HandleTypeDef huart, UART_HandleTypeDef huartDebug)
{
 8001448:	b084      	sub	sp, #16
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	f107 0014 	add.w	r0, r7, #20
 8001456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// ======== UART =========== //
	comm->huart = huart;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4618      	mov	r0, r3
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	2244      	movs	r2, #68	; 0x44
 8001464:	4619      	mov	r1, r3
 8001466:	f006 f857 	bl	8007518 <memcpy>
	comm->huartDebug = huartDebug;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3344      	adds	r3, #68	; 0x44
 800146e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001472:	2244      	movs	r2, #68	; 0x44
 8001474:	4618      	mov	r0, r3
 8001476:	f006 f84f 	bl	8007518 <memcpy>

	// ======== Data Packet Tx =========== //
	dataPacketTxInit(&comm->dataPacketTx, 0xAA, 0x55);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3388      	adds	r3, #136	; 0x88
 800147e:	2255      	movs	r2, #85	; 0x55
 8001480:	21aa      	movs	r1, #170	; 0xaa
 8001482:	4618      	mov	r0, r3
 8001484:	f002 f852 	bl	800352c <dataPacketTxInit>
	commSetEnableSendProcessVariable(comm, FALSE);
 8001488:	2100      	movs	r1, #0
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fe6b 	bl	8002166 <commSetEnableSendProcessVariable>
	commSetEnableSendCurrentConfigDataValues(comm, FALSE);
 8001490:	2100      	movs	r1, #0
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fe84 	bl	80021a0 <commSetEnableSendCurrentConfigDataValues>
	commSetEnableSendCurrentPidSetpointValue(comm, FALSE);
 8001498:	2100      	movs	r1, #0
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fe9d 	bl	80021da <commSetEnableSendCurrentPidSetpointValue>
	commSetEnableSendKeepAliveMessage(comm,  FALSE);
 80014a0:	2100      	movs	r1, #0
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 feb6 	bl	8002214 <commSetEnableSendKeepAliveMessage>

	// ======== Data Packet Rx =========== //
	dataPacketRxInit(&comm->dataPacketRx, 0xAA, 0x55);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	33fe      	adds	r3, #254	; 0xfe
 80014ac:	2255      	movs	r2, #85	; 0x55
 80014ae:	21aa      	movs	r1, #170	; 0xaa
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 fe6f 	bl	8003194 <dataPacketRxInit>
	commSetDecodeCommandStatus(comm, FALSE);
 80014b6:	2100      	movs	r1, #0
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fec8 	bl	800224e <commSetDecodeCommandStatus>
	commSetCommand(comm, 0x00);
 80014be:	2100      	movs	r1, #0
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 fee1 	bl	8002288 <commSetCommand>
	commClearData(comm);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 fbae 	bl	8001c28 <commClearData>
	commSetDataLenght(comm, 0);
 80014cc:	2100      	movs	r1, #0
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 feea 	bl	80022a8 <commSetDataLenght>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014de:	b004      	add	sp, #16
 80014e0:	4770      	bx	lr

080014e2 <commTrySendData>:

// ======== TX - Data Packet =========== //
void commTrySendData(Comm *comm, App *app)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
	if (commGetEnableSendCurrentConfigDataValues(comm) == TRUE)
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 fe4a 	bl	8002186 <commGetEnableSendCurrentConfigDataValues>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d108      	bne.n	800150a <commTrySendData+0x28>
	{
		commSendCurrentConfigDataValues(comm, app);
 80014f8:	6839      	ldr	r1, [r7, #0]
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f832 	bl	8001564 <commSendCurrentConfigDataValues>
		commSetEnableSendCurrentConfigDataValues(comm, FALSE);
 8001500:	2100      	movs	r1, #0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fe4c 	bl	80021a0 <commSetEnableSendCurrentConfigDataValues>
	}
	else if (commGetEnableSendProcessVariable(comm) == TRUE)
	{
		commSendProcessVariable(comm, app);
	}
}
 8001508:	e027      	b.n	800155a <commTrySendData+0x78>
	else if (commGetEnableSendCurrentPidSetpointValue(comm) == TRUE)
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 fe58 	bl	80021c0 <commGetEnableSendCurrentPidSetpointValue>
 8001510:	4603      	mov	r3, r0
 8001512:	2b01      	cmp	r3, #1
 8001514:	d108      	bne.n	8001528 <commTrySendData+0x46>
		commSendCurrentPidSetpointValue(comm, app);
 8001516:	6839      	ldr	r1, [r7, #0]
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f9e3 	bl	80018e4 <commSendCurrentPidSetpointValue>
		commSetEnableSendCurrentPidSetpointValue(comm, FALSE);
 800151e:	2100      	movs	r1, #0
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 fe5a 	bl	80021da <commSetEnableSendCurrentPidSetpointValue>
}
 8001526:	e018      	b.n	800155a <commTrySendData+0x78>
	else if (commGetEnableSendKeepAliveMessage(comm) == TRUE)
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 fe66 	bl	80021fa <commGetEnableSendKeepAliveMessage>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	d108      	bne.n	8001546 <commTrySendData+0x64>
		commSendKeepAliveMessage(comm, app);
 8001534:	6839      	ldr	r1, [r7, #0]
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 fa60 	bl	80019fc <commSendKeepAliveMessage>
		commSetEnableSendKeepAliveMessage(comm, FALSE);
 800153c:	2100      	movs	r1, #0
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 fe68 	bl	8002214 <commSetEnableSendKeepAliveMessage>
}
 8001544:	e009      	b.n	800155a <commTrySendData+0x78>
	else if (commGetEnableSendProcessVariable(comm) == TRUE)
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fe00 	bl	800214c <commGetEnableSendProcessVariable>
 800154c:	4603      	mov	r3, r0
 800154e:	2b01      	cmp	r3, #1
 8001550:	d103      	bne.n	800155a <commTrySendData+0x78>
		commSendProcessVariable(comm, app);
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fac7 	bl	8001ae8 <commSendProcessVariable>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <commSendCurrentConfigDataValues>:

void commSendCurrentConfigDataValues(Comm *comm, App *app)
{
 8001564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001568:	b09e      	sub	sp, #120	; 0x78
 800156a:	af0e      	add	r7, sp, #56	; 0x38
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
 8001570:	466b      	mov	r3, sp
 8001572:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 42;
 8001574:	232a      	movs	r3, #42	; 0x2a
 8001576:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t bytes[qtyOfBytes];
 800157a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800157e:	460b      	mov	r3, r1
 8001580:	3b01      	subs	r3, #1
 8001582:	63bb      	str	r3, [r7, #56]	; 0x38
 8001584:	b2cb      	uxtb	r3, r1
 8001586:	2200      	movs	r2, #0
 8001588:	4698      	mov	r8, r3
 800158a:	4691      	mov	r9, r2
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001598:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800159c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015a0:	b2cb      	uxtb	r3, r1
 80015a2:	2200      	movs	r2, #0
 80015a4:	461c      	mov	r4, r3
 80015a6:	4615      	mov	r5, r2
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	00eb      	lsls	r3, r5, #3
 80015b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015b6:	00e2      	lsls	r2, r4, #3
 80015b8:	460b      	mov	r3, r1
 80015ba:	3307      	adds	r3, #7
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	ebad 0d03 	sub.w	sp, sp, r3
 80015c4:	ab0e      	add	r3, sp, #56	; 0x38
 80015c6:	3300      	adds	r3, #0
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t kpTimes1000 = (uint32_t) (1000 * appGetPidKp(app));
 80015ca:	6838      	ldr	r0, [r7, #0]
 80015cc:	f7ff fcf5 	bl	8000fba <appGetPidKp>
 80015d0:	eef0 7a40 	vmov.f32	s15, s0
 80015d4:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800188c <commSendCurrentConfigDataValues+0x328>
 80015d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e0:	ee17 3a90 	vmov	r3, s15
 80015e4:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t kiTimes1000 = (uint32_t) (1000 * appGetPidKi(app));
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f7ff fd0a 	bl	8001000 <appGetPidKi>
 80015ec:	eef0 7a40 	vmov.f32	s15, s0
 80015f0:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800188c <commSendCurrentConfigDataValues+0x328>
 80015f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fc:	ee17 3a90 	vmov	r3, s15
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t kdTimes1000 = (uint32_t) (1000 * appGetPidKd(app));
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f7ff fd1f 	bl	8001046 <appGetPidKd>
 8001608:	eef0 7a40 	vmov.f32	s15, s0
 800160c:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800188c <commSendCurrentConfigDataValues+0x328>
 8001610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001618:	ee17 3a90 	vmov	r3, s15
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t pidInterval = (uint16_t) appGetPidInterval(app);
 800161e:	6838      	ldr	r0, [r7, #0]
 8001620:	f7ff fd34 	bl	800108c <appGetPidInterval>
 8001624:	4603      	mov	r3, r0
 8001626:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t samplingInterval = appGetSamplingInterval(app);
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	f7ff feb5 	bl	8001398 <appGetSamplingInterval>
 800162e:	4603      	mov	r3, r0
 8001630:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t movingAverageWindow = appGetMovingAverageFilterWindow(app);
 8001632:	6838      	ldr	r0, [r7, #0]
 8001634:	f7ff fed6 	bl	80013e4 <appGetMovingAverageFilterWindow>
 8001638:	4603      	mov	r3, r0
 800163a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t minSumOfErrors = (uint32_t) (appGetPidMinSumOfErrors(app) + 1000000000);
 800163c:	6838      	ldr	r0, [r7, #0]
 800163e:	f7ff fd63 	bl	8001108 <appGetPidMinSumOfErrors>
 8001642:	4602      	mov	r2, r0
 8001644:	4b92      	ldr	r3, [pc, #584]	; (8001890 <commSendCurrentConfigDataValues+0x32c>)
 8001646:	4413      	add	r3, r2
 8001648:	61fb      	str	r3, [r7, #28]
	uint32_t maxSumOfErrors = (uint32_t) (appGetPidMaxSumOfErrors(app) + 1000000000);
 800164a:	6838      	ldr	r0, [r7, #0]
 800164c:	f7ff fd7b 	bl	8001146 <appGetPidMaxSumOfErrors>
 8001650:	4602      	mov	r2, r0
 8001652:	4b8f      	ldr	r3, [pc, #572]	; (8001890 <commSendCurrentConfigDataValues+0x32c>)
 8001654:	4413      	add	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
	uint32_t minControlledVariable = (uint32_t) (appGetPidMinControlledVariable(app) + 1000000000);
 8001658:	6838      	ldr	r0, [r7, #0]
 800165a:	f7ff fd93 	bl	8001184 <appGetPidMinControlledVariable>
 800165e:	4602      	mov	r2, r0
 8001660:	4b8b      	ldr	r3, [pc, #556]	; (8001890 <commSendCurrentConfigDataValues+0x32c>)
 8001662:	4413      	add	r3, r2
 8001664:	617b      	str	r3, [r7, #20]
	uint32_t maxControlledVariable = (uint32_t) (appGetPidMaxControlledVariable(app) + 1000000000);
 8001666:	6838      	ldr	r0, [r7, #0]
 8001668:	f7ff fdab 	bl	80011c2 <appGetPidMaxControlledVariable>
 800166c:	4602      	mov	r2, r0
 800166e:	4b88      	ldr	r3, [pc, #544]	; (8001890 <commSendCurrentConfigDataValues+0x32c>)
 8001670:	4413      	add	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
	uint32_t offset = (uint32_t) ((appGetPidOffset(app) * 1000) + 1000000);
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7ff fdc3 	bl	8001200 <appGetPidOffset>
 800167a:	eef0 7a40 	vmov.f32	s15, s0
 800167e:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800188c <commSendCurrentConfigDataValues+0x328>
 8001682:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001686:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001894 <commSendCurrentConfigDataValues+0x330>
 800168a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800168e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001692:	ee17 3a90 	vmov	r3, s15
 8001696:	60fb      	str	r3, [r7, #12]
	uint32_t bias = (uint32_t) ((appGetPidBias(app) * 1000) + 1000000);
 8001698:	6838      	ldr	r0, [r7, #0]
 800169a:	f7ff fdd4 	bl	8001246 <appGetPidBias>
 800169e:	eef0 7a40 	vmov.f32	s15, s0
 80016a2:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800188c <commSendCurrentConfigDataValues+0x328>
 80016a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016aa:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001894 <commSendCurrentConfigDataValues+0x330>
 80016ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b6:	ee17 3a90 	vmov	r3, s15
 80016ba:	60bb      	str	r3, [r7, #8]

	/************* Kp *************/
	bytes[0] = ((kpTimes1000 >> 24) & 0x000000FF);
 80016bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016be:	0e1b      	lsrs	r3, r3, #24
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c4:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((kpTimes1000 >> 16) & 0x000000FF);
 80016c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c8:	0c1b      	lsrs	r3, r3, #16
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ce:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((kpTimes1000 >> 8) & 0x000000FF);
 80016d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d8:	709a      	strb	r2, [r3, #2]
	bytes[3] = (kpTimes1000 & 0x000000FF);
 80016da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e0:	70da      	strb	r2, [r3, #3]

	/************* Ki *************/
	bytes[4] = ((kiTimes1000 >> 24) & 0x000000FF);
 80016e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e4:	0e1b      	lsrs	r3, r3, #24
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ea:	711a      	strb	r2, [r3, #4]
	bytes[5] = ((kiTimes1000 >> 16) & 0x000000FF);
 80016ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ee:	0c1b      	lsrs	r3, r3, #16
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f4:	715a      	strb	r2, [r3, #5]
	bytes[6] = ((kiTimes1000 >> 8) & 0x000000FF);
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fe:	719a      	strb	r2, [r3, #6]
	bytes[7] = (kiTimes1000 & 0x000000FF);
 8001700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001702:	b2da      	uxtb	r2, r3
 8001704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001706:	71da      	strb	r2, [r3, #7]

	/************* Kd *************/
	bytes[8] = ((kdTimes1000 >> 24) & 0x000000FF);
 8001708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170a:	0e1b      	lsrs	r3, r3, #24
 800170c:	b2da      	uxtb	r2, r3
 800170e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001710:	721a      	strb	r2, [r3, #8]
	bytes[9] = ((kdTimes1000 >> 16) & 0x000000FF);
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001714:	0c1b      	lsrs	r3, r3, #16
 8001716:	b2da      	uxtb	r2, r3
 8001718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171a:	725a      	strb	r2, [r3, #9]
	bytes[10] = ((kdTimes1000 >> 8) & 0x000000FF);
 800171c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	b2da      	uxtb	r2, r3
 8001722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001724:	729a      	strb	r2, [r3, #10]
	bytes[11] = (kdTimes1000 & 0x000000FF);
 8001726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001728:	b2da      	uxtb	r2, r3
 800172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172c:	72da      	strb	r2, [r3, #11]

	/************* Pid Interval *************/
	bytes[12] = ((pidInterval >> 8) & 0x00FF);
 800172e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	b29b      	uxth	r3, r3
 8001734:	b2da      	uxtb	r2, r3
 8001736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001738:	731a      	strb	r2, [r3, #12]
	bytes[13] = (pidInterval & 0x00FF);
 800173a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800173c:	b2da      	uxtb	r2, r3
 800173e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001740:	735a      	strb	r2, [r3, #13]

	/************* Sampling Interval *************/
	bytes[14] = ((samplingInterval >> 8) & 0x00FF);
 8001742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	b29b      	uxth	r3, r3
 8001748:	b2da      	uxtb	r2, r3
 800174a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174c:	739a      	strb	r2, [r3, #14]
	bytes[15] = (samplingInterval & 0x00FF);
 800174e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001750:	b2da      	uxtb	r2, r3
 8001752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001754:	73da      	strb	r2, [r3, #15]

	/************* Moving Average Window *************/
	bytes[16] = ((movingAverageWindow >> 8) & 0x00FF);
 8001756:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	b29b      	uxth	r3, r3
 800175c:	b2da      	uxtb	r2, r3
 800175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001760:	741a      	strb	r2, [r3, #16]
	bytes[17] = (movingAverageWindow & 0x00FF);
 8001762:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001764:	b2da      	uxtb	r2, r3
 8001766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001768:	745a      	strb	r2, [r3, #17]

	/************* Min Sum Of Errors *************/
	bytes[18] = ((minSumOfErrors >> 24) & 0x000000FF);
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	0e1b      	lsrs	r3, r3, #24
 800176e:	b2da      	uxtb	r2, r3
 8001770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001772:	749a      	strb	r2, [r3, #18]
	bytes[19] = ((minSumOfErrors >> 16) & 0x000000FF);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	0c1b      	lsrs	r3, r3, #16
 8001778:	b2da      	uxtb	r2, r3
 800177a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177c:	74da      	strb	r2, [r3, #19]
	bytes[20] = ((minSumOfErrors >> 8) & 0x000000FF);
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	b2da      	uxtb	r2, r3
 8001784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001786:	751a      	strb	r2, [r3, #20]
	bytes[21] = (minSumOfErrors & 0x000000FF);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178e:	755a      	strb	r2, [r3, #21]

	/************* Max Sum Of Errors *************/
	bytes[22] = ((maxSumOfErrors >> 24) & 0x000000FF);
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	0e1b      	lsrs	r3, r3, #24
 8001794:	b2da      	uxtb	r2, r3
 8001796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001798:	759a      	strb	r2, [r3, #22]
	bytes[23] = ((maxSumOfErrors >> 16) & 0x000000FF);
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a2:	75da      	strb	r2, [r3, #23]
	bytes[24] = ((maxSumOfErrors >> 8) & 0x000000FF);
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ac:	761a      	strb	r2, [r3, #24]
	bytes[25] = (maxSumOfErrors & 0x000000FF);
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b4:	765a      	strb	r2, [r3, #25]

	/************* Min Controlled Variable *************/
	bytes[26] = ((minControlledVariable >> 24) & 0x000000FF);
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	0e1b      	lsrs	r3, r3, #24
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017be:	769a      	strb	r2, [r3, #26]
	bytes[27] = ((minControlledVariable >> 16) & 0x000000FF);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	0c1b      	lsrs	r3, r3, #16
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c8:	76da      	strb	r2, [r3, #27]
	bytes[28] = ((minControlledVariable >> 8) & 0x000000FF);
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d2:	771a      	strb	r2, [r3, #28]
	bytes[29] = (minControlledVariable & 0x000000FF);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017da:	775a      	strb	r2, [r3, #29]

	/************* Max Controlled Variable *************/
	bytes[30] = ((maxControlledVariable >> 24) & 0x000000FF);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	0e1b      	lsrs	r3, r3, #24
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e4:	779a      	strb	r2, [r3, #30]
	bytes[31] = ((maxControlledVariable >> 16) & 0x000000FF);
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	0c1b      	lsrs	r3, r3, #16
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ee:	77da      	strb	r2, [r3, #31]
	bytes[32] = ((maxControlledVariable >> 8) & 0x000000FF);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f8:	f883 2020 	strb.w	r2, [r3, #32]
	bytes[33] = (maxControlledVariable & 0x000000FF);
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/************* Offset *************/
	bytes[34] = ((offset >> 24) & 0x000000FF);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	0e1b      	lsrs	r3, r3, #24
 800180a:	b2da      	uxtb	r2, r3
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	bytes[35] = ((offset >> 16) & 0x000000FF);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	0c1b      	lsrs	r3, r3, #16
 8001816:	b2da      	uxtb	r2, r3
 8001818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	bytes[36] = ((offset >> 8) & 0x000000FF);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	b2da      	uxtb	r2, r3
 8001824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	bytes[37] = (offset & 0x000000FF);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	/************* Bias *************/
	bytes[38] = ((bias >> 24) & 0x000000FF);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	0e1b      	lsrs	r3, r3, #24
 8001838:	b2da      	uxtb	r2, r3
 800183a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	bytes[39] = ((bias >> 16) & 0x000000FF);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	0c1b      	lsrs	r3, r3, #16
 8001844:	b2da      	uxtb	r2, r3
 8001846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001848:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	bytes[40] = ((bias >> 8) & 0x000000FF);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	b2da      	uxtb	r2, r3
 8001852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001854:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	bytes[41] = (bias & 0x000000FF);
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_CURRENT_CONFIG_DATA_VALUES);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3388      	adds	r3, #136	; 0x88
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	4618      	mov	r0, r3
 800186a:	f001 ff3c 	bl	80036e6 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3388      	adds	r3, #136	; 0x88
 8001872:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001876:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001878:	4618      	mov	r0, r3
 800187a:	f001 ff4e 	bl	800371a <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3388      	adds	r3, #136	; 0x88
 8001882:	4618      	mov	r0, r3
 8001884:	f001 fe84 	bl	8003590 <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	e005      	b.n	8001898 <commSendCurrentConfigDataValues+0x334>
 800188c:	447a0000 	.word	0x447a0000
 8001890:	3b9aca00 	.word	0x3b9aca00
 8001894:	49742400 	.word	0x49742400
 8001898:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 800189c:	687e      	ldr	r6, [r7, #4]
 800189e:	466d      	mov	r5, sp
 80018a0:	f106 040c 	add.w	r4, r6, #12
 80018a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80018b8:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80018bc:	4660      	mov	r0, ip
 80018be:	f001 feb5 	bl	800362c <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3388      	adds	r3, #136	; 0x88
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 feef 	bl	80036aa <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3388      	adds	r3, #136	; 0x88
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 fecc 	bl	800366e <dataPacketTxClear>
 80018d6:	46d5      	mov	sp, sl
}
 80018d8:	bf00      	nop
 80018da:	3740      	adds	r7, #64	; 0x40
 80018dc:	46bd      	mov	sp, r7
 80018de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018e2:	bf00      	nop

080018e4 <commSendCurrentPidSetpointValue>:

void commSendCurrentPidSetpointValue(Comm *comm, App *app)
{
 80018e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018e8:	b094      	sub	sp, #80	; 0x50
 80018ea:	af0e      	add	r7, sp, #56	; 0x38
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
 80018f0:	466b      	mov	r3, sp
 80018f2:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 4;
 80018f4:	2304      	movs	r3, #4
 80018f6:	75fb      	strb	r3, [r7, #23]
	uint8_t bytes[qtyOfBytes];
 80018f8:	7df9      	ldrb	r1, [r7, #23]
 80018fa:	460b      	mov	r3, r1
 80018fc:	3b01      	subs	r3, #1
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	b2cb      	uxtb	r3, r1
 8001902:	2200      	movs	r2, #0
 8001904:	4698      	mov	r8, r3
 8001906:	4691      	mov	r9, r2
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001914:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001918:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800191c:	b2cb      	uxtb	r3, r1
 800191e:	2200      	movs	r2, #0
 8001920:	461c      	mov	r4, r3
 8001922:	4615      	mov	r5, r2
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	00eb      	lsls	r3, r5, #3
 800192e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001932:	00e2      	lsls	r2, r4, #3
 8001934:	460b      	mov	r3, r1
 8001936:	3307      	adds	r3, #7
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	ebad 0d03 	sub.w	sp, sp, r3
 8001940:	ab0e      	add	r3, sp, #56	; 0x38
 8001942:	3300      	adds	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
	uint32_t setpointTimes1000 = (uint32_t)(1000 * appGetPidSetpoint(app));
 8001946:	6838      	ldr	r0, [r7, #0]
 8001948:	f7ff fca0 	bl	800128c <appGetPidSetpoint>
 800194c:	eef0 7a40 	vmov.f32	s15, s0
 8001950:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80019f8 <commSendCurrentPidSetpointValue+0x114>
 8001954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800195c:	ee17 3a90 	vmov	r3, s15
 8001960:	60bb      	str	r3, [r7, #8]

	bytes[0] = ((setpointTimes1000 >> 24) & 0x000000FF);
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	0e1b      	lsrs	r3, r3, #24
 8001966:	b2da      	uxtb	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((setpointTimes1000 >> 16) & 0x000000FF);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	0c1b      	lsrs	r3, r3, #16
 8001970:	b2da      	uxtb	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((setpointTimes1000 >> 8) & 0x000000FF);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	b2da      	uxtb	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	709a      	strb	r2, [r3, #2]
	bytes[3] = (setpointTimes1000 & 0x000000FF);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	70da      	strb	r2, [r3, #3]

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_CURRENT_PID_SETPOINT);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3388      	adds	r3, #136	; 0x88
 800198c:	2181      	movs	r1, #129	; 0x81
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fea9 	bl	80036e6 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3388      	adds	r3, #136	; 0x88
 8001998:	7dfa      	ldrb	r2, [r7, #23]
 800199a:	68f9      	ldr	r1, [r7, #12]
 800199c:	4618      	mov	r0, r3
 800199e:	f001 febc 	bl	800371a <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3388      	adds	r3, #136	; 0x88
 80019a6:	4618      	mov	r0, r3
 80019a8:	f001 fdf2 	bl	8003590 <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 80019b2:	687e      	ldr	r6, [r7, #4]
 80019b4:	466d      	mov	r5, sp
 80019b6:	f106 040c 	add.w	r4, r6, #12
 80019ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80019ce:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80019d2:	4660      	mov	r0, ip
 80019d4:	f001 fe2a 	bl	800362c <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3388      	adds	r3, #136	; 0x88
 80019dc:	4618      	mov	r0, r3
 80019de:	f001 fe64 	bl	80036aa <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3388      	adds	r3, #136	; 0x88
 80019e6:	4618      	mov	r0, r3
 80019e8:	f001 fe41 	bl	800366e <dataPacketTxClear>
 80019ec:	46d5      	mov	sp, sl
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019f8:	447a0000 	.word	0x447a0000

080019fc <commSendKeepAliveMessage>:

void commSendKeepAliveMessage(Comm *comm, App *app)
{
 80019fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a00:	b094      	sub	sp, #80	; 0x50
 8001a02:	af0e      	add	r7, sp, #56	; 0x38
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
 8001a08:	466b      	mov	r3, sp
 8001a0a:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 1;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	75fb      	strb	r3, [r7, #23]
	uint8_t bytes[qtyOfBytes];
 8001a10:	7df9      	ldrb	r1, [r7, #23]
 8001a12:	460b      	mov	r3, r1
 8001a14:	3b01      	subs	r3, #1
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	b2cb      	uxtb	r3, r1
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4698      	mov	r8, r3
 8001a1e:	4691      	mov	r9, r2
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a34:	b2cb      	uxtb	r3, r1
 8001a36:	2200      	movs	r2, #0
 8001a38:	461c      	mov	r4, r3
 8001a3a:	4615      	mov	r5, r2
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	00eb      	lsls	r3, r5, #3
 8001a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a4a:	00e2      	lsls	r2, r4, #3
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	3307      	adds	r3, #7
 8001a50:	08db      	lsrs	r3, r3, #3
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	ebad 0d03 	sub.w	sp, sp, r3
 8001a58:	ab0e      	add	r3, sp, #56	; 0x38
 8001a5a:	3300      	adds	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]

	if (appGetRunPidControllerStatus(app) == TRUE)
 8001a5e:	6838      	ldr	r0, [r7, #0]
 8001a60:	f7ff fc79 	bl	8001356 <appGetRunPidControllerStatus>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d103      	bne.n	8001a72 <commSendKeepAliveMessage+0x76>
	{
		bytes[0] = RUN;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e002      	b.n	8001a78 <commSendKeepAliveMessage+0x7c>
	}
	else
	{
		bytes[0] = HALT;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
	}

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_KEEP_ALIVE_MESSAGE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3388      	adds	r3, #136	; 0x88
 8001a7c:	2183      	movs	r1, #131	; 0x83
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f001 fe31 	bl	80036e6 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3388      	adds	r3, #136	; 0x88
 8001a88:	7dfa      	ldrb	r2, [r7, #23]
 8001a8a:	68f9      	ldr	r1, [r7, #12]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fe44 	bl	800371a <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3388      	adds	r3, #136	; 0x88
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 fd7a 	bl	8003590 <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 8001aa2:	687e      	ldr	r6, [r7, #4]
 8001aa4:	466d      	mov	r5, sp
 8001aa6:	f106 040c 	add.w	r4, r6, #12
 8001aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aba:	e885 0003 	stmia.w	r5, {r0, r1}
 8001abe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001ac2:	4660      	mov	r0, ip
 8001ac4:	f001 fdb2 	bl	800362c <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3388      	adds	r3, #136	; 0x88
 8001acc:	4618      	mov	r0, r3
 8001ace:	f001 fdec 	bl	80036aa <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3388      	adds	r3, #136	; 0x88
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 fdc9 	bl	800366e <dataPacketTxClear>
 8001adc:	46d5      	mov	sp, sl
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001ae8 <commSendProcessVariable>:

void commSendProcessVariable(Comm *comm, App *app)
{
 8001ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aec:	b094      	sub	sp, #80	; 0x50
 8001aee:	af0e      	add	r7, sp, #56	; 0x38
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
 8001af4:	466b      	mov	r3, sp
 8001af6:	469a      	mov	sl, r3
	uint32_t processVariableValue = (uint32_t) appGetPidProcessVariable(app);
 8001af8:	6838      	ldr	r0, [r7, #0]
 8001afa:	f7ff fc05 	bl	8001308 <appGetPidProcessVariable>
 8001afe:	eef0 7a40 	vmov.f32	s15, s0
 8001b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b06:	ee17 3a90 	vmov	r3, s15
 8001b0a:	617b      	str	r3, [r7, #20]
	uint8_t qtyOfBytes = 4;
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	74fb      	strb	r3, [r7, #19]
	uint8_t bytes[qtyOfBytes];
 8001b10:	7cf9      	ldrb	r1, [r7, #19]
 8001b12:	460b      	mov	r3, r1
 8001b14:	3b01      	subs	r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	b2cb      	uxtb	r3, r1
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4698      	mov	r8, r3
 8001b1e:	4691      	mov	r9, r2
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b34:	b2cb      	uxtb	r3, r1
 8001b36:	2200      	movs	r2, #0
 8001b38:	461c      	mov	r4, r3
 8001b3a:	4615      	mov	r5, r2
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	00eb      	lsls	r3, r5, #3
 8001b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b4a:	00e2      	lsls	r2, r4, #3
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	3307      	adds	r3, #7
 8001b50:	08db      	lsrs	r3, r3, #3
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	ebad 0d03 	sub.w	sp, sp, r3
 8001b58:	ab0e      	add	r3, sp, #56	; 0x38
 8001b5a:	3300      	adds	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
	bytes[0] = ((processVariableValue >> 24) & 0x000000FF);
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	0e1b      	lsrs	r3, r3, #24
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((processVariableValue >> 16) & 0x000000FF);
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	0c1b      	lsrs	r3, r3, #16
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((processVariableValue >> 8) & 0x000000FF);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	709a      	strb	r2, [r3, #2]
	bytes[3] = (processVariableValue & 0x000000FF);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	70da      	strb	r2, [r3, #3]

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_CURRENT_PROCESS_VARIABLE_VALUE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3388      	adds	r3, #136	; 0x88
 8001b88:	2182      	movs	r1, #130	; 0x82
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 fdab 	bl	80036e6 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3388      	adds	r3, #136	; 0x88
 8001b94:	7cfa      	ldrb	r2, [r7, #19]
 8001b96:	68b9      	ldr	r1, [r7, #8]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f001 fdbe 	bl	800371a <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3388      	adds	r3, #136	; 0x88
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 fcf4 	bl	8003590 <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 8001bae:	687e      	ldr	r6, [r7, #4]
 8001bb0:	466d      	mov	r5, sp
 8001bb2:	f106 040c 	add.w	r4, r6, #12
 8001bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bca:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001bce:	4660      	mov	r0, ip
 8001bd0:	f001 fd2c 	bl	800362c <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3388      	adds	r3, #136	; 0x88
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 fd66 	bl	80036aa <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3388      	adds	r3, #136	; 0x88
 8001be2:	4618      	mov	r0, r3
 8001be4:	f001 fd43 	bl	800366e <dataPacketTxClear>
 8001be8:	46d5      	mov	sp, sl
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001bf4 <commSetData>:

// ======== RX - Data Packet =========== //
void commSetData(Comm *comm, uint8_t *data, uint8_t dataLength)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	71fb      	strb	r3, [r7, #7]
	if (dataLength <= QTY_DATA_BYTES)
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b32      	cmp	r3, #50	; 0x32
 8001c06:	d80b      	bhi.n	8001c20 <commSetData+0x2c>
	{
		comm->dataLenght = dataLength;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	79fa      	ldrb	r2, [r7, #7]
 8001c0c:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
		memcpy(comm->data, data, dataLength);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c16:	79fa      	ldrb	r2, [r7, #7]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f005 fc7c 	bl	8007518 <memcpy>
	}
}
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <commClearData>:

void commClearData(Comm *comm)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	memset(comm->data, 0x00, QTY_DATA_BYTES);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c36:	2232      	movs	r2, #50	; 0x32
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f005 fc7a 	bl	8007534 <memset>
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <commAppendReceivedByte>:

void commAppendReceivedByte(Comm *comm, uint8_t receivedByte)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	70fb      	strb	r3, [r7, #3]
	dataPacketRxAppend(&comm->dataPacketRx, receivedByte);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	33fe      	adds	r3, #254	; 0xfe
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 fad7 	bl	8003210 <dataPacketRxAppend>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <commTryDecodeReceivedDataPacket>:

void commTryDecodeReceivedDataPacket(Comm *comm)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
	dataPacketRxDecode(&comm->dataPacketRx);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	33fe      	adds	r3, #254	; 0xfe
 8001c76:	4618      	mov	r0, r3
 8001c78:	f001 fafd 	bl	8003276 <dataPacketRxDecode>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <commTryExtractCommandAndPayloadFromDecodedDataPacket>:

void commTryExtractCommandAndPayloadFromDecodedDataPacket(Comm *comm)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	if (dataPacketRxGetDataPacketStatus(&comm->dataPacketRx) == VALID_RX_DATA_PACKET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	33fe      	adds	r3, #254	; 0xfe
 8001c90:	4618      	mov	r0, r3
 8001c92:	f001 fc3e 	bl	8003512 <dataPacketRxGetDataPacketStatus>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d12a      	bne.n	8001cf2 <commTryExtractCommandAndPayloadFromDecodedDataPacket+0x6e>
	{
		uint8_t receivedCmd = dataPacketRxGetCommand(&comm->dataPacketRx);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	33fe      	adds	r3, #254	; 0xfe
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 fbf9 	bl	8003498 <dataPacketRxGetCommand>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	73fb      	strb	r3, [r7, #15]
		uint8_t receivedPayloadDataLength = dataPacketRxGetPayloadDataLength(&comm->dataPacketRx);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	33fe      	adds	r3, #254	; 0xfe
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 fc23 	bl	80034fa <dataPacketRxGetPayloadDataLength>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	73bb      	strb	r3, [r7, #14]

		if (receivedPayloadDataLength > 0)
 8001cb8:	7bbb      	ldrb	r3, [r7, #14]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <commTryExtractCommandAndPayloadFromDecodedDataPacket+0x52>
		{
			uint8_t *receivedPayloadData = dataPacketRxGetPayloadData(&comm->dataPacketRx);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	33fe      	adds	r3, #254	; 0xfe
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 fc0d 	bl	80034e2 <dataPacketRxGetPayloadData>
 8001cc8:	60b8      	str	r0, [r7, #8]
			commSetData(comm, receivedPayloadData, receivedPayloadDataLength);
 8001cca:	7bbb      	ldrb	r3, [r7, #14]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff8f 	bl	8001bf4 <commSetData>
		}

		commSetCommand(comm, receivedCmd);
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fad4 	bl	8002288 <commSetCommand>
		commSetDecodeCommandStatus(comm, TRUE);
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fab3 	bl	800224e <commSetDecodeCommandStatus>
		dataPacketRxClear(&comm->dataPacketRx);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	33fe      	adds	r3, #254	; 0xfe
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 fb85 	bl	80033fc <dataPacketRxClear>
	}
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <commTryDecodeExtractedCommand>:

void commTryDecodeExtractedCommand(Comm *comm, App *app)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
	if (commGetDecodeCommandStatus(comm) == TRUE)
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fa95 	bl	8002234 <commGetDecodeCommandStatus>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d107      	bne.n	8001d20 <commTryDecodeExtractedCommand+0x26>
	{
		commDecodeReceivedCommand(comm, app);
 8001d10:	6839      	ldr	r1, [r7, #0]
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f808 	bl	8001d28 <commDecodeReceivedCommand>
		commSetDecodeCommandStatus(comm, FALSE);
 8001d18:	2100      	movs	r1, #0
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 fa97 	bl	800224e <commSetDecodeCommandStatus>
	}
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <commDecodeReceivedCommand>:

void commDecodeReceivedCommand(Comm *comm, App *app)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b094      	sub	sp, #80	; 0x50
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	uint16_t receivedSamplingInterval = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t receivedPidInterval = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t receivedMovingAverageWindow = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int32_t receivedPidMinSumOfErrors = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t receivedPidMaxSumOfErrors = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t receivedPidMinControlledVariable = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t receivedPidMaxControlledVariable = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	63bb      	str	r3, [r7, #56]	; 0x38

	uint32_t receivedPidSetpointTimes1000 = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	637b      	str	r3, [r7, #52]	; 0x34
	float receivedPidSetpoint = 0;
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30

	uint32_t pidKpTimes1000 = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
	float pidKp = 0;
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pidKiTimes1000 = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
	float pidKi = 0;
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]

	uint32_t pidKdTimes1000 = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
	float pidKd = 0;
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	61bb      	str	r3, [r7, #24]

	uint32_t receiveidPidOffset = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
	float pidOffset = 0;
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]

	uint32_t receiveidPidBias = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
	float pidBias = 0;
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]

	switch (commGetCommand(comm))
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fa6c 	bl	800226e <commGetCommand>
 8001d96:	4603      	mov	r3, r0
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	2b05      	cmp	r3, #5
 8001d9c:	f200 81cd 	bhi.w	800213a <commDecodeReceivedCommand+0x412>
 8001da0:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <commDecodeReceivedCommand+0x80>)
 8001da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da6:	bf00      	nop
 8001da8:	08001dc1 	.word	0x08001dc1
 8001dac:	08002083 	.word	0x08002083
 8001db0:	0800208d 	.word	0x0800208d
 8001db4:	080020d5 	.word	0x080020d5
 8001db8:	08002109 	.word	0x08002109
 8001dbc:	08002131 	.word	0x08002131
	{
		case CMD_RX_SET_CONFIG_DATA_VALUES:

			// ************* Kp ************* //
			pidKpTimes1000 = (comm->data[0] << 24) + (comm->data[1] << 16) + (comm->data[2] << 8) + comm->data[3];
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8001dc6:	061a      	lsls	r2, r3, #24
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8001dce:	041b      	lsls	r3, r3, #16
 8001dd0:	441a      	add	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	4413      	add	r3, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	f892 217b 	ldrb.w	r2, [r2, #379]	; 0x17b
 8001de2:	4413      	add	r3, r2
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
			pidKp = ((float) pidKpTimes1000) / 1000;
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001df0:	eddf 6ac2 	vldr	s13, [pc, #776]	; 80020fc <commDecodeReceivedCommand+0x3d4>
 8001df4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			appSetPidKp(app, pidKp);
 8001dfc:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001e00:	6838      	ldr	r0, [r7, #0]
 8001e02:	f7ff f8eb 	bl	8000fdc <appSetPidKp>

			// ************* Ki ************* //
			pidKiTimes1000 = (comm->data[4] << 24) + (comm->data[5] << 16) + (comm->data[6] << 8) + comm->data[7];
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8001e0c:	061a      	lsls	r2, r3, #24
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	441a      	add	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	4413      	add	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	f892 217f 	ldrb.w	r2, [r2, #383]	; 0x17f
 8001e28:	4413      	add	r3, r2
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
			pidKi = ((float) pidKiTimes1000) / 1000;
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e36:	eddf 6ab1 	vldr	s13, [pc, #708]	; 80020fc <commDecodeReceivedCommand+0x3d4>
 8001e3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e3e:	edc7 7a08 	vstr	s15, [r7, #32]
			appSetPidKi(app, pidKi);
 8001e42:	ed97 0a08 	vldr	s0, [r7, #32]
 8001e46:	6838      	ldr	r0, [r7, #0]
 8001e48:	f7ff f8eb 	bl	8001022 <appSetPidKi>

			// ************* Kd ************* //
			pidKdTimes1000 = (comm->data[8] << 24) + (comm->data[9] << 16) + (comm->data[10] << 8) + comm->data[11];
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8001e52:	061a      	lsls	r2, r3, #24
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8001e5a:	041b      	lsls	r3, r3, #16
 8001e5c:	441a      	add	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 8001e64:	021b      	lsls	r3, r3, #8
 8001e66:	4413      	add	r3, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	f892 2183 	ldrb.w	r2, [r2, #387]	; 0x183
 8001e6e:	4413      	add	r3, r2
 8001e70:	61fb      	str	r3, [r7, #28]
			pidKd = ((float) pidKdTimes1000) / 1000;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e7c:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80020fc <commDecodeReceivedCommand+0x3d4>
 8001e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e84:	edc7 7a06 	vstr	s15, [r7, #24]
			appSetPidKd(app, pidKd);
 8001e88:	ed97 0a06 	vldr	s0, [r7, #24]
 8001e8c:	6838      	ldr	r0, [r7, #0]
 8001e8e:	f7ff f8eb 	bl	8001068 <appSetPidKd>

			// ************* Pid Interval ************* //
			receivedPidInterval = (comm->data[12] << 8) + comm->data[13];
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			appSetPidInterval(app, receivedPidInterval);
 8001eac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	6838      	ldr	r0, [r7, #0]
 8001eb4:	f7ff f906 	bl	80010c4 <appSetPidInterval>

			// ************* Sampling Interval ************* //
			receivedSamplingInterval = (comm->data[14] << 8) + comm->data[15];
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3186 	ldrb.w	r3, [r3, #390]	; 0x186
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			appSetSamplingInterval(app, receivedSamplingInterval);
 8001ed2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6838      	ldr	r0, [r7, #0]
 8001eda:	f7ff fa6c 	bl	80013b6 <appSetSamplingInterval>

			// ************* Moving Average Window ************* //
			receivedMovingAverageWindow = (comm->data[16] << 8) + comm->data[17];
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			appSetMovingAverageFilterWindow(app, receivedMovingAverageWindow);
 8001ef8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001efc:	4619      	mov	r1, r3
 8001efe:	6838      	ldr	r0, [r7, #0]
 8001f00:	f7ff fa7f 	bl	8001402 <appSetMovingAverageFilterWindow>

			// ************* Min Sum Of Errors ************* //
			receivedPidMinSumOfErrors = (comm->data[18] << 24) + (comm->data[19] << 16) + (comm->data[20] << 8) + comm->data[21];
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8001f0a:	061a      	lsls	r2, r3, #24
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	441a      	add	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	4413      	add	r3, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	f892 218d 	ldrb.w	r2, [r2, #397]	; 0x18d
 8001f26:	4413      	add	r3, r2
 8001f28:	647b      	str	r3, [r7, #68]	; 0x44
			receivedPidMinSumOfErrors -= 1000000000;
 8001f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f2c:	4b74      	ldr	r3, [pc, #464]	; (8002100 <commDecodeReceivedCommand+0x3d8>)
 8001f2e:	4413      	add	r3, r2
 8001f30:	647b      	str	r3, [r7, #68]	; 0x44
			appSetPidMinSumOfErrors(app, receivedPidMinSumOfErrors);
 8001f32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001f34:	6838      	ldr	r0, [r7, #0]
 8001f36:	f7ff f8f6 	bl	8001126 <appSetPidMinSumOfErrors>

			// ************* Max Sum Of Errors ************* //
			receivedPidMaxSumOfErrors = (comm->data[22] << 24) + (comm->data[23] << 16) + (comm->data[24] << 8) + comm->data[25];
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 8001f40:	061a      	lsls	r2, r3, #24
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 318f 	ldrb.w	r3, [r3, #399]	; 0x18f
 8001f48:	041b      	lsls	r3, r3, #16
 8001f4a:	441a      	add	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	4413      	add	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	f892 2191 	ldrb.w	r2, [r2, #401]	; 0x191
 8001f5c:	4413      	add	r3, r2
 8001f5e:	643b      	str	r3, [r7, #64]	; 0x40
			receivedPidMaxSumOfErrors -= 1000000000;
 8001f60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f62:	4b67      	ldr	r3, [pc, #412]	; (8002100 <commDecodeReceivedCommand+0x3d8>)
 8001f64:	4413      	add	r3, r2
 8001f66:	643b      	str	r3, [r7, #64]	; 0x40
			appSetPidMaxSumOfErrors(app, receivedPidMaxSumOfErrors);
 8001f68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f6a:	6838      	ldr	r0, [r7, #0]
 8001f6c:	f7ff f8fa 	bl	8001164 <appSetPidMaxSumOfErrors>

			// ************* Min Controlled Variable ************* //
			receivedPidMinControlledVariable = (comm->data[26] << 24) + (comm->data[27] << 16) + (comm->data[28] << 8) + comm->data[29];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8001f76:	061a      	lsls	r2, r3, #24
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	441a      	add	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	4413      	add	r3, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	f892 2195 	ldrb.w	r2, [r2, #405]	; 0x195
 8001f92:	4413      	add	r3, r2
 8001f94:	63fb      	str	r3, [r7, #60]	; 0x3c
			receivedPidMinControlledVariable -= 1000000000;
 8001f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f98:	4b59      	ldr	r3, [pc, #356]	; (8002100 <commDecodeReceivedCommand+0x3d8>)
 8001f9a:	4413      	add	r3, r2
 8001f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
			appSetPidMinControlledVariable(app, receivedPidMinControlledVariable);
 8001f9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001fa0:	6838      	ldr	r0, [r7, #0]
 8001fa2:	f7ff f8fe 	bl	80011a2 <appSetPidMinControlledVariable>

			// ************* Max Controlled Variable ************* //
			receivedPidMaxControlledVariable = (comm->data[30] << 24) + (comm->data[31] << 16) + (comm->data[32] << 8) + comm->data[33];
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001fac:	061a      	lsls	r2, r3, #24
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001fb4:	041b      	lsls	r3, r3, #16
 8001fb6:	441a      	add	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	4413      	add	r3, r2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	f892 2199 	ldrb.w	r2, [r2, #409]	; 0x199
 8001fc8:	4413      	add	r3, r2
 8001fca:	63bb      	str	r3, [r7, #56]	; 0x38
			receivedPidMaxControlledVariable -= 1000000000;
 8001fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fce:	4b4c      	ldr	r3, [pc, #304]	; (8002100 <commDecodeReceivedCommand+0x3d8>)
 8001fd0:	4413      	add	r3, r2
 8001fd2:	63bb      	str	r3, [r7, #56]	; 0x38
			appSetPidMaxControlledVariable(app, receivedPidMaxControlledVariable);
 8001fd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fd6:	6838      	ldr	r0, [r7, #0]
 8001fd8:	f7ff f902 	bl	80011e0 <appSetPidMaxControlledVariable>

			// ************* Pid Offset ************* //
			receiveidPidOffset = (comm->data[34] << 24) + (comm->data[35] << 16) + (comm->data[36] << 8) + comm->data[37];
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 319a 	ldrb.w	r3, [r3, #410]	; 0x19a
 8001fe2:	061a      	lsls	r2, r3, #24
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 319b 	ldrb.w	r3, [r3, #411]	; 0x19b
 8001fea:	041b      	lsls	r3, r3, #16
 8001fec:	441a      	add	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	4413      	add	r3, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	f892 219d 	ldrb.w	r2, [r2, #413]	; 0x19d
 8001ffe:	4413      	add	r3, r2
 8002000:	617b      	str	r3, [r7, #20]
			pidOffset = (((float) receiveidPidOffset) - 1000000) / 1000;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002104 <commDecodeReceivedCommand+0x3dc>
 8002010:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002014:	eddf 6a39 	vldr	s13, [pc, #228]	; 80020fc <commDecodeReceivedCommand+0x3d4>
 8002018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800201c:	edc7 7a04 	vstr	s15, [r7, #16]
			appSetPidOffset(app, pidOffset);
 8002020:	ed97 0a04 	vldr	s0, [r7, #16]
 8002024:	6838      	ldr	r0, [r7, #0]
 8002026:	f7ff f8fc 	bl	8001222 <appSetPidOffset>

			// ************* Pid Bias ************* //
			receiveidPidBias = (comm->data[38] << 24) + (comm->data[39] << 16) + (comm->data[40] << 8) + comm->data[41];
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 8002030:	061a      	lsls	r2, r3, #24
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	441a      	add	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	4413      	add	r3, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	f892 21a1 	ldrb.w	r2, [r2, #417]	; 0x1a1
 800204c:	4413      	add	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
			pidBias = (((float) receiveidPidBias) - 1000000) / 1000;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	ee07 3a90 	vmov	s15, r3
 8002056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002104 <commDecodeReceivedCommand+0x3dc>
 800205e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002062:	eddf 6a26 	vldr	s13, [pc, #152]	; 80020fc <commDecodeReceivedCommand+0x3d4>
 8002066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800206a:	edc7 7a02 	vstr	s15, [r7, #8]
			appSetPidBias(app, pidBias);
 800206e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002072:	6838      	ldr	r0, [r7, #0]
 8002074:	f7ff f8f8 	bl	8001268 <appSetPidBias>

			// ************* Send The New Config Data Values ************* //
			commSetEnableSendCurrentConfigDataValues(comm, TRUE);
 8002078:	2101      	movs	r1, #1
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f890 	bl	80021a0 <commSetEnableSendCurrentConfigDataValues>
			break;
 8002080:	e060      	b.n	8002144 <commDecodeReceivedCommand+0x41c>

		case CMD_RX_ASK_FOR_CURRENT_CONFIG_DATA_VALUES:
			commSetEnableSendCurrentConfigDataValues(comm, TRUE);
 8002082:	2101      	movs	r1, #1
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f88b 	bl	80021a0 <commSetEnableSendCurrentConfigDataValues>
			break;
 800208a:	e05b      	b.n	8002144 <commDecodeReceivedCommand+0x41c>

		case CMD_RX_SET_PID_SETPOINT:
			receivedPidSetpointTimes1000 = (comm->data[0] << 24) + (comm->data[1] << 16) + (comm->data[2] << 8) + comm->data[3];
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8002092:	061a      	lsls	r2, r3, #24
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800209a:	041b      	lsls	r3, r3, #16
 800209c:	441a      	add	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	4413      	add	r3, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	f892 217b 	ldrb.w	r2, [r2, #379]	; 0x17b
 80020ae:	4413      	add	r3, r2
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
			receivedPidSetpoint = ((float) receivedPidSetpointTimes1000) / 1000;
 80020b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020bc:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80020fc <commDecodeReceivedCommand+0x3d4>
 80020c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			appSetPidSetpoint(app, receivedPidSetpoint);
 80020c8:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	f7ff f8ef 	bl	80012b0 <appSetPidSetpoint>
			break;
 80020d2:	e037      	b.n	8002144 <commDecodeReceivedCommand+0x41c>

		case CMD_RX_SET_RUN_PID_CONTROLLER_STATUS:
			if (comm->data[0] == HALT)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <commDecodeReceivedCommand+0x3c0>
			{
				appSetRunPidControllerStatus(app, FALSE);
 80020de:	2100      	movs	r1, #0
 80020e0:	6838      	ldr	r0, [r7, #0]
 80020e2:	f7ff f947 	bl	8001374 <appSetRunPidControllerStatus>
			}
			else if (comm->data[0] == RUN)
			{
				appSetRunPidControllerStatus(app, TRUE);
			}
			break;
 80020e6:	e02a      	b.n	800213e <commDecodeReceivedCommand+0x416>
			else if (comm->data[0] == RUN)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d125      	bne.n	800213e <commDecodeReceivedCommand+0x416>
				appSetRunPidControllerStatus(app, TRUE);
 80020f2:	2101      	movs	r1, #1
 80020f4:	6838      	ldr	r0, [r7, #0]
 80020f6:	f7ff f93d 	bl	8001374 <appSetRunPidControllerStatus>
			break;
 80020fa:	e020      	b.n	800213e <commDecodeReceivedCommand+0x416>
 80020fc:	447a0000 	.word	0x447a0000
 8002100:	c4653600 	.word	0xc4653600
 8002104:	49742400 	.word	0x49742400

		case CMD_RX_SET_SEND_PROCESS_VARIABLE_STATUS:
			if (comm->data[0] == NOT_SEND)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800210e:	2b00      	cmp	r3, #0
 8002110:	d104      	bne.n	800211c <commDecodeReceivedCommand+0x3f4>
			{
				commSetEnableSendProcessVariable(comm, FALSE);
 8002112:	2100      	movs	r1, #0
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f826 	bl	8002166 <commSetEnableSendProcessVariable>
			}
			else if (comm->data[0] == SEND)
			{
				commSetEnableSendProcessVariable(comm, TRUE);
			}
			break;
 800211a:	e012      	b.n	8002142 <commDecodeReceivedCommand+0x41a>
			else if (comm->data[0] == SEND)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8002122:	2b01      	cmp	r3, #1
 8002124:	d10d      	bne.n	8002142 <commDecodeReceivedCommand+0x41a>
				commSetEnableSendProcessVariable(comm, TRUE);
 8002126:	2101      	movs	r1, #1
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f81c 	bl	8002166 <commSetEnableSendProcessVariable>
			break;
 800212e:	e008      	b.n	8002142 <commDecodeReceivedCommand+0x41a>

		case CMD_RX_ASK_FOR_CURRENT_PID_SETPOINT_VALUE:
			commSetEnableSendCurrentPidSetpointValue(comm, TRUE);
 8002130:	2101      	movs	r1, #1
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f851 	bl	80021da <commSetEnableSendCurrentPidSetpointValue>
			break;
 8002138:	e004      	b.n	8002144 <commDecodeReceivedCommand+0x41c>

		default:
			break;
 800213a:	bf00      	nop
 800213c:	e002      	b.n	8002144 <commDecodeReceivedCommand+0x41c>
			break;
 800213e:	bf00      	nop
 8002140:	e000      	b.n	8002144 <commDecodeReceivedCommand+0x41c>
			break;
 8002142:	bf00      	nop
	}
}
 8002144:	bf00      	nop
 8002146:	3750      	adds	r7, #80	; 0x50
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <commGetEnableSendProcessVariable>:

// ======== TX - Getters and Setters ======== //
Bool commGetEnableSendProcessVariable(Comm *comm)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	return comm->enableSendProcessVariable;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <commSetEnableSendProcessVariable>:

void commSetEnableSendProcessVariable(Comm *comm, Bool status)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	70fb      	strb	r3, [r7, #3]
	comm->enableSendProcessVariable = status;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <commGetEnableSendCurrentConfigDataValues>:

Bool commGetEnableSendCurrentConfigDataValues(Comm *comm)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
	return comm->enableSendCurrentConfigDataValues;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <commSetEnableSendCurrentConfigDataValues>:

void commSetEnableSendCurrentConfigDataValues(Comm *comm, Bool status)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	70fb      	strb	r3, [r7, #3]
	comm->enableSendCurrentConfigDataValues = status;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <commGetEnableSendCurrentPidSetpointValue>:

Bool commGetEnableSendCurrentPidSetpointValue(Comm *comm)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	return comm->enableSendCurrentPidSetpointValue;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <commSetEnableSendCurrentPidSetpointValue>:

void commSetEnableSendCurrentPidSetpointValue(Comm *comm, Bool status)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	460b      	mov	r3, r1
 80021e4:	70fb      	strb	r3, [r7, #3]
	comm->enableSendCurrentPidSetpointValue = status;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <commGetEnableSendKeepAliveMessage>:

Bool commGetEnableSendKeepAliveMessage(Comm *comm)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
	return comm->enableSendKeepAliveMessage;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <commSetEnableSendKeepAliveMessage>:

void commSetEnableSendKeepAliveMessage(Comm *comm, Bool status)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
	comm->enableSendKeepAliveMessage = status;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <commGetDecodeCommandStatus>:

// ======== RX - Getters and Setters ======== //
Bool commGetDecodeCommandStatus(Comm *comm)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	return comm->decodeCommandStatus;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <commSetDecodeCommandStatus>:

void commSetDecodeCommandStatus(Comm *comm, Bool status)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
	comm->decodeCommandStatus = status;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <commGetCommand>:

uint8_t commGetCommand(Comm *comm)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
	return comm->command;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3177 	ldrb.w	r3, [r3, #375]	; 0x177
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <commSetCommand>:

void commSetCommand(Comm *comm, uint8_t command)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
	comm->command = command;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <commSetDataLenght>:
{
	return comm->dataLenght;
}

void commSetDataLenght(Comm *comm, uint8_t dataLenght)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70fb      	strb	r3, [r7, #3]
	comm->dataLenght = dataLenght;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <controllerInit>:

#include "controller.h"

// ======== Init ======== //
void controllerInit(Controller *controller, DAC_HandleTypeDef hdac)
{
 80022c8:	b084      	sub	sp, #16
 80022ca:	b5b0      	push	{r4, r5, r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	f107 001c 	add.w	r0, r7, #28
 80022d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	controller->hdac = hdac;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 80022e0:	f107 051c 	add.w	r5, r7, #28
 80022e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	6023      	str	r3, [r4, #0]

	pidInit(&controller->pid, 50, 2, 100, 2, 0, PID_CONTROLLER);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2102      	movs	r1, #2
 80022f0:	ed9f 2a14 	vldr	s4, [pc, #80]	; 8002344 <controllerInit+0x7c>
 80022f4:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80022f8:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8002348 <controllerInit+0x80>
 80022fc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002300:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800234c <controllerInit+0x84>
 8002304:	4618      	mov	r0, r3
 8002306:	f004 fdb1 	bl	8006e6c <pidInit>
	pidSetSetpoint(&controller->pid, 0);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8002344 <controllerInit+0x7c>
 8002310:	4618      	mov	r0, r3
 8002312:	f004 ffb7 	bl	8007284 <pidSetSetpoint>
	controllerSetSamplingInterval(controller, DELAY_5_MILISECONDS);
 8002316:	2132      	movs	r1, #50	; 0x32
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f9d3 	bl	80026c4 <controllerSetSamplingInterval>
	controllerSetRunPidControllerStatus(controller, FALSE);
 800231e:	2100      	movs	r1, #0
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f9a5 	bl	8002670 <controllerSetRunPidControllerStatus>
	HAL_DAC_SetValue(&controller->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 800232c:	2300      	movs	r3, #0
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	f002 f812 	bl	800435a <HAL_DAC_SetValue>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002340:	b004      	add	sp, #16
 8002342:	4770      	bx	lr
 8002344:	00000000 	.word	0x00000000
 8002348:	42c80000 	.word	0x42c80000
 800234c:	42480000 	.word	0x42480000

08002350 <controllerRunPidController>:

// ======== Controller =========== //
void controllerRunPidController(Controller *controller)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	pidCompute(&controller->pid);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4618      	mov	r0, r3
 800235c:	f004 fde0 	bl	8006f20 <pidCompute>
	uint32_t controlledVariable = (uint32_t) pidGetControlledVariable(&controller->pid);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4618      	mov	r0, r3
 8002364:	f004 ffc2 	bl	80072ec <pidGetControlledVariable>
 8002368:	eef0 7a40 	vmov.f32	s15, s0
 800236c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002370:	ee17 3a90 	vmov	r3, s15
 8002374:	60fb      	str	r3, [r7, #12]
	HAL_DAC_SetValue(&controller->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, controlledVariable);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	2100      	movs	r1, #0
 8002382:	f001 ffea 	bl	800435a <HAL_DAC_SetValue>
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <controllerGetPidKp>:

// ======= Getters and Setters ======== //
float controllerGetPidKp(Controller *controller)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
	return pidGetKp(&controller->pid);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	f004 feec 	bl	8007176 <pidGetKp>
 800239e:	eef0 7a40 	vmov.f32	s15, s0
}
 80023a2:	eeb0 0a67 	vmov.f32	s0, s15
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <controllerSetPidKp>:

void controllerSetPidKp(Controller *controller, float kp)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	ed87 0a00 	vstr	s0, [r7]
	pidSetKp(&controller->pid, kp);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	ed97 0a00 	vldr	s0, [r7]
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 fee8 	bl	8007194 <pidSetKp>
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <controllerGetPidKi>:

float controllerGetPidKi(Controller *controller)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	return pidGetKi(&controller->pid);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 feeb 	bl	80071b2 <pidGetKi>
 80023dc:	eef0 7a40 	vmov.f32	s15, s0
}
 80023e0:	eeb0 0a67 	vmov.f32	s0, s15
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <controllerSetPidKi>:

void controllerSetPidKi(Controller *controller, float ki)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	ed87 0a00 	vstr	s0, [r7]
	pidSetKi(&controller->pid, ki);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	ed97 0a00 	vldr	s0, [r7]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f004 fee7 	bl	80071d0 <pidSetKi>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <controllerGetPidKd>:

float controllerGetPidKd(Controller *controller)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
	return pidGetKd(&controller->pid);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4618      	mov	r0, r3
 8002416:	f004 feea 	bl	80071ee <pidGetKd>
 800241a:	eef0 7a40 	vmov.f32	s15, s0
}
 800241e:	eeb0 0a67 	vmov.f32	s0, s15
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <controllerSetPidKd>:

void controllerSetPidKd(Controller *controller, float kd)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	ed87 0a00 	vstr	s0, [r7]
	pidSetKd(&controller->pid, kd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	ed97 0a00 	vldr	s0, [r7]
 800243a:	4618      	mov	r0, r3
 800243c:	f004 fee6 	bl	800720c <pidSetKd>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <controllerGetPidInterval>:

float controllerGetPidInterval(Controller *controller)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	return pidGetInterval(&controller->pid);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4618      	mov	r0, r3
 8002454:	f004 fee9 	bl	800722a <pidGetInterval>
 8002458:	eef0 7a40 	vmov.f32	s15, s0
}
 800245c:	eeb0 0a67 	vmov.f32	s0, s15
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <controllerSetPidInterval>:

void controllerSetPidInterval(Controller *controller, float pidInterval)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	ed87 0a00 	vstr	s0, [r7]
	pidSetInterval(&controller->pid, pidInterval);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	ed97 0a00 	vldr	s0, [r7]
 8002478:	4618      	mov	r0, r3
 800247a:	f004 fee5 	bl	8007248 <pidSetInterval>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <controllerGetPidMinSumOfErrors>:

int32_t controllerGetPidMinSumOfErrors(Controller *controller)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
	return pidGetMinSumOfErrors(&controller->pid);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4618      	mov	r0, r3
 8002492:	f004 ff76 	bl	8007382 <pidGetMinSumOfErrors>
 8002496:	4603      	mov	r3, r0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <controllerSetPidMinSumOfErrors>:

void controllerSetPidMinSumOfErrors(Controller *controller, int32_t minSumOfErrors)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
	pidSetMinSumOfErrors(&controller->pid, minSumOfErrors);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6839      	ldr	r1, [r7, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 ff74 	bl	800739c <pidSetMinSumOfErrors>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <controllerGetPidMaxSumOfErrors>:

int32_t controllerGetPidMaxSumOfErrors(Controller *controller)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	return pidGetMaxSumOfErrors(&controller->pid);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 ff88 	bl	80073dc <pidGetMaxSumOfErrors>
 80024cc:	4603      	mov	r3, r0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <controllerSetPidMaxSumOfErrors>:

void controllerSetPidMaxSumOfErrors(Controller *controller, int32_t maxSumOfErrors)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
	pidSetMaxSumOfErrors(&controller->pid, maxSumOfErrors);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6839      	ldr	r1, [r7, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f004 ff85 	bl	80073f4 <pidSetMaxSumOfErrors>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <controllerGetPidMinControlledVariable>:

int32_t controllerGetPidMinControlledVariable(Controller *controller)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
	return pidGetMinControlledVariable(&controller->pid);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f004 ff99 	bl	8007434 <pidGetMinControlledVariable>
 8002502:	4603      	mov	r3, r0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <controllerSetPidMinControlledVariable>:

void controllerSetPidMinControlledVariable(Controller *controller, int32_t minControlledVariable)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
	pidSetMinControlledVariable(&controller->pid, minControlledVariable);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f004 ff96 	bl	800744c <pidSetMinControlledVariable>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <controllerGetPidMaxControlledVariable>:

int32_t controllerGetPidMaxControlledVariable(Controller *controller)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	return pidGetMaxControlledVariable(&controller->pid);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4618      	mov	r0, r3
 8002534:	f004 ffa5 	bl	8007482 <pidGetMaxControlledVariable>
 8002538:	4603      	mov	r3, r0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <controllerSetPidMaxControlledVariable>:

void controllerSetPidMaxControlledVariable(Controller *controller, int32_t maxControlledVariable)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
	pidSetMaxControlledVariable(&controller->pid, maxControlledVariable);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f004 ffa2 	bl	800749a <pidSetMaxControlledVariable>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <controllerGetPidOffset>:

float controllerGetPidOffset(Controller *controller)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
	return pidGetOffset(&controller->pid);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4618      	mov	r0, r3
 800256a:	f004 fece 	bl	800730a <pidGetOffset>
 800256e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002572:	eeb0 0a67 	vmov.f32	s0, s15
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <controllerSetPidOffset>:

void controllerSetPidOffset(Controller *controller, float offset)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	ed87 0a00 	vstr	s0, [r7]
	pidSetOffset(&controller->pid, offset);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	ed97 0a00 	vldr	s0, [r7]
 800258e:	4618      	mov	r0, r3
 8002590:	f004 feca 	bl	8007328 <pidSetOffset>
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <controllerGetPidBias>:

float controllerGetPidBias(Controller *controller)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	return pidGetBias(&controller->pid);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 fecd 	bl	8007346 <pidGetBias>
 80025ac:	eef0 7a40 	vmov.f32	s15, s0
}
 80025b0:	eeb0 0a67 	vmov.f32	s0, s15
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <controllerSetPidBias>:

void controllerSetPidBias(Controller *controller, float bias)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	ed87 0a00 	vstr	s0, [r7]
	pidSetBias(&controller->pid, bias);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	ed97 0a00 	vldr	s0, [r7]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f004 fec9 	bl	8007364 <pidSetBias>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <controllerGetPidSetpoint>:

float controllerGetPidSetpoint(Controller *controller)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
	return pidGetSetpoint(&controller->pid);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f004 fe3e 	bl	8007266 <pidGetSetpoint>
 80025ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80025ee:	eeb0 0a67 	vmov.f32	s0, s15
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <controllerSetPidSetpoint>:

void controllerSetPidSetpoint(Controller *controller, float setpoint)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	ed87 0a00 	vstr	s0, [r7]
	pidSetSetpoint(&controller->pid, setpoint);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	ed97 0a00 	vldr	s0, [r7]
 800260a:	4618      	mov	r0, r3
 800260c:	f004 fe3a 	bl	8007284 <pidSetSetpoint>
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <controllerGetPidProcessVariable>:

float controllerGetPidProcessVariable(Controller *controller)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	return pidGetProcessVariable(&controller->pid);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	f004 fe3d 	bl	80072a2 <pidGetProcessVariable>
 8002628:	eef0 7a40 	vmov.f32	s15, s0
}
 800262c:	eeb0 0a67 	vmov.f32	s0, s15
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <controllerSetPidProcessVariable>:

void controllerSetPidProcessVariable(Controller *controller, float value)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	ed87 0a00 	vstr	s0, [r7]
	pidSetProcessVariable(&controller->pid, value);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	ed97 0a00 	vldr	s0, [r7]
 8002648:	4618      	mov	r0, r3
 800264a:	f004 fe39 	bl	80072c0 <pidSetProcessVariable>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <controllerGetRunPidControllerStatus>:

Bool controllerGetRunPidControllerStatus(Controller *controller)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
	return controller->runPidController;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <controllerSetRunPidControllerStatus>:

void controllerSetRunPidControllerStatus(Controller *controller, Bool status)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
	if (status == FALSE)
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10b      	bne.n	800269a <controllerSetRunPidControllerStatus+0x2a>
	{
		pidClearParameters(&controller->pid);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4618      	mov	r0, r3
 8002686:	f004 fd54 	bl	8007132 <pidClearParameters>
		HAL_DAC_SetValue(&controller->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8002690:	2300      	movs	r3, #0
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	f001 fe60 	bl	800435a <HAL_DAC_SetValue>
	}

	controller->runPidController = status;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <controllerGetSamplingInterval>:

uint16_t controllerGetSamplingInterval(Controller *controller)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
	return controller->samplingInterval;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <controllerSetSamplingInterval>:

void controllerSetSamplingInterval(Controller *controller, uint16_t samplingInterval)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
	controller->samplingInterval = samplingInterval;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a16      	ldr	r2, [pc, #88]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d123      	bne.n	800273c <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		decodeDataPacketDelay++;
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	3301      	adds	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80026fe:	801a      	strh	r2, [r3, #0]
		blinkLedDelay++;
 8002700:	4b13      	ldr	r3, [pc, #76]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800270a:	801a      	strh	r2, [r3, #0]
		sendDataDelay1++;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	3301      	adds	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002716:	801a      	strh	r2, [r3, #0]
		samplingInterval++;
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002722:	801a      	strh	r2, [r3, #0]
		controllerInterval++;
 8002724:	4b0d      	ldr	r3, [pc, #52]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800272e:	801a      	strh	r2, [r3, #0]
		sendKeepAliveDelay++;
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800273a:	801a      	strh	r2, [r3, #0]
	}
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	20000084 	.word	0x20000084
 800274c:	20000156 	.word	0x20000156
 8002750:	20000158 	.word	0x20000158
 8002754:	2000015a 	.word	0x2000015a
 8002758:	2000015c 	.word	0x2000015c
 800275c:	2000015e 	.word	0x2000015e
 8002760:	20000160 	.word	0x20000160

08002764 <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <HAL_UART_RxCpltCallback+0x34>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d10d      	bne.n	8002790 <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8002774:	2201      	movs	r2, #1
 8002776:	4909      	ldr	r1, [pc, #36]	; (800279c <HAL_UART_RxCpltCallback+0x38>)
 8002778:	4807      	ldr	r0, [pc, #28]	; (8002798 <HAL_UART_RxCpltCallback+0x34>)
 800277a:	f003 fb54 	bl	8005e26 <HAL_UART_Receive_IT>
		appAppendReceivedByte(&app, receivedByte);
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_UART_RxCpltCallback+0x38>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4806      	ldr	r0, [pc, #24]	; (80027a0 <HAL_UART_RxCpltCallback+0x3c>)
 8002786:	f7fe fbd1 	bl	8000f2c <appAppendReceivedByte>
		receivedByte = 0x00;
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <HAL_UART_RxCpltCallback+0x38>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
	}
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	200000cc 	.word	0x200000cc
 800279c:	20000154 	.word	0x20000154
 80027a0:	20000164 	.word	0x20000164

080027a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a6:	b0ab      	sub	sp, #172	; 0xac
 80027a8:	af26      	add	r7, sp, #152	; 0x98
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027aa:	f000 ffcf 	bl	800374c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ae:	f000 f901 	bl	80029b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027b2:	f000 fa7b 	bl	8002cac <MX_GPIO_Init>
  MX_ADC1_Init();
 80027b6:	f000 f96f 	bl	8002a98 <MX_ADC1_Init>
  MX_TIM9_Init();
 80027ba:	f000 f9e9 	bl	8002b90 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 80027be:	f000 fa21 	bl	8002c04 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80027c2:	f000 fa49 	bl	8002c58 <MX_USART3_UART_Init>
  MX_DAC_Init();
 80027c6:	f000 f9b9 	bl	8002b3c <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 80027ca:	486b      	ldr	r0, [pc, #428]	; (8002978 <main+0x1d4>)
 80027cc:	f002 fe96 	bl	80054fc <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80027d0:	2100      	movs	r1, #0
 80027d2:	486a      	ldr	r0, [pc, #424]	; (800297c <main+0x1d8>)
 80027d4:	f001 fd6f 	bl	80042b6 <HAL_DAC_Start>
  appInit(&app, LED_GPIO_Port, LED_Pin, huart2, hdac, huart3);
 80027d8:	4e69      	ldr	r6, [pc, #420]	; (8002980 <main+0x1dc>)
 80027da:	4a6a      	ldr	r2, [pc, #424]	; (8002984 <main+0x1e0>)
 80027dc:	ab15      	add	r3, sp, #84	; 0x54
 80027de:	4611      	mov	r1, r2
 80027e0:	2244      	movs	r2, #68	; 0x44
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 fe98 	bl	8007518 <memcpy>
 80027e8:	4b64      	ldr	r3, [pc, #400]	; (800297c <main+0x1d8>)
 80027ea:	ac10      	add	r4, sp, #64	; 0x40
 80027ec:	461d      	mov	r5, r3
 80027ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f2:	682b      	ldr	r3, [r5, #0]
 80027f4:	6023      	str	r3, [r4, #0]
 80027f6:	466d      	mov	r5, sp
 80027f8:	1d34      	adds	r4, r6, #4
 80027fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002806:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800280a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800280e:	6833      	ldr	r3, [r6, #0]
 8002810:	2220      	movs	r2, #32
 8002812:	495d      	ldr	r1, [pc, #372]	; (8002988 <main+0x1e4>)
 8002814:	485d      	ldr	r0, [pc, #372]	; (800298c <main+0x1e8>)
 8002816:	f7fe fa97 	bl	8000d48 <appInit>
  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 800281a:	2201      	movs	r2, #1
 800281c:	495c      	ldr	r1, [pc, #368]	; (8002990 <main+0x1ec>)
 800281e:	4858      	ldr	r0, [pc, #352]	; (8002980 <main+0x1dc>)
 8002820:	f003 fb01 	bl	8005e26 <HAL_UART_Receive_IT>

	  /********************************* TOP SLOT START ********************************/

	  /* Put here the code to be executed in all cycles before the state machine */

	  if (samplingInterval >= appGetSamplingInterval(&app))
 8002824:	4859      	ldr	r0, [pc, #356]	; (800298c <main+0x1e8>)
 8002826:	f7fe fdb7 	bl	8001398 <appGetSamplingInterval>
 800282a:	4603      	mov	r3, r0
 800282c:	461a      	mov	r2, r3
 800282e:	4b59      	ldr	r3, [pc, #356]	; (8002994 <main+0x1f0>)
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d823      	bhi.n	800287e <main+0xda>
	  {
		  HAL_ADC_Start(&hadc1);
 8002836:	4858      	ldr	r0, [pc, #352]	; (8002998 <main+0x1f4>)
 8002838:	f001 f83e 	bl	80038b8 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800283c:	f04f 31ff 	mov.w	r1, #4294967295
 8002840:	4855      	ldr	r0, [pc, #340]	; (8002998 <main+0x1f4>)
 8002842:	f001 f93e 	bl	8003ac2 <HAL_ADC_PollForConversion>
		  uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 8002846:	4854      	ldr	r0, [pc, #336]	; (8002998 <main+0x1f4>)
 8002848:	f001 f9c6 	bl	8003bd8 <HAL_ADC_GetValue>
 800284c:	4603      	mov	r3, r0
 800284e:	81fb      	strh	r3, [r7, #14]
		  HAL_ADC_Stop(&hadc1);
 8002850:	4851      	ldr	r0, [pc, #324]	; (8002998 <main+0x1f4>)
 8002852:	f001 f903 	bl	8003a5c <HAL_ADC_Stop>

		  uint32_t calculatedCurrentInMiliAmps = appGetCurrentInMiliAmps(adcValue);
 8002856:	89fb      	ldrh	r3, [r7, #14]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe faed 	bl	8000e38 <appGetCurrentInMiliAmps>
 800285e:	60b8      	str	r0, [r7, #8]
		  appAddNewValueToFilter(&app, calculatedCurrentInMiliAmps);
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	484a      	ldr	r0, [pc, #296]	; (800298c <main+0x1e8>)
 8002864:	f7fe fb42 	bl	8000eec <appAddNewValueToFilter>
		  uint32_t filteredCurrentInMiliAmps = appGetFilterResult(&app);
 8002868:	4848      	ldr	r0, [pc, #288]	; (800298c <main+0x1e8>)
 800286a:	f7fe fb50 	bl	8000f0e <appGetFilterResult>
 800286e:	6078      	str	r0, [r7, #4]
		  appSetPidProcessVariable(&app, filteredCurrentInMiliAmps);
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4846      	ldr	r0, [pc, #280]	; (800298c <main+0x1e8>)
 8002874:	f7fe fd59 	bl	800132a <appSetPidProcessVariable>

		  samplingInterval = 0;
 8002878:	4b46      	ldr	r3, [pc, #280]	; (8002994 <main+0x1f0>)
 800287a:	2200      	movs	r2, #0
 800287c:	801a      	strh	r2, [r3, #0]
	  }

	  if (controllerInterval >= appGetPidInterval(&app))
 800287e:	4843      	ldr	r0, [pc, #268]	; (800298c <main+0x1e8>)
 8002880:	f7fe fc04 	bl	800108c <appGetPidInterval>
 8002884:	4603      	mov	r3, r0
 8002886:	461a      	mov	r2, r3
 8002888:	4b44      	ldr	r3, [pc, #272]	; (800299c <main+0x1f8>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d80b      	bhi.n	80028a8 <main+0x104>
	  {
		  if (appGetRunPidControllerStatus(&app) == TRUE)
 8002890:	483e      	ldr	r0, [pc, #248]	; (800298c <main+0x1e8>)
 8002892:	f7fe fd60 	bl	8001356 <appGetRunPidControllerStatus>
 8002896:	4603      	mov	r3, r0
 8002898:	2b01      	cmp	r3, #1
 800289a:	d102      	bne.n	80028a2 <main+0xfe>
		  {
			  appRunController(&app);
 800289c:	483b      	ldr	r0, [pc, #236]	; (800298c <main+0x1e8>)
 800289e:	f7fe fabd 	bl	8000e1c <appRunController>
		  }
		  controllerInterval = 0;
 80028a2:	4b3e      	ldr	r3, [pc, #248]	; (800299c <main+0x1f8>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	801a      	strh	r2, [r3, #0]

	  /* ============================================================================= */

	  /****************************** STATE MACHINE START ******************************/

	  switch (stateMachine)
 80028a8:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <main+0x1fc>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b05      	cmp	r3, #5
 80028ae:	d85e      	bhi.n	800296e <main+0x1ca>
 80028b0:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <main+0x114>)
 80028b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b6:	bf00      	nop
 80028b8:	080028d1 	.word	0x080028d1
 80028bc:	080028ed 	.word	0x080028ed
 80028c0:	080028fb 	.word	0x080028fb
 80028c4:	08002909 	.word	0x08002909
 80028c8:	0800292f 	.word	0x0800292f
 80028cc:	0800294d 	.word	0x0800294d
	  {
	  	  case 0:
	  		  if (decodeDataPacketDelay >= DELAY_10_MILISECONDS)
 80028d0:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <main+0x200>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	2b63      	cmp	r3, #99	; 0x63
 80028d6:	d905      	bls.n	80028e4 <main+0x140>
	  		  {
	  			appDecodeReceivedData(&app);
 80028d8:	482c      	ldr	r0, [pc, #176]	; (800298c <main+0x1e8>)
 80028da:	f7fe fb38 	bl	8000f4e <appDecodeReceivedData>
	  			decodeDataPacketDelay = 0;
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <main+0x200>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  stateMachine = 1;
 80028e4:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <main+0x1fc>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
	  		  break;
 80028ea:	e044      	b.n	8002976 <main+0x1d2>

		  case 1:
			  appExtractCommandAndPayloadFromDecodedData(&app);
 80028ec:	4827      	ldr	r0, [pc, #156]	; (800298c <main+0x1e8>)
 80028ee:	f7fe fb3b 	bl	8000f68 <appExtractCommandAndPayloadFromDecodedData>
			  stateMachine = 2;
 80028f2:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <main+0x1fc>)
 80028f4:	2202      	movs	r2, #2
 80028f6:	701a      	strb	r2, [r3, #0]
			  break;
 80028f8:	e03d      	b.n	8002976 <main+0x1d2>

		  case 2:
			  appDecodeExtractedCommand(&app);
 80028fa:	4824      	ldr	r0, [pc, #144]	; (800298c <main+0x1e8>)
 80028fc:	f7fe fb41 	bl	8000f82 <appDecodeExtractedCommand>
			  stateMachine = 3;
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <main+0x1fc>)
 8002902:	2203      	movs	r2, #3
 8002904:	701a      	strb	r2, [r3, #0]
			  break;
 8002906:	e036      	b.n	8002976 <main+0x1d2>

		  case 3:
			  if (blinkLedDelay >= appGetBlinkDelay(&app))
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <main+0x204>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	461c      	mov	r4, r3
 800290e:	481f      	ldr	r0, [pc, #124]	; (800298c <main+0x1e8>)
 8002910:	f7fe fa78 	bl	8000e04 <appGetBlinkDelay>
 8002914:	4603      	mov	r3, r0
 8002916:	429c      	cmp	r4, r3
 8002918:	d305      	bcc.n	8002926 <main+0x182>
			  {
				  appExecuteBlinkLed(&app);
 800291a:	481c      	ldr	r0, [pc, #112]	; (800298c <main+0x1e8>)
 800291c:	f7fe fa62 	bl	8000de4 <appExecuteBlinkLed>
				  blinkLedDelay = 0;
 8002920:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <main+0x204>)
 8002922:	2200      	movs	r2, #0
 8002924:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 4;
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <main+0x1fc>)
 8002928:	2204      	movs	r2, #4
 800292a:	701a      	strb	r2, [r3, #0]
			  break;
 800292c:	e023      	b.n	8002976 <main+0x1d2>

		  case 4:
			  if (sendDataDelay1 >= DELAY_100_MILISECONDS)
 800292e:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <main+0x208>)
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002936:	d305      	bcc.n	8002944 <main+0x1a0>
			  {
				  appSendData(&app);
 8002938:	4814      	ldr	r0, [pc, #80]	; (800298c <main+0x1e8>)
 800293a:	f7fe fb30 	bl	8000f9e <appSendData>
				  sendDataDelay1 = 0;
 800293e:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <main+0x208>)
 8002940:	2200      	movs	r2, #0
 8002942:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 5;
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <main+0x1fc>)
 8002946:	2205      	movs	r2, #5
 8002948:	701a      	strb	r2, [r3, #0]
			  break;
 800294a:	e014      	b.n	8002976 <main+0x1d2>

		  case 5:
			  if (sendKeepAliveDelay >= DELAY_2000_MILISECONDS)
 800294c:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <main+0x20c>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002954:	4293      	cmp	r3, r2
 8002956:	d906      	bls.n	8002966 <main+0x1c2>
			  {
				  appSetEnableSendKeepAliveMessage(&app, TRUE);
 8002958:	2101      	movs	r1, #1
 800295a:	480c      	ldr	r0, [pc, #48]	; (800298c <main+0x1e8>)
 800295c:	f7fe fd63 	bl	8001426 <appSetEnableSendKeepAliveMessage>
				  sendKeepAliveDelay = 0;
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <main+0x20c>)
 8002962:	2200      	movs	r2, #0
 8002964:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 0;
 8002966:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <main+0x1fc>)
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
			  break;
 800296c:	e003      	b.n	8002976 <main+0x1d2>

		  default:
			  stateMachine = 0;
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <main+0x1fc>)
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
			  break;
 8002974:	bf00      	nop
	  if (samplingInterval >= appGetSamplingInterval(&app))
 8002976:	e755      	b.n	8002824 <main+0x80>
 8002978:	20000084 	.word	0x20000084
 800297c:	20000070 	.word	0x20000070
 8002980:	200000cc 	.word	0x200000cc
 8002984:	20000110 	.word	0x20000110
 8002988:	40020000 	.word	0x40020000
 800298c:	20000164 	.word	0x20000164
 8002990:	20000154 	.word	0x20000154
 8002994:	2000015c 	.word	0x2000015c
 8002998:	20000028 	.word	0x20000028
 800299c:	2000015e 	.word	0x2000015e
 80029a0:	20000838 	.word	0x20000838
 80029a4:	20000156 	.word	0x20000156
 80029a8:	20000158 	.word	0x20000158
 80029ac:	2000015a 	.word	0x2000015a
 80029b0:	20000160 	.word	0x20000160

080029b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b094      	sub	sp, #80	; 0x50
 80029b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ba:	f107 031c 	add.w	r3, r7, #28
 80029be:	2234      	movs	r2, #52	; 0x34
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 fdb6 	bl	8007534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029c8:	f107 0308 	add.w	r3, r7, #8
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d8:	2300      	movs	r3, #0
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <SystemClock_Config+0xdc>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	4a2b      	ldr	r2, [pc, #172]	; (8002a90 <SystemClock_Config+0xdc>)
 80029e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e6:	6413      	str	r3, [r2, #64]	; 0x40
 80029e8:	4b29      	ldr	r3, [pc, #164]	; (8002a90 <SystemClock_Config+0xdc>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029f4:	2300      	movs	r3, #0
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <SystemClock_Config+0xe0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <SystemClock_Config+0xe0>)
 80029fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <SystemClock_Config+0xe0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a10:	2302      	movs	r3, #2
 8002a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a14:	2301      	movs	r3, #1
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a18:	2310      	movs	r3, #16
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a20:	2300      	movs	r3, #0
 8002a22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a24:	2308      	movs	r3, #8
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002a28:	23b4      	movs	r3, #180	; 0xb4
 8002a2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a30:	2302      	movs	r3, #2
 8002a32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a34:	2302      	movs	r3, #2
 8002a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f002 fa6f 	bl	8004f20 <HAL_RCC_OscConfig>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002a48:	f000 f982 	bl	8002d50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002a4c:	f001 ff54 	bl	80048f8 <HAL_PWREx_EnableOverDrive>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002a56:	f000 f97b 	bl	8002d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a5a:	230f      	movs	r3, #15
 8002a5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a70:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a72:	f107 0308 	add.w	r3, r7, #8
 8002a76:	2105      	movs	r1, #5
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f001 ff8d 	bl	8004998 <HAL_RCC_ClockConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002a84:	f000 f964 	bl	8002d50 <Error_Handler>
  }
}
 8002a88:	bf00      	nop
 8002a8a:	3750      	adds	r7, #80	; 0x50
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40007000 	.word	0x40007000

08002a98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a9e:	463b      	mov	r3, r7
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002aaa:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002aac:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <MX_ADC1_Init+0x9c>)
 8002aae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ab0:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ab6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002abe:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ad8:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <MX_ADC1_Init+0xa0>)
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002af2:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002af8:	480d      	ldr	r0, [pc, #52]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002afa:	f000 fe99 	bl	8003830 <HAL_ADC_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002b04:	f000 f924 	bl	8002d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b14:	463b      	mov	r3, r7
 8002b16:	4619      	mov	r1, r3
 8002b18:	4805      	ldr	r0, [pc, #20]	; (8002b30 <MX_ADC1_Init+0x98>)
 8002b1a:	f001 f86b 	bl	8003bf4 <HAL_ADC_ConfigChannel>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002b24:	f000 f914 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000028 	.word	0x20000028
 8002b34:	40012000 	.word	0x40012000
 8002b38:	0f000001 	.word	0x0f000001

08002b3c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002b42:	463b      	mov	r3, r7
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <MX_DAC_Init+0x4c>)
 8002b4c:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <MX_DAC_Init+0x50>)
 8002b4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002b50:	480d      	ldr	r0, [pc, #52]	; (8002b88 <MX_DAC_Init+0x4c>)
 8002b52:	f001 fb8e 	bl	8004272 <HAL_DAC_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002b5c:	f000 f8f8 	bl	8002d50 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8002b64:	2302      	movs	r3, #2
 8002b66:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002b68:	463b      	mov	r3, r7
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4806      	ldr	r0, [pc, #24]	; (8002b88 <MX_DAC_Init+0x4c>)
 8002b70:	f001 fc18 	bl	80043a4 <HAL_DAC_ConfigChannel>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002b7a:	f000 f8e9 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000070 	.word	0x20000070
 8002b8c:	40007400 	.word	0x40007400

08002b90 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b96:	463b      	mov	r3, r7
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <MX_TIM9_Init+0x6c>)
 8002ba4:	4a16      	ldr	r2, [pc, #88]	; (8002c00 <MX_TIM9_Init+0x70>)
 8002ba6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <MX_TIM9_Init+0x6c>)
 8002baa:	2204      	movs	r2, #4
 8002bac:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <MX_TIM9_Init+0x6c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3665;
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <MX_TIM9_Init+0x6c>)
 8002bb6:	f640 6251 	movw	r2, #3665	; 0xe51
 8002bba:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <MX_TIM9_Init+0x6c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <MX_TIM9_Init+0x6c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002bc8:	480c      	ldr	r0, [pc, #48]	; (8002bfc <MX_TIM9_Init+0x6c>)
 8002bca:	f002 fc47 	bl	800545c <HAL_TIM_Base_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002bd4:	f000 f8bc 	bl	8002d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bdc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002bde:	463b      	mov	r3, r7
 8002be0:	4619      	mov	r1, r3
 8002be2:	4806      	ldr	r0, [pc, #24]	; (8002bfc <MX_TIM9_Init+0x6c>)
 8002be4:	f002 fe02 	bl	80057ec <HAL_TIM_ConfigClockSource>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002bee:	f000 f8af 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000084 	.word	0x20000084
 8002c00:	40014000 	.word	0x40014000

08002c04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <MX_USART2_UART_Init+0x50>)
 8002c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c3a:	4805      	ldr	r0, [pc, #20]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c3c:	f003 f814 	bl	8005c68 <HAL_UART_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c46:	f000 f883 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200000cc 	.word	0x200000cc
 8002c54:	40004400 	.word	0x40004400

08002c58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <MX_USART3_UART_Init+0x50>)
 8002c60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c7e:	220c      	movs	r2, #12
 8002c80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <MX_USART3_UART_Init+0x4c>)
 8002c90:	f002 ffea 	bl	8005c68 <HAL_UART_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c9a:	f000 f859 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000110 	.word	0x20000110
 8002ca8:	40004800 	.word	0x40004800

08002cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	4b1f      	ldr	r3, [pc, #124]	; (8002d44 <MX_GPIO_Init+0x98>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <MX_GPIO_Init+0x98>)
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <MX_GPIO_Init+0x98>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <MX_GPIO_Init+0x98>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <MX_GPIO_Init+0x98>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <MX_GPIO_Init+0x98>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2120      	movs	r1, #32
 8002cfe:	4812      	ldr	r0, [pc, #72]	; (8002d48 <MX_GPIO_Init+0x9c>)
 8002d00:	f001 fdc6 	bl	8004890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002d12:	f107 030c 	add.w	r3, r7, #12
 8002d16:	4619      	mov	r1, r3
 8002d18:	480c      	ldr	r0, [pc, #48]	; (8002d4c <MX_GPIO_Init+0xa0>)
 8002d1a:	f001 fc25 	bl	8004568 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002d1e:	2320      	movs	r3, #32
 8002d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d22:	2301      	movs	r3, #1
 8002d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002d2e:	f107 030c 	add.w	r3, r7, #12
 8002d32:	4619      	mov	r1, r3
 8002d34:	4804      	ldr	r0, [pc, #16]	; (8002d48 <MX_GPIO_Init+0x9c>)
 8002d36:	f001 fc17 	bl	8004568 <HAL_GPIO_Init>

}
 8002d3a:	bf00      	nop
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	40020800 	.word	0x40020800

08002d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d54:	b672      	cpsid	i
}
 8002d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d58:	e7fe      	b.n	8002d58 <Error_Handler+0x8>
	...

08002d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	607b      	str	r3, [r7, #4]
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_MspInit+0x4c>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	4a0f      	ldr	r2, [pc, #60]	; (8002da8 <HAL_MspInit+0x4c>)
 8002d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d70:	6453      	str	r3, [r2, #68]	; 0x44
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <HAL_MspInit+0x4c>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_MspInit+0x4c>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <HAL_MspInit+0x4c>)
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_MspInit+0x4c>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800

08002dac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a17      	ldr	r2, [pc, #92]	; (8002e28 <HAL_ADC_MspInit+0x7c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d127      	bne.n	8002e1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <HAL_ADC_MspInit+0x80>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4a15      	ldr	r2, [pc, #84]	; (8002e2c <HAL_ADC_MspInit+0x80>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dde:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <HAL_ADC_MspInit+0x80>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <HAL_ADC_MspInit+0x80>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <HAL_ADC_MspInit+0x80>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <HAL_ADC_MspInit+0x80>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CURRENT_SENSE_Pin;
 8002e06:	2302      	movs	r3, #2
 8002e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002e12:	f107 0314 	add.w	r3, r7, #20
 8002e16:	4619      	mov	r1, r3
 8002e18:	4805      	ldr	r0, [pc, #20]	; (8002e30 <HAL_ADC_MspInit+0x84>)
 8002e1a:	f001 fba5 	bl	8004568 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e1e:	bf00      	nop
 8002e20:	3728      	adds	r7, #40	; 0x28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40012000 	.word	0x40012000
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40020000 	.word	0x40020000

08002e34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <HAL_DAC_MspInit+0x7c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d127      	bne.n	8002ea6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <HAL_DAC_MspInit+0x80>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <HAL_DAC_MspInit+0x80>)
 8002e60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_DAC_MspInit+0x80>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <HAL_DAC_MspInit+0x80>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <HAL_DAC_MspInit+0x80>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <HAL_DAC_MspInit+0x80>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = CURRENT_CTRL_Pin;
 8002e8e:	2310      	movs	r3, #16
 8002e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e92:	2303      	movs	r3, #3
 8002e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002e9a:	f107 0314 	add.w	r3, r7, #20
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <HAL_DAC_MspInit+0x84>)
 8002ea2:	f001 fb61 	bl	8004568 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002ea6:	bf00      	nop
 8002ea8:	3728      	adds	r7, #40	; 0x28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40007400 	.word	0x40007400
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020000 	.word	0x40020000

08002ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <HAL_TIM_Base_MspInit+0x48>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d115      	bne.n	8002efa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <HAL_TIM_Base_MspInit+0x4c>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <HAL_TIM_Base_MspInit+0x4c>)
 8002ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002edc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ede:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_TIM_Base_MspInit+0x4c>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2100      	movs	r1, #0
 8002eee:	2018      	movs	r0, #24
 8002ef0:	f001 f989 	bl	8004206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002ef4:	2018      	movs	r0, #24
 8002ef6:	f001 f9a2 	bl	800423e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40014000 	.word	0x40014000
 8002f08:	40023800 	.word	0x40023800

08002f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08c      	sub	sp, #48	; 0x30
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 031c 	add.w	r3, r7, #28
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a36      	ldr	r2, [pc, #216]	; (8003004 <HAL_UART_MspInit+0xf8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d134      	bne.n	8002f98 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	4b35      	ldr	r3, [pc, #212]	; (8003008 <HAL_UART_MspInit+0xfc>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a34      	ldr	r2, [pc, #208]	; (8003008 <HAL_UART_MspInit+0xfc>)
 8002f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b32      	ldr	r3, [pc, #200]	; (8003008 <HAL_UART_MspInit+0xfc>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <HAL_UART_MspInit+0xfc>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a2d      	ldr	r2, [pc, #180]	; (8003008 <HAL_UART_MspInit+0xfc>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <HAL_UART_MspInit+0xfc>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f66:	230c      	movs	r3, #12
 8002f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f72:	2303      	movs	r3, #3
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f76:	2307      	movs	r3, #7
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7a:	f107 031c 	add.w	r3, r7, #28
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4822      	ldr	r0, [pc, #136]	; (800300c <HAL_UART_MspInit+0x100>)
 8002f82:	f001 faf1 	bl	8004568 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	2026      	movs	r0, #38	; 0x26
 8002f8c:	f001 f93b 	bl	8004206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f90:	2026      	movs	r0, #38	; 0x26
 8002f92:	f001 f954 	bl	800423e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f96:	e031      	b.n	8002ffc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1c      	ldr	r2, [pc, #112]	; (8003010 <HAL_UART_MspInit+0x104>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d12c      	bne.n	8002ffc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_UART_MspInit+0xfc>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a17      	ldr	r2, [pc, #92]	; (8003008 <HAL_UART_MspInit+0xfc>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_UART_MspInit+0xfc>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_UART_MspInit+0xfc>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a10      	ldr	r2, [pc, #64]	; (8003008 <HAL_UART_MspInit+0xfc>)
 8002fc8:	f043 0304 	orr.w	r3, r3, #4
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <HAL_UART_MspInit+0xfc>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fec:	2307      	movs	r3, #7
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff0:	f107 031c 	add.w	r3, r7, #28
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4807      	ldr	r0, [pc, #28]	; (8003014 <HAL_UART_MspInit+0x108>)
 8002ff8:	f001 fab6 	bl	8004568 <HAL_GPIO_Init>
}
 8002ffc:	bf00      	nop
 8002ffe:	3730      	adds	r7, #48	; 0x30
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40004400 	.word	0x40004400
 8003008:	40023800 	.word	0x40023800
 800300c:	40020000 	.word	0x40020000
 8003010:	40004800 	.word	0x40004800
 8003014:	40020800 	.word	0x40020800

08003018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800301c:	e7fe      	b.n	800301c <NMI_Handler+0x4>

0800301e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800301e:	b480      	push	{r7}
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003022:	e7fe      	b.n	8003022 <HardFault_Handler+0x4>

08003024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003028:	e7fe      	b.n	8003028 <MemManage_Handler+0x4>

0800302a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800302e:	e7fe      	b.n	800302e <BusFault_Handler+0x4>

08003030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003034:	e7fe      	b.n	8003034 <UsageFault_Handler+0x4>

08003036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003064:	f000 fbc4 	bl	80037f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}

0800306c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8003070:	4802      	ldr	r0, [pc, #8]	; (800307c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003072:	f002 fab3 	bl	80055dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000084 	.word	0x20000084

08003080 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003084:	4802      	ldr	r0, [pc, #8]	; (8003090 <USART2_IRQHandler+0x10>)
 8003086:	f002 feff 	bl	8005e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200000cc 	.word	0x200000cc

08003094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <SystemInit+0x20>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	4a05      	ldr	r2, [pc, #20]	; (80030b4 <SystemInit+0x20>)
 80030a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030bc:	480d      	ldr	r0, [pc, #52]	; (80030f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030be:	490e      	ldr	r1, [pc, #56]	; (80030f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030c0:	4a0e      	ldr	r2, [pc, #56]	; (80030fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030c4:	e002      	b.n	80030cc <LoopCopyDataInit>

080030c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ca:	3304      	adds	r3, #4

080030cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030d0:	d3f9      	bcc.n	80030c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030d2:	4a0b      	ldr	r2, [pc, #44]	; (8003100 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030d4:	4c0b      	ldr	r4, [pc, #44]	; (8003104 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d8:	e001      	b.n	80030de <LoopFillZerobss>

080030da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030dc:	3204      	adds	r2, #4

080030de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030e0:	d3fb      	bcc.n	80030da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030e2:	f7ff ffd7 	bl	8003094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030e6:	f004 f9f3 	bl	80074d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ea:	f7ff fb5b 	bl	80027a4 <main>
  bx  lr    
 80030ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80030fc:	08007684 	.word	0x08007684
  ldr r2, =_sbss
 8003100:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003104:	20000840 	.word	0x20000840

08003108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003108:	e7fe      	b.n	8003108 <ADC_IRQHandler>

0800310a <genCrc>:

/**
  * Calcula o crc8 entre o range passado como parametro.
  */
uint8_t genCrc(uint8_t buffer[], uint16_t qtd_de_bytes_no_pacote)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	73bb      	strb	r3, [r7, #14]
 8003122:	e00d      	b.n	8003140 <genCrc+0x36>
    {
      crc = calcCrc8(crc, buffer[i]);
 8003124:	7bbb      	ldrb	r3, [r7, #14]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	781a      	ldrb	r2, [r3, #0]
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f80f 	bl	8003154 <calcCrc8>
 8003136:	4603      	mov	r3, r0
 8003138:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 800313a:	7bbb      	ldrb	r3, [r7, #14]
 800313c:	3301      	adds	r3, #1
 800313e:	73bb      	strb	r3, [r7, #14]
 8003140:	7bbb      	ldrb	r3, [r7, #14]
 8003142:	b29b      	uxth	r3, r3
 8003144:	887a      	ldrh	r2, [r7, #2]
 8003146:	429a      	cmp	r2, r3
 8003148:	d8ec      	bhi.n	8003124 <genCrc+0x1a>
    }

  return crc;
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <calcCrc8>:

/**
  * Funcao que calcula o CRC8
  */
static uint8_t calcCrc8(uint8_t crc3, uint8_t b)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	460a      	mov	r2, r1
 800315e:	71fb      	strb	r3, [r7, #7]
 8003160:	4613      	mov	r3, r2
 8003162:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]
    pos = (((crc3 & 0xff) ^ b) & 0xff);
 8003168:	79fa      	ldrb	r2, [r7, #7]
 800316a:	79bb      	ldrb	r3, [r7, #6]
 800316c:	4053      	eors	r3, r2
 800316e:	73fb      	strb	r3, [r7, #15]

    return ((crc3) >> 8) ^ table[pos];
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	121b      	asrs	r3, r3, #8
 8003174:	b25a      	sxtb	r2, r3
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	4905      	ldr	r1, [pc, #20]	; (8003190 <calcCrc8+0x3c>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	b25b      	sxtb	r3, r3
 800317e:	4053      	eors	r3, r2
 8003180:	b25b      	sxtb	r3, r3
 8003182:	b2db      	uxtb	r3, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	08007574 	.word	0x08007574

08003194 <dataPacketRxInit>:
 */

#include "dataPacketRx.h"

void dataPacketRxInit(DataPacketRx *dataPacketRx, uint8_t start_1, uint8_t start_2)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	70fb      	strb	r3, [r7, #3]
 80031a0:	4613      	mov	r3, r2
 80031a2:	70bb      	strb	r3, [r7, #2]
	dataPacketRx->start_1 = start_1;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	701a      	strb	r2, [r3, #0]
	dataPacketRx->start_2 = start_2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	78ba      	ldrb	r2, [r7, #2]
 80031ae:	705a      	strb	r2, [r3, #1]
	dataPacketRx->command = 0x00;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	709a      	strb	r2, [r3, #2]
	dataPacketRx->payloadDataLength = 0x00;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	70da      	strb	r2, [r3, #3]
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3304      	adds	r3, #4
 80031c0:	2232      	movs	r2, #50	; 0x32
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f004 f9b5 	bl	8007534 <memset>
	dataPacketRx->crc8 = 0x00;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	3337      	adds	r3, #55	; 0x37
 80031d6:	2237      	movs	r2, #55	; 0x37
 80031d8:	2100      	movs	r1, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	f004 f9aa 	bl	8007534 <memset>
	dataPacketRx->dataPacketLength = 0x00;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketRx->currentRxByteIndex = 0;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	dataPacketRx->containsStarterBytes = FALSE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	dataPacketRx->starterByteIndex = 0;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
}
 8003208:	bf00      	nop
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <dataPacketRxAppend>:

void dataPacketRxAppend(DataPacketRx *dataPacketRx, uint8_t newByte)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacket[dataPacketRx->currentRxByteIndex] = newByte;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8003222:	461a      	mov	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4413      	add	r3, r2
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketRx->currentRxByteIndex++;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8003234:	3301      	adds	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketLength++;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8003244:	3301      	adds	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	if (dataPacketRx->currentRxByteIndex > QTY_PACKET_RX_BYTES)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8003254:	2b37      	cmp	r3, #55	; 0x37
 8003256:	d90a      	bls.n	800326e <dataPacketRxAppend+0x5e>
	{
		dataPacketRxClear(dataPacketRx);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8cf 	bl	80033fc <dataPacketRxClear>
		dataPacketRx->currentRxByteIndex = 0;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		dataPacketRx->dataPacketLength = 0;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	}
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <dataPacketRxDecode>:

void dataPacketRxDecode(DataPacketRx *dataPacketRx)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
	if (dataPacketRx->containsStarterBytes == TRUE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003284:	2b01      	cmp	r3, #1
 8003286:	d17e      	bne.n	8003386 <dataPacketRxDecode+0x110>
	{
		dataPacketRxSetCommand(dataPacketRx, dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 2]);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800328e:	3302      	adds	r3, #2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8e2 	bl	8003464 <dataPacketRxSetCommand>
		dataPacketRx->payloadDataLength = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 3];
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80032a6:	3303      	adds	r3, #3
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	70da      	strb	r2, [r3, #3]

		if (dataPacketRx->payloadDataLength == 0)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	78db      	ldrb	r3, [r3, #3]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d126      	bne.n	800330a <dataPacketRxDecode+0x94>
		{
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 4];
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80032c2:	3304      	adds	r3, #4
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80032cc:	733b      	strb	r3, [r7, #12]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, 4);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3337      	adds	r3, #55	; 0x37
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	f8b2 2074 	ldrh.w	r2, [r2, #116]	; 0x74
 80032d8:	4413      	add	r3, r2
 80032da:	2104      	movs	r1, #4
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff14 	bl	800310a <genCrc>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

			if (dataPacketRx->crc8 == receivedCrc8)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80032f2:	7b3a      	ldrb	r2, [r7, #12]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d17d      	bne.n	80033f4 <dataPacketRxDecode+0x17e>
			{
				dataPacketRx->currentRxByteIndex = 0;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
			{
				dataPacketRxClear(dataPacketRx);
			}
		}
	}
}
 8003308:	e074      	b.n	80033f4 <dataPacketRxDecode+0x17e>
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + dataPacketRx->payloadDataLength + 4];
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8003310:	461a      	mov	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	78db      	ldrb	r3, [r3, #3]
 8003316:	4413      	add	r3, r2
 8003318:	3304      	adds	r3, #4
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003322:	737b      	strb	r3, [r7, #13]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, dataPacketRx->payloadDataLength + 4);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3337      	adds	r3, #55	; 0x37
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	f8b2 2074 	ldrh.w	r2, [r2, #116]	; 0x74
 800332e:	441a      	add	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	78db      	ldrb	r3, [r3, #3]
 8003334:	b29b      	uxth	r3, r3
 8003336:	3304      	adds	r3, #4
 8003338:	b29b      	uxth	r3, r3
 800333a:	4619      	mov	r1, r3
 800333c:	4610      	mov	r0, r2
 800333e:	f7ff fee4 	bl	800310a <genCrc>
 8003342:	4603      	mov	r3, r0
 8003344:	461a      	mov	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			if (dataPacketRx->crc8 == receivedCrc8)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003352:	7b7a      	ldrb	r2, [r7, #13]
 8003354:	429a      	cmp	r2, r3
 8003356:	d14d      	bne.n	80033f4 <dataPacketRxDecode+0x17e>
				dataPacketRxSetPayloadData(dataPacketRx, dataPacketRx->dataPacket + dataPacketRx->starterByteIndex + 4, dataPacketRx->payloadDataLength);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f103 0237 	add.w	r2, r3, #55	; 0x37
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8003364:	3304      	adds	r3, #4
 8003366:	18d1      	adds	r1, r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	78db      	ldrb	r3, [r3, #3]
 800336c:	461a      	mov	r2, r3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f89e 	bl	80034b0 <dataPacketRxSetPayloadData>
				dataPacketRx->currentRxByteIndex = 0;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
 8003384:	e036      	b.n	80033f4 <dataPacketRxDecode+0x17e>
		if (dataPacketRx->dataPacketLength >= MIN_PACKET_RX_BYTES)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800338c:	2b04      	cmp	r3, #4
 800338e:	d931      	bls.n	80033f4 <dataPacketRxDecode+0x17e>
			uint16_t index = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	81fb      	strh	r3, [r7, #14]
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 8003394:	2300      	movs	r3, #0
 8003396:	81fb      	strh	r3, [r7, #14]
 8003398:	e01e      	b.n	80033d8 <dataPacketRxDecode+0x162>
				if ((dataPacketRx->dataPacket[index] == dataPacketRx->start_1) && (dataPacketRx->dataPacket[index+1] == dataPacketRx->start_2))
 800339a:	89fb      	ldrh	r3, [r7, #14]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	4413      	add	r3, r2
 80033a0:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d112      	bne.n	80033d2 <dataPacketRxDecode+0x15c>
 80033ac:	89fb      	ldrh	r3, [r7, #14]
 80033ae:	3301      	adds	r3, #1
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4413      	add	r3, r2
 80033b4:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	785b      	ldrb	r3, [r3, #1]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d108      	bne.n	80033d2 <dataPacketRxDecode+0x15c>
					dataPacketRx->containsStarterBytes = TRUE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
					dataPacketRx->starterByteIndex = index;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	89fa      	ldrh	r2, [r7, #14]
 80033cc:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
					break;
 80033d0:	e008      	b.n	80033e4 <dataPacketRxDecode+0x16e>
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	3301      	adds	r3, #1
 80033d6:	81fb      	strh	r3, [r7, #14]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80033de:	89fa      	ldrh	r2, [r7, #14]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d3da      	bcc.n	800339a <dataPacketRxDecode+0x124>
			if (dataPacketRx->containsStarterBytes == FALSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <dataPacketRxDecode+0x17e>
				dataPacketRxClear(dataPacketRx);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f804 	bl	80033fc <dataPacketRxClear>
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <dataPacketRxClear>:

void dataPacketRxClear(DataPacketRx *dataPacketRx)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	dataPacketRx->containsStarterBytes = FALSE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	dataPacketRx->currentRxByteIndex = 0;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketLength = 0;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketRx->payloadDataLength = 0;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	70da      	strb	r2, [r3, #3]
	dataPacketRx->command = 0x00;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	709a      	strb	r2, [r3, #2]
	dataPacketRx->crc8 = 0x00;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketRx->starterByteIndex = 0;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	2232      	movs	r2, #50	; 0x32
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f004 f873 	bl	8007534 <memset>
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3337      	adds	r3, #55	; 0x37
 8003452:	2237      	movs	r2, #55	; 0x37
 8003454:	2100      	movs	r1, #0
 8003456:	4618      	mov	r0, r3
 8003458:	f004 f86c 	bl	8007534 <memset>
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <dataPacketRxSetCommand>:
	dataPacketRx->crc8 = 0x00;
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
}

void dataPacketRxSetCommand(DataPacketRx *dataPacketRx, uint8_t command)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	if ((command < 0x01) || (command > 0xFE))
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d006      	beq.n	800348c <dataPacketRxSetCommand+0x28>
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	2bff      	cmp	r3, #255	; 0xff
 8003482:	d003      	beq.n	800348c <dataPacketRxSetCommand+0x28>
	{
		return;
	}

	dataPacketRx->command = command;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	709a      	strb	r2, [r3, #2]
 800348a:	e000      	b.n	800348e <dataPacketRxSetCommand+0x2a>
		return;
 800348c:	bf00      	nop
}
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <dataPacketRxGetCommand>:

uint8_t dataPacketRxGetCommand(DataPacketRx *dataPacketRx)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	return dataPacketRx->command;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	789b      	ldrb	r3, [r3, #2]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <dataPacketRxSetPayloadData>:

void dataPacketRxSetPayloadData(DataPacketRx *dataPacketRx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	4613      	mov	r3, r2
 80034bc:	71fb      	strb	r3, [r7, #7]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	memcpy(dataPacketRx->payloadData, payloadData, payloadDataLength);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3304      	adds	r3, #4
 80034ca:	79fa      	ldrb	r2, [r7, #7]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f004 f822 	bl	8007518 <memcpy>
	dataPacketRx->payloadDataLength = payloadDataLength;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	79fa      	ldrb	r2, [r7, #7]
 80034d8:	70da      	strb	r2, [r3, #3]
}
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <dataPacketRxGetPayloadData>:

uint8_t *dataPacketRxGetPayloadData(DataPacketRx *dataPacketRx)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadData;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <dataPacketRxGetPayloadDataLength>:

uint8_t dataPacketRxGetPayloadDataLength(DataPacketRx *dataPacketRx)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadDataLength;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	78db      	ldrb	r3, [r3, #3]
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <dataPacketRxGetDataPacketStatus>:
{
	return dataPacketRx->dataPacketLength;
}

DataPacketRxStatus dataPacketRxGetDataPacketStatus(DataPacketRx *dataPacketRx)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
	return dataPacketRx->dataPacketRxStatus;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <dataPacketTxInit>:
 */

#include "dataPacketTx.h"

void dataPacketTxInit(DataPacketTx *dataPacketTx, uint8_t start_1, uint8_t start_2)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
 8003538:	4613      	mov	r3, r2
 800353a:	70bb      	strb	r3, [r7, #2]
	dataPacketTx->start_1 = start_1;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	701a      	strb	r2, [r3, #0]
	dataPacketTx->start_2 = start_2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	78ba      	ldrb	r2, [r7, #2]
 8003546:	705a      	strb	r2, [r3, #1]
	dataPacketTx->command = 0x00;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	709a      	strb	r2, [r3, #2]
	dataPacketTx->payloadDataLength = 0x00;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	70da      	strb	r2, [r3, #3]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	2232      	movs	r2, #50	; 0x32
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f003 ffe9 	bl	8007534 <memset>
	dataPacketTx->crc8 = 0x00;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3337      	adds	r3, #55	; 0x37
 800356e:	2237      	movs	r2, #55	; 0x37
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f003 ffde 	bl	8007534 <memset>
	dataPacketTx->dataPacketLength = 0x00;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <dataPacketTxMount>:

void dataPacketTxMount(DataPacketTx *dataPacketTx)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacket[0] = dataPacketTx->start_1;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketTx->dataPacket[1] = dataPacketTx->start_2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	785a      	ldrb	r2, [r3, #1]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dataPacketTx->dataPacket[2] = dataPacketTx->command;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	789a      	ldrb	r2, [r3, #2]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dataPacketTx->dataPacket[3] = dataPacketTx->payloadDataLength;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	78da      	ldrb	r2, [r3, #3]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	memcpy(dataPacketTx->dataPacket + 4, dataPacketTx->payloadData, dataPacketTx->payloadDataLength);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3337      	adds	r3, #55	; 0x37
 80035c4:	1d18      	adds	r0, r3, #4
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	1d19      	adds	r1, r3, #4
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	78db      	ldrb	r3, [r3, #3]
 80035ce:	461a      	mov	r2, r3
 80035d0:	f003 ffa2 	bl	8007518 <memcpy>
	dataPacketTx->dataPacketLength = dataPacketTx->payloadDataLength + 4 + 1;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	78db      	ldrb	r3, [r3, #3]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3305      	adds	r3, #5
 80035dc:	b29a      	uxth	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = genCrc(dataPacketTx->dataPacket, dataPacketTx->dataPacketLength - 1);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f103 0237 	add.w	r2, r3, #55	; 0x37
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f7ff fd87 	bl	800310a <genCrc>
 80035fc:	4603      	mov	r3, r0
 80035fe:	461a      	mov	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->dataPacket[dataPacketTx->payloadDataLength + 4] = dataPacketTx->crc8;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	78db      	ldrb	r3, [r3, #3]
 800360a:	3304      	adds	r3, #4
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	f892 1036 	ldrb.w	r1, [r2, #54]	; 0x36
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	460a      	mov	r2, r1
 8003618:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketTx->dataPacketTxStatus = VALID_TX_DATA_PACKET;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <dataPacketTxUartSend>:

void dataPacketTxUartSend(DataPacketTx *dataPacketTx, UART_HandleTypeDef huart)
{
 800362c:	b084      	sub	sp, #16
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	f107 0014 	add.w	r0, r7, #20
 800363a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (dataPacketTx->dataPacketTxStatus == VALID_TX_DATA_PACKET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003644:	2b01      	cmp	r3, #1
 8003646:	d10b      	bne.n	8003660 <dataPacketTxUartSend+0x34>
	{
		HAL_UART_Transmit(&huart, dataPacketTx->dataPacket, dataPacketTx->dataPacketLength, HAL_MAX_DELAY);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f103 0137 	add.w	r1, r3, #55	; 0x37
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8003654:	f107 0014 	add.w	r0, r7, #20
 8003658:	f04f 33ff 	mov.w	r3, #4294967295
 800365c:	f002 fb51 	bl	8005d02 <HAL_UART_Transmit>
	}
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800366a:	b004      	add	sp, #16
 800366c:	4770      	bx	lr

0800366e <dataPacketTxClear>:

void dataPacketTxClear(DataPacketTx *dataPacketTx)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	dataPacketTx->dataPacketLength = 0;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = 0x00;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->command = 0x00;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3337      	adds	r3, #55	; 0x37
 8003698:	2237      	movs	r2, #55	; 0x37
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f003 ff49 	bl	8007534 <memset>
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <dataPacketTxPayloadDataClear>:

void dataPacketTxPayloadDataClear(DataPacketTx *dataPacketTx)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	dataPacketTx->dataPacketLength = 0;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = 0x00;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->command = 0x00;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	2232      	movs	r2, #50	; 0x32
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f003 ff2b 	bl	8007534 <memset>
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <dataPacketTxSetCommand>:

void dataPacketTxSetCommand(DataPacketTx *dataPacketTx, uint8_t command)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	70fb      	strb	r3, [r7, #3]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	if ((command < 0x01) || (command > 0xFE))
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d006      	beq.n	800370e <dataPacketTxSetCommand+0x28>
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	2bff      	cmp	r3, #255	; 0xff
 8003704:	d003      	beq.n	800370e <dataPacketTxSetCommand+0x28>
	{
		return;
	}

	dataPacketTx->command = command;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	709a      	strb	r2, [r3, #2]
 800370c:	e000      	b.n	8003710 <dataPacketTxSetCommand+0x2a>
		return;
 800370e:	bf00      	nop
}
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <dataPacketTxSetPayloadData>:
{
	return dataPacketTx->command;
}

void dataPacketTxSetPayloadData(DataPacketTx *dataPacketTx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	4613      	mov	r3, r2
 8003726:	71fb      	strb	r3, [r7, #7]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	memcpy(dataPacketTx->payloadData, payloadData, payloadDataLength);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3304      	adds	r3, #4
 8003734:	79fa      	ldrb	r2, [r7, #7]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	4618      	mov	r0, r3
 800373a:	f003 feed 	bl	8007518 <memcpy>
	dataPacketTx->payloadDataLength = payloadDataLength;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	79fa      	ldrb	r2, [r7, #7]
 8003742:	70da      	strb	r2, [r3, #3]
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003750:	4b0e      	ldr	r3, [pc, #56]	; (800378c <HAL_Init+0x40>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a0d      	ldr	r2, [pc, #52]	; (800378c <HAL_Init+0x40>)
 8003756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800375a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_Init+0x40>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <HAL_Init+0x40>)
 8003762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003768:	4b08      	ldr	r3, [pc, #32]	; (800378c <HAL_Init+0x40>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a07      	ldr	r2, [pc, #28]	; (800378c <HAL_Init+0x40>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003774:	2003      	movs	r0, #3
 8003776:	f000 fd3b 	bl	80041f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800377a:	200f      	movs	r0, #15
 800377c:	f000 f808 	bl	8003790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003780:	f7ff faec 	bl	8002d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023c00 	.word	0x40023c00

08003790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_InitTick+0x54>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_InitTick+0x58>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	4619      	mov	r1, r3
 80037a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fd53 	bl	800425a <HAL_SYSTICK_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e00e      	b.n	80037dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b0f      	cmp	r3, #15
 80037c2:	d80a      	bhi.n	80037da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037c4:	2200      	movs	r2, #0
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	f04f 30ff 	mov.w	r0, #4294967295
 80037cc:	f000 fd1b 	bl	8004206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037d0:	4a06      	ldr	r2, [pc, #24]	; (80037ec <HAL_InitTick+0x5c>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000000 	.word	0x20000000
 80037e8:	20000008 	.word	0x20000008
 80037ec:	20000004 	.word	0x20000004

080037f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_IncTick+0x20>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_IncTick+0x24>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4413      	add	r3, r2
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <HAL_IncTick+0x24>)
 8003802:	6013      	str	r3, [r2, #0]
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000008 	.word	0x20000008
 8003814:	2000083c 	.word	0x2000083c

08003818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return uwTick;
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <HAL_GetTick+0x14>)
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	2000083c 	.word	0x2000083c

08003830 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e033      	b.n	80038ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff faac 	bl	8002dac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003876:	f023 0302 	bic.w	r3, r3, #2
 800387a:	f043 0202 	orr.w	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fae8 	bl	8003e58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f023 0303 	bic.w	r3, r3, #3
 8003896:	f043 0201 	orr.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	641a      	str	r2, [r3, #64]	; 0x40
 800389e:	e001      	b.n	80038a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_Start+0x1a>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e0b2      	b.n	8003a38 <HAL_ADC_Start+0x180>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d018      	beq.n	800391a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038f8:	4b52      	ldr	r3, [pc, #328]	; (8003a44 <HAL_ADC_Start+0x18c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a52      	ldr	r2, [pc, #328]	; (8003a48 <HAL_ADC_Start+0x190>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	0c9a      	lsrs	r2, r3, #18
 8003904:	4613      	mov	r3, r2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4413      	add	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800390c:	e002      	b.n	8003914 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	3b01      	subs	r3, #1
 8003912:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f9      	bne.n	800390e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d17a      	bne.n	8003a1e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003952:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003966:	d106      	bne.n	8003976 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	f023 0206 	bic.w	r2, r3, #6
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	645a      	str	r2, [r3, #68]	; 0x44
 8003974:	e002      	b.n	800397c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003984:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <HAL_ADC_Start+0x194>)
 8003986:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003990:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2b00      	cmp	r3, #0
 800399c:	d12a      	bne.n	80039f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2b      	ldr	r2, [pc, #172]	; (8003a50 <HAL_ADC_Start+0x198>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d015      	beq.n	80039d4 <HAL_ADC_Start+0x11c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a29      	ldr	r2, [pc, #164]	; (8003a54 <HAL_ADC_Start+0x19c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d105      	bne.n	80039be <HAL_ADC_Start+0x106>
 80039b2:	4b26      	ldr	r3, [pc, #152]	; (8003a4c <HAL_ADC_Start+0x194>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <HAL_ADC_Start+0x1a0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d136      	bne.n	8003a36 <HAL_ADC_Start+0x17e>
 80039c8:	4b20      	ldr	r3, [pc, #128]	; (8003a4c <HAL_ADC_Start+0x194>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d130      	bne.n	8003a36 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d129      	bne.n	8003a36 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	e020      	b.n	8003a36 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <HAL_ADC_Start+0x198>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d11b      	bne.n	8003a36 <HAL_ADC_Start+0x17e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d114      	bne.n	8003a36 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	e00b      	b.n	8003a36 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f043 0210 	orr.w	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	20000000 	.word	0x20000000
 8003a48:	431bde83 	.word	0x431bde83
 8003a4c:	40012300 	.word	0x40012300
 8003a50:	40012000 	.word	0x40012000
 8003a54:	40012100 	.word	0x40012100
 8003a58:	40012200 	.word	0x40012200

08003a5c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_ADC_Stop+0x16>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e021      	b.n	8003ab6 <HAL_ADC_Stop+0x5a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d109      	bne.n	8003aac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	f043 0201 	orr.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ade:	d113      	bne.n	8003b08 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aee:	d10b      	bne.n	8003b08 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e063      	b.n	8003bd0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003b08:	f7ff fe86 	bl	8003818 <HAL_GetTick>
 8003b0c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b0e:	e021      	b.n	8003b54 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d01d      	beq.n	8003b54 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_ADC_PollForConversion+0x6c>
 8003b1e:	f7ff fe7b 	bl	8003818 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d212      	bcs.n	8003b54 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d00b      	beq.n	8003b54 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	f043 0204 	orr.w	r2, r3, #4
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e03d      	b.n	8003bd0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d1d6      	bne.n	8003b10 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f06f 0212 	mvn.w	r2, #18
 8003b6a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d123      	bne.n	8003bce <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11f      	bne.n	8003bce <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d006      	beq.n	8003baa <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d111      	bne.n	8003bce <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d105      	bne.n	8003bce <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x1c>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e113      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x244>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b09      	cmp	r3, #9
 8003c1e:	d925      	bls.n	8003c6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68d9      	ldr	r1, [r3, #12]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4613      	mov	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4413      	add	r3, r2
 8003c34:	3b1e      	subs	r3, #30
 8003c36:	2207      	movs	r2, #7
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43da      	mvns	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	400a      	ands	r2, r1
 8003c44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68d9      	ldr	r1, [r3, #12]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	4618      	mov	r0, r3
 8003c58:	4603      	mov	r3, r0
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	4403      	add	r3, r0
 8003c5e:	3b1e      	subs	r3, #30
 8003c60:	409a      	lsls	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	e022      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6919      	ldr	r1, [r3, #16]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4413      	add	r3, r2
 8003c80:	2207      	movs	r2, #7
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43da      	mvns	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6919      	ldr	r1, [r3, #16]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	4403      	add	r3, r0
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d824      	bhi.n	8003d04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	3b05      	subs	r3, #5
 8003ccc:	221f      	movs	r2, #31
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	400a      	ands	r2, r1
 8003cda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	4618      	mov	r0, r3
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3b05      	subs	r3, #5
 8003cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	635a      	str	r2, [r3, #52]	; 0x34
 8003d02:	e04c      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b0c      	cmp	r3, #12
 8003d0a:	d824      	bhi.n	8003d56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3b23      	subs	r3, #35	; 0x23
 8003d1e:	221f      	movs	r2, #31
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43da      	mvns	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	400a      	ands	r2, r1
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	3b23      	subs	r3, #35	; 0x23
 8003d48:	fa00 f203 	lsl.w	r2, r0, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
 8003d54:	e023      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	3b41      	subs	r3, #65	; 0x41
 8003d68:	221f      	movs	r2, #31
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	400a      	ands	r2, r1
 8003d76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	4618      	mov	r0, r3
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	3b41      	subs	r3, #65	; 0x41
 8003d92:	fa00 f203 	lsl.w	r2, r0, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d9e:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <HAL_ADC_ConfigChannel+0x250>)
 8003da0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a28      	ldr	r2, [pc, #160]	; (8003e48 <HAL_ADC_ConfigChannel+0x254>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d10f      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x1d8>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b12      	cmp	r3, #18
 8003db2:	d10b      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <HAL_ADC_ConfigChannel+0x254>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d12b      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x23a>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1c      	ldr	r2, [pc, #112]	; (8003e4c <HAL_ADC_ConfigChannel+0x258>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <HAL_ADC_ConfigChannel+0x1f4>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b11      	cmp	r3, #17
 8003de6:	d122      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a11      	ldr	r2, [pc, #68]	; (8003e4c <HAL_ADC_ConfigChannel+0x258>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d111      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e0a:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_ADC_ConfigChannel+0x25c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a11      	ldr	r2, [pc, #68]	; (8003e54 <HAL_ADC_ConfigChannel+0x260>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	0c9a      	lsrs	r2, r3, #18
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e20:	e002      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f9      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	40012300 	.word	0x40012300
 8003e48:	40012000 	.word	0x40012000
 8003e4c:	10000012 	.word	0x10000012
 8003e50:	20000000 	.word	0x20000000
 8003e54:	431bde83 	.word	0x431bde83

08003e58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e60:	4b79      	ldr	r3, [pc, #484]	; (8004048 <ADC_Init+0x1f0>)
 8003e62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6859      	ldr	r1, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	021a      	lsls	r2, r3, #8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ed2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6899      	ldr	r1, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	4a58      	ldr	r2, [pc, #352]	; (800404c <ADC_Init+0x1f4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d022      	beq.n	8003f36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003efe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6899      	ldr	r1, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6899      	ldr	r1, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	e00f      	b.n	8003f56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0202 	bic.w	r2, r2, #2
 8003f64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6899      	ldr	r1, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7e1b      	ldrb	r3, [r3, #24]
 8003f70:	005a      	lsls	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01b      	beq.n	8003fbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fa2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	035a      	lsls	r2, r3, #13
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	e007      	b.n	8003fcc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	051a      	lsls	r2, r3, #20
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004000:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6899      	ldr	r1, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800400e:	025a      	lsls	r2, r3, #9
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004026:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6899      	ldr	r1, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	029a      	lsls	r2, r3, #10
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	609a      	str	r2, [r3, #8]
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40012300 	.word	0x40012300
 800404c:	0f000001 	.word	0x0f000001

08004050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <__NVIC_SetPriorityGrouping+0x44>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800406c:	4013      	ands	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800407c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004082:	4a04      	ldr	r2, [pc, #16]	; (8004094 <__NVIC_SetPriorityGrouping+0x44>)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	60d3      	str	r3, [r2, #12]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <__NVIC_GetPriorityGrouping+0x18>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	f003 0307 	and.w	r3, r3, #7
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	db0b      	blt.n	80040de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	f003 021f 	and.w	r2, r3, #31
 80040cc:	4907      	ldr	r1, [pc, #28]	; (80040ec <__NVIC_EnableIRQ+0x38>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2001      	movs	r0, #1
 80040d6:	fa00 f202 	lsl.w	r2, r0, r2
 80040da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	e000e100 	.word	0xe000e100

080040f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	6039      	str	r1, [r7, #0]
 80040fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004100:	2b00      	cmp	r3, #0
 8004102:	db0a      	blt.n	800411a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	b2da      	uxtb	r2, r3
 8004108:	490c      	ldr	r1, [pc, #48]	; (800413c <__NVIC_SetPriority+0x4c>)
 800410a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410e:	0112      	lsls	r2, r2, #4
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	440b      	add	r3, r1
 8004114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004118:	e00a      	b.n	8004130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	4908      	ldr	r1, [pc, #32]	; (8004140 <__NVIC_SetPriority+0x50>)
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	3b04      	subs	r3, #4
 8004128:	0112      	lsls	r2, r2, #4
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	440b      	add	r3, r1
 800412e:	761a      	strb	r2, [r3, #24]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	e000e100 	.word	0xe000e100
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	; 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f1c3 0307 	rsb	r3, r3, #7
 800415e:	2b04      	cmp	r3, #4
 8004160:	bf28      	it	cs
 8004162:	2304      	movcs	r3, #4
 8004164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3304      	adds	r3, #4
 800416a:	2b06      	cmp	r3, #6
 800416c:	d902      	bls.n	8004174 <NVIC_EncodePriority+0x30>
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3b03      	subs	r3, #3
 8004172:	e000      	b.n	8004176 <NVIC_EncodePriority+0x32>
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004178:	f04f 32ff 	mov.w	r2, #4294967295
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43da      	mvns	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	401a      	ands	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800418c:	f04f 31ff 	mov.w	r1, #4294967295
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	fa01 f303 	lsl.w	r3, r1, r3
 8004196:	43d9      	mvns	r1, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800419c:	4313      	orrs	r3, r2
         );
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3724      	adds	r7, #36	; 0x24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041bc:	d301      	bcc.n	80041c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041be:	2301      	movs	r3, #1
 80041c0:	e00f      	b.n	80041e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041c2:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <SysTick_Config+0x40>)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041ca:	210f      	movs	r1, #15
 80041cc:	f04f 30ff 	mov.w	r0, #4294967295
 80041d0:	f7ff ff8e 	bl	80040f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <SysTick_Config+0x40>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041da:	4b04      	ldr	r3, [pc, #16]	; (80041ec <SysTick_Config+0x40>)
 80041dc:	2207      	movs	r2, #7
 80041de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	e000e010 	.word	0xe000e010

080041f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff ff29 	bl	8004050 <__NVIC_SetPriorityGrouping>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	4603      	mov	r3, r0
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004218:	f7ff ff3e 	bl	8004098 <__NVIC_GetPriorityGrouping>
 800421c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68b9      	ldr	r1, [r7, #8]
 8004222:	6978      	ldr	r0, [r7, #20]
 8004224:	f7ff ff8e 	bl	8004144 <NVIC_EncodePriority>
 8004228:	4602      	mov	r2, r0
 800422a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ff5d 	bl	80040f0 <__NVIC_SetPriority>
}
 8004236:	bf00      	nop
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	4603      	mov	r3, r0
 8004246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff ff31 	bl	80040b4 <__NVIC_EnableIRQ>
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff ffa2 	bl	80041ac <SysTick_Config>
 8004268:	4603      	mov	r3, r0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e014      	b.n	80042ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	791b      	ldrb	r3, [r3, #4]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7fe fdcd 	bl	8002e34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	795b      	ldrb	r3, [r3, #5]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_DAC_Start+0x16>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e040      	b.n	800434e <HAL_DAC_Start+0x98>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6819      	ldr	r1, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2201      	movs	r2, #1
 80042e6:	409a      	lsls	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10f      	bne.n	8004316 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004300:	2b3c      	cmp	r3, #60	; 0x3c
 8004302:	d11d      	bne.n	8004340 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	e014      	b.n	8004340 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	213c      	movs	r1, #60	; 0x3c
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	429a      	cmp	r2, r3
 800432e:	d107      	bne.n	8004340 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0202 	orr.w	r2, r2, #2
 800433e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800435a:	b480      	push	{r7}
 800435c:	b087      	sub	sp, #28
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d105      	bne.n	8004384 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	3308      	adds	r3, #8
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e004      	b.n	800438e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	3314      	adds	r3, #20
 800438c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	461a      	mov	r2, r3
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	795b      	ldrb	r3, [r3, #5]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_DAC_ConfigChannel+0x18>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e03c      	b.n	8004436 <HAL_DAC_ConfigChannel+0x92>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2202      	movs	r2, #2
 80043c6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4013      	ands	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6819      	ldr	r1, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	22c0      	movs	r2, #192	; 0xc0
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	43da      	mvns	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	400a      	ands	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004450:	f7ff f9e2 	bl	8003818 <HAL_GetTick>
 8004454:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d008      	beq.n	8004474 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2280      	movs	r2, #128	; 0x80
 8004466:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e052      	b.n	800451a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0216 	bic.w	r2, r2, #22
 8004482:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004492:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d103      	bne.n	80044a4 <HAL_DMA_Abort+0x62>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0208 	bic.w	r2, r2, #8
 80044b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0201 	bic.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044c4:	e013      	b.n	80044ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044c6:	f7ff f9a7 	bl	8003818 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	d90c      	bls.n	80044ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2203      	movs	r2, #3
 80044de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e015      	b.n	800451a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e4      	bne.n	80044c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004500:	223f      	movs	r2, #63	; 0x3f
 8004502:	409a      	lsls	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d004      	beq.n	8004540 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2280      	movs	r2, #128	; 0x80
 800453a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e00c      	b.n	800455a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2205      	movs	r2, #5
 8004544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0201 	bic.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
	...

08004568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	e165      	b.n	8004850 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004584:	2201      	movs	r2, #1
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	429a      	cmp	r2, r3
 800459e:	f040 8154 	bne.w	800484a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d005      	beq.n	80045ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d130      	bne.n	800461c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	2203      	movs	r2, #3
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4013      	ands	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045f0:	2201      	movs	r2, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 0201 	and.w	r2, r3, #1
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	2b03      	cmp	r3, #3
 8004626:	d017      	beq.n	8004658 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	2203      	movs	r2, #3
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d123      	bne.n	80046ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	08da      	lsrs	r2, r3, #3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3208      	adds	r2, #8
 800466c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	220f      	movs	r2, #15
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4013      	ands	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	08da      	lsrs	r2, r3, #3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3208      	adds	r2, #8
 80046a6:	69b9      	ldr	r1, [r7, #24]
 80046a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	2203      	movs	r2, #3
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0203 	and.w	r2, r3, #3
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80ae 	beq.w	800484a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	4b5d      	ldr	r3, [pc, #372]	; (8004868 <HAL_GPIO_Init+0x300>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	4a5c      	ldr	r2, [pc, #368]	; (8004868 <HAL_GPIO_Init+0x300>)
 80046f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046fc:	6453      	str	r3, [r2, #68]	; 0x44
 80046fe:	4b5a      	ldr	r3, [pc, #360]	; (8004868 <HAL_GPIO_Init+0x300>)
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800470a:	4a58      	ldr	r2, [pc, #352]	; (800486c <HAL_GPIO_Init+0x304>)
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	089b      	lsrs	r3, r3, #2
 8004710:	3302      	adds	r3, #2
 8004712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	220f      	movs	r2, #15
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4013      	ands	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a4f      	ldr	r2, [pc, #316]	; (8004870 <HAL_GPIO_Init+0x308>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d025      	beq.n	8004782 <HAL_GPIO_Init+0x21a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a4e      	ldr	r2, [pc, #312]	; (8004874 <HAL_GPIO_Init+0x30c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01f      	beq.n	800477e <HAL_GPIO_Init+0x216>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a4d      	ldr	r2, [pc, #308]	; (8004878 <HAL_GPIO_Init+0x310>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d019      	beq.n	800477a <HAL_GPIO_Init+0x212>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a4c      	ldr	r2, [pc, #304]	; (800487c <HAL_GPIO_Init+0x314>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <HAL_GPIO_Init+0x20e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a4b      	ldr	r2, [pc, #300]	; (8004880 <HAL_GPIO_Init+0x318>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00d      	beq.n	8004772 <HAL_GPIO_Init+0x20a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a4a      	ldr	r2, [pc, #296]	; (8004884 <HAL_GPIO_Init+0x31c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <HAL_GPIO_Init+0x206>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a49      	ldr	r2, [pc, #292]	; (8004888 <HAL_GPIO_Init+0x320>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d101      	bne.n	800476a <HAL_GPIO_Init+0x202>
 8004766:	2306      	movs	r3, #6
 8004768:	e00c      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 800476a:	2307      	movs	r3, #7
 800476c:	e00a      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 800476e:	2305      	movs	r3, #5
 8004770:	e008      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 8004772:	2304      	movs	r3, #4
 8004774:	e006      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 8004776:	2303      	movs	r3, #3
 8004778:	e004      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 800477a:	2302      	movs	r3, #2
 800477c:	e002      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_GPIO_Init+0x21c>
 8004782:	2300      	movs	r3, #0
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	f002 0203 	and.w	r2, r2, #3
 800478a:	0092      	lsls	r2, r2, #2
 800478c:	4093      	lsls	r3, r2
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004794:	4935      	ldr	r1, [pc, #212]	; (800486c <HAL_GPIO_Init+0x304>)
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	089b      	lsrs	r3, r3, #2
 800479a:	3302      	adds	r3, #2
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047a2:	4b3a      	ldr	r3, [pc, #232]	; (800488c <HAL_GPIO_Init+0x324>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047c6:	4a31      	ldr	r2, [pc, #196]	; (800488c <HAL_GPIO_Init+0x324>)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047cc:	4b2f      	ldr	r3, [pc, #188]	; (800488c <HAL_GPIO_Init+0x324>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	43db      	mvns	r3, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047f0:	4a26      	ldr	r2, [pc, #152]	; (800488c <HAL_GPIO_Init+0x324>)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047f6:	4b25      	ldr	r3, [pc, #148]	; (800488c <HAL_GPIO_Init+0x324>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	43db      	mvns	r3, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4013      	ands	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800481a:	4a1c      	ldr	r2, [pc, #112]	; (800488c <HAL_GPIO_Init+0x324>)
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004820:	4b1a      	ldr	r3, [pc, #104]	; (800488c <HAL_GPIO_Init+0x324>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	43db      	mvns	r3, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4013      	ands	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004844:	4a11      	ldr	r2, [pc, #68]	; (800488c <HAL_GPIO_Init+0x324>)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3301      	adds	r3, #1
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	2b0f      	cmp	r3, #15
 8004854:	f67f ae96 	bls.w	8004584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	3724      	adds	r7, #36	; 0x24
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40023800 	.word	0x40023800
 800486c:	40013800 	.word	0x40013800
 8004870:	40020000 	.word	0x40020000
 8004874:	40020400 	.word	0x40020400
 8004878:	40020800 	.word	0x40020800
 800487c:	40020c00 	.word	0x40020c00
 8004880:	40021000 	.word	0x40021000
 8004884:	40021400 	.word	0x40021400
 8004888:	40021800 	.word	0x40021800
 800488c:	40013c00 	.word	0x40013c00

08004890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]
 800489c:	4613      	mov	r3, r2
 800489e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048a0:	787b      	ldrb	r3, [r7, #1]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048ac:	e003      	b.n	80048b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048ae:	887b      	ldrh	r3, [r7, #2]
 80048b0:	041a      	lsls	r2, r3, #16
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	619a      	str	r2, [r3, #24]
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	460b      	mov	r3, r1
 80048cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048d4:	887a      	ldrh	r2, [r7, #2]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4013      	ands	r3, r2
 80048da:	041a      	lsls	r2, r3, #16
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	43d9      	mvns	r1, r3
 80048e0:	887b      	ldrh	r3, [r7, #2]
 80048e2:	400b      	ands	r3, r1
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	619a      	str	r2, [r3, #24]
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	4b20      	ldr	r3, [pc, #128]	; (8004988 <HAL_PWREx_EnableOverDrive+0x90>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	4a1f      	ldr	r2, [pc, #124]	; (8004988 <HAL_PWREx_EnableOverDrive+0x90>)
 800490c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004910:	6413      	str	r3, [r2, #64]	; 0x40
 8004912:	4b1d      	ldr	r3, [pc, #116]	; (8004988 <HAL_PWREx_EnableOverDrive+0x90>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800491e:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_PWREx_EnableOverDrive+0x94>)
 8004920:	2201      	movs	r2, #1
 8004922:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004924:	f7fe ff78 	bl	8003818 <HAL_GetTick>
 8004928:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800492a:	e009      	b.n	8004940 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800492c:	f7fe ff74 	bl	8003818 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800493a:	d901      	bls.n	8004940 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e01f      	b.n	8004980 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004940:	4b13      	ldr	r3, [pc, #76]	; (8004990 <HAL_PWREx_EnableOverDrive+0x98>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494c:	d1ee      	bne.n	800492c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800494e:	4b11      	ldr	r3, [pc, #68]	; (8004994 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004950:	2201      	movs	r2, #1
 8004952:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004954:	f7fe ff60 	bl	8003818 <HAL_GetTick>
 8004958:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800495a:	e009      	b.n	8004970 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800495c:	f7fe ff5c 	bl	8003818 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800496a:	d901      	bls.n	8004970 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e007      	b.n	8004980 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004970:	4b07      	ldr	r3, [pc, #28]	; (8004990 <HAL_PWREx_EnableOverDrive+0x98>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800497c:	d1ee      	bne.n	800495c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40023800 	.word	0x40023800
 800498c:	420e0040 	.word	0x420e0040
 8004990:	40007000 	.word	0x40007000
 8004994:	420e0044 	.word	0x420e0044

08004998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0cc      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049ac:	4b68      	ldr	r3, [pc, #416]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d90c      	bls.n	80049d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ba:	4b65      	ldr	r3, [pc, #404]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c2:	4b63      	ldr	r3, [pc, #396]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0b8      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d020      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ec:	4b59      	ldr	r3, [pc, #356]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	4a58      	ldr	r2, [pc, #352]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a04:	4b53      	ldr	r3, [pc, #332]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a52      	ldr	r2, [pc, #328]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a10:	4b50      	ldr	r3, [pc, #320]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	494d      	ldr	r1, [pc, #308]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d044      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d107      	bne.n	8004a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a36:	4b47      	ldr	r3, [pc, #284]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d119      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e07f      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d107      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a56:	4b3f      	ldr	r3, [pc, #252]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e06f      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a66:	4b3b      	ldr	r3, [pc, #236]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e067      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a76:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f023 0203 	bic.w	r2, r3, #3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4934      	ldr	r1, [pc, #208]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a88:	f7fe fec6 	bl	8003818 <HAL_GetTick>
 8004a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8e:	e00a      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a90:	f7fe fec2 	bl	8003818 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e04f      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	4b2b      	ldr	r3, [pc, #172]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 020c 	and.w	r2, r3, #12
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d1eb      	bne.n	8004a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d20c      	bcs.n	8004ae0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b22      	ldr	r3, [pc, #136]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e032      	b.n	8004b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aec:	4b19      	ldr	r3, [pc, #100]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	4916      	ldr	r1, [pc, #88]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b0a:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	490e      	ldr	r1, [pc, #56]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b1e:	f000 f855 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 8004b22:	4602      	mov	r2, r0
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	490a      	ldr	r1, [pc, #40]	; (8004b58 <HAL_RCC_ClockConfig+0x1c0>)
 8004b30:	5ccb      	ldrb	r3, [r1, r3]
 8004b32:	fa22 f303 	lsr.w	r3, r2, r3
 8004b36:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <HAL_RCC_ClockConfig+0x1c4>)
 8004b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b3a:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <HAL_RCC_ClockConfig+0x1c8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe fe26 	bl	8003790 <HAL_InitTick>

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40023c00 	.word	0x40023c00
 8004b54:	40023800 	.word	0x40023800
 8004b58:	0800755c 	.word	0x0800755c
 8004b5c:	20000000 	.word	0x20000000
 8004b60:	20000004 	.word	0x20000004

08004b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b68:	4b03      	ldr	r3, [pc, #12]	; (8004b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000000 	.word	0x20000000

08004b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b80:	f7ff fff0 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	0a9b      	lsrs	r3, r3, #10
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4903      	ldr	r1, [pc, #12]	; (8004ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	0800756c 	.word	0x0800756c

08004ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ba8:	f7ff ffdc 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	0b5b      	lsrs	r3, r3, #13
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	4903      	ldr	r1, [pc, #12]	; (8004bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	0800756c 	.word	0x0800756c

08004bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd0:	b0a6      	sub	sp, #152	; 0x98
 8004bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bf2:	4bc8      	ldr	r3, [pc, #800]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	2b0c      	cmp	r3, #12
 8004bfc:	f200 817e 	bhi.w	8004efc <HAL_RCC_GetSysClockFreq+0x330>
 8004c00:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c06:	bf00      	nop
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004efd 	.word	0x08004efd
 8004c10:	08004efd 	.word	0x08004efd
 8004c14:	08004efd 	.word	0x08004efd
 8004c18:	08004c45 	.word	0x08004c45
 8004c1c:	08004efd 	.word	0x08004efd
 8004c20:	08004efd 	.word	0x08004efd
 8004c24:	08004efd 	.word	0x08004efd
 8004c28:	08004c4d 	.word	0x08004c4d
 8004c2c:	08004efd 	.word	0x08004efd
 8004c30:	08004efd 	.word	0x08004efd
 8004c34:	08004efd 	.word	0x08004efd
 8004c38:	08004db7 	.word	0x08004db7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c3c:	4bb6      	ldr	r3, [pc, #728]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004c42:	e15f      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c44:	4bb5      	ldr	r3, [pc, #724]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004c4a:	e15b      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c4c:	4bb1      	ldr	r3, [pc, #708]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c58:	4bae      	ldr	r3, [pc, #696]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d031      	beq.n	8004cc8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c64:	4bab      	ldr	r3, [pc, #684]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	099b      	lsrs	r3, r3, #6
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c76:	663b      	str	r3, [r7, #96]	; 0x60
 8004c78:	2300      	movs	r3, #0
 8004c7a:	667b      	str	r3, [r7, #100]	; 0x64
 8004c7c:	4ba7      	ldr	r3, [pc, #668]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004c7e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004c82:	462a      	mov	r2, r5
 8004c84:	fb03 f202 	mul.w	r2, r3, r2
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	4aa2      	ldr	r2, [pc, #648]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004c94:	4621      	mov	r1, r4
 8004c96:	fba1 1202 	umull	r1, r2, r1, r2
 8004c9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c9c:	460a      	mov	r2, r1
 8004c9e:	67ba      	str	r2, [r7, #120]	; 0x78
 8004ca0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004ca2:	4413      	add	r3, r2
 8004ca4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004caa:	2200      	movs	r2, #0
 8004cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004cb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cb4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004cb8:	f7fb fec4 	bl	8000a44 <__aeabi_uldivmod>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cc6:	e064      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc8:	4b92      	ldr	r3, [pc, #584]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	099b      	lsrs	r3, r3, #6
 8004cce:	2200      	movs	r2, #0
 8004cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8004cd2:	657a      	str	r2, [r7, #84]	; 0x54
 8004cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cdc:	2300      	movs	r3, #0
 8004cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ce0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	462b      	mov	r3, r5
 8004ce8:	f04f 0000 	mov.w	r0, #0
 8004cec:	f04f 0100 	mov.w	r1, #0
 8004cf0:	0159      	lsls	r1, r3, #5
 8004cf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf6:	0150      	lsls	r0, r2, #5
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	1a51      	subs	r1, r2, r1
 8004d00:	6139      	str	r1, [r7, #16]
 8004d02:	4629      	mov	r1, r5
 8004d04:	eb63 0301 	sbc.w	r3, r3, r1
 8004d08:	617b      	str	r3, [r7, #20]
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d16:	4659      	mov	r1, fp
 8004d18:	018b      	lsls	r3, r1, #6
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d20:	4651      	mov	r1, sl
 8004d22:	018a      	lsls	r2, r1, #6
 8004d24:	4651      	mov	r1, sl
 8004d26:	ebb2 0801 	subs.w	r8, r2, r1
 8004d2a:	4659      	mov	r1, fp
 8004d2c:	eb63 0901 	sbc.w	r9, r3, r1
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d44:	4690      	mov	r8, r2
 8004d46:	4699      	mov	r9, r3
 8004d48:	4623      	mov	r3, r4
 8004d4a:	eb18 0303 	adds.w	r3, r8, r3
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	462b      	mov	r3, r5
 8004d52:	eb49 0303 	adc.w	r3, r9, r3
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d64:	4629      	mov	r1, r5
 8004d66:	028b      	lsls	r3, r1, #10
 8004d68:	4621      	mov	r1, r4
 8004d6a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d6e:	4621      	mov	r1, r4
 8004d70:	028a      	lsls	r2, r1, #10
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d7e:	647a      	str	r2, [r7, #68]	; 0x44
 8004d80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d84:	f7fb fe5e 	bl	8000a44 <__aeabi_uldivmod>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d92:	4b60      	ldr	r3, [pc, #384]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	0c1b      	lsrs	r3, r3, #16
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004da4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004db4:	e0a6      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004db6:	4b57      	ldr	r3, [pc, #348]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dc2:	4b54      	ldr	r3, [pc, #336]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d02a      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dce:	4b51      	ldr	r3, [pc, #324]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	099b      	lsrs	r3, r3, #6
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004de0:	2100      	movs	r1, #0
 8004de2:	4b4e      	ldr	r3, [pc, #312]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004de4:	fb03 f201 	mul.w	r2, r3, r1
 8004de8:	2300      	movs	r3, #0
 8004dea:	fb00 f303 	mul.w	r3, r0, r3
 8004dee:	4413      	add	r3, r2
 8004df0:	4a4a      	ldr	r2, [pc, #296]	; (8004f1c <HAL_RCC_GetSysClockFreq+0x350>)
 8004df2:	fba0 1202 	umull	r1, r2, r0, r2
 8004df6:	677a      	str	r2, [r7, #116]	; 0x74
 8004df8:	460a      	mov	r2, r1
 8004dfa:	673a      	str	r2, [r7, #112]	; 0x70
 8004dfc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004dfe:	4413      	add	r3, r2
 8004e00:	677b      	str	r3, [r7, #116]	; 0x74
 8004e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e06:	2200      	movs	r2, #0
 8004e08:	633b      	str	r3, [r7, #48]	; 0x30
 8004e0a:	637a      	str	r2, [r7, #52]	; 0x34
 8004e0c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e10:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004e14:	f7fb fe16 	bl	8000a44 <__aeabi_uldivmod>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e22:	e05b      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e24:	4b3b      	ldr	r3, [pc, #236]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	099b      	lsrs	r3, r3, #6
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e36:	623b      	str	r3, [r7, #32]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e40:	4642      	mov	r2, r8
 8004e42:	464b      	mov	r3, r9
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	f04f 0100 	mov.w	r1, #0
 8004e4c:	0159      	lsls	r1, r3, #5
 8004e4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e52:	0150      	lsls	r0, r2, #5
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4641      	mov	r1, r8
 8004e5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e5e:	4649      	mov	r1, r9
 8004e60:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e78:	ebb2 040a 	subs.w	r4, r2, sl
 8004e7c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	00eb      	lsls	r3, r5, #3
 8004e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e8e:	00e2      	lsls	r2, r4, #3
 8004e90:	4614      	mov	r4, r2
 8004e92:	461d      	mov	r5, r3
 8004e94:	4643      	mov	r3, r8
 8004e96:	18e3      	adds	r3, r4, r3
 8004e98:	603b      	str	r3, [r7, #0]
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	eb45 0303 	adc.w	r3, r5, r3
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eae:	4629      	mov	r1, r5
 8004eb0:	028b      	lsls	r3, r1, #10
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eb8:	4621      	mov	r1, r4
 8004eba:	028a      	lsls	r2, r1, #10
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	61fa      	str	r2, [r7, #28]
 8004eca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ece:	f7fb fdb9 	bl	8000a44 <__aeabi_uldivmod>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	0f1b      	lsrs	r3, r3, #28
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004efa:	e003      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004f02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3798      	adds	r7, #152	; 0x98
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f12:	bf00      	nop
 8004f14:	40023800 	.word	0x40023800
 8004f18:	00f42400 	.word	0x00f42400
 8004f1c:	017d7840 	.word	0x017d7840

08004f20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e28d      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 8083 	beq.w	8005046 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f40:	4b94      	ldr	r3, [pc, #592]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 030c 	and.w	r3, r3, #12
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d019      	beq.n	8004f80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f4c:	4b91      	ldr	r3, [pc, #580]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d106      	bne.n	8004f66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f58:	4b8e      	ldr	r3, [pc, #568]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f64:	d00c      	beq.n	8004f80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f66:	4b8b      	ldr	r3, [pc, #556]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f6e:	2b0c      	cmp	r3, #12
 8004f70:	d112      	bne.n	8004f98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f72:	4b88      	ldr	r3, [pc, #544]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f7e:	d10b      	bne.n	8004f98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f80:	4b84      	ldr	r3, [pc, #528]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d05b      	beq.n	8005044 <HAL_RCC_OscConfig+0x124>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d157      	bne.n	8005044 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e25a      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa0:	d106      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x90>
 8004fa2:	4b7c      	ldr	r3, [pc, #496]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a7b      	ldr	r2, [pc, #492]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	e01d      	b.n	8004fec <HAL_RCC_OscConfig+0xcc>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCC_OscConfig+0xb4>
 8004fba:	4b76      	ldr	r3, [pc, #472]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a75      	ldr	r2, [pc, #468]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	4b73      	ldr	r3, [pc, #460]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a72      	ldr	r2, [pc, #456]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e00b      	b.n	8004fec <HAL_RCC_OscConfig+0xcc>
 8004fd4:	4b6f      	ldr	r3, [pc, #444]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a6e      	ldr	r2, [pc, #440]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	4b6c      	ldr	r3, [pc, #432]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a6b      	ldr	r2, [pc, #428]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8004fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d013      	beq.n	800501c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fe fc10 	bl	8003818 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ffc:	f7fe fc0c 	bl	8003818 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b64      	cmp	r3, #100	; 0x64
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e21f      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500e:	4b61      	ldr	r3, [pc, #388]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0xdc>
 800501a:	e014      	b.n	8005046 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fe fbfc 	bl	8003818 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005024:	f7fe fbf8 	bl	8003818 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	; 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e20b      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005036:	4b57      	ldr	r3, [pc, #348]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x104>
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d06f      	beq.n	8005132 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005052:	4b50      	ldr	r3, [pc, #320]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 030c 	and.w	r3, r3, #12
 800505a:	2b00      	cmp	r3, #0
 800505c:	d017      	beq.n	800508e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800505e:	4b4d      	ldr	r3, [pc, #308]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005066:	2b08      	cmp	r3, #8
 8005068:	d105      	bne.n	8005076 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800506a:	4b4a      	ldr	r3, [pc, #296]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005076:	4b47      	ldr	r3, [pc, #284]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800507e:	2b0c      	cmp	r3, #12
 8005080:	d11c      	bne.n	80050bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005082:	4b44      	ldr	r3, [pc, #272]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d116      	bne.n	80050bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800508e:	4b41      	ldr	r3, [pc, #260]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <HAL_RCC_OscConfig+0x186>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d001      	beq.n	80050a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e1d3      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a6:	4b3b      	ldr	r3, [pc, #236]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4937      	ldr	r1, [pc, #220]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ba:	e03a      	b.n	8005132 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d020      	beq.n	8005106 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050c4:	4b34      	ldr	r3, [pc, #208]	; (8005198 <HAL_RCC_OscConfig+0x278>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ca:	f7fe fba5 	bl	8003818 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d2:	f7fe fba1 	bl	8003818 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e1b4      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e4:	4b2b      	ldr	r3, [pc, #172]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f0:	4b28      	ldr	r3, [pc, #160]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	4925      	ldr	r1, [pc, #148]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005100:	4313      	orrs	r3, r2
 8005102:	600b      	str	r3, [r1, #0]
 8005104:	e015      	b.n	8005132 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005106:	4b24      	ldr	r3, [pc, #144]	; (8005198 <HAL_RCC_OscConfig+0x278>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510c:	f7fe fb84 	bl	8003818 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005114:	f7fe fb80 	bl	8003818 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e193      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005126:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d036      	beq.n	80051ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d016      	beq.n	8005174 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <HAL_RCC_OscConfig+0x27c>)
 8005148:	2201      	movs	r2, #1
 800514a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fe fb64 	bl	8003818 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005154:	f7fe fb60 	bl	8003818 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e173      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005166:	4b0b      	ldr	r3, [pc, #44]	; (8005194 <HAL_RCC_OscConfig+0x274>)
 8005168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x234>
 8005172:	e01b      	b.n	80051ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005174:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RCC_OscConfig+0x27c>)
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517a:	f7fe fb4d 	bl	8003818 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005180:	e00e      	b.n	80051a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005182:	f7fe fb49 	bl	8003818 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d907      	bls.n	80051a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e15c      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
 8005194:	40023800 	.word	0x40023800
 8005198:	42470000 	.word	0x42470000
 800519c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a0:	4b8a      	ldr	r3, [pc, #552]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1ea      	bne.n	8005182 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8097 	beq.w	80052e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ba:	2300      	movs	r3, #0
 80051bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051be:	4b83      	ldr	r3, [pc, #524]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10f      	bne.n	80051ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	4b7f      	ldr	r3, [pc, #508]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	4a7e      	ldr	r2, [pc, #504]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d8:	6413      	str	r3, [r2, #64]	; 0x40
 80051da:	4b7c      	ldr	r3, [pc, #496]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e2:	60bb      	str	r3, [r7, #8]
 80051e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ea:	4b79      	ldr	r3, [pc, #484]	; (80053d0 <HAL_RCC_OscConfig+0x4b0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d118      	bne.n	8005228 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051f6:	4b76      	ldr	r3, [pc, #472]	; (80053d0 <HAL_RCC_OscConfig+0x4b0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a75      	ldr	r2, [pc, #468]	; (80053d0 <HAL_RCC_OscConfig+0x4b0>)
 80051fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005202:	f7fe fb09 	bl	8003818 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800520a:	f7fe fb05 	bl	8003818 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e118      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521c:	4b6c      	ldr	r3, [pc, #432]	; (80053d0 <HAL_RCC_OscConfig+0x4b0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d106      	bne.n	800523e <HAL_RCC_OscConfig+0x31e>
 8005230:	4b66      	ldr	r3, [pc, #408]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	4a65      	ldr	r2, [pc, #404]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6713      	str	r3, [r2, #112]	; 0x70
 800523c:	e01c      	b.n	8005278 <HAL_RCC_OscConfig+0x358>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	2b05      	cmp	r3, #5
 8005244:	d10c      	bne.n	8005260 <HAL_RCC_OscConfig+0x340>
 8005246:	4b61      	ldr	r3, [pc, #388]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	4a60      	ldr	r2, [pc, #384]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 800524c:	f043 0304 	orr.w	r3, r3, #4
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
 8005252:	4b5e      	ldr	r3, [pc, #376]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	4a5d      	ldr	r2, [pc, #372]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	6713      	str	r3, [r2, #112]	; 0x70
 800525e:	e00b      	b.n	8005278 <HAL_RCC_OscConfig+0x358>
 8005260:	4b5a      	ldr	r3, [pc, #360]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005264:	4a59      	ldr	r2, [pc, #356]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	6713      	str	r3, [r2, #112]	; 0x70
 800526c:	4b57      	ldr	r3, [pc, #348]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	4a56      	ldr	r2, [pc, #344]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005272:	f023 0304 	bic.w	r3, r3, #4
 8005276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d015      	beq.n	80052ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005280:	f7fe faca 	bl	8003818 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005286:	e00a      	b.n	800529e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005288:	f7fe fac6 	bl	8003818 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f241 3288 	movw	r2, #5000	; 0x1388
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e0d7      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529e:	4b4b      	ldr	r3, [pc, #300]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0ee      	beq.n	8005288 <HAL_RCC_OscConfig+0x368>
 80052aa:	e014      	b.n	80052d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7fe fab4 	bl	8003818 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b4:	f7fe fab0 	bl	8003818 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e0c1      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ca:	4b40      	ldr	r3, [pc, #256]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1ee      	bne.n	80052b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d105      	bne.n	80052e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052dc:	4b3b      	ldr	r3, [pc, #236]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	4a3a      	ldr	r2, [pc, #232]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80ad 	beq.w	800544c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052f2:	4b36      	ldr	r3, [pc, #216]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d060      	beq.n	80053c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d145      	bne.n	8005392 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005306:	4b33      	ldr	r3, [pc, #204]	; (80053d4 <HAL_RCC_OscConfig+0x4b4>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fe fa84 	bl	8003818 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005314:	f7fe fa80 	bl	8003818 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e093      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005326:	4b29      	ldr	r3, [pc, #164]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69da      	ldr	r2, [r3, #28]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	019b      	lsls	r3, r3, #6
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	3b01      	subs	r3, #1
 800534c:	041b      	lsls	r3, r3, #16
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	061b      	lsls	r3, r3, #24
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	071b      	lsls	r3, r3, #28
 800535e:	491b      	ldr	r1, [pc, #108]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005360:	4313      	orrs	r3, r2
 8005362:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005364:	4b1b      	ldr	r3, [pc, #108]	; (80053d4 <HAL_RCC_OscConfig+0x4b4>)
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536a:	f7fe fa55 	bl	8003818 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005372:	f7fe fa51 	bl	8003818 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e064      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005384:	4b11      	ldr	r3, [pc, #68]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0f0      	beq.n	8005372 <HAL_RCC_OscConfig+0x452>
 8005390:	e05c      	b.n	800544c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <HAL_RCC_OscConfig+0x4b4>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fe fa3e 	bl	8003818 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fe fa3a 	bl	8003818 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e04d      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b2:	4b06      	ldr	r3, [pc, #24]	; (80053cc <HAL_RCC_OscConfig+0x4ac>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x480>
 80053be:	e045      	b.n	800544c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d107      	bne.n	80053d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e040      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
 80053cc:	40023800 	.word	0x40023800
 80053d0:	40007000 	.word	0x40007000
 80053d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053d8:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <HAL_RCC_OscConfig+0x538>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d030      	beq.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d129      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fe:	429a      	cmp	r2, r3
 8005400:	d122      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005408:	4013      	ands	r3, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800540e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005410:	4293      	cmp	r3, r2
 8005412:	d119      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	085b      	lsrs	r3, r3, #1
 8005420:	3b01      	subs	r3, #1
 8005422:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005424:	429a      	cmp	r2, r3
 8005426:	d10f      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005432:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005434:	429a      	cmp	r2, r3
 8005436:	d107      	bne.n	8005448 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	40023800 	.word	0x40023800

0800545c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e041      	b.n	80054f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fd fd1a 	bl	8002ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3304      	adds	r3, #4
 8005498:	4619      	mov	r1, r3
 800549a:	4610      	mov	r0, r2
 800549c:	f000 fa96 	bl	80059cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b01      	cmp	r3, #1
 800550e:	d001      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e04e      	b.n	80055b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 0201 	orr.w	r2, r2, #1
 800552a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a23      	ldr	r2, [pc, #140]	; (80055c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d022      	beq.n	800557c <HAL_TIM_Base_Start_IT+0x80>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553e:	d01d      	beq.n	800557c <HAL_TIM_Base_Start_IT+0x80>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1f      	ldr	r2, [pc, #124]	; (80055c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d018      	beq.n	800557c <HAL_TIM_Base_Start_IT+0x80>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1e      	ldr	r2, [pc, #120]	; (80055c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d013      	beq.n	800557c <HAL_TIM_Base_Start_IT+0x80>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1c      	ldr	r2, [pc, #112]	; (80055cc <HAL_TIM_Base_Start_IT+0xd0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00e      	beq.n	800557c <HAL_TIM_Base_Start_IT+0x80>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1b      	ldr	r2, [pc, #108]	; (80055d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d009      	beq.n	800557c <HAL_TIM_Base_Start_IT+0x80>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a19      	ldr	r2, [pc, #100]	; (80055d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <HAL_TIM_Base_Start_IT+0x80>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d111      	bne.n	80055a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b06      	cmp	r3, #6
 800558c:	d010      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0201 	orr.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559e:	e007      	b.n	80055b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40000800 	.word	0x40000800
 80055cc:	40000c00 	.word	0x40000c00
 80055d0:	40010400 	.word	0x40010400
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40001800 	.word	0x40001800

080055dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d122      	bne.n	8005638 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d11b      	bne.n	8005638 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0202 	mvn.w	r2, #2
 8005608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f9b5 	bl	800598e <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f9a7 	bl	800597a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f9b8 	bl	80059a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b04      	cmp	r3, #4
 8005644:	d122      	bne.n	800568c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b04      	cmp	r3, #4
 8005652:	d11b      	bne.n	800568c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0204 	mvn.w	r2, #4
 800565c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2202      	movs	r2, #2
 8005662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f98b 	bl	800598e <HAL_TIM_IC_CaptureCallback>
 8005678:	e005      	b.n	8005686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f97d 	bl	800597a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f98e 	bl	80059a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b08      	cmp	r3, #8
 8005698:	d122      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d11b      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0208 	mvn.w	r2, #8
 80056b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2204      	movs	r2, #4
 80056b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f961 	bl	800598e <HAL_TIM_IC_CaptureCallback>
 80056cc:	e005      	b.n	80056da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f953 	bl	800597a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f964 	bl	80059a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b10      	cmp	r3, #16
 80056ec:	d122      	bne.n	8005734 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d11b      	bne.n	8005734 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0210 	mvn.w	r2, #16
 8005704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2208      	movs	r2, #8
 800570a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f937 	bl	800598e <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f929 	bl	800597a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f93a 	bl	80059a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b01      	cmp	r3, #1
 8005740:	d10e      	bne.n	8005760 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b01      	cmp	r3, #1
 800574e:	d107      	bne.n	8005760 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0201 	mvn.w	r2, #1
 8005758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fc ffc2 	bl	80026e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576a:	2b80      	cmp	r3, #128	; 0x80
 800576c:	d10e      	bne.n	800578c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005778:	2b80      	cmp	r3, #128	; 0x80
 800577a:	d107      	bne.n	800578c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fa64 	bl	8005c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d10e      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b40      	cmp	r3, #64	; 0x40
 80057a6:	d107      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f8ff 	bl	80059b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d10e      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	2b20      	cmp	r3, #32
 80057d2:	d107      	bne.n	80057e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0220 	mvn.w	r2, #32
 80057dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fa2e 	bl	8005c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057e4:	bf00      	nop
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_TIM_ConfigClockSource+0x1c>
 8005804:	2302      	movs	r3, #2
 8005806:	e0b4      	b.n	8005972 <HAL_TIM_ConfigClockSource+0x186>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800582e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005840:	d03e      	beq.n	80058c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005846:	f200 8087 	bhi.w	8005958 <HAL_TIM_ConfigClockSource+0x16c>
 800584a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584e:	f000 8086 	beq.w	800595e <HAL_TIM_ConfigClockSource+0x172>
 8005852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005856:	d87f      	bhi.n	8005958 <HAL_TIM_ConfigClockSource+0x16c>
 8005858:	2b70      	cmp	r3, #112	; 0x70
 800585a:	d01a      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0xa6>
 800585c:	2b70      	cmp	r3, #112	; 0x70
 800585e:	d87b      	bhi.n	8005958 <HAL_TIM_ConfigClockSource+0x16c>
 8005860:	2b60      	cmp	r3, #96	; 0x60
 8005862:	d050      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x11a>
 8005864:	2b60      	cmp	r3, #96	; 0x60
 8005866:	d877      	bhi.n	8005958 <HAL_TIM_ConfigClockSource+0x16c>
 8005868:	2b50      	cmp	r3, #80	; 0x50
 800586a:	d03c      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0xfa>
 800586c:	2b50      	cmp	r3, #80	; 0x50
 800586e:	d873      	bhi.n	8005958 <HAL_TIM_ConfigClockSource+0x16c>
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	d058      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0x13a>
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	d86f      	bhi.n	8005958 <HAL_TIM_ConfigClockSource+0x16c>
 8005878:	2b30      	cmp	r3, #48	; 0x30
 800587a:	d064      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x15a>
 800587c:	2b30      	cmp	r3, #48	; 0x30
 800587e:	d86b      	bhi.n	8005958 <HAL_TIM_ConfigClockSource+0x16c>
 8005880:	2b20      	cmp	r3, #32
 8005882:	d060      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x15a>
 8005884:	2b20      	cmp	r3, #32
 8005886:	d867      	bhi.n	8005958 <HAL_TIM_ConfigClockSource+0x16c>
 8005888:	2b00      	cmp	r3, #0
 800588a:	d05c      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x15a>
 800588c:	2b10      	cmp	r3, #16
 800588e:	d05a      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x15a>
 8005890:	e062      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6899      	ldr	r1, [r3, #8]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f000 f9ad 	bl	8005c00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	609a      	str	r2, [r3, #8]
      break;
 80058be:	e04f      	b.n	8005960 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	6899      	ldr	r1, [r3, #8]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f000 f996 	bl	8005c00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058e2:	609a      	str	r2, [r3, #8]
      break;
 80058e4:	e03c      	b.n	8005960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6859      	ldr	r1, [r3, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	461a      	mov	r2, r3
 80058f4:	f000 f90a 	bl	8005b0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2150      	movs	r1, #80	; 0x50
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 f963 	bl	8005bca <TIM_ITRx_SetConfig>
      break;
 8005904:	e02c      	b.n	8005960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6859      	ldr	r1, [r3, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	461a      	mov	r2, r3
 8005914:	f000 f929 	bl	8005b6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2160      	movs	r1, #96	; 0x60
 800591e:	4618      	mov	r0, r3
 8005920:	f000 f953 	bl	8005bca <TIM_ITRx_SetConfig>
      break;
 8005924:	e01c      	b.n	8005960 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6859      	ldr	r1, [r3, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	461a      	mov	r2, r3
 8005934:	f000 f8ea 	bl	8005b0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2140      	movs	r1, #64	; 0x40
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f943 	bl	8005bca <TIM_ITRx_SetConfig>
      break;
 8005944:	e00c      	b.n	8005960 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4619      	mov	r1, r3
 8005950:	4610      	mov	r0, r2
 8005952:	f000 f93a 	bl	8005bca <TIM_ITRx_SetConfig>
      break;
 8005956:	e003      	b.n	8005960 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	73fb      	strb	r3, [r7, #15]
      break;
 800595c:	e000      	b.n	8005960 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800595e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005970:	7bfb      	ldrb	r3, [r7, #15]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a40      	ldr	r2, [pc, #256]	; (8005ae0 <TIM_Base_SetConfig+0x114>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d013      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ea:	d00f      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a3d      	ldr	r2, [pc, #244]	; (8005ae4 <TIM_Base_SetConfig+0x118>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00b      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a3c      	ldr	r2, [pc, #240]	; (8005ae8 <TIM_Base_SetConfig+0x11c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a3b      	ldr	r2, [pc, #236]	; (8005aec <TIM_Base_SetConfig+0x120>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a3a      	ldr	r2, [pc, #232]	; (8005af0 <TIM_Base_SetConfig+0x124>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d108      	bne.n	8005a1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a2f      	ldr	r2, [pc, #188]	; (8005ae0 <TIM_Base_SetConfig+0x114>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d02b      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2c:	d027      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a2c      	ldr	r2, [pc, #176]	; (8005ae4 <TIM_Base_SetConfig+0x118>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d023      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a2b      	ldr	r2, [pc, #172]	; (8005ae8 <TIM_Base_SetConfig+0x11c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01f      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2a      	ldr	r2, [pc, #168]	; (8005aec <TIM_Base_SetConfig+0x120>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01b      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a29      	ldr	r2, [pc, #164]	; (8005af0 <TIM_Base_SetConfig+0x124>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d017      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a28      	ldr	r2, [pc, #160]	; (8005af4 <TIM_Base_SetConfig+0x128>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a27      	ldr	r2, [pc, #156]	; (8005af8 <TIM_Base_SetConfig+0x12c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00f      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a26      	ldr	r2, [pc, #152]	; (8005afc <TIM_Base_SetConfig+0x130>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00b      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a25      	ldr	r2, [pc, #148]	; (8005b00 <TIM_Base_SetConfig+0x134>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d007      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a24      	ldr	r2, [pc, #144]	; (8005b04 <TIM_Base_SetConfig+0x138>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d003      	beq.n	8005a7e <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a23      	ldr	r2, [pc, #140]	; (8005b08 <TIM_Base_SetConfig+0x13c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d108      	bne.n	8005a90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a0a      	ldr	r2, [pc, #40]	; (8005ae0 <TIM_Base_SetConfig+0x114>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_Base_SetConfig+0xf8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a0c      	ldr	r2, [pc, #48]	; (8005af0 <TIM_Base_SetConfig+0x124>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d103      	bne.n	8005acc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	615a      	str	r2, [r3, #20]
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800
 8005aec:	40000c00 	.word	0x40000c00
 8005af0:	40010400 	.word	0x40010400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40014400 	.word	0x40014400
 8005afc:	40014800 	.word	0x40014800
 8005b00:	40001800 	.word	0x40001800
 8005b04:	40001c00 	.word	0x40001c00
 8005b08:	40002000 	.word	0x40002000

08005b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f023 0201 	bic.w	r2, r3, #1
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f023 030a 	bic.w	r3, r3, #10
 8005b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	621a      	str	r2, [r3, #32]
}
 8005b5e:	bf00      	nop
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b087      	sub	sp, #28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f023 0210 	bic.w	r2, r3, #16
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	031b      	lsls	r3, r3, #12
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ba6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f043 0307 	orr.w	r3, r3, #7
 8005bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	609a      	str	r2, [r3, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	021a      	lsls	r2, r3, #8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	609a      	str	r2, [r3, #8]
}
 8005c34:	bf00      	nop
 8005c36:	371c      	adds	r7, #28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e03f      	b.n	8005cfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fd f93c 	bl	8002f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2224      	movs	r2, #36	; 0x24
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fddf 	bl	8006870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695a      	ldr	r2, [r3, #20]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b08a      	sub	sp, #40	; 0x28
 8005d06:	af02      	add	r7, sp, #8
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d17c      	bne.n	8005e1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <HAL_UART_Transmit+0x2c>
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e075      	b.n	8005e1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_UART_Transmit+0x3e>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e06e      	b.n	8005e1e <HAL_UART_Transmit+0x11c>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2221      	movs	r2, #33	; 0x21
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d56:	f7fd fd5f 	bl	8003818 <HAL_GetTick>
 8005d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	88fa      	ldrh	r2, [r7, #6]
 8005d66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d70:	d108      	bne.n	8005d84 <HAL_UART_Transmit+0x82>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d104      	bne.n	8005d84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	e003      	b.n	8005d8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d94:	e02a      	b.n	8005dec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2180      	movs	r1, #128	; 0x80
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fb1f 	bl	80063e4 <UART_WaitOnFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e036      	b.n	8005e1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10b      	bne.n	8005dce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	3302      	adds	r3, #2
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	e007      	b.n	8005dde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1cf      	bne.n	8005d96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2140      	movs	r1, #64	; 0x40
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 faef 	bl	80063e4 <UART_WaitOnFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e006      	b.n	8005e1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3720      	adds	r7, #32
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	4613      	mov	r3, r2
 8005e32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d11d      	bne.n	8005e7c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <HAL_UART_Receive_IT+0x26>
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e016      	b.n	8005e7e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <HAL_UART_Receive_IT+0x38>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e00f      	b.n	8005e7e <HAL_UART_Receive_IT+0x58>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	68b9      	ldr	r1, [r7, #8]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 fb24 	bl	80064c0 <UART_Start_Receive_IT>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	e000      	b.n	8005e7e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e7c:	2302      	movs	r3, #2
  }
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
	...

08005e88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b0ba      	sub	sp, #232	; 0xe8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10f      	bne.n	8005eee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <HAL_UART_IRQHandler+0x66>
 8005eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fc07 	bl	80066fa <UART_Receive_IT>
      return;
 8005eec:	e256      	b.n	800639c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 80de 	beq.w	80060b4 <HAL_UART_IRQHandler+0x22c>
 8005ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d106      	bne.n	8005f12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80d1 	beq.w	80060b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00b      	beq.n	8005f36 <HAL_UART_IRQHandler+0xae>
 8005f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f043 0201 	orr.w	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00b      	beq.n	8005f5a <HAL_UART_IRQHandler+0xd2>
 8005f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d005      	beq.n	8005f5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	f043 0202 	orr.w	r2, r3, #2
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00b      	beq.n	8005f7e <HAL_UART_IRQHandler+0xf6>
 8005f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f043 0204 	orr.w	r2, r3, #4
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d011      	beq.n	8005fae <HAL_UART_IRQHandler+0x126>
 8005f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d105      	bne.n	8005fa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f043 0208 	orr.w	r2, r3, #8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 81ed 	beq.w	8006392 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fbc:	f003 0320 	and.w	r3, r3, #32
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x14e>
 8005fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fb92 	bl	80066fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2301      	moveq	r3, #1
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d103      	bne.n	8006002 <HAL_UART_IRQHandler+0x17a>
 8005ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d04f      	beq.n	80060a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa9a 	bl	800653c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d141      	bne.n	800609a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3314      	adds	r3, #20
 800601c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800602c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3314      	adds	r3, #20
 800603e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006042:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800604e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800605a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1d9      	bne.n	8006016 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	2b00      	cmp	r3, #0
 8006068:	d013      	beq.n	8006092 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	4a7d      	ldr	r2, [pc, #500]	; (8006264 <HAL_UART_IRQHandler+0x3dc>)
 8006070:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe fa53 	bl	8004522 <HAL_DMA_Abort_IT>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d016      	beq.n	80060b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800608c:	4610      	mov	r0, r2
 800608e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006090:	e00e      	b.n	80060b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f990 	bl	80063b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006098:	e00a      	b.n	80060b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f98c 	bl	80063b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060a0:	e006      	b.n	80060b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f988 	bl	80063b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060ae:	e170      	b.n	8006392 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b0:	bf00      	nop
    return;
 80060b2:	e16e      	b.n	8006392 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	f040 814a 	bne.w	8006352 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c2:	f003 0310 	and.w	r3, r3, #16
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 8143 	beq.w	8006352 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 813c 	beq.w	8006352 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60bb      	str	r3, [r7, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	60bb      	str	r3, [r7, #8]
 80060ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b40      	cmp	r3, #64	; 0x40
 80060fc:	f040 80b4 	bne.w	8006268 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800610c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8140 	beq.w	8006396 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800611a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800611e:	429a      	cmp	r2, r3
 8006120:	f080 8139 	bcs.w	8006396 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800612a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006136:	f000 8088 	beq.w	800624a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006166:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800616a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006172:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800617e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1d9      	bne.n	800613a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3314      	adds	r3, #20
 800618c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3314      	adds	r3, #20
 80061a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e1      	bne.n	8006186 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3314      	adds	r3, #20
 80061c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3314      	adds	r3, #20
 80061e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1e3      	bne.n	80061c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006212:	e853 3f00 	ldrex	r3, [r3]
 8006216:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800621a:	f023 0310 	bic.w	r3, r3, #16
 800621e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	330c      	adds	r3, #12
 8006228:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800622c:	65ba      	str	r2, [r7, #88]	; 0x58
 800622e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800623a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e3      	bne.n	8006208 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe f8fc 	bl	8004442 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006252:	b29b      	uxth	r3, r3
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	b29b      	uxth	r3, r3
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f8b6 	bl	80063cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006260:	e099      	b.n	8006396 <HAL_UART_IRQHandler+0x50e>
 8006262:	bf00      	nop
 8006264:	08006603 	.word	0x08006603
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006270:	b29b      	uxth	r3, r3
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 808b 	beq.w	800639a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8086 	beq.w	800639a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	330c      	adds	r3, #12
 8006294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	e853 3f00 	ldrex	r3, [r3]
 800629c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	330c      	adds	r3, #12
 80062ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062b2:	647a      	str	r2, [r7, #68]	; 0x44
 80062b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e3      	bne.n	800628e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3314      	adds	r3, #20
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	623b      	str	r3, [r7, #32]
   return(result);
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3314      	adds	r3, #20
 80062e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062ea:	633a      	str	r2, [r7, #48]	; 0x30
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e3      	bne.n	80062c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	60fb      	str	r3, [r7, #12]
   return(result);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0310 	bic.w	r3, r3, #16
 8006322:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	330c      	adds	r3, #12
 800632c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006330:	61fa      	str	r2, [r7, #28]
 8006332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	69b9      	ldr	r1, [r7, #24]
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	617b      	str	r3, [r7, #20]
   return(result);
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e3      	bne.n	800630c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006344:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006348:	4619      	mov	r1, r3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f83e 	bl	80063cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006350:	e023      	b.n	800639a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635a:	2b00      	cmp	r3, #0
 800635c:	d009      	beq.n	8006372 <HAL_UART_IRQHandler+0x4ea>
 800635e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f95d 	bl	800662a <UART_Transmit_IT>
    return;
 8006370:	e014      	b.n	800639c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00e      	beq.n	800639c <HAL_UART_IRQHandler+0x514>
 800637e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d008      	beq.n	800639c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f99d 	bl	80066ca <UART_EndTransmit_IT>
    return;
 8006390:	e004      	b.n	800639c <HAL_UART_IRQHandler+0x514>
    return;
 8006392:	bf00      	nop
 8006394:	e002      	b.n	800639c <HAL_UART_IRQHandler+0x514>
      return;
 8006396:	bf00      	nop
 8006398:	e000      	b.n	800639c <HAL_UART_IRQHandler+0x514>
      return;
 800639a:	bf00      	nop
  }
}
 800639c:	37e8      	adds	r7, #232	; 0xe8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop

080063a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b090      	sub	sp, #64	; 0x40
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	4613      	mov	r3, r2
 80063f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f4:	e050      	b.n	8006498 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fc:	d04c      	beq.n	8006498 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <UART_WaitOnFlagUntilTimeout+0x30>
 8006404:	f7fd fa08 	bl	8003818 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006410:	429a      	cmp	r2, r3
 8006412:	d241      	bcs.n	8006498 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	330c      	adds	r3, #12
 800641a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	e853 3f00 	ldrex	r3, [r3]
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800642a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006434:	637a      	str	r2, [r7, #52]	; 0x34
 8006436:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006438:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800643a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1e5      	bne.n	8006414 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	3314      	adds	r3, #20
 800644e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	e853 3f00 	ldrex	r3, [r3]
 8006456:	613b      	str	r3, [r7, #16]
   return(result);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f023 0301 	bic.w	r3, r3, #1
 800645e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3314      	adds	r3, #20
 8006466:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006468:	623a      	str	r2, [r7, #32]
 800646a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646c:	69f9      	ldr	r1, [r7, #28]
 800646e:	6a3a      	ldr	r2, [r7, #32]
 8006470:	e841 2300 	strex	r3, r2, [r1]
 8006474:	61bb      	str	r3, [r7, #24]
   return(result);
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1e5      	bne.n	8006448 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e00f      	b.n	80064b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4013      	ands	r3, r2
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	bf0c      	ite	eq
 80064a8:	2301      	moveq	r3, #1
 80064aa:	2300      	movne	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	461a      	mov	r2, r3
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d09f      	beq.n	80063f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3740      	adds	r7, #64	; 0x40
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	88fa      	ldrh	r2, [r7, #6]
 80064d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	88fa      	ldrh	r2, [r7, #6]
 80064de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2222      	movs	r2, #34	; 0x22
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800650c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695a      	ldr	r2, [r3, #20]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0201 	orr.w	r2, r2, #1
 800651c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f042 0220 	orr.w	r2, r2, #32
 800652c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b095      	sub	sp, #84	; 0x54
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	330c      	adds	r3, #12
 800654a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654e:	e853 3f00 	ldrex	r3, [r3]
 8006552:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800655a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	330c      	adds	r3, #12
 8006562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006564:	643a      	str	r2, [r7, #64]	; 0x40
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800656a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e5      	bne.n	8006544 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3314      	adds	r3, #20
 800657e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	61fb      	str	r3, [r7, #28]
   return(result);
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3314      	adds	r3, #20
 8006596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006598:	62fa      	str	r2, [r7, #44]	; 0x2c
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800659e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d119      	bne.n	80065e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f023 0310 	bic.w	r3, r3, #16
 80065ca:	647b      	str	r3, [r7, #68]	; 0x44
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065d4:	61ba      	str	r2, [r7, #24]
 80065d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d8:	6979      	ldr	r1, [r7, #20]
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	e841 2300 	strex	r3, r2, [r1]
 80065e0:	613b      	str	r3, [r7, #16]
   return(result);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e5      	bne.n	80065b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065f6:	bf00      	nop
 80065f8:	3754      	adds	r7, #84	; 0x54
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f7ff fecb 	bl	80063b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006622:	bf00      	nop
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b21      	cmp	r3, #33	; 0x21
 800663c:	d13e      	bne.n	80066bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006646:	d114      	bne.n	8006672 <UART_Transmit_IT+0x48>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d110      	bne.n	8006672 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006664:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	1c9a      	adds	r2, r3, #2
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	621a      	str	r2, [r3, #32]
 8006670:	e008      	b.n	8006684 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	1c59      	adds	r1, r3, #1
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6211      	str	r1, [r2, #32]
 800667c:	781a      	ldrb	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29b      	uxth	r3, r3
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	4619      	mov	r1, r3
 8006692:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10f      	bne.n	80066b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	e000      	b.n	80066be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066bc:	2302      	movs	r3, #2
  }
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff fe5a 	bl	80063a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b08c      	sub	sp, #48	; 0x30
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b22      	cmp	r3, #34	; 0x22
 800670c:	f040 80ab 	bne.w	8006866 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006718:	d117      	bne.n	800674a <UART_Receive_IT+0x50>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d113      	bne.n	800674a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006738:	b29a      	uxth	r2, r3
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006742:	1c9a      	adds	r2, r3, #2
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	629a      	str	r2, [r3, #40]	; 0x28
 8006748:	e026      	b.n	8006798 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006750:	2300      	movs	r3, #0
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675c:	d007      	beq.n	800676e <UART_Receive_IT+0x74>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10a      	bne.n	800677c <UART_Receive_IT+0x82>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	b2da      	uxtb	r2, r3
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	701a      	strb	r2, [r3, #0]
 800677a:	e008      	b.n	800678e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006788:	b2da      	uxtb	r2, r3
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800679c:	b29b      	uxth	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	4619      	mov	r1, r3
 80067a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d15a      	bne.n	8006862 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0220 	bic.w	r2, r2, #32
 80067ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695a      	ldr	r2, [r3, #20]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0201 	bic.w	r2, r2, #1
 80067da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d135      	bne.n	8006858 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	330c      	adds	r3, #12
 80067f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	613b      	str	r3, [r7, #16]
   return(result);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f023 0310 	bic.w	r3, r3, #16
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	330c      	adds	r3, #12
 8006810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006812:	623a      	str	r2, [r7, #32]
 8006814:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	69f9      	ldr	r1, [r7, #28]
 8006818:	6a3a      	ldr	r2, [r7, #32]
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e5      	bne.n	80067f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0310 	and.w	r3, r3, #16
 8006830:	2b10      	cmp	r3, #16
 8006832:	d10a      	bne.n	800684a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7ff fdbb 	bl	80063cc <HAL_UARTEx_RxEventCallback>
 8006856:	e002      	b.n	800685e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7fb ff83 	bl	8002764 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	e002      	b.n	8006868 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	e000      	b.n	8006868 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006866:	2302      	movs	r3, #2
  }
}
 8006868:	4618      	mov	r0, r3
 800686a:	3730      	adds	r7, #48	; 0x30
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006874:	b0c0      	sub	sp, #256	; 0x100
 8006876:	af00      	add	r7, sp, #0
 8006878:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800687c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688c:	68d9      	ldr	r1, [r3, #12]
 800688e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	ea40 0301 	orr.w	r3, r0, r1
 8006898:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800689a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	431a      	orrs	r2, r3
 80068a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068c8:	f021 010c 	bic.w	r1, r1, #12
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068d6:	430b      	orrs	r3, r1
 80068d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ea:	6999      	ldr	r1, [r3, #24]
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	ea40 0301 	orr.w	r3, r0, r1
 80068f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	4b8f      	ldr	r3, [pc, #572]	; (8006b3c <UART_SetConfig+0x2cc>)
 8006900:	429a      	cmp	r2, r3
 8006902:	d005      	beq.n	8006910 <UART_SetConfig+0xa0>
 8006904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	4b8d      	ldr	r3, [pc, #564]	; (8006b40 <UART_SetConfig+0x2d0>)
 800690c:	429a      	cmp	r2, r3
 800690e:	d104      	bne.n	800691a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006910:	f7fe f948 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8006914:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006918:	e003      	b.n	8006922 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800691a:	f7fe f92f 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 800691e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692c:	f040 810c 	bne.w	8006b48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006934:	2200      	movs	r2, #0
 8006936:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800693a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800693e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006942:	4622      	mov	r2, r4
 8006944:	462b      	mov	r3, r5
 8006946:	1891      	adds	r1, r2, r2
 8006948:	65b9      	str	r1, [r7, #88]	; 0x58
 800694a:	415b      	adcs	r3, r3
 800694c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800694e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006952:	4621      	mov	r1, r4
 8006954:	eb12 0801 	adds.w	r8, r2, r1
 8006958:	4629      	mov	r1, r5
 800695a:	eb43 0901 	adc.w	r9, r3, r1
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800696a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800696e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006972:	4690      	mov	r8, r2
 8006974:	4699      	mov	r9, r3
 8006976:	4623      	mov	r3, r4
 8006978:	eb18 0303 	adds.w	r3, r8, r3
 800697c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006980:	462b      	mov	r3, r5
 8006982:	eb49 0303 	adc.w	r3, r9, r3
 8006986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800698a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006996:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800699a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800699e:	460b      	mov	r3, r1
 80069a0:	18db      	adds	r3, r3, r3
 80069a2:	653b      	str	r3, [r7, #80]	; 0x50
 80069a4:	4613      	mov	r3, r2
 80069a6:	eb42 0303 	adc.w	r3, r2, r3
 80069aa:	657b      	str	r3, [r7, #84]	; 0x54
 80069ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80069b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80069b4:	f7fa f846 	bl	8000a44 <__aeabi_uldivmod>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4b61      	ldr	r3, [pc, #388]	; (8006b44 <UART_SetConfig+0x2d4>)
 80069be:	fba3 2302 	umull	r2, r3, r3, r2
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	011c      	lsls	r4, r3, #4
 80069c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80069d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80069d8:	4642      	mov	r2, r8
 80069da:	464b      	mov	r3, r9
 80069dc:	1891      	adds	r1, r2, r2
 80069de:	64b9      	str	r1, [r7, #72]	; 0x48
 80069e0:	415b      	adcs	r3, r3
 80069e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80069e8:	4641      	mov	r1, r8
 80069ea:	eb12 0a01 	adds.w	sl, r2, r1
 80069ee:	4649      	mov	r1, r9
 80069f0:	eb43 0b01 	adc.w	fp, r3, r1
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a08:	4692      	mov	sl, r2
 8006a0a:	469b      	mov	fp, r3
 8006a0c:	4643      	mov	r3, r8
 8006a0e:	eb1a 0303 	adds.w	r3, sl, r3
 8006a12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a16:	464b      	mov	r3, r9
 8006a18:	eb4b 0303 	adc.w	r3, fp, r3
 8006a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a34:	460b      	mov	r3, r1
 8006a36:	18db      	adds	r3, r3, r3
 8006a38:	643b      	str	r3, [r7, #64]	; 0x40
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	eb42 0303 	adc.w	r3, r2, r3
 8006a40:	647b      	str	r3, [r7, #68]	; 0x44
 8006a42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a4a:	f7f9 fffb 	bl	8000a44 <__aeabi_uldivmod>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4611      	mov	r1, r2
 8006a54:	4b3b      	ldr	r3, [pc, #236]	; (8006b44 <UART_SetConfig+0x2d4>)
 8006a56:	fba3 2301 	umull	r2, r3, r3, r1
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	2264      	movs	r2, #100	; 0x64
 8006a5e:	fb02 f303 	mul.w	r3, r2, r3
 8006a62:	1acb      	subs	r3, r1, r3
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a6a:	4b36      	ldr	r3, [pc, #216]	; (8006b44 <UART_SetConfig+0x2d4>)
 8006a6c:	fba3 2302 	umull	r2, r3, r3, r2
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a78:	441c      	add	r4, r3
 8006a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	464b      	mov	r3, r9
 8006a90:	1891      	adds	r1, r2, r2
 8006a92:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a94:	415b      	adcs	r3, r3
 8006a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	1851      	adds	r1, r2, r1
 8006aa0:	6339      	str	r1, [r7, #48]	; 0x30
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	414b      	adcs	r3, r1
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ab4:	4659      	mov	r1, fp
 8006ab6:	00cb      	lsls	r3, r1, #3
 8006ab8:	4651      	mov	r1, sl
 8006aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006abe:	4651      	mov	r1, sl
 8006ac0:	00ca      	lsls	r2, r1, #3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4642      	mov	r2, r8
 8006aca:	189b      	adds	r3, r3, r2
 8006acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ad0:	464b      	mov	r3, r9
 8006ad2:	460a      	mov	r2, r1
 8006ad4:	eb42 0303 	adc.w	r3, r2, r3
 8006ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ae8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006aec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006af0:	460b      	mov	r3, r1
 8006af2:	18db      	adds	r3, r3, r3
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006af6:	4613      	mov	r3, r2
 8006af8:	eb42 0303 	adc.w	r3, r2, r3
 8006afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b06:	f7f9 ff9d 	bl	8000a44 <__aeabi_uldivmod>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <UART_SetConfig+0x2d4>)
 8006b10:	fba3 1302 	umull	r1, r3, r3, r2
 8006b14:	095b      	lsrs	r3, r3, #5
 8006b16:	2164      	movs	r1, #100	; 0x64
 8006b18:	fb01 f303 	mul.w	r3, r1, r3
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	3332      	adds	r3, #50	; 0x32
 8006b22:	4a08      	ldr	r2, [pc, #32]	; (8006b44 <UART_SetConfig+0x2d4>)
 8006b24:	fba2 2303 	umull	r2, r3, r2, r3
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	f003 0207 	and.w	r2, r3, #7
 8006b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4422      	add	r2, r4
 8006b36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b38:	e105      	b.n	8006d46 <UART_SetConfig+0x4d6>
 8006b3a:	bf00      	nop
 8006b3c:	40011000 	.word	0x40011000
 8006b40:	40011400 	.word	0x40011400
 8006b44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b5a:	4642      	mov	r2, r8
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	1891      	adds	r1, r2, r2
 8006b60:	6239      	str	r1, [r7, #32]
 8006b62:	415b      	adcs	r3, r3
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
 8006b66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b6a:	4641      	mov	r1, r8
 8006b6c:	1854      	adds	r4, r2, r1
 8006b6e:	4649      	mov	r1, r9
 8006b70:	eb43 0501 	adc.w	r5, r3, r1
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	f04f 0300 	mov.w	r3, #0
 8006b7c:	00eb      	lsls	r3, r5, #3
 8006b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b82:	00e2      	lsls	r2, r4, #3
 8006b84:	4614      	mov	r4, r2
 8006b86:	461d      	mov	r5, r3
 8006b88:	4643      	mov	r3, r8
 8006b8a:	18e3      	adds	r3, r4, r3
 8006b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b90:	464b      	mov	r3, r9
 8006b92:	eb45 0303 	adc.w	r3, r5, r3
 8006b96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ba6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006baa:	f04f 0200 	mov.w	r2, #0
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	008b      	lsls	r3, r1, #2
 8006bba:	4621      	mov	r1, r4
 8006bbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	008a      	lsls	r2, r1, #2
 8006bc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006bc8:	f7f9 ff3c 	bl	8000a44 <__aeabi_uldivmod>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4b60      	ldr	r3, [pc, #384]	; (8006d54 <UART_SetConfig+0x4e4>)
 8006bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	011c      	lsls	r4, r3, #4
 8006bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006be4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006be8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006bec:	4642      	mov	r2, r8
 8006bee:	464b      	mov	r3, r9
 8006bf0:	1891      	adds	r1, r2, r2
 8006bf2:	61b9      	str	r1, [r7, #24]
 8006bf4:	415b      	adcs	r3, r3
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bfc:	4641      	mov	r1, r8
 8006bfe:	1851      	adds	r1, r2, r1
 8006c00:	6139      	str	r1, [r7, #16]
 8006c02:	4649      	mov	r1, r9
 8006c04:	414b      	adcs	r3, r1
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	f04f 0300 	mov.w	r3, #0
 8006c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c14:	4659      	mov	r1, fp
 8006c16:	00cb      	lsls	r3, r1, #3
 8006c18:	4651      	mov	r1, sl
 8006c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c1e:	4651      	mov	r1, sl
 8006c20:	00ca      	lsls	r2, r1, #3
 8006c22:	4610      	mov	r0, r2
 8006c24:	4619      	mov	r1, r3
 8006c26:	4603      	mov	r3, r0
 8006c28:	4642      	mov	r2, r8
 8006c2a:	189b      	adds	r3, r3, r2
 8006c2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c30:	464b      	mov	r3, r9
 8006c32:	460a      	mov	r2, r1
 8006c34:	eb42 0303 	adc.w	r3, r2, r3
 8006c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	f04f 0300 	mov.w	r3, #0
 8006c50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c54:	4649      	mov	r1, r9
 8006c56:	008b      	lsls	r3, r1, #2
 8006c58:	4641      	mov	r1, r8
 8006c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c5e:	4641      	mov	r1, r8
 8006c60:	008a      	lsls	r2, r1, #2
 8006c62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c66:	f7f9 feed 	bl	8000a44 <__aeabi_uldivmod>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4b39      	ldr	r3, [pc, #228]	; (8006d54 <UART_SetConfig+0x4e4>)
 8006c70:	fba3 1302 	umull	r1, r3, r3, r2
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	2164      	movs	r1, #100	; 0x64
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	3332      	adds	r3, #50	; 0x32
 8006c82:	4a34      	ldr	r2, [pc, #208]	; (8006d54 <UART_SetConfig+0x4e4>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c8e:	441c      	add	r4, r3
 8006c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c94:	2200      	movs	r2, #0
 8006c96:	673b      	str	r3, [r7, #112]	; 0x70
 8006c98:	677a      	str	r2, [r7, #116]	; 0x74
 8006c9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c9e:	4642      	mov	r2, r8
 8006ca0:	464b      	mov	r3, r9
 8006ca2:	1891      	adds	r1, r2, r2
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	415b      	adcs	r3, r3
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cae:	4641      	mov	r1, r8
 8006cb0:	1851      	adds	r1, r2, r1
 8006cb2:	6039      	str	r1, [r7, #0]
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	414b      	adcs	r3, r1
 8006cb8:	607b      	str	r3, [r7, #4]
 8006cba:	f04f 0200 	mov.w	r2, #0
 8006cbe:	f04f 0300 	mov.w	r3, #0
 8006cc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006cc6:	4659      	mov	r1, fp
 8006cc8:	00cb      	lsls	r3, r1, #3
 8006cca:	4651      	mov	r1, sl
 8006ccc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cd0:	4651      	mov	r1, sl
 8006cd2:	00ca      	lsls	r2, r1, #3
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4603      	mov	r3, r0
 8006cda:	4642      	mov	r2, r8
 8006cdc:	189b      	adds	r3, r3, r2
 8006cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ce0:	464b      	mov	r3, r9
 8006ce2:	460a      	mov	r2, r1
 8006ce4:	eb42 0303 	adc.w	r3, r2, r3
 8006ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	663b      	str	r3, [r7, #96]	; 0x60
 8006cf4:	667a      	str	r2, [r7, #100]	; 0x64
 8006cf6:	f04f 0200 	mov.w	r2, #0
 8006cfa:	f04f 0300 	mov.w	r3, #0
 8006cfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d02:	4649      	mov	r1, r9
 8006d04:	008b      	lsls	r3, r1, #2
 8006d06:	4641      	mov	r1, r8
 8006d08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d0c:	4641      	mov	r1, r8
 8006d0e:	008a      	lsls	r2, r1, #2
 8006d10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d14:	f7f9 fe96 	bl	8000a44 <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	; (8006d54 <UART_SetConfig+0x4e4>)
 8006d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d22:	095b      	lsrs	r3, r3, #5
 8006d24:	2164      	movs	r1, #100	; 0x64
 8006d26:	fb01 f303 	mul.w	r3, r1, r3
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	3332      	adds	r3, #50	; 0x32
 8006d30:	4a08      	ldr	r2, [pc, #32]	; (8006d54 <UART_SetConfig+0x4e4>)
 8006d32:	fba2 2303 	umull	r2, r3, r2, r3
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	f003 020f 	and.w	r2, r3, #15
 8006d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4422      	add	r2, r4
 8006d44:	609a      	str	r2, [r3, #8]
}
 8006d46:	bf00      	nop
 8006d48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d52:	bf00      	nop
 8006d54:	51eb851f 	.word	0x51eb851f

08006d58 <movingAverageInit>:
 */

#include "movingAverage.h"

void movingAverageInit(MovingAverage *movingAverage, uint16_t window)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	807b      	strh	r3, [r7, #2]
	movingAverage->index = 0;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	801a      	strh	r2, [r3, #0]
	movingAverage->window = window;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	887a      	ldrh	r2, [r7, #2]
 8006d6e:	805a      	strh	r2, [r3, #2]
	memset(movingAverage->buffer, 0x00, MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS * sizeof(int32_t));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3304      	adds	r3, #4
 8006d74:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fbda 	bl	8007534 <memset>
	movingAverage->sum = 0;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
	movingAverage->movingAverage = 0;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <movingAverageAddValue>:

void movingAverageAddValue(MovingAverage *movingAverage, int32_t newValue)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
	movingAverage->sum = movingAverage->sum - movingAverage->buffer[movingAverage->index] + newValue;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	; 0x4b4
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	440b      	add	r3, r1
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	1ad2      	subs	r2, r2, r3
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	441a      	add	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
	movingAverage->buffer[movingAverage->index] = newValue;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	605a      	str	r2, [r3, #4]
	movingAverage->movingAverage = movingAverage->sum / movingAverage->window;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	8852      	ldrh	r2, [r2, #2]
 8006ddc:	fb93 f2f2 	sdiv	r2, r3, r2
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
	movingAverage->index = (movingAverage->index + 1) % movingAverage->window;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dec:	3301      	adds	r3, #1
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	8852      	ldrh	r2, [r2, #2]
 8006df2:	fb93 f1f2 	sdiv	r1, r3, r2
 8006df6:	fb01 f202 	mul.w	r2, r1, r2
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	b21a      	sxth	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	801a      	strh	r2, [r3, #0]
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <movingAverageGetMean>:

int32_t movingAverageGetMean(MovingAverage *movingAverage)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
	return movingAverage->movingAverage;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 34b8 	ldr.w	r3, [r3, #1208]	; 0x4b8
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <movingAverageGetWindow>:

uint16_t movingAverageGetWindow(MovingAverage *movingAverage)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
	return movingAverage->window;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	885b      	ldrh	r3, [r3, #2]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <movingAverageSetWindow>:

void movingAverageSetWindow(MovingAverage *movingAverage, uint16_t window)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	807b      	strh	r3, [r7, #2]
	if (window > MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS)
 8006e4c:	887b      	ldrh	r3, [r7, #2]
 8006e4e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006e52:	d902      	bls.n	8006e5a <movingAverageSetWindow+0x1a>
	{
		window = MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS;
 8006e54:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006e58:	807b      	strh	r3, [r7, #2]
	}
	movingAverage->window = window;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	887a      	ldrh	r2, [r7, #2]
 8006e5e:	805a      	strh	r2, [r3, #2]
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <pidInit>:

#include "pid.h"
#include "defs.h"

void pidInit(PidController *pidController, float kp, float ki, float kd, float offset, float bias, ControllerTopology controllerTopology)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b089      	sub	sp, #36	; 0x24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	61f8      	str	r0, [r7, #28]
 8006e74:	ed87 0a06 	vstr	s0, [r7, #24]
 8006e78:	edc7 0a05 	vstr	s1, [r7, #20]
 8006e7c:	ed87 1a04 	vstr	s2, [r7, #16]
 8006e80:	edc7 1a03 	vstr	s3, [r7, #12]
 8006e84:	ed87 2a02 	vstr	s4, [r7, #8]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	71fb      	strb	r3, [r7, #7]
	pidController->kp = kp;
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	601a      	str	r2, [r3, #0]
	pidController->ki = ki;
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	605a      	str	r2, [r3, #4]
	pidController->kd = kd;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	609a      	str	r2, [r3, #8]
	pidController->controllerTopology = controllerTopology;
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	79fa      	ldrb	r2, [r7, #7]
 8006ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	pidController->currentError = 0;
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	60da      	str	r2, [r3, #12]
	pidController->previousError = 0;
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	611a      	str	r2, [r3, #16]
	pidController->sumOfErrors = 0;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	615a      	str	r2, [r3, #20]
	pidController->setpoint = 0;
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f04f 0200 	mov.w	r2, #0
 8006ec4:	619a      	str	r2, [r3, #24]
	pidController->controlledVariable = 0;
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	61da      	str	r2, [r3, #28]
	pidController->processVariable = 0;
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	621a      	str	r2, [r3, #32]
	pidController->differenceOfErrors = 0;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	625a      	str	r2, [r3, #36]	; 0x24
	pidController->minSumOfErrors = -10000;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4a0d      	ldr	r2, [pc, #52]	; (8006f18 <pidInit+0xac>)
 8006ee2:	635a      	str	r2, [r3, #52]	; 0x34
	pidController->maxSumOfErrors = 10000;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	f242 7210 	movw	r2, #10000	; 0x2710
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38
	pidController->minControlledVariable = 0;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	63da      	str	r2, [r3, #60]	; 0x3c
	pidController->maxControlledVariable = 4095;
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006ef8:	641a      	str	r2, [r3, #64]	; 0x40
	pidController->offset = offset;
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	62da      	str	r2, [r3, #44]	; 0x2c
	pidController->bias = bias;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	631a      	str	r2, [r3, #48]	; 0x30
	pidController->interval = ((float) DELAY_25_MILISECONDS) / 10000;
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	4a04      	ldr	r2, [pc, #16]	; (8006f1c <pidInit+0xb0>)
 8006f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006f0c:	bf00      	nop
 8006f0e:	3724      	adds	r7, #36	; 0x24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	ffffd8f0 	.word	0xffffd8f0
 8006f1c:	3ccccccd 	.word	0x3ccccccd

08006f20 <pidCompute>:

void pidCompute(PidController *pidController)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b089      	sub	sp, #36	; 0x24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
	pidController->currentError = pidController->setpoint - pidController->processVariable;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	ed93 7a06 	vldr	s14, [r3, #24]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	edd3 7a08 	vldr	s15, [r3, #32]
 8006f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	edc3 7a03 	vstr	s15, [r3, #12]
	pidController->sumOfErrors += pidController->currentError;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	ed93 7a05 	vldr	s14, [r3, #20]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	edd3 7a03 	vldr	s15, [r3, #12]
 8006f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	edc3 7a05 	vstr	s15, [r3, #20]
	pidController->differenceOfErrors = pidController->currentError - pidController->previousError;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	ed93 7a03 	vldr	s14, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	if (pidController->sumOfErrors > pidController->maxSumOfErrors)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	ed93 7a05 	vldr	s14, [r3, #20]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f84:	dd09      	ble.n	8006f9a <pidCompute+0x7a>
	{
		pidController->sumOfErrors = pidController->maxSumOfErrors;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	edc3 7a05 	vstr	s15, [r3, #20]
 8006f98:	e016      	b.n	8006fc8 <pidCompute+0xa8>
	}
	else if (pidController->sumOfErrors < pidController->minSumOfErrors)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	ed93 7a05 	vldr	s14, [r3, #20]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa4:	ee07 3a90 	vmov	s15, r3
 8006fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb4:	d508      	bpl.n	8006fc8 <pidCompute+0xa8>
	{
		pidController->sumOfErrors = pidController->minSumOfErrors;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	if (pidController->controllerTopology == P_CONTROLLER)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d114      	bne.n	8006ffc <pidCompute+0xdc>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	ed93 7a00 	vldr	s14, [r3]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	edd3 7a03 	vldr	s15, [r3, #12]
 8006fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe2:	edc7 7a02 	vstr	s15, [r7, #8]
		pidController->controlledVariable = proportionalTerm + pidController->bias;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8006fec:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	edc3 7a07 	vstr	s15, [r3, #28]
 8006ffa:	e061      	b.n	80070c0 <pidCompute+0x1a0>
	}
	else if (pidController->controllerTopology == PI_CONTROLLER)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007002:	2b01      	cmp	r3, #1
 8007004:	d122      	bne.n	800704c <pidCompute+0x12c>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	ed93 7a00 	vldr	s14, [r3]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007016:	edc7 7a04 	vstr	s15, [r7, #16]
		float integralTerm = pidController->ki * pidController->sumOfErrors;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	edd3 7a05 	vldr	s15, [r3, #20]
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702a:	edc7 7a03 	vstr	s15, [r7, #12]
		pidController->controlledVariable = proportionalTerm + integralTerm + pidController->bias;
 800702e:	ed97 7a04 	vldr	s14, [r7, #16]
 8007032:	edd7 7a03 	vldr	s15, [r7, #12]
 8007036:	ee37 7a27 	vadd.f32	s14, s14, s15
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	edc3 7a07 	vstr	s15, [r3, #28]
 800704a:	e039      	b.n	80070c0 <pidCompute+0x1a0>
	}
	else if (pidController->controllerTopology == PID_CONTROLLER)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007052:	2b02      	cmp	r3, #2
 8007054:	d130      	bne.n	80070b8 <pidCompute+0x198>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	ed93 7a00 	vldr	s14, [r3]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007066:	edc7 7a07 	vstr	s15, [r7, #28]
		float integralTerm = pidController->ki * pidController->sumOfErrors;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	edd3 7a05 	vldr	s15, [r3, #20]
 8007076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800707a:	edc7 7a06 	vstr	s15, [r7, #24]
		float derivativeTerm = pidController->kd * pidController->differenceOfErrors;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	ed93 7a02 	vldr	s14, [r3, #8]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800708a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800708e:	edc7 7a05 	vstr	s15, [r7, #20]
		pidController->controlledVariable = proportionalTerm + integralTerm + derivativeTerm + pidController->bias;
 8007092:	ed97 7a07 	vldr	s14, [r7, #28]
 8007096:	edd7 7a06 	vldr	s15, [r7, #24]
 800709a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800709e:	edd7 7a05 	vldr	s15, [r7, #20]
 80070a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80070ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	edc3 7a07 	vstr	s15, [r3, #28]
 80070b6:	e003      	b.n	80070c0 <pidCompute+0x1a0>
	}
	else
	{
		pidController->controlledVariable = 0;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	61da      	str	r2, [r3, #28]
	}

	if (pidController->controlledVariable > pidController->maxControlledVariable)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	ed93 7a07 	vldr	s14, [r3, #28]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070da:	dd09      	ble.n	80070f0 <pidCompute+0x1d0>
	{
		pidController->controlledVariable = pidController->maxControlledVariable;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	edc3 7a07 	vstr	s15, [r3, #28]
 80070ee:	e016      	b.n	800711e <pidCompute+0x1fe>
	}
	else if (pidController->controlledVariable < pidController->minControlledVariable)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	ed93 7a07 	vldr	s14, [r3, #28]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800710a:	d508      	bpl.n	800711e <pidCompute+0x1fe>
	{
		pidController->controlledVariable = pidController->minControlledVariable;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007110:	ee07 3a90 	vmov	s15, r3
 8007114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	pidController->previousError = pidController->currentError;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	611a      	str	r2, [r3, #16]
}
 8007126:	bf00      	nop
 8007128:	3724      	adds	r7, #36	; 0x24
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <pidClearParameters>:

void pidClearParameters(PidController *pidController)
{
 8007132:	b480      	push	{r7}
 8007134:	b083      	sub	sp, #12
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
	pidController->controlledVariable = 0;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f04f 0200 	mov.w	r2, #0
 8007140:	61da      	str	r2, [r3, #28]
	pidController->currentError = 0;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	60da      	str	r2, [r3, #12]
	pidController->differenceOfErrors = 0;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	625a      	str	r2, [r3, #36]	; 0x24
	pidController->previousError = 0;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f04f 0200 	mov.w	r2, #0
 8007158:	611a      	str	r2, [r3, #16]
	pidController->processVariable = 0;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f04f 0200 	mov.w	r2, #0
 8007160:	621a      	str	r2, [r3, #32]
	pidController->sumOfErrors = 0;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	615a      	str	r2, [r3, #20]
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <pidGetKp>:

float pidGetKp(PidController *pidController)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
	return pidController->kp;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	ee07 3a90 	vmov	s15, r3
}
 8007186:	eeb0 0a67 	vmov.f32	s0, s15
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <pidSetKp>:

void pidSetKp(PidController *pidController, float kp)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	ed87 0a00 	vstr	s0, [r7]
	pidController->kp = kp;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	601a      	str	r2, [r3, #0]
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <pidGetKi>:

float pidGetKi(PidController *pidController)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
	return pidController->ki;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	ee07 3a90 	vmov	s15, r3
}
 80071c2:	eeb0 0a67 	vmov.f32	s0, s15
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <pidSetKi>:

void pidSetKi(PidController *pidController, float ki)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	ed87 0a00 	vstr	s0, [r7]
	pidController->ki = ki;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	605a      	str	r2, [r3, #4]
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <pidGetKd>:

float pidGetKd(PidController *pidController)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
	return pidController->kd;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	ee07 3a90 	vmov	s15, r3
}
 80071fe:	eeb0 0a67 	vmov.f32	s0, s15
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <pidSetKd>:

void pidSetKd(PidController *pidController, float kd)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	ed87 0a00 	vstr	s0, [r7]
	pidController->kd = kd;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	609a      	str	r2, [r3, #8]
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <pidGetInterval>:

float pidGetInterval(PidController *pidController)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
	return pidController->interval;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	ee07 3a90 	vmov	s15, r3
}
 800723a:	eeb0 0a67 	vmov.f32	s0, s15
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <pidSetInterval>:

void pidSetInterval(PidController *pidController, float interval)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	ed87 0a00 	vstr	s0, [r7]
	pidController->interval = interval;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	629a      	str	r2, [r3, #40]	; 0x28
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <pidGetSetpoint>:

float pidGetSetpoint(PidController *pidController)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
	return pidController->setpoint;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	ee07 3a90 	vmov	s15, r3
}
 8007276:	eeb0 0a67 	vmov.f32	s0, s15
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <pidSetSetpoint>:

void pidSetSetpoint(PidController *pidController, float setpoint)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	ed87 0a00 	vstr	s0, [r7]
	pidController->setpoint = setpoint;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	619a      	str	r2, [r3, #24]
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <pidGetProcessVariable>:

float pidGetProcessVariable(PidController *pidController)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b083      	sub	sp, #12
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
	return pidController->processVariable;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	ee07 3a90 	vmov	s15, r3
}
 80072b2:	eeb0 0a67 	vmov.f32	s0, s15
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <pidSetProcessVariable>:

void pidSetProcessVariable(PidController *pidController, float processVariable)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	ed87 0a00 	vstr	s0, [r7]
	pidController->processVariable = processVariable + pidController->offset;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80072d2:	edd7 7a00 	vldr	s15, [r7]
 80072d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <pidGetControlledVariable>:

float pidGetControlledVariable(PidController *pidController)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	return pidController->controlledVariable;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	ee07 3a90 	vmov	s15, r3
}
 80072fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <pidGetOffset>:

float pidGetOffset(PidController *pidController)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
	return pidController->offset;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007316:	ee07 3a90 	vmov	s15, r3
}
 800731a:	eeb0 0a67 	vmov.f32	s0, s15
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <pidSetOffset>:

void pidSetOffset(PidController *pidController, float offset)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	ed87 0a00 	vstr	s0, [r7]
	pidController->offset = offset;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <pidGetBias>:

float pidGetBias(PidController *pidController)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
	return pidController->bias;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	ee07 3a90 	vmov	s15, r3
}
 8007356:	eeb0 0a67 	vmov.f32	s0, s15
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <pidSetBias>:

void pidSetBias(PidController *pidController, float bias)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	ed87 0a00 	vstr	s0, [r7]
	pidController->bias = bias;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007376:	bf00      	nop
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <pidGetMinSumOfErrors>:

int32_t pidGetMinSumOfErrors(PidController *pidController)
{
 8007382:	b480      	push	{r7}
 8007384:	b083      	sub	sp, #12
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
	return pidController->minSumOfErrors;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800738e:	4618      	mov	r0, r3
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
	...

0800739c <pidSetMinSumOfErrors>:

void pidSetMinSumOfErrors(PidController *pidController, int32_t minSumOfErrors)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
	if (minSumOfErrors < MIN_SUM_OF_ERRORS_ALLOWED)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	4a0a      	ldr	r2, [pc, #40]	; (80073d4 <pidSetMinSumOfErrors+0x38>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	da02      	bge.n	80073b4 <pidSetMinSumOfErrors+0x18>
	{
		minSumOfErrors = MIN_SUM_OF_ERRORS_ALLOWED;
 80073ae:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <pidSetMinSumOfErrors+0x38>)
 80073b0:	603b      	str	r3, [r7, #0]
 80073b2:	e005      	b.n	80073c0 <pidSetMinSumOfErrors+0x24>
	}
	else if (minSumOfErrors > MAX_SUM_OF_ERRORS_ALLOWED)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	4a08      	ldr	r2, [pc, #32]	; (80073d8 <pidSetMinSumOfErrors+0x3c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	dd01      	ble.n	80073c0 <pidSetMinSumOfErrors+0x24>
	{
		minSumOfErrors = MAX_SUM_OF_ERRORS_ALLOWED;
 80073bc:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <pidSetMinSumOfErrors+0x3c>)
 80073be:	603b      	str	r3, [r7, #0]
	}
	pidController->minSumOfErrors = minSumOfErrors;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	c4653600 	.word	0xc4653600
 80073d8:	3b9aca00 	.word	0x3b9aca00

080073dc <pidGetMaxSumOfErrors>:

int32_t pidGetMaxSumOfErrors(PidController *pidController)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	return pidController->maxSumOfErrors;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <pidSetMaxSumOfErrors>:

void pidSetMaxSumOfErrors(PidController *pidController, int32_t maxSumOfErrors)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
	if (maxSumOfErrors < MIN_SUM_OF_ERRORS_ALLOWED)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	4a0a      	ldr	r2, [pc, #40]	; (800742c <pidSetMaxSumOfErrors+0x38>)
 8007402:	4293      	cmp	r3, r2
 8007404:	da02      	bge.n	800740c <pidSetMaxSumOfErrors+0x18>
	{
		maxSumOfErrors = MIN_SUM_OF_ERRORS_ALLOWED;
 8007406:	4b09      	ldr	r3, [pc, #36]	; (800742c <pidSetMaxSumOfErrors+0x38>)
 8007408:	603b      	str	r3, [r7, #0]
 800740a:	e005      	b.n	8007418 <pidSetMaxSumOfErrors+0x24>
	}
	else if (maxSumOfErrors > MAX_SUM_OF_ERRORS_ALLOWED)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	4a08      	ldr	r2, [pc, #32]	; (8007430 <pidSetMaxSumOfErrors+0x3c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	dd01      	ble.n	8007418 <pidSetMaxSumOfErrors+0x24>
	{
		maxSumOfErrors = MAX_SUM_OF_ERRORS_ALLOWED;
 8007414:	4b06      	ldr	r3, [pc, #24]	; (8007430 <pidSetMaxSumOfErrors+0x3c>)
 8007416:	603b      	str	r3, [r7, #0]
	}
	pidController->maxSumOfErrors = maxSumOfErrors;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	c4653600 	.word	0xc4653600
 8007430:	3b9aca00 	.word	0x3b9aca00

08007434 <pidGetMinControlledVariable>:

int32_t pidGetMinControlledVariable(PidController *pidController)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
	return pidController->minControlledVariable;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8007440:	4618      	mov	r0, r3
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <pidSetMinControlledVariable>:

void pidSetMinControlledVariable(PidController *pidController, int32_t minControlledVariable)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
	if (minControlledVariable < MIN_CONTROLLED_VARIABLE_ALLOWED)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	da02      	bge.n	8007462 <pidSetMinControlledVariable+0x16>
	{
		minControlledVariable = MIN_CONTROLLED_VARIABLE_ALLOWED;
 800745c:	2300      	movs	r3, #0
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	e006      	b.n	8007470 <pidSetMinControlledVariable+0x24>
	}
	else if (minControlledVariable > MAX_CONTROLLED_VARIABLE_ALLOWED)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007468:	db02      	blt.n	8007470 <pidSetMinControlledVariable+0x24>
	{
		minControlledVariable = MAX_CONTROLLED_VARIABLE_ALLOWED;
 800746a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800746e:	603b      	str	r3, [r7, #0]
	}
	pidController->minControlledVariable = minControlledVariable;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <pidGetMaxControlledVariable>:

int32_t pidGetMaxControlledVariable(PidController *pidController)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
	return pidController->maxControlledVariable;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800748e:	4618      	mov	r0, r3
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <pidSetMaxControlledVariable>:

void pidSetMaxControlledVariable(PidController *pidController, int32_t maxControlledVariable)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
	if (maxControlledVariable < MIN_CONTROLLED_VARIABLE_ALLOWED)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	da02      	bge.n	80074b0 <pidSetMaxControlledVariable+0x16>
	{
		maxControlledVariable = MIN_CONTROLLED_VARIABLE_ALLOWED;
 80074aa:	2300      	movs	r3, #0
 80074ac:	603b      	str	r3, [r7, #0]
 80074ae:	e006      	b.n	80074be <pidSetMaxControlledVariable+0x24>
	}
	else if (maxControlledVariable > MAX_CONTROLLED_VARIABLE_ALLOWED)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b6:	db02      	blt.n	80074be <pidSetMaxControlledVariable+0x24>
	{
		maxControlledVariable = MAX_CONTROLLED_VARIABLE_ALLOWED;
 80074b8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80074bc:	603b      	str	r3, [r7, #0]
	}
	pidController->maxControlledVariable = maxControlledVariable;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <__libc_init_array>:
 80074d0:	b570      	push	{r4, r5, r6, lr}
 80074d2:	4d0d      	ldr	r5, [pc, #52]	; (8007508 <__libc_init_array+0x38>)
 80074d4:	4c0d      	ldr	r4, [pc, #52]	; (800750c <__libc_init_array+0x3c>)
 80074d6:	1b64      	subs	r4, r4, r5
 80074d8:	10a4      	asrs	r4, r4, #2
 80074da:	2600      	movs	r6, #0
 80074dc:	42a6      	cmp	r6, r4
 80074de:	d109      	bne.n	80074f4 <__libc_init_array+0x24>
 80074e0:	4d0b      	ldr	r5, [pc, #44]	; (8007510 <__libc_init_array+0x40>)
 80074e2:	4c0c      	ldr	r4, [pc, #48]	; (8007514 <__libc_init_array+0x44>)
 80074e4:	f000 f82e 	bl	8007544 <_init>
 80074e8:	1b64      	subs	r4, r4, r5
 80074ea:	10a4      	asrs	r4, r4, #2
 80074ec:	2600      	movs	r6, #0
 80074ee:	42a6      	cmp	r6, r4
 80074f0:	d105      	bne.n	80074fe <__libc_init_array+0x2e>
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f8:	4798      	blx	r3
 80074fa:	3601      	adds	r6, #1
 80074fc:	e7ee      	b.n	80074dc <__libc_init_array+0xc>
 80074fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007502:	4798      	blx	r3
 8007504:	3601      	adds	r6, #1
 8007506:	e7f2      	b.n	80074ee <__libc_init_array+0x1e>
 8007508:	0800767c 	.word	0x0800767c
 800750c:	0800767c 	.word	0x0800767c
 8007510:	0800767c 	.word	0x0800767c
 8007514:	08007680 	.word	0x08007680

08007518 <memcpy>:
 8007518:	440a      	add	r2, r1
 800751a:	4291      	cmp	r1, r2
 800751c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007520:	d100      	bne.n	8007524 <memcpy+0xc>
 8007522:	4770      	bx	lr
 8007524:	b510      	push	{r4, lr}
 8007526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800752a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800752e:	4291      	cmp	r1, r2
 8007530:	d1f9      	bne.n	8007526 <memcpy+0xe>
 8007532:	bd10      	pop	{r4, pc}

08007534 <memset>:
 8007534:	4402      	add	r2, r0
 8007536:	4603      	mov	r3, r0
 8007538:	4293      	cmp	r3, r2
 800753a:	d100      	bne.n	800753e <memset+0xa>
 800753c:	4770      	bx	lr
 800753e:	f803 1b01 	strb.w	r1, [r3], #1
 8007542:	e7f9      	b.n	8007538 <memset+0x4>

08007544 <_init>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	bf00      	nop
 8007548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754a:	bc08      	pop	{r3}
 800754c:	469e      	mov	lr, r3
 800754e:	4770      	bx	lr

08007550 <_fini>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	bf00      	nop
 8007554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007556:	bc08      	pop	{r3}
 8007558:	469e      	mov	lr, r3
 800755a:	4770      	bx	lr
