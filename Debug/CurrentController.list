
CurrentController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b10  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd8  08007fd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fe0  08007fe0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fe0  08007fe0  00017fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a78  2000000c  08007ff4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a84  08007ff4  00020a84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018518  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d3  00000000  00000000  00038554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  0003ba28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  0003cf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024eb3  00000000  00000000  0003e340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183b2  00000000  00000000  000631f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dff44  00000000  00000000  0007b5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b4e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b20  00000000  00000000  0015b53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007cc0 	.word	0x08007cc0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08007cc0 	.word	0x08007cc0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b974 	b.w	8000d44 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468e      	mov	lr, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14d      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	d969      	bls.n	8000b5c <__udivmoddi4+0xe8>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b152      	cbz	r2, 8000aa4 <__udivmoddi4+0x30>
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	f1c2 0120 	rsb	r1, r2, #32
 8000a96:	fa20 f101 	lsr.w	r1, r0, r1
 8000a9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa8:	0c21      	lsrs	r1, r4, #16
 8000aaa:	fbbe f6f8 	udiv	r6, lr, r8
 8000aae:	fa1f f78c 	uxth.w	r7, ip
 8000ab2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ab6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aba:	fb06 f107 	mul.w	r1, r6, r7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aca:	f080 811f 	bcs.w	8000d0c <__udivmoddi4+0x298>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 811c 	bls.w	8000d0c <__udivmoddi4+0x298>
 8000ad4:	3e02      	subs	r6, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae8:	fb00 f707 	mul.w	r7, r0, r7
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	d90a      	bls.n	8000b06 <__udivmoddi4+0x92>
 8000af0:	eb1c 0404 	adds.w	r4, ip, r4
 8000af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af8:	f080 810a 	bcs.w	8000d10 <__udivmoddi4+0x29c>
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	f240 8107 	bls.w	8000d10 <__udivmoddi4+0x29c>
 8000b02:	4464      	add	r4, ip
 8000b04:	3802      	subs	r0, #2
 8000b06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0a:	1be4      	subs	r4, r4, r7
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	b11d      	cbz	r5, 8000b18 <__udivmoddi4+0xa4>
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	2300      	movs	r3, #0
 8000b14:	e9c5 4300 	strd	r4, r3, [r5]
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d909      	bls.n	8000b36 <__udivmoddi4+0xc2>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	f000 80ef 	beq.w	8000d06 <__udivmoddi4+0x292>
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2e:	4630      	mov	r0, r6
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	fab3 f683 	clz	r6, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d14a      	bne.n	8000bd4 <__udivmoddi4+0x160>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xd4>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80f9 	bhi.w	8000d3a <__udivmoddi4+0x2c6>
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	469e      	mov	lr, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d0e0      	beq.n	8000b18 <__udivmoddi4+0xa4>
 8000b56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b5a:	e7dd      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000b5c:	b902      	cbnz	r2, 8000b60 <__udivmoddi4+0xec>
 8000b5e:	deff      	udf	#255	; 0xff
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	f040 8092 	bne.w	8000c8e <__udivmoddi4+0x21a>
 8000b6a:	eba1 010c 	sub.w	r1, r1, ip
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2601      	movs	r6, #1
 8000b78:	0c20      	lsrs	r0, r4, #16
 8000b7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b86:	fb0e f003 	mul.w	r0, lr, r3
 8000b8a:	4288      	cmp	r0, r1
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x12c>
 8000b8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x12a>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2c0>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x156>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x154>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bd2:	e79c      	b.n	8000b0e <__udivmoddi4+0x9a>
 8000bd4:	f1c6 0720 	rsb	r7, r6, #32
 8000bd8:	40b3      	lsls	r3, r6
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa20 f407 	lsr.w	r4, r0, r7
 8000be6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bea:	431c      	orrs	r4, r3
 8000bec:	40f9      	lsrs	r1, r7
 8000bee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bfa:	0c20      	lsrs	r0, r4, #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fb09 1118 	mls	r1, r9, r8, r1
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	fb08 f00e 	mul.w	r0, r8, lr
 8000c0c:	4288      	cmp	r0, r1
 8000c0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b8>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2bc>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2bc>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1a09      	subs	r1, r1, r0
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c34:	fb09 1110 	mls	r1, r9, r0, r1
 8000c38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	458e      	cmp	lr, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1e2>
 8000c44:	eb1c 0101 	adds.w	r1, ip, r1
 8000c48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2b4>
 8000c4e:	458e      	cmp	lr, r1
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2b4>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4461      	add	r1, ip
 8000c56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c5e:	eba1 010e 	sub.w	r1, r1, lr
 8000c62:	42a1      	cmp	r1, r4
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46a6      	mov	lr, r4
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x2a4>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x2a0>
 8000c6c:	b15d      	cbz	r5, 8000c86 <__udivmoddi4+0x212>
 8000c6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c72:	eb61 010e 	sbc.w	r1, r1, lr
 8000c76:	fa01 f707 	lsl.w	r7, r1, r7
 8000c7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c7e:	40f1      	lsrs	r1, r6
 8000c80:	431f      	orrs	r7, r3
 8000c82:	e9c5 7100 	strd	r7, r1, [r5]
 8000c86:	2600      	movs	r6, #0
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	f1c2 0320 	rsb	r3, r2, #32
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c98:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4301      	orrs	r1, r0
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cac:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb0:	0c0b      	lsrs	r3, r1, #16
 8000cb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x260>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b8>
 8000ccc:	429e      	cmp	r6, r3
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b8>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	b289      	uxth	r1, r1
 8000cd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x28a>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cfa:	3e02      	subs	r6, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0x104>
 8000d06:	462e      	mov	r6, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e705      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	e6e3      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000d10:	4618      	mov	r0, r3
 8000d12:	e6f8      	b.n	8000b06 <__udivmoddi4+0x92>
 8000d14:	454b      	cmp	r3, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f8>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d20:	3801      	subs	r0, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f8>
 8000d24:	4646      	mov	r6, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x28a>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1e2>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b8>
 8000d34:	3b02      	subs	r3, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x12c>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e709      	b.n	8000b52 <__udivmoddi4+0xde>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x156>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <appInit>:

// ======== Init =========== //
void appInit(App *app, GPIO_TypeDef* ledPort, uint16_t ledPin,
			UART_HandleTypeDef huart, DAC_HandleTypeDef hdac,
			UART_HandleTypeDef huartDebug, ADC_HandleTypeDef hadc)
{
 8000d48:	b082      	sub	sp, #8
 8000d4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4c:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8000d50:	af20      	add	r7, sp, #128	; 0x80
 8000d52:	f507 7400 	add.w	r4, r7, #512	; 0x200
 8000d56:	f5a4 74fa 	sub.w	r4, r4, #500	; 0x1f4
 8000d5a:	6020      	str	r0, [r4, #0]
 8000d5c:	f507 7000 	add.w	r0, r7, #512	; 0x200
 8000d60:	f5a0 70fc 	sub.w	r0, r0, #504	; 0x1f8
 8000d64:	6001      	str	r1, [r0, #0]
 8000d66:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8000d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d6e:	f5a3 73fd 	sub.w	r3, r3, #506	; 0x1fa
 8000d72:	801a      	strh	r2, [r3, #0]
	// ======== LED =========== //
	blinkLedInit(&app->blinkLed, ledPort, ledPin, PATTERN_TOGGLE_EACH_100_MS);
 8000d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d78:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000d7c:	6818      	ldr	r0, [r3, #0]
 8000d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d82:	f5a3 73fd 	sub.w	r3, r3, #506	; 0x1fa
 8000d86:	881a      	ldrh	r2, [r3, #0]
 8000d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d8c:	f5a3 71fc 	sub.w	r1, r3, #504	; 0x1f8
 8000d90:	2301      	movs	r3, #1
 8000d92:	6809      	ldr	r1, [r1, #0]
 8000d94:	f000 fcdd 	bl	8001752 <blinkLedInit>

	// ======== Comm ======== //
	commInit(&app->comm, huart, huartDebug);
 8000d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d9c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f103 0610 	add.w	r6, r3, #16
 8000da6:	a80e      	add	r0, sp, #56	; 0x38
 8000da8:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8000dac:	2244      	movs	r2, #68	; 0x44
 8000dae:	4619      	mov	r1, r3
 8000db0:	f006 ff70 	bl	8007c94 <memcpy>
 8000db4:	466d      	mov	r5, sp
 8000db6:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8000dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dca:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dce:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8000dd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	f000 fe6d 	bl	8001ab4 <commInit>

	// ======== Filter =========== //
	movingAverageInit(&app->movingAverageFilter, 128);
 8000dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dde:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	4618      	mov	r0, r3
 8000dec:	f006 fb72 	bl	80074d4 <movingAverageInit>

	// ======== Sampling =========== //
	samplingInit(&app->sampling, hadc);
 8000df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000df4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f503 66cf 	add.w	r6, r3, #1656	; 0x678
 8000dfe:	466d      	mov	r5, sp
 8000e00:	f507 7431 	add.w	r4, r7, #708	; 0x2c4
 8000e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e10:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000e14:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000e18:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e1e:	4630      	mov	r0, r6
 8000e20:	f001 ff75 	bl	8002d0e <samplingInit>

	// ======== Controller =========== //
	controllerInit(&app->controller, hdac);
 8000e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e28:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f503 64da 	add.w	r4, r3, #1744	; 0x6d0
 8000e32:	466a      	mov	r2, sp
 8000e34:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8000e38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e3c:	e882 0003 	stmia.w	r2, {r0, r1}
 8000e40:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000e44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e46:	4620      	mov	r0, r4
 8000e48:	f001 fd74 	bl	8002934 <controllerInit>

	// ======== Calibration =========== //
	uint32_t y_Imeasured_mA[] = {0, 5, 10, 15, 20, 25, 30, 35, 40, 45,
 8000e4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <appInit+0x17c>)
 8000e4e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000e52:	4611      	mov	r1, r2
 8000e54:	22f4      	movs	r2, #244	; 0xf4
 8000e56:	4618      	mov	r0, r3
 8000e58:	f006 ff1c 	bl	8007c94 <memcpy>
								150, 155, 160, 165, 170, 175, 180, 185, 190, 195,
								200, 205, 210, 215, 220, 225, 230, 235, 240, 245,
								250, 255, 260, 265, 270, 275, 280, 285, 290, 295,
								300};

	uint32_t x_Icalculated_mA[] = {0, 4, 9, 14, 19, 24, 29, 35, 40, 46,
 8000e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e60:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8000e64:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <appInit+0x180>)
 8000e66:	4618      	mov	r0, r3
 8000e68:	4611      	mov	r1, r2
 8000e6a:	23f4      	movs	r3, #244	; 0xf4
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	f006 ff11 	bl	8007c94 <memcpy>
								  155, 160, 165, 171, 176, 181, 186, 191, 197, 202,
								  206, 212, 217, 222, 227, 233, 238, 243, 248, 254,
								  259, 264, 269, 274, 280, 285, 290, 295, 300, 305,
								  310};

	uint32_t sizeof_y = sizeof(y_Imeasured_mA) / sizeof(y_Imeasured_mA[0]);
 8000e72:	233d      	movs	r3, #61	; 0x3d
 8000e74:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	uint32_t sizeof_x = sizeof(x_Icalculated_mA) / sizeof(x_Icalculated_mA[0]);
 8000e78:	233d      	movs	r3, #61	; 0x3d
 8000e7a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

	memcpy(app->currentReferenceInMiliAmpsY, y_Imeasured_mA, 4*61);
 8000e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e82:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8000e8c:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8000e90:	22f4      	movs	r2, #244	; 0xf4
 8000e92:	4618      	mov	r0, r3
 8000e94:	f006 fefe 	bl	8007c94 <memcpy>
	memcpy(app->currentCalculatedInMiliAmpsX, x_Icalculated_mA, 4*61);
 8000e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e9c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8000ea6:	f107 0110 	add.w	r1, r7, #16
 8000eaa:	22f4      	movs	r2, #244	; 0xf4
 8000eac:	4618      	mov	r0, r3
 8000eae:	f006 fef1 	bl	8007c94 <memcpy>
}
 8000eb2:	bf00      	nop
 8000eb4:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000ebe:	b002      	add	sp, #8
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	08007cd8 	.word	0x08007cd8
 8000ec8:	08007dcc 	.word	0x08007dcc

08000ecc <appExecuteBlinkLed>:

// ======== LED =========== //
void appExecuteBlinkLed(App *app)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	blinkLedExecuteBlink(&app->blinkLed);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fc64 	bl	80017a4 <blinkLedExecuteBlink>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <appRunController>:

// ======== Controller =========== //
void appRunController(App *app)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	controllerRunPidController(&app->controller);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fd5e 	bl	80029b4 <controllerRunPidController>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <appGetCurrentInMiliAmps>:

// ======== App Calculations =========== //
uint32_t appGetCurrentInMiliAmps(App *app, uint16_t adcValue)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
	uint32_t electronicCircuitGain = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
	float voltageDividerRate = 0;
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]

	if (samplingGetCurrentMagnitudeOrder(&app->sampling) == LOW_CURRENT)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 ff9c 	bl	8002e5a <samplingGetCurrentMagnitudeOrder>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d104      	bne.n	8000f32 <appGetCurrentInMiliAmps+0x32>
	{
		electronicCircuitGain = 100;
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
		voltageDividerRate = 0.877;
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <appGetCurrentInMiliAmps+0xe0>)
 8000f2e:	623b      	str	r3, [r7, #32]
 8000f30:	e003      	b.n	8000f3a <appGetCurrentInMiliAmps+0x3a>
	}
	else
	{
		electronicCircuitGain = 10;
 8000f32:	230a      	movs	r3, #10
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
		voltageDividerRate = 0.955;
 8000f36:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <appGetCurrentInMiliAmps+0xe4>)
 8000f38:	623b      	str	r3, [r7, #32]
	}

	uint32_t shuntResistorInOhms = 1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61fb      	str	r3, [r7, #28]
  	float measuredSignalInVolts = ((3.3 * adcValue) / 4095);
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fab3 	bl	80004ac <__aeabi_i2d>
 8000f46:	a322      	add	r3, pc, #136	; (adr r3, 8000fd0 <appGetCurrentInMiliAmps+0xd0>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff fb18 	bl	8000580 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	a31f      	add	r3, pc, #124	; (adr r3, 8000fd8 <appGetCurrentInMiliAmps+0xd8>)
 8000f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5e:	f7ff fc39 	bl	80007d4 <__aeabi_ddiv>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f7ff fd1b 	bl	80009a4 <__aeabi_d2f>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	61bb      	str	r3, [r7, #24]
  	float conditionedSignalInVolts = measuredSignalInVolts / (electronicCircuitGain * voltageDividerRate);
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f84:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f8c:	edc7 7a05 	vstr	s15, [r7, #20]
  	float calculatedCurrentInAmps = conditionedSignalInVolts / shuntResistorInOhms;
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	ee07 3a90 	vmov	s15, r3
 8000f96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f9a:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa2:	edc7 7a04 	vstr	s15, [r7, #16]
  	float calculatedCurrentInMiliAmpsAux = 1000 * calculatedCurrentInAmps;
 8000fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000faa:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000fe8 <appGetCurrentInMiliAmps+0xe8>
 8000fae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb2:	edc7 7a03 	vstr	s15, [r7, #12]
  	uint32_t calculatedCurrentInMiliAmps = (uint32_t) calculatedCurrentInMiliAmpsAux;
 8000fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fbe:	ee17 3a90 	vmov	r3, s15
 8000fc2:	60bb      	str	r3, [r7, #8]
  	return calculatedCurrentInMiliAmps;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	66666666 	.word	0x66666666
 8000fd4:	400a6666 	.word	0x400a6666
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40affe00 	.word	0x40affe00
 8000fe0:	3f608312 	.word	0x3f608312
 8000fe4:	3f747ae1 	.word	0x3f747ae1
 8000fe8:	447a0000 	.word	0x447a0000

08000fec <appExecuteSampling>:

// ======== Sampling =========== //
void appExecuteSampling(App *app)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	; 0x38
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	samplingExecuteAdcRead(&app->sampling);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 feae 	bl	8002d5c <samplingExecuteAdcRead>

	uint16_t readAdcValue = samplingGetAdcValue(&app->sampling);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8001006:	4618      	mov	r0, r3
 8001008:	f001 ff1b 	bl	8002e42 <samplingGetAdcValue>
 800100c:	4603      	mov	r3, r0
 800100e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint32_t calculatedCurrentInMiliAmps = appGetCurrentInMiliAmps(app, readAdcValue);
 8001010:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001012:	4619      	mov	r1, r3
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff73 	bl	8000f00 <appGetCurrentInMiliAmps>
 800101a:	62b8      	str	r0, [r7, #40]	; 0x28
	appAddNewValueToFilter(app, calculatedCurrentInMiliAmps);
 800101c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f8cd 	bl	80011be <appAddNewValueToFilter>
	uint32_t filteredCurrentInMiliAmps = appGetFilterResult(app);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f8db 	bl	80011e0 <appGetFilterResult>
 800102a:	6378      	str	r0, [r7, #52]	; 0x34

	if (filteredCurrentInMiliAmps < app->currentCalculatedInMiliAmpsX[0])
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 8001032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001034:	429a      	cmp	r2, r3
 8001036:	d204      	bcs.n	8001042 <appExecuteSampling+0x56>
	{
		filteredCurrentInMiliAmps = app->currentCalculatedInMiliAmpsX[0];
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
 8001040:	e009      	b.n	8001056 <appExecuteSampling+0x6a>
	}
	else if (filteredCurrentInMiliAmps > app->currentCalculatedInMiliAmpsX[60])
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
 8001048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800104a:	429a      	cmp	r2, r3
 800104c:	d903      	bls.n	8001056 <appExecuteSampling+0x6a>
	{
		filteredCurrentInMiliAmps = app->currentCalculatedInMiliAmpsX[60];
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
	}

	int8_t mainIndex = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	int8_t prevIndex = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	int8_t nextIndex = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	for (mainIndex = 0; mainIndex < 60; mainIndex++)
 8001068:	2300      	movs	r3, #0
 800106a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800106e:	e038      	b.n	80010e2 <appExecuteSampling+0xf6>
	{
		if ((filteredCurrentInMiliAmps >= app->currentCalculatedInMiliAmpsX[mainIndex]) && (filteredCurrentInMiliAmps <= app->currentCalculatedInMiliAmpsX[mainIndex+1]))
 8001070:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001082:	429a      	cmp	r2, r3
 8001084:	d326      	bcc.n	80010d4 <appExecuteSampling+0xe8>
 8001086:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800108a:	3301      	adds	r3, #1
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800109a:	429a      	cmp	r2, r3
 800109c:	d81a      	bhi.n	80010d4 <appExecuteSampling+0xe8>
		{
			prevIndex = mainIndex - 1;
 800109e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010a2:	3b01      	subs	r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			nextIndex = mainIndex + 1;
 80010aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010ae:	3301      	adds	r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

			if (prevIndex < 0)
 80010b6:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da02      	bge.n	80010c4 <appExecuteSampling+0xd8>
			{
				prevIndex = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			}

			if (nextIndex > 60)
 80010c4:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 80010c8:	2b3c      	cmp	r3, #60	; 0x3c
 80010ca:	dd0f      	ble.n	80010ec <appExecuteSampling+0x100>
			{
				nextIndex = 60;
 80010cc:	233c      	movs	r3, #60	; 0x3c
 80010ce:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			}
			break;
 80010d2:	e00b      	b.n	80010ec <appExecuteSampling+0x100>
	for (mainIndex = 0; mainIndex < 60; mainIndex++)
 80010d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80010e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80010e6:	2b3b      	cmp	r3, #59	; 0x3b
 80010e8:	ddc2      	ble.n	8001070 <appExecuteSampling+0x84>
 80010ea:	e000      	b.n	80010ee <appExecuteSampling+0x102>
			break;
 80010ec:	bf00      	nop
		}
	}

	float x  = (float) filteredCurrentInMiliAmps;
 80010ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f0:	ee07 3a90 	vmov	s15, r3
 80010f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float x0 = (float) app->currentCalculatedInMiliAmpsX[prevIndex];
 80010fc:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001114:	edc7 7a08 	vstr	s15, [r7, #32]
	float x1 = (float) app->currentCalculatedInMiliAmpsX[nextIndex];
 8001118:	f997 3031 	ldrsb.w	r3, [r7, #49]	; 0x31
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001130:	edc7 7a07 	vstr	s15, [r7, #28]
	float y0 = (float) app->currentReferenceInMiliAmpsY[prevIndex];
 8001134:	f997 2032 	ldrsb.w	r2, [r7, #50]	; 0x32
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f502 72e6 	add.w	r2, r2, #460	; 0x1cc
 800113e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800114a:	edc7 7a06 	vstr	s15, [r7, #24]
	float y1 = (float) app->currentReferenceInMiliAmpsY[nextIndex];
 800114e:	f997 2031 	ldrsb.w	r2, [r7, #49]	; 0x31
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f502 72e6 	add.w	r2, r2, #460	; 0x1cc
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001164:	edc7 7a05 	vstr	s15, [r7, #20]
	float y  = (((x - x0) / (x1 - x0)) * (y1 - y0)) + y0;
 8001168:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800116c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001170:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001174:	ed97 7a07 	vldr	s14, [r7, #28]
 8001178:	edd7 7a08 	vldr	s15, [r7, #32]
 800117c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001184:	edd7 6a05 	vldr	s13, [r7, #20]
 8001188:	edd7 7a06 	vldr	s15, [r7, #24]
 800118c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001194:	ed97 7a06 	vldr	s14, [r7, #24]
 8001198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119c:	edc7 7a04 	vstr	s15, [r7, #16]

	uint32_t calibratedCurrentInMiliAmps = (uint32_t) y;
 80011a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80011a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011a8:	ee17 3a90 	vmov	r3, s15
 80011ac:	60fb      	str	r3, [r7, #12]

	appSetPidProcessVariable(app, calibratedCurrentInMiliAmps);
 80011ae:	68f9      	ldr	r1, [r7, #12]
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fa24 	bl	80015fe <appSetPidProcessVariable>
}
 80011b6:	bf00      	nop
 80011b8:	3738      	adds	r7, #56	; 0x38
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <appAddNewValueToFilter>:

// ======== Filter =========== //
void appAddNewValueToFilter(App *app, uint32_t newValue)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	movingAverageAddValue(&app->movingAverageFilter, newValue);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f006 f99e 	bl	8007514 <movingAverageAddValue>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <appGetFilterResult>:

uint32_t appGetFilterResult(App *app)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	return movingAverageGetMean(&app->movingAverageFilter);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80011ee:	4618      	mov	r0, r3
 80011f0:	f006 f9cb 	bl	800758a <movingAverageGetMean>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <appAppendReceivedByte>:

// ======== Data Packet Rx =========== //
void appAppendReceivedByte(App *app, uint8_t receivedByte)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	460b      	mov	r3, r1
 8001208:	70fb      	strb	r3, [r7, #3]
	commAppendReceivedByte(&app->comm, receivedByte);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3310      	adds	r3, #16
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f001 f84e 	bl	80022b4 <commAppendReceivedByte>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <appDecodeReceivedData>:

void appDecodeReceivedData(App *app)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	commTryDecodeReceivedDataPacket(&app->comm);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3310      	adds	r3, #16
 800122c:	4618      	mov	r0, r3
 800122e:	f001 f852 	bl	80022d6 <commTryDecodeReceivedDataPacket>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <appExtractCommandAndPayloadFromDecodedData>:

void appExtractCommandAndPayloadFromDecodedData(App *app)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	commTryExtractCommandAndPayloadFromDecodedDataPacket(&app->comm);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3310      	adds	r3, #16
 8001246:	4618      	mov	r0, r3
 8001248:	f001 f852 	bl	80022f0 <commTryExtractCommandAndPayloadFromDecodedDataPacket>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <appDecodeExtractedCommand>:

void appDecodeExtractedCommand(App *app)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	commTryDecodeExtractedCommand(&app->comm, app);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3310      	adds	r3, #16
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	f001 f87f 	bl	8002366 <commTryDecodeExtractedCommand>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <appSendData>:

// ======== Data Packet Tx =========== //
void appSendData(App *app)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	commTrySendData(&app->comm, app);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3310      	adds	r3, #16
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fc65 	bl	8001b4e <commTrySendData>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <appGetPidKp>:

// ======= Getters and Setters ======== //
float appGetPidKp(App *app)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	return controllerGetPidKp(&app->controller);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fba9 	bl	80029f2 <controllerGetPidKp>
 80012a0:	eef0 7a40 	vmov.f32	s15, s0
}
 80012a4:	eeb0 0a67 	vmov.f32	s0, s15
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <appSetPidKp>:

void appSetPidKp(App *app, float kp)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidKp(&app->controller, kp);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80012c0:	ed97 0a00 	vldr	s0, [r7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 fba3 	bl	8002a10 <controllerSetPidKp>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <appGetPidKi>:

float appGetPidKi(App *app)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	return controllerGetPidKi(&app->controller);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 fba5 	bl	8002a30 <controllerGetPidKi>
 80012e6:	eef0 7a40 	vmov.f32	s15, s0
}
 80012ea:	eeb0 0a67 	vmov.f32	s0, s15
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <appSetPidKi>:

void appSetPidKi(App *app, float ki)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidKi(&app->controller, ki);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001306:	ed97 0a00 	vldr	s0, [r7]
 800130a:	4618      	mov	r0, r3
 800130c:	f001 fb9f 	bl	8002a4e <controllerSetPidKi>
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <appGetPidKd>:

float appGetPidKd(App *app)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	return controllerGetPidKd(&app->controller);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fba1 	bl	8002a6e <controllerGetPidKd>
 800132c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <appSetPidKd>:

void appSetPidKd(App *app, float kd)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidKd(&app->controller, kd);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800134c:	ed97 0a00 	vldr	s0, [r7]
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fb9b 	bl	8002a8c <controllerSetPidKd>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <appGetPidInterval>:

uint16_t appGetPidInterval(App *app)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	return (uint16_t) (10000 * controllerGetPidInterval(&app->controller));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fb9c 	bl	8002aac <controllerGetPidInterval>
 8001374:	eef0 7a40 	vmov.f32	s15, s0
 8001378:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001394 <appGetPidInterval+0x34>
 800137c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001384:	ee17 3a90 	vmov	r3, s15
 8001388:	b29b      	uxth	r3, r3
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	461c4000 	.word	0x461c4000

08001398 <appSetPidInterval>:

void appSetPidInterval(App *app, uint16_t pidInterval)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
	if ((pidInterval >= 0) && (pidInterval <= DELAY_5000_MILISECONDS))
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d810      	bhi.n	80013d0 <appSetPidInterval+0x38>
	{
		controllerSetPidInterval(&app->controller, ((float) pidInterval) / 10000);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80013b4:	887a      	ldrh	r2, [r7, #2]
 80013b6:	ee07 2a90 	vmov	s15, r2
 80013ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013be:	eddf 6a06 	vldr	s13, [pc, #24]	; 80013d8 <appSetPidInterval+0x40>
 80013c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013c6:	eeb0 0a47 	vmov.f32	s0, s14
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fb7d 	bl	8002aca <controllerSetPidInterval>
	}
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	461c4000 	.word	0x461c4000

080013dc <appGetPidMinSumOfErrors>:

int32_t appGetPidMinSumOfErrors(App *app)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	return controllerGetPidMinSumOfErrors(&app->controller);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fb7d 	bl	8002aea <controllerGetPidMinSumOfErrors>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <appSetPidMinSumOfErrors>:

void appSetPidMinSumOfErrors(App *app, int32_t minSumOfErrors)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
	controllerSetPidMinSumOfErrors(&app->controller, minSumOfErrors);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f001 fb79 	bl	8002b04 <controllerSetPidMinSumOfErrors>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <appGetPidMaxSumOfErrors>:

int32_t appGetPidMaxSumOfErrors(App *app)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return controllerGetPidMaxSumOfErrors(&app->controller);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001428:	4618      	mov	r0, r3
 800142a:	f001 fb79 	bl	8002b20 <controllerGetPidMaxSumOfErrors>
 800142e:	4603      	mov	r3, r0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <appSetPidMaxSumOfErrors>:

void appSetPidMaxSumOfErrors(App *app, int32_t maxSumOfErrors)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	controllerSetPidMaxSumOfErrors(&app->controller, maxSumOfErrors);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001448:	6839      	ldr	r1, [r7, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f001 fb75 	bl	8002b3a <controllerSetPidMaxSumOfErrors>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <appGetPidMinControlledVariable>:

int32_t appGetPidMinControlledVariable(App *app)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	return controllerGetPidMinControlledVariable(&app->controller);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001466:	4618      	mov	r0, r3
 8001468:	f001 fb75 	bl	8002b56 <controllerGetPidMinControlledVariable>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <appSetPidMinControlledVariable>:

void appSetPidMinControlledVariable(App *app, int32_t minControlledVariable)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
	controllerSetPidMinControlledVariable(&app->controller, minControlledVariable);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001486:	6839      	ldr	r1, [r7, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f001 fb71 	bl	8002b70 <controllerSetPidMinControlledVariable>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <appGetPidMaxControlledVariable>:

int32_t appGetPidMaxControlledVariable(App *app)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	return controllerGetPidMaxControlledVariable(&app->controller);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 fb71 	bl	8002b8c <controllerGetPidMaxControlledVariable>
 80014aa:	4603      	mov	r3, r0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <appSetPidMaxControlledVariable>:

void appSetPidMaxControlledVariable(App *app, int32_t maxControlledVariable)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
	controllerSetPidMaxControlledVariable(&app->controller, maxControlledVariable);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80014c4:	6839      	ldr	r1, [r7, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 fb6d 	bl	8002ba6 <controllerSetPidMaxControlledVariable>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <appGetPidOffset>:

float appGetPidOffset(App *app)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	return controllerGetPidOffset(&app->controller);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fb6d 	bl	8002bc2 <controllerGetPidOffset>
 80014e8:	eef0 7a40 	vmov.f32	s15, s0
}
 80014ec:	eeb0 0a67 	vmov.f32	s0, s15
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <appSetPidOffset>:

void appSetPidOffset(App *app, float offset)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidOffset(&app->controller, offset);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001508:	ed97 0a00 	vldr	s0, [r7]
 800150c:	4618      	mov	r0, r3
 800150e:	f001 fb67 	bl	8002be0 <controllerSetPidOffset>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <appGetPidBias>:

float appGetPidBias(App *app)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	return controllerGetPidBias(&app->controller);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001528:	4618      	mov	r0, r3
 800152a:	f001 fb69 	bl	8002c00 <controllerGetPidBias>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001532:	eeb0 0a67 	vmov.f32	s0, s15
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <appSetPidBias>:

void appSetPidBias(App *app, float bias)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidBias(&app->controller, bias);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800154e:	ed97 0a00 	vldr	s0, [r7]
 8001552:	4618      	mov	r0, r3
 8001554:	f001 fb63 	bl	8002c1e <controllerSetPidBias>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <appGetPidSetpoint>:

float appGetPidSetpoint(App *app)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	return controllerGetPidSetpoint(&app->controller);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800156e:	4618      	mov	r0, r3
 8001570:	f001 fb65 	bl	8002c3e <controllerGetPidSetpoint>
 8001574:	eef0 7a40 	vmov.f32	s15, s0
}
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <appSetPidSetpoint>:

void appSetPidSetpoint(App *app, float setpoint)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	ed87 0a00 	vstr	s0, [r7]
	if ((setpoint >= MIN_CURRENT_IN_MICRO_AMPS) && (setpoint <= MAX_CURRENT_IN_MICRO_AMPS))
 8001590:	edd7 7a00 	vldr	s15, [r7]
 8001594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	da00      	bge.n	80015a0 <appSetPidSetpoint+0x1c>
	{
		controllerSetPidSetpoint(&app->controller, setpoint);
		commSetEnableSendCurrentPidSetpointValue(&app->comm, TRUE);
	}
}
 800159e:	e017      	b.n	80015d0 <appSetPidSetpoint+0x4c>
	if ((setpoint >= MIN_CURRENT_IN_MICRO_AMPS) && (setpoint <= MAX_CURRENT_IN_MICRO_AMPS))
 80015a0:	edd7 7a00 	vldr	s15, [r7]
 80015a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80015d8 <appSetPidSetpoint+0x54>
 80015a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b0:	d900      	bls.n	80015b4 <appSetPidSetpoint+0x30>
}
 80015b2:	e00d      	b.n	80015d0 <appSetPidSetpoint+0x4c>
		controllerSetPidSetpoint(&app->controller, setpoint);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80015ba:	ed97 0a00 	vldr	s0, [r7]
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 fb4c 	bl	8002c5c <controllerSetPidSetpoint>
		commSetEnableSendCurrentPidSetpointValue(&app->comm, TRUE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3310      	adds	r3, #16
 80015c8:	2101      	movs	r1, #1
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 f93b 	bl	8002846 <commSetEnableSendCurrentPidSetpointValue>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	48927c00 	.word	0x48927c00

080015dc <appGetPidProcessVariable>:

float appGetPidProcessVariable(App *app)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	return controllerGetPidProcessVariable(&app->controller);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fb46 	bl	8002c7c <controllerGetPidProcessVariable>
 80015f0:	eef0 7a40 	vmov.f32	s15, s0
}
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <appSetPidProcessVariable>:

void appSetPidProcessVariable(App *app, uint32_t value)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
	controllerSetPidProcessVariable(&app->controller, (float) value);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	ee07 2a90 	vmov	s15, r2
 8001614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001618:	eeb0 0a67 	vmov.f32	s0, s15
 800161c:	4618      	mov	r0, r3
 800161e:	f001 fb3c 	bl	8002c9a <controllerSetPidProcessVariable>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <appGetRunPidControllerStatus>:

Bool appGetRunPidControllerStatus(App *app)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	return controllerGetRunPidControllerStatus(&app->controller);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001638:	4618      	mov	r0, r3
 800163a:	f001 fb3e 	bl	8002cba <controllerGetRunPidControllerStatus>
 800163e:	4603      	mov	r3, r0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <appSetRunPidControllerStatus>:

void appSetRunPidControllerStatus(App *app, Bool status)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
	if (status == TRUE)
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d105      	bne.n	8001666 <appSetRunPidControllerStatus+0x1e>
	{
		blinkLedSetBlinkPattern(&app->blinkLed, PATTERN_TOGGLE_EACH_250_MS);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2104      	movs	r1, #4
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fa17 	bl	8001a92 <blinkLedSetBlinkPattern>
 8001664:	e004      	b.n	8001670 <appSetRunPidControllerStatus+0x28>
	}
	else
	{
		blinkLedSetBlinkPattern(&app->blinkLed, PATTERN_TOGGLE_EACH_100_MS);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2101      	movs	r1, #1
 800166a:	4618      	mov	r0, r3
 800166c:	f000 fa11 	bl	8001a92 <blinkLedSetBlinkPattern>
	}

	controllerSetRunPidControllerStatus(&app->controller, status);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f001 fb2a 	bl	8002cd4 <controllerSetRunPidControllerStatus>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <appGetSamplingInterval>:

uint16_t appGetSamplingInterval(App *app)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	return samplingGetSamplingInterval(&app->sampling);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8001696:	4618      	mov	r0, r3
 8001698:	f001 fbb8 	bl	8002e0c <samplingGetSamplingInterval>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <appSetSamplingInterval>:

void appSetSamplingInterval(App *app, uint16_t samplingInterval)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	807b      	strh	r3, [r7, #2]
	if ((samplingInterval >= 0) && (samplingInterval <= DELAY_5000_MILISECONDS))
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d807      	bhi.n	80016cc <appSetSamplingInterval+0x26>
	{
		samplingSetSamplingInterval(&app->sampling, samplingInterval);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	4611      	mov	r1, r2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f001 fbac 	bl	8002e24 <samplingSetSamplingInterval>
	}
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <appGetMovingAverageFilterWindow>:

uint16_t appGetMovingAverageFilterWindow(App *app)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	return movingAverageGetWindow(&app->movingAverageFilter);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016e2:	4618      	mov	r0, r3
 80016e4:	f005 ff5e 	bl	80075a4 <movingAverageGetWindow>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <appSetMovingAverageFilterWindow>:

void appSetMovingAverageFilterWindow(App *app, uint16_t movingAverageFilterWindow)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	460b      	mov	r3, r1
 80016fc:	807b      	strh	r3, [r7, #2]
	movingAverageSetWindow(&app->movingAverageFilter, movingAverageFilterWindow);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001704:	887a      	ldrh	r2, [r7, #2]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f005 ff57 	bl	80075bc <movingAverageSetWindow>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <appSetEnableSendKeepAliveMessage>:
{
	return commGetEnableSendKeepAliveMessage(&app->comm);
}

void appSetEnableSendKeepAliveMessage(App *app, Bool status)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	70fb      	strb	r3, [r7, #3]
	commSetEnableSendKeepAliveMessage(&app->comm, status);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3310      	adds	r3, #16
 8001726:	78fa      	ldrb	r2, [r7, #3]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f001 f8a8 	bl	8002880 <commSetEnableSendKeepAliveMessage>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <appGetBlinkDelay>:

uint32_t appGetBlinkDelay(App *app)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	return blinkLedGetBlinkDelay(&app->blinkLed);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f964 	bl	8001a10 <blinkLedGetBlinkDelay>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <blinkLedInit>:

#include "blinkLed.h"

// ======== Init =========== //
void blinkLedInit(BlinkLed *blinkLed, GPIO_TypeDef* ledPort, uint16_t ledPin, uint8_t blinkPattern)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	4611      	mov	r1, r2
 800175e:	461a      	mov	r2, r3
 8001760:	460b      	mov	r3, r1
 8001762:	80fb      	strh	r3, [r7, #6]
 8001764:	4613      	mov	r3, r2
 8001766:	717b      	strb	r3, [r7, #5]
	blinkLed->ledPort = ledPort;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	609a      	str	r2, [r3, #8]
	blinkLed->ledPin = ledPin;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	88fa      	ldrh	r2, [r7, #6]
 8001772:	819a      	strh	r2, [r3, #12]
	blinkLed->blinkPattern = blinkPattern;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	797a      	ldrb	r2, [r7, #5]
 8001778:	715a      	strb	r2, [r3, #5]
	blinkLed->counter = 0;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	711a      	strb	r2, [r3, #4]
	HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6898      	ldr	r0, [r3, #8]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	899b      	ldrh	r3, [r3, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	4619      	mov	r1, r3
 800178c:	f003 fc3e 	bl	800500c <HAL_GPIO_WritePin>
	blinkLedSetBlinkDelay(blinkLed, DELAY_100_MILISECONDS);
 8001790:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 f947 	bl	8001a28 <blinkLedSetBlinkDelay>
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <blinkLedExecuteBlink>:

// ======== LED =========== //
void blinkLedExecuteBlink(BlinkLed *blinkLed)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	switch (blinkLedGetBlinkPattern(blinkLed))
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f964 	bl	8001a7a <blinkLedGetBlinkPattern>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	f200 8127 	bhi.w	8001a08 <blinkLedExecuteBlink+0x264>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <blinkLedExecuteBlink+0x1c>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	080017d9 	.word	0x080017d9
 80017c4:	08001811 	.word	0x08001811
 80017c8:	08001849 	.word	0x08001849
 80017cc:	0800194f 	.word	0x0800194f
 80017d0:	0800182d 	.word	0x0800182d
 80017d4:	080017f5 	.word	0x080017f5
	{
		case PATTERN_ALWAYS_OFF:
			HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6898      	ldr	r0, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	899b      	ldrh	r3, [r3, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	4619      	mov	r1, r3
 80017e4:	f003 fc12 	bl	800500c <HAL_GPIO_WritePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80017e8:	f241 3188 	movw	r1, #5000	; 0x1388
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f91b 	bl	8001a28 <blinkLedSetBlinkDelay>
			break;
 80017f2:	e109      	b.n	8001a08 <blinkLedExecuteBlink+0x264>

		case PATTERN_ALWAYS_ON:
			HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6898      	ldr	r0, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	899b      	ldrh	r3, [r3, #12]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4619      	mov	r1, r3
 8001800:	f003 fc04 	bl	800500c <HAL_GPIO_WritePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 8001804:	f241 3188 	movw	r1, #5000	; 0x1388
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f90d 	bl	8001a28 <blinkLedSetBlinkDelay>
			break;
 800180e:	e0fb      	b.n	8001a08 <blinkLedExecuteBlink+0x264>

		case PATTERN_TOGGLE_EACH_100_MS:
			HAL_GPIO_TogglePin(blinkLed->ledPort, blinkLed->ledPin);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	899b      	ldrh	r3, [r3, #12]
 8001818:	4619      	mov	r1, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f003 fc0f 	bl	800503e <HAL_GPIO_TogglePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_100_MILISECONDS);
 8001820:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f8ff 	bl	8001a28 <blinkLedSetBlinkDelay>
			break;
 800182a:	e0ed      	b.n	8001a08 <blinkLedExecuteBlink+0x264>

		case PATTERN_TOGGLE_EACH_250_MS:
			HAL_GPIO_TogglePin(blinkLed->ledPort, blinkLed->ledPin);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	899b      	ldrh	r3, [r3, #12]
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f003 fc01 	bl	800503e <HAL_GPIO_TogglePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 800183c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f8f1 	bl	8001a28 <blinkLedSetBlinkDelay>
			break;
 8001846:	e0df      	b.n	8001a08 <blinkLedExecuteBlink+0x264>

		case PATTERN_SHORT_SHORT_LONG:
			switch (blinkLedGetCounter(blinkLed))
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 f8fb 	bl	8001a44 <blinkLedGetCounter>
 800184e:	4603      	mov	r3, r0
 8001850:	2b05      	cmp	r3, #5
 8001852:	f200 80d6 	bhi.w	8001a02 <blinkLedExecuteBlink+0x25e>
 8001856:	a201      	add	r2, pc, #4	; (adr r2, 800185c <blinkLedExecuteBlink+0xb8>)
 8001858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185c:	08001875 	.word	0x08001875
 8001860:	08001899 	.word	0x08001899
 8001864:	080018bd 	.word	0x080018bd
 8001868:	080018e1 	.word	0x080018e1
 800186c:	08001905 	.word	0x08001905
 8001870:	08001929 	.word	0x08001929
			{
				case 0:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6898      	ldr	r0, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	899b      	ldrh	r3, [r3, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	4619      	mov	r1, r3
 8001880:	f003 fbc4 	bl	800500c <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 8001884:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f8cd 	bl	8001a28 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 1);
 800188e:	2101      	movs	r1, #1
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 f8e3 	bl	8001a5c <blinkLedSetCounter>
					break;
 8001896:	e059      	b.n	800194c <blinkLedExecuteBlink+0x1a8>

				case 1:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6898      	ldr	r0, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	899b      	ldrh	r3, [r3, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	4619      	mov	r1, r3
 80018a4:	f003 fbb2 	bl	800500c <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 80018a8:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f8bb 	bl	8001a28 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 2);
 80018b2:	2102      	movs	r1, #2
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f8d1 	bl	8001a5c <blinkLedSetCounter>
					break;
 80018ba:	e047      	b.n	800194c <blinkLedExecuteBlink+0x1a8>

				case 2:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6898      	ldr	r0, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	899b      	ldrh	r3, [r3, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	4619      	mov	r1, r3
 80018c8:	f003 fba0 	bl	800500c <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 80018cc:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f8a9 	bl	8001a28 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 3);
 80018d6:	2103      	movs	r1, #3
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f8bf 	bl	8001a5c <blinkLedSetCounter>
					break;
 80018de:	e035      	b.n	800194c <blinkLedExecuteBlink+0x1a8>

				case 3:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6898      	ldr	r0, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	899b      	ldrh	r3, [r3, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	4619      	mov	r1, r3
 80018ec:	f003 fb8e 	bl	800500c <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 80018f0:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f897 	bl	8001a28 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 4);
 80018fa:	2104      	movs	r1, #4
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f8ad 	bl	8001a5c <blinkLedSetCounter>
					break;
 8001902:	e023      	b.n	800194c <blinkLedExecuteBlink+0x1a8>

				case 4:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6898      	ldr	r0, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	899b      	ldrh	r3, [r3, #12]
 800190c:	2201      	movs	r2, #1
 800190e:	4619      	mov	r1, r3
 8001910:	f003 fb7c 	bl	800500c <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_750_MILISECONDS);
 8001914:	f641 514c 	movw	r1, #7500	; 0x1d4c
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f885 	bl	8001a28 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 5);
 800191e:	2105      	movs	r1, #5
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f89b 	bl	8001a5c <blinkLedSetCounter>
					break;
 8001926:	e011      	b.n	800194c <blinkLedExecuteBlink+0x1a8>

				case 5:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6898      	ldr	r0, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	899b      	ldrh	r3, [r3, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	4619      	mov	r1, r3
 8001934:	f003 fb6a 	bl	800500c <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 8001938:	f241 3188 	movw	r1, #5000	; 0x1388
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f873 	bl	8001a28 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 0);
 8001942:	2100      	movs	r1, #0
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f889 	bl	8001a5c <blinkLedSetCounter>
					break;
 800194a:	bf00      	nop
			}
			break;
 800194c:	e059      	b.n	8001a02 <blinkLedExecuteBlink+0x25e>

		case PATTERN_HEART_BEAT:
			switch (blinkLedGetCounter(blinkLed))
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f878 	bl	8001a44 <blinkLedGetCounter>
 8001954:	4603      	mov	r3, r0
 8001956:	2b03      	cmp	r3, #3
 8001958:	d855      	bhi.n	8001a06 <blinkLedExecuteBlink+0x262>
 800195a:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <blinkLedExecuteBlink+0x1bc>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	08001971 	.word	0x08001971
 8001964:	08001995 	.word	0x08001995
 8001968:	080019b9 	.word	0x080019b9
 800196c:	080019dd 	.word	0x080019dd
			{
				case 0:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6898      	ldr	r0, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	899b      	ldrh	r3, [r3, #12]
 8001978:	2201      	movs	r2, #1
 800197a:	4619      	mov	r1, r3
 800197c:	f003 fb46 	bl	800500c <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_200_MILISECONDS);
 8001980:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f84f 	bl	8001a28 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 1);
 800198a:	2101      	movs	r1, #1
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f865 	bl	8001a5c <blinkLedSetCounter>
					break;
 8001992:	e035      	b.n	8001a00 <blinkLedExecuteBlink+0x25c>

				case 1:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6898      	ldr	r0, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	899b      	ldrh	r3, [r3, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	f003 fb34 	bl	800500c <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_150_MILISECONDS);
 80019a4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f83d 	bl	8001a28 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 2);
 80019ae:	2102      	movs	r1, #2
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f853 	bl	8001a5c <blinkLedSetCounter>
					break;
 80019b6:	e023      	b.n	8001a00 <blinkLedExecuteBlink+0x25c>

				case 2:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6898      	ldr	r0, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	899b      	ldrh	r3, [r3, #12]
 80019c0:	2201      	movs	r2, #1
 80019c2:	4619      	mov	r1, r3
 80019c4:	f003 fb22 	bl	800500c <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80019c8:	f241 3188 	movw	r1, #5000	; 0x1388
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f82b 	bl	8001a28 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 3);
 80019d2:	2103      	movs	r1, #3
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f841 	bl	8001a5c <blinkLedSetCounter>
					break;
 80019da:	e011      	b.n	8001a00 <blinkLedExecuteBlink+0x25c>

				case 3:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6898      	ldr	r0, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	899b      	ldrh	r3, [r3, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	4619      	mov	r1, r3
 80019e8:	f003 fb10 	bl	800500c <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_400_MILISECONDS);
 80019ec:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f819 	bl	8001a28 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 0);
 80019f6:	2100      	movs	r1, #0
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f82f 	bl	8001a5c <blinkLedSetCounter>
					break;
 80019fe:	bf00      	nop
			}
			break;
 8001a00:	e001      	b.n	8001a06 <blinkLedExecuteBlink+0x262>
			break;
 8001a02:	bf00      	nop
 8001a04:	e000      	b.n	8001a08 <blinkLedExecuteBlink+0x264>
			break;
 8001a06:	bf00      	nop
	}
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <blinkLedGetBlinkDelay>:

// ======= Getters and Setters ======== //
uint32_t blinkLedGetBlinkDelay(BlinkLed *blinkLed)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	return blinkLed->blinkDelay;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <blinkLedSetBlinkDelay>:

void blinkLedSetBlinkDelay(BlinkLed *blinkLed, uint32_t blinkDelay)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	blinkLed->blinkDelay = blinkDelay;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	601a      	str	r2, [r3, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <blinkLedGetCounter>:

uint8_t blinkLedGetCounter(BlinkLed *blinkLed)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	return blinkLed->counter;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	791b      	ldrb	r3, [r3, #4]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <blinkLedSetCounter>:

void blinkLedSetCounter(BlinkLed *blinkLed, uint8_t counter)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
	blinkLed->counter = counter;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	78fa      	ldrb	r2, [r7, #3]
 8001a6c:	711a      	strb	r2, [r3, #4]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <blinkLedGetBlinkPattern>:

uint8_t blinkLedGetBlinkPattern(BlinkLed *blinkLed)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
	return blinkLed->blinkPattern;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	795b      	ldrb	r3, [r3, #5]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <blinkLedSetBlinkPattern>:

void blinkLedSetBlinkPattern(BlinkLed *blinkLed, uint8_t blinkPattern)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	70fb      	strb	r3, [r7, #3]
	blinkLed->blinkPattern = blinkPattern;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	715a      	strb	r2, [r3, #5]
	blinkLedSetCounter(blinkLed, 0);
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffd8 	bl	8001a5c <blinkLedSetCounter>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <commInit>:

#include "comm.h"

// ======== Init ======== //
void commInit(Comm *comm, UART_HandleTypeDef huart, UART_HandleTypeDef huartDebug)
{
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	f107 0014 	add.w	r0, r7, #20
 8001ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// ======== UART =========== //
	comm->huart = huart;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	2244      	movs	r2, #68	; 0x44
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f006 f8df 	bl	8007c94 <memcpy>
	comm->huartDebug = huartDebug;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3344      	adds	r3, #68	; 0x44
 8001ada:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001ade:	2244      	movs	r2, #68	; 0x44
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f006 f8d7 	bl	8007c94 <memcpy>

	// ======== Data Packet Tx =========== //
	dataPacketTxInit(&comm->dataPacketTx, 0xAA, 0x55);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3388      	adds	r3, #136	; 0x88
 8001aea:	2255      	movs	r2, #85	; 0x55
 8001aec:	21aa      	movs	r1, #170	; 0xaa
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 f8da 	bl	8003ca8 <dataPacketTxInit>
	commSetEnableSendProcessVariable(comm, FALSE);
 8001af4:	2100      	movs	r1, #0
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fe6b 	bl	80027d2 <commSetEnableSendProcessVariable>
	commSetEnableSendCurrentConfigDataValues(comm, FALSE);
 8001afc:	2100      	movs	r1, #0
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 fe84 	bl	800280c <commSetEnableSendCurrentConfigDataValues>
	commSetEnableSendCurrentPidSetpointValue(comm, FALSE);
 8001b04:	2100      	movs	r1, #0
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fe9d 	bl	8002846 <commSetEnableSendCurrentPidSetpointValue>
	commSetEnableSendKeepAliveMessage(comm,  FALSE);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 feb6 	bl	8002880 <commSetEnableSendKeepAliveMessage>

	// ======== Data Packet Rx =========== //
	dataPacketRxInit(&comm->dataPacketRx, 0xAA, 0x55);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	33fe      	adds	r3, #254	; 0xfe
 8001b18:	2255      	movs	r2, #85	; 0x55
 8001b1a:	21aa      	movs	r1, #170	; 0xaa
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fef7 	bl	8003910 <dataPacketRxInit>
	commSetDecodeCommandStatus(comm, FALSE);
 8001b22:	2100      	movs	r1, #0
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fec8 	bl	80028ba <commSetDecodeCommandStatus>
	commSetCommand(comm, 0x00);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fee1 	bl	80028f4 <commSetCommand>
	commClearData(comm);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fbae 	bl	8002294 <commClearData>
	commSetDataLenght(comm, 0);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 feea 	bl	8002914 <commSetDataLenght>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b4a:	b004      	add	sp, #16
 8001b4c:	4770      	bx	lr

08001b4e <commTrySendData>:

// ======== TX - Data Packet =========== //
void commTrySendData(Comm *comm, App *app)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
	if (commGetEnableSendCurrentConfigDataValues(comm) == TRUE)
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 fe4a 	bl	80027f2 <commGetEnableSendCurrentConfigDataValues>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <commTrySendData+0x28>
	{
		commSendCurrentConfigDataValues(comm, app);
 8001b64:	6839      	ldr	r1, [r7, #0]
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f832 	bl	8001bd0 <commSendCurrentConfigDataValues>
		commSetEnableSendCurrentConfigDataValues(comm, FALSE);
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fe4c 	bl	800280c <commSetEnableSendCurrentConfigDataValues>
	}
	else if (commGetEnableSendProcessVariable(comm) == TRUE)
	{
		commSendProcessVariable(comm, app);
	}
}
 8001b74:	e027      	b.n	8001bc6 <commTrySendData+0x78>
	else if (commGetEnableSendCurrentPidSetpointValue(comm) == TRUE)
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 fe58 	bl	800282c <commGetEnableSendCurrentPidSetpointValue>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <commTrySendData+0x46>
		commSendCurrentPidSetpointValue(comm, app);
 8001b82:	6839      	ldr	r1, [r7, #0]
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f9e3 	bl	8001f50 <commSendCurrentPidSetpointValue>
		commSetEnableSendCurrentPidSetpointValue(comm, FALSE);
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fe5a 	bl	8002846 <commSetEnableSendCurrentPidSetpointValue>
}
 8001b92:	e018      	b.n	8001bc6 <commTrySendData+0x78>
	else if (commGetEnableSendKeepAliveMessage(comm) == TRUE)
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fe66 	bl	8002866 <commGetEnableSendKeepAliveMessage>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d108      	bne.n	8001bb2 <commTrySendData+0x64>
		commSendKeepAliveMessage(comm, app);
 8001ba0:	6839      	ldr	r1, [r7, #0]
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 fa60 	bl	8002068 <commSendKeepAliveMessage>
		commSetEnableSendKeepAliveMessage(comm, FALSE);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fe68 	bl	8002880 <commSetEnableSendKeepAliveMessage>
}
 8001bb0:	e009      	b.n	8001bc6 <commTrySendData+0x78>
	else if (commGetEnableSendProcessVariable(comm) == TRUE)
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 fe00 	bl	80027b8 <commGetEnableSendProcessVariable>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d103      	bne.n	8001bc6 <commTrySendData+0x78>
		commSendProcessVariable(comm, app);
 8001bbe:	6839      	ldr	r1, [r7, #0]
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fac7 	bl	8002154 <commSendProcessVariable>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <commSendCurrentConfigDataValues>:

void commSendCurrentConfigDataValues(Comm *comm, App *app)
{
 8001bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bd4:	b09e      	sub	sp, #120	; 0x78
 8001bd6:	af0e      	add	r7, sp, #56	; 0x38
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	6039      	str	r1, [r7, #0]
 8001bdc:	466b      	mov	r3, sp
 8001bde:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 42;
 8001be0:	232a      	movs	r3, #42	; 0x2a
 8001be2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t bytes[qtyOfBytes];
 8001be6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001bea:	460b      	mov	r3, r1
 8001bec:	3b01      	subs	r3, #1
 8001bee:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bf0:	b2cb      	uxtb	r3, r1
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4698      	mov	r8, r3
 8001bf6:	4691      	mov	r9, r2
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c0c:	b2cb      	uxtb	r3, r1
 8001c0e:	2200      	movs	r2, #0
 8001c10:	461c      	mov	r4, r3
 8001c12:	4615      	mov	r5, r2
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	00eb      	lsls	r3, r5, #3
 8001c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c22:	00e2      	lsls	r2, r4, #3
 8001c24:	460b      	mov	r3, r1
 8001c26:	3307      	adds	r3, #7
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	ebad 0d03 	sub.w	sp, sp, r3
 8001c30:	ab0e      	add	r3, sp, #56	; 0x38
 8001c32:	3300      	adds	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t kpTimes1000 = (uint32_t) (1000 * appGetPidKp(app));
 8001c36:	6838      	ldr	r0, [r7, #0]
 8001c38:	f7ff fb28 	bl	800128c <appGetPidKp>
 8001c3c:	eef0 7a40 	vmov.f32	s15, s0
 8001c40:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8001ef8 <commSendCurrentConfigDataValues+0x328>
 8001c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4c:	ee17 3a90 	vmov	r3, s15
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t kiTimes1000 = (uint32_t) (1000 * appGetPidKi(app));
 8001c52:	6838      	ldr	r0, [r7, #0]
 8001c54:	f7ff fb3d 	bl	80012d2 <appGetPidKi>
 8001c58:	eef0 7a40 	vmov.f32	s15, s0
 8001c5c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001ef8 <commSendCurrentConfigDataValues+0x328>
 8001c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c68:	ee17 3a90 	vmov	r3, s15
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t kdTimes1000 = (uint32_t) (1000 * appGetPidKd(app));
 8001c6e:	6838      	ldr	r0, [r7, #0]
 8001c70:	f7ff fb52 	bl	8001318 <appGetPidKd>
 8001c74:	eef0 7a40 	vmov.f32	s15, s0
 8001c78:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8001ef8 <commSendCurrentConfigDataValues+0x328>
 8001c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c84:	ee17 3a90 	vmov	r3, s15
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t pidInterval = (uint16_t) appGetPidInterval(app);
 8001c8a:	6838      	ldr	r0, [r7, #0]
 8001c8c:	f7ff fb68 	bl	8001360 <appGetPidInterval>
 8001c90:	4603      	mov	r3, r0
 8001c92:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t samplingInterval = appGetSamplingInterval(app);
 8001c94:	6838      	ldr	r0, [r7, #0]
 8001c96:	f7ff fcf7 	bl	8001688 <appGetSamplingInterval>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t movingAverageWindow = appGetMovingAverageFilterWindow(app);
 8001c9e:	6838      	ldr	r0, [r7, #0]
 8001ca0:	f7ff fd18 	bl	80016d4 <appGetMovingAverageFilterWindow>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t minSumOfErrors = (uint32_t) (appGetPidMinSumOfErrors(app) + 1000000000);
 8001ca8:	6838      	ldr	r0, [r7, #0]
 8001caa:	f7ff fb97 	bl	80013dc <appGetPidMinSumOfErrors>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4b92      	ldr	r3, [pc, #584]	; (8001efc <commSendCurrentConfigDataValues+0x32c>)
 8001cb2:	4413      	add	r3, r2
 8001cb4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSumOfErrors = (uint32_t) (appGetPidMaxSumOfErrors(app) + 1000000000);
 8001cb6:	6838      	ldr	r0, [r7, #0]
 8001cb8:	f7ff fbaf 	bl	800141a <appGetPidMaxSumOfErrors>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b8f      	ldr	r3, [pc, #572]	; (8001efc <commSendCurrentConfigDataValues+0x32c>)
 8001cc0:	4413      	add	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
	uint32_t minControlledVariable = (uint32_t) (appGetPidMinControlledVariable(app) + 1000000000);
 8001cc4:	6838      	ldr	r0, [r7, #0]
 8001cc6:	f7ff fbc7 	bl	8001458 <appGetPidMinControlledVariable>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4b8b      	ldr	r3, [pc, #556]	; (8001efc <commSendCurrentConfigDataValues+0x32c>)
 8001cce:	4413      	add	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]
	uint32_t maxControlledVariable = (uint32_t) (appGetPidMaxControlledVariable(app) + 1000000000);
 8001cd2:	6838      	ldr	r0, [r7, #0]
 8001cd4:	f7ff fbdf 	bl	8001496 <appGetPidMaxControlledVariable>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b88      	ldr	r3, [pc, #544]	; (8001efc <commSendCurrentConfigDataValues+0x32c>)
 8001cdc:	4413      	add	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
	uint32_t offset = (uint32_t) ((appGetPidOffset(app) * 1000) + 1000000);
 8001ce0:	6838      	ldr	r0, [r7, #0]
 8001ce2:	f7ff fbf7 	bl	80014d4 <appGetPidOffset>
 8001ce6:	eef0 7a40 	vmov.f32	s15, s0
 8001cea:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001ef8 <commSendCurrentConfigDataValues+0x328>
 8001cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf2:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001f00 <commSendCurrentConfigDataValues+0x330>
 8001cf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cfe:	ee17 3a90 	vmov	r3, s15
 8001d02:	60fb      	str	r3, [r7, #12]
	uint32_t bias = (uint32_t) ((appGetPidBias(app) * 1000) + 1000000);
 8001d04:	6838      	ldr	r0, [r7, #0]
 8001d06:	f7ff fc08 	bl	800151a <appGetPidBias>
 8001d0a:	eef0 7a40 	vmov.f32	s15, s0
 8001d0e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001ef8 <commSendCurrentConfigDataValues+0x328>
 8001d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d16:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001f00 <commSendCurrentConfigDataValues+0x330>
 8001d1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d22:	ee17 3a90 	vmov	r3, s15
 8001d26:	60bb      	str	r3, [r7, #8]

	/************* Kp *************/
	bytes[0] = ((kpTimes1000 >> 24) & 0x000000FF);
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	0e1b      	lsrs	r3, r3, #24
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d30:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((kpTimes1000 >> 16) & 0x000000FF);
 8001d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3a:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((kpTimes1000 >> 8) & 0x000000FF);
 8001d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d44:	709a      	strb	r2, [r3, #2]
	bytes[3] = (kpTimes1000 & 0x000000FF);
 8001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4c:	70da      	strb	r2, [r3, #3]

	/************* Ki *************/
	bytes[4] = ((kiTimes1000 >> 24) & 0x000000FF);
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	0e1b      	lsrs	r3, r3, #24
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d56:	711a      	strb	r2, [r3, #4]
	bytes[5] = ((kiTimes1000 >> 16) & 0x000000FF);
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	0c1b      	lsrs	r3, r3, #16
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d60:	715a      	strb	r2, [r3, #5]
	bytes[6] = ((kiTimes1000 >> 8) & 0x000000FF);
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	719a      	strb	r2, [r3, #6]
	bytes[7] = (kiTimes1000 & 0x000000FF);
 8001d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	71da      	strb	r2, [r3, #7]

	/************* Kd *************/
	bytes[8] = ((kdTimes1000 >> 24) & 0x000000FF);
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	0e1b      	lsrs	r3, r3, #24
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7c:	721a      	strb	r2, [r3, #8]
	bytes[9] = ((kdTimes1000 >> 16) & 0x000000FF);
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d80:	0c1b      	lsrs	r3, r3, #16
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d86:	725a      	strb	r2, [r3, #9]
	bytes[10] = ((kdTimes1000 >> 8) & 0x000000FF);
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d90:	729a      	strb	r2, [r3, #10]
	bytes[11] = (kdTimes1000 & 0x000000FF);
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d98:	72da      	strb	r2, [r3, #11]

	/************* Pid Interval *************/
	bytes[12] = ((pidInterval >> 8) & 0x00FF);
 8001d9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da4:	731a      	strb	r2, [r3, #12]
	bytes[13] = (pidInterval & 0x00FF);
 8001da6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dac:	735a      	strb	r2, [r3, #13]

	/************* Sampling Interval *************/
	bytes[14] = ((samplingInterval >> 8) & 0x00FF);
 8001dae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db8:	739a      	strb	r2, [r3, #14]
	bytes[15] = (samplingInterval & 0x00FF);
 8001dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc0:	73da      	strb	r2, [r3, #15]

	/************* Moving Average Window *************/
	bytes[16] = ((movingAverageWindow >> 8) & 0x00FF);
 8001dc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dcc:	741a      	strb	r2, [r3, #16]
	bytes[17] = (movingAverageWindow & 0x00FF);
 8001dce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd4:	745a      	strb	r2, [r3, #17]

	/************* Min Sum Of Errors *************/
	bytes[18] = ((minSumOfErrors >> 24) & 0x000000FF);
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	0e1b      	lsrs	r3, r3, #24
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dde:	749a      	strb	r2, [r3, #18]
	bytes[19] = ((minSumOfErrors >> 16) & 0x000000FF);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	0c1b      	lsrs	r3, r3, #16
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de8:	74da      	strb	r2, [r3, #19]
	bytes[20] = ((minSumOfErrors >> 8) & 0x000000FF);
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df2:	751a      	strb	r2, [r3, #20]
	bytes[21] = (minSumOfErrors & 0x000000FF);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfa:	755a      	strb	r2, [r3, #21]

	/************* Max Sum Of Errors *************/
	bytes[22] = ((maxSumOfErrors >> 24) & 0x000000FF);
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	0e1b      	lsrs	r3, r3, #24
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e04:	759a      	strb	r2, [r3, #22]
	bytes[23] = ((maxSumOfErrors >> 16) & 0x000000FF);
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0e:	75da      	strb	r2, [r3, #23]
	bytes[24] = ((maxSumOfErrors >> 8) & 0x000000FF);
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e18:	761a      	strb	r2, [r3, #24]
	bytes[25] = (maxSumOfErrors & 0x000000FF);
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e20:	765a      	strb	r2, [r3, #25]

	/************* Min Controlled Variable *************/
	bytes[26] = ((minControlledVariable >> 24) & 0x000000FF);
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	0e1b      	lsrs	r3, r3, #24
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2a:	769a      	strb	r2, [r3, #26]
	bytes[27] = ((minControlledVariable >> 16) & 0x000000FF);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e34:	76da      	strb	r2, [r3, #27]
	bytes[28] = ((minControlledVariable >> 8) & 0x000000FF);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3e:	771a      	strb	r2, [r3, #28]
	bytes[29] = (minControlledVariable & 0x000000FF);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e46:	775a      	strb	r2, [r3, #29]

	/************* Max Controlled Variable *************/
	bytes[30] = ((maxControlledVariable >> 24) & 0x000000FF);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	0e1b      	lsrs	r3, r3, #24
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e50:	779a      	strb	r2, [r3, #30]
	bytes[31] = ((maxControlledVariable >> 16) & 0x000000FF);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5a:	77da      	strb	r2, [r3, #31]
	bytes[32] = ((maxControlledVariable >> 8) & 0x000000FF);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e64:	f883 2020 	strb.w	r2, [r3, #32]
	bytes[33] = (maxControlledVariable & 0x000000FF);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/************* Offset *************/
	bytes[34] = ((offset >> 24) & 0x000000FF);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0e1b      	lsrs	r3, r3, #24
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	bytes[35] = ((offset >> 16) & 0x000000FF);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e86:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	bytes[36] = ((offset >> 8) & 0x000000FF);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	bytes[37] = (offset & 0x000000FF);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	/************* Bias *************/
	bytes[38] = ((bias >> 24) & 0x000000FF);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	0e1b      	lsrs	r3, r3, #24
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	bytes[39] = ((bias >> 16) & 0x000000FF);
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	bytes[40] = ((bias >> 8) & 0x000000FF);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	bytes[41] = (bias & 0x000000FF);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_CURRENT_CONFIG_DATA_VALUES);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3388      	adds	r3, #136	; 0x88
 8001ed2:	2180      	movs	r1, #128	; 0x80
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 ffc4 	bl	8003e62 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3388      	adds	r3, #136	; 0x88
 8001ede:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001ee2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f001 ffd6 	bl	8003e96 <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3388      	adds	r3, #136	; 0x88
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 ff0c 	bl	8003d0c <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	e005      	b.n	8001f04 <commSendCurrentConfigDataValues+0x334>
 8001ef8:	447a0000 	.word	0x447a0000
 8001efc:	3b9aca00 	.word	0x3b9aca00
 8001f00:	49742400 	.word	0x49742400
 8001f04:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 8001f08:	687e      	ldr	r6, [r7, #4]
 8001f0a:	466d      	mov	r5, sp
 8001f0c:	f106 040c 	add.w	r4, r6, #12
 8001f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f20:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f24:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001f28:	4660      	mov	r0, ip
 8001f2a:	f001 ff3d 	bl	8003da8 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3388      	adds	r3, #136	; 0x88
 8001f32:	4618      	mov	r0, r3
 8001f34:	f001 ff77 	bl	8003e26 <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3388      	adds	r3, #136	; 0x88
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f001 ff54 	bl	8003dea <dataPacketTxClear>
 8001f42:	46d5      	mov	sp, sl
}
 8001f44:	bf00      	nop
 8001f46:	3740      	adds	r7, #64	; 0x40
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f4e:	bf00      	nop

08001f50 <commSendCurrentPidSetpointValue>:

void commSendCurrentPidSetpointValue(Comm *comm, App *app)
{
 8001f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f54:	b094      	sub	sp, #80	; 0x50
 8001f56:	af0e      	add	r7, sp, #56	; 0x38
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
 8001f5c:	466b      	mov	r3, sp
 8001f5e:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 4;
 8001f60:	2304      	movs	r3, #4
 8001f62:	75fb      	strb	r3, [r7, #23]
	uint8_t bytes[qtyOfBytes];
 8001f64:	7df9      	ldrb	r1, [r7, #23]
 8001f66:	460b      	mov	r3, r1
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	b2cb      	uxtb	r3, r1
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4698      	mov	r8, r3
 8001f72:	4691      	mov	r9, r2
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f88:	b2cb      	uxtb	r3, r1
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	461c      	mov	r4, r3
 8001f8e:	4615      	mov	r5, r2
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	00eb      	lsls	r3, r5, #3
 8001f9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f9e:	00e2      	lsls	r2, r4, #3
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	3307      	adds	r3, #7
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fac:	ab0e      	add	r3, sp, #56	; 0x38
 8001fae:	3300      	adds	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
	uint32_t setpointTimes1000 = (uint32_t)(1000 * appGetPidSetpoint(app));
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	f7ff fad4 	bl	8001560 <appGetPidSetpoint>
 8001fb8:	eef0 7a40 	vmov.f32	s15, s0
 8001fbc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002064 <commSendCurrentPidSetpointValue+0x114>
 8001fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc8:	ee17 3a90 	vmov	r3, s15
 8001fcc:	60bb      	str	r3, [r7, #8]

	bytes[0] = ((setpointTimes1000 >> 24) & 0x000000FF);
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	0e1b      	lsrs	r3, r3, #24
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((setpointTimes1000 >> 16) & 0x000000FF);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	0c1b      	lsrs	r3, r3, #16
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((setpointTimes1000 >> 8) & 0x000000FF);
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	709a      	strb	r2, [r3, #2]
	bytes[3] = (setpointTimes1000 & 0x000000FF);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	70da      	strb	r2, [r3, #3]

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_CURRENT_PID_SETPOINT);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3388      	adds	r3, #136	; 0x88
 8001ff8:	2181      	movs	r1, #129	; 0x81
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f001 ff31 	bl	8003e62 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3388      	adds	r3, #136	; 0x88
 8002004:	7dfa      	ldrb	r2, [r7, #23]
 8002006:	68f9      	ldr	r1, [r7, #12]
 8002008:	4618      	mov	r0, r3
 800200a:	f001 ff44 	bl	8003e96 <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3388      	adds	r3, #136	; 0x88
 8002012:	4618      	mov	r0, r3
 8002014:	f001 fe7a 	bl	8003d0c <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 800201e:	687e      	ldr	r6, [r7, #4]
 8002020:	466d      	mov	r5, sp
 8002022:	f106 040c 	add.w	r4, r6, #12
 8002026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002032:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002036:	e885 0003 	stmia.w	r5, {r0, r1}
 800203a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800203e:	4660      	mov	r0, ip
 8002040:	f001 feb2 	bl	8003da8 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3388      	adds	r3, #136	; 0x88
 8002048:	4618      	mov	r0, r3
 800204a:	f001 feec 	bl	8003e26 <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3388      	adds	r3, #136	; 0x88
 8002052:	4618      	mov	r0, r3
 8002054:	f001 fec9 	bl	8003dea <dataPacketTxClear>
 8002058:	46d5      	mov	sp, sl
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002064:	447a0000 	.word	0x447a0000

08002068 <commSendKeepAliveMessage>:

void commSendKeepAliveMessage(Comm *comm, App *app)
{
 8002068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800206c:	b094      	sub	sp, #80	; 0x50
 800206e:	af0e      	add	r7, sp, #56	; 0x38
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
 8002074:	466b      	mov	r3, sp
 8002076:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 1;
 8002078:	2301      	movs	r3, #1
 800207a:	75fb      	strb	r3, [r7, #23]
	uint8_t bytes[qtyOfBytes];
 800207c:	7df9      	ldrb	r1, [r7, #23]
 800207e:	460b      	mov	r3, r1
 8002080:	3b01      	subs	r3, #1
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	b2cb      	uxtb	r3, r1
 8002086:	2200      	movs	r2, #0
 8002088:	4698      	mov	r8, r3
 800208a:	4691      	mov	r9, r2
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002098:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800209c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020a0:	b2cb      	uxtb	r3, r1
 80020a2:	2200      	movs	r2, #0
 80020a4:	461c      	mov	r4, r3
 80020a6:	4615      	mov	r5, r2
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	00eb      	lsls	r3, r5, #3
 80020b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020b6:	00e2      	lsls	r2, r4, #3
 80020b8:	460b      	mov	r3, r1
 80020ba:	3307      	adds	r3, #7
 80020bc:	08db      	lsrs	r3, r3, #3
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	ebad 0d03 	sub.w	sp, sp, r3
 80020c4:	ab0e      	add	r3, sp, #56	; 0x38
 80020c6:	3300      	adds	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]

	if (appGetRunPidControllerStatus(app) == TRUE)
 80020ca:	6838      	ldr	r0, [r7, #0]
 80020cc:	f7ff faad 	bl	800162a <appGetRunPidControllerStatus>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d103      	bne.n	80020de <commSendKeepAliveMessage+0x76>
	{
		bytes[0] = RUN;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	e002      	b.n	80020e4 <commSendKeepAliveMessage+0x7c>
	}
	else
	{
		bytes[0] = HALT;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
	}

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_KEEP_ALIVE_MESSAGE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3388      	adds	r3, #136	; 0x88
 80020e8:	2183      	movs	r1, #131	; 0x83
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 feb9 	bl	8003e62 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3388      	adds	r3, #136	; 0x88
 80020f4:	7dfa      	ldrb	r2, [r7, #23]
 80020f6:	68f9      	ldr	r1, [r7, #12]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f001 fecc 	bl	8003e96 <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3388      	adds	r3, #136	; 0x88
 8002102:	4618      	mov	r0, r3
 8002104:	f001 fe02 	bl	8003d0c <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 800210e:	687e      	ldr	r6, [r7, #4]
 8002110:	466d      	mov	r5, sp
 8002112:	f106 040c 	add.w	r4, r6, #12
 8002116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002122:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002126:	e885 0003 	stmia.w	r5, {r0, r1}
 800212a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800212e:	4660      	mov	r0, ip
 8002130:	f001 fe3a 	bl	8003da8 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3388      	adds	r3, #136	; 0x88
 8002138:	4618      	mov	r0, r3
 800213a:	f001 fe74 	bl	8003e26 <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3388      	adds	r3, #136	; 0x88
 8002142:	4618      	mov	r0, r3
 8002144:	f001 fe51 	bl	8003dea <dataPacketTxClear>
 8002148:	46d5      	mov	sp, sl
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002154 <commSendProcessVariable>:

void commSendProcessVariable(Comm *comm, App *app)
{
 8002154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002158:	b094      	sub	sp, #80	; 0x50
 800215a:	af0e      	add	r7, sp, #56	; 0x38
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
 8002160:	466b      	mov	r3, sp
 8002162:	469a      	mov	sl, r3
	uint32_t processVariableValue = (uint32_t) appGetPidProcessVariable(app);
 8002164:	6838      	ldr	r0, [r7, #0]
 8002166:	f7ff fa39 	bl	80015dc <appGetPidProcessVariable>
 800216a:	eef0 7a40 	vmov.f32	s15, s0
 800216e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002172:	ee17 3a90 	vmov	r3, s15
 8002176:	617b      	str	r3, [r7, #20]
	uint8_t qtyOfBytes = 4;
 8002178:	2304      	movs	r3, #4
 800217a:	74fb      	strb	r3, [r7, #19]
	uint8_t bytes[qtyOfBytes];
 800217c:	7cf9      	ldrb	r1, [r7, #19]
 800217e:	460b      	mov	r3, r1
 8002180:	3b01      	subs	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	b2cb      	uxtb	r3, r1
 8002186:	2200      	movs	r2, #0
 8002188:	4698      	mov	r8, r3
 800218a:	4691      	mov	r9, r2
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002198:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800219c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021a0:	b2cb      	uxtb	r3, r1
 80021a2:	2200      	movs	r2, #0
 80021a4:	461c      	mov	r4, r3
 80021a6:	4615      	mov	r5, r2
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	00eb      	lsls	r3, r5, #3
 80021b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021b6:	00e2      	lsls	r2, r4, #3
 80021b8:	460b      	mov	r3, r1
 80021ba:	3307      	adds	r3, #7
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	ebad 0d03 	sub.w	sp, sp, r3
 80021c4:	ab0e      	add	r3, sp, #56	; 0x38
 80021c6:	3300      	adds	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
	bytes[0] = ((processVariableValue >> 24) & 0x000000FF);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	0e1b      	lsrs	r3, r3, #24
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((processVariableValue >> 16) & 0x000000FF);
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((processVariableValue >> 8) & 0x000000FF);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	709a      	strb	r2, [r3, #2]
	bytes[3] = (processVariableValue & 0x000000FF);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	70da      	strb	r2, [r3, #3]

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_CURRENT_PROCESS_VARIABLE_VALUE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3388      	adds	r3, #136	; 0x88
 80021f4:	2182      	movs	r1, #130	; 0x82
 80021f6:	4618      	mov	r0, r3
 80021f8:	f001 fe33 	bl	8003e62 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3388      	adds	r3, #136	; 0x88
 8002200:	7cfa      	ldrb	r2, [r7, #19]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	4618      	mov	r0, r3
 8002206:	f001 fe46 	bl	8003e96 <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3388      	adds	r3, #136	; 0x88
 800220e:	4618      	mov	r0, r3
 8002210:	f001 fd7c 	bl	8003d0c <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 800221a:	687e      	ldr	r6, [r7, #4]
 800221c:	466d      	mov	r5, sp
 800221e:	f106 040c 	add.w	r4, r6, #12
 8002222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002232:	e885 0003 	stmia.w	r5, {r0, r1}
 8002236:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800223a:	4660      	mov	r0, ip
 800223c:	f001 fdb4 	bl	8003da8 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3388      	adds	r3, #136	; 0x88
 8002244:	4618      	mov	r0, r3
 8002246:	f001 fdee 	bl	8003e26 <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3388      	adds	r3, #136	; 0x88
 800224e:	4618      	mov	r0, r3
 8002250:	f001 fdcb 	bl	8003dea <dataPacketTxClear>
 8002254:	46d5      	mov	sp, sl
}
 8002256:	bf00      	nop
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002260 <commSetData>:

// ======== RX - Data Packet =========== //
void commSetData(Comm *comm, uint8_t *data, uint8_t dataLength)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	4613      	mov	r3, r2
 800226c:	71fb      	strb	r3, [r7, #7]
	if (dataLength <= QTY_DATA_BYTES)
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b32      	cmp	r3, #50	; 0x32
 8002272:	d80b      	bhi.n	800228c <commSetData+0x2c>
	{
		comm->dataLenght = dataLength;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	79fa      	ldrb	r2, [r7, #7]
 8002278:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
		memcpy(comm->data, data, dataLength);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002282:	79fa      	ldrb	r2, [r7, #7]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	4618      	mov	r0, r3
 8002288:	f005 fd04 	bl	8007c94 <memcpy>
	}
}
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <commClearData>:

void commClearData(Comm *comm)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	memset(comm->data, 0x00, QTY_DATA_BYTES);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80022a2:	2232      	movs	r2, #50	; 0x32
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f005 fd02 	bl	8007cb0 <memset>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <commAppendReceivedByte>:

void commAppendReceivedByte(Comm *comm, uint8_t receivedByte)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	70fb      	strb	r3, [r7, #3]
	dataPacketRxAppend(&comm->dataPacketRx, receivedByte);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	33fe      	adds	r3, #254	; 0xfe
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f001 fb5f 	bl	800398c <dataPacketRxAppend>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <commTryDecodeReceivedDataPacket>:

void commTryDecodeReceivedDataPacket(Comm *comm)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
	dataPacketRxDecode(&comm->dataPacketRx);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	33fe      	adds	r3, #254	; 0xfe
 80022e2:	4618      	mov	r0, r3
 80022e4:	f001 fb85 	bl	80039f2 <dataPacketRxDecode>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <commTryExtractCommandAndPayloadFromDecodedDataPacket>:

void commTryExtractCommandAndPayloadFromDecodedDataPacket(Comm *comm)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	if (dataPacketRxGetDataPacketStatus(&comm->dataPacketRx) == VALID_RX_DATA_PACKET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	33fe      	adds	r3, #254	; 0xfe
 80022fc:	4618      	mov	r0, r3
 80022fe:	f001 fcc6 	bl	8003c8e <dataPacketRxGetDataPacketStatus>
 8002302:	4603      	mov	r3, r0
 8002304:	2b01      	cmp	r3, #1
 8002306:	d12a      	bne.n	800235e <commTryExtractCommandAndPayloadFromDecodedDataPacket+0x6e>
	{
		uint8_t receivedCmd = dataPacketRxGetCommand(&comm->dataPacketRx);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	33fe      	adds	r3, #254	; 0xfe
 800230c:	4618      	mov	r0, r3
 800230e:	f001 fc81 	bl	8003c14 <dataPacketRxGetCommand>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]
		uint8_t receivedPayloadDataLength = dataPacketRxGetPayloadDataLength(&comm->dataPacketRx);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	33fe      	adds	r3, #254	; 0xfe
 800231a:	4618      	mov	r0, r3
 800231c:	f001 fcab 	bl	8003c76 <dataPacketRxGetPayloadDataLength>
 8002320:	4603      	mov	r3, r0
 8002322:	73bb      	strb	r3, [r7, #14]

		if (receivedPayloadDataLength > 0)
 8002324:	7bbb      	ldrb	r3, [r7, #14]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <commTryExtractCommandAndPayloadFromDecodedDataPacket+0x52>
		{
			uint8_t *receivedPayloadData = dataPacketRxGetPayloadData(&comm->dataPacketRx);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	33fe      	adds	r3, #254	; 0xfe
 800232e:	4618      	mov	r0, r3
 8002330:	f001 fc95 	bl	8003c5e <dataPacketRxGetPayloadData>
 8002334:	60b8      	str	r0, [r7, #8]
			commSetData(comm, receivedPayloadData, receivedPayloadDataLength);
 8002336:	7bbb      	ldrb	r3, [r7, #14]
 8002338:	461a      	mov	r2, r3
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff8f 	bl	8002260 <commSetData>
		}

		commSetCommand(comm, receivedCmd);
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fad4 	bl	80028f4 <commSetCommand>
		commSetDecodeCommandStatus(comm, TRUE);
 800234c:	2101      	movs	r1, #1
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fab3 	bl	80028ba <commSetDecodeCommandStatus>
		dataPacketRxClear(&comm->dataPacketRx);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	33fe      	adds	r3, #254	; 0xfe
 8002358:	4618      	mov	r0, r3
 800235a:	f001 fc0d 	bl	8003b78 <dataPacketRxClear>
	}
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <commTryDecodeExtractedCommand>:

void commTryDecodeExtractedCommand(Comm *comm, App *app)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
	if (commGetDecodeCommandStatus(comm) == TRUE)
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fa95 	bl	80028a0 <commGetDecodeCommandStatus>
 8002376:	4603      	mov	r3, r0
 8002378:	2b01      	cmp	r3, #1
 800237a:	d107      	bne.n	800238c <commTryDecodeExtractedCommand+0x26>
	{
		commDecodeReceivedCommand(comm, app);
 800237c:	6839      	ldr	r1, [r7, #0]
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f808 	bl	8002394 <commDecodeReceivedCommand>
		commSetDecodeCommandStatus(comm, FALSE);
 8002384:	2100      	movs	r1, #0
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fa97 	bl	80028ba <commSetDecodeCommandStatus>
	}
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <commDecodeReceivedCommand>:

void commDecodeReceivedCommand(Comm *comm, App *app)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b094      	sub	sp, #80	; 0x50
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
	uint16_t receivedSamplingInterval = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t receivedPidInterval = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t receivedMovingAverageWindow = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int32_t receivedPidMinSumOfErrors = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t receivedPidMaxSumOfErrors = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t receivedPidMinControlledVariable = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t receivedPidMaxControlledVariable = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38

	uint32_t receivedPidSetpointTimes1000 = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
	float receivedPidSetpoint = 0;
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30

	uint32_t pidKpTimes1000 = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	float pidKp = 0;
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pidKiTimes1000 = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
	float pidKi = 0;
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]

	uint32_t pidKdTimes1000 = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
	float pidKd = 0;
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]

	uint32_t receiveidPidOffset = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
	float pidOffset = 0;
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]

	uint32_t receiveidPidBias = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
	float pidBias = 0;
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]

	switch (commGetCommand(comm))
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 fa6c 	bl	80028da <commGetCommand>
 8002402:	4603      	mov	r3, r0
 8002404:	3b01      	subs	r3, #1
 8002406:	2b05      	cmp	r3, #5
 8002408:	f200 81cd 	bhi.w	80027a6 <commDecodeReceivedCommand+0x412>
 800240c:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <commDecodeReceivedCommand+0x80>)
 800240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002412:	bf00      	nop
 8002414:	0800242d 	.word	0x0800242d
 8002418:	080026ef 	.word	0x080026ef
 800241c:	080026f9 	.word	0x080026f9
 8002420:	08002741 	.word	0x08002741
 8002424:	08002775 	.word	0x08002775
 8002428:	0800279d 	.word	0x0800279d
	{
		case CMD_RX_SET_CONFIG_DATA_VALUES:

			// ************* Kp ************* //
			pidKpTimes1000 = (comm->data[0] << 24) + (comm->data[1] << 16) + (comm->data[2] << 8) + comm->data[3];
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8002432:	061a      	lsls	r2, r3, #24
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800243a:	041b      	lsls	r3, r3, #16
 800243c:	441a      	add	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	4413      	add	r3, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	f892 217b 	ldrb.w	r2, [r2, #379]	; 0x17b
 800244e:	4413      	add	r3, r2
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
			pidKp = ((float) pidKpTimes1000) / 1000;
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800245c:	eddf 6ac2 	vldr	s13, [pc, #776]	; 8002768 <commDecodeReceivedCommand+0x3d4>
 8002460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002464:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			appSetPidKp(app, pidKp);
 8002468:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800246c:	6838      	ldr	r0, [r7, #0]
 800246e:	f7fe ff1e 	bl	80012ae <appSetPidKp>

			// ************* Ki ************* //
			pidKiTimes1000 = (comm->data[4] << 24) + (comm->data[5] << 16) + (comm->data[6] << 8) + comm->data[7];
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8002478:	061a      	lsls	r2, r3, #24
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8002480:	041b      	lsls	r3, r3, #16
 8002482:	441a      	add	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	4413      	add	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	f892 217f 	ldrb.w	r2, [r2, #383]	; 0x17f
 8002494:	4413      	add	r3, r2
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
			pidKi = ((float) pidKiTimes1000) / 1000;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024a2:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8002768 <commDecodeReceivedCommand+0x3d4>
 80024a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024aa:	edc7 7a08 	vstr	s15, [r7, #32]
			appSetPidKi(app, pidKi);
 80024ae:	ed97 0a08 	vldr	s0, [r7, #32]
 80024b2:	6838      	ldr	r0, [r7, #0]
 80024b4:	f7fe ff1e 	bl	80012f4 <appSetPidKi>

			// ************* Kd ************* //
			pidKdTimes1000 = (comm->data[8] << 24) + (comm->data[9] << 16) + (comm->data[10] << 8) + comm->data[11];
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 80024be:	061a      	lsls	r2, r3, #24
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	441a      	add	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	4413      	add	r3, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	f892 2183 	ldrb.w	r2, [r2, #387]	; 0x183
 80024da:	4413      	add	r3, r2
 80024dc:	61fb      	str	r3, [r7, #28]
			pidKd = ((float) pidKdTimes1000) / 1000;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024e8:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8002768 <commDecodeReceivedCommand+0x3d4>
 80024ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024f0:	edc7 7a06 	vstr	s15, [r7, #24]
			appSetPidKd(app, pidKd);
 80024f4:	ed97 0a06 	vldr	s0, [r7, #24]
 80024f8:	6838      	ldr	r0, [r7, #0]
 80024fa:	f7fe ff1e 	bl	800133a <appSetPidKd>

			// ************* Pid Interval ************* //
			receivedPidInterval = (comm->data[12] << 8) + comm->data[13];
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8002504:	b29b      	uxth	r3, r3
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	b29a      	uxth	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 8002510:	b29b      	uxth	r3, r3
 8002512:	4413      	add	r3, r2
 8002514:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			appSetPidInterval(app, receivedPidInterval);
 8002518:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800251c:	4619      	mov	r1, r3
 800251e:	6838      	ldr	r0, [r7, #0]
 8002520:	f7fe ff3a 	bl	8001398 <appSetPidInterval>

			// ************* Sampling Interval ************* //
			receivedSamplingInterval = (comm->data[14] << 8) + comm->data[15];
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3186 	ldrb.w	r3, [r3, #390]	; 0x186
 800252a:	b29b      	uxth	r3, r3
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 8002536:	b29b      	uxth	r3, r3
 8002538:	4413      	add	r3, r2
 800253a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			appSetSamplingInterval(app, receivedSamplingInterval);
 800253e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002542:	4619      	mov	r1, r3
 8002544:	6838      	ldr	r0, [r7, #0]
 8002546:	f7ff f8ae 	bl	80016a6 <appSetSamplingInterval>

			// ************* Moving Average Window ************* //
			receivedMovingAverageWindow = (comm->data[16] << 8) + comm->data[17];
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8002550:	b29b      	uxth	r3, r3
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	b29a      	uxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 800255c:	b29b      	uxth	r3, r3
 800255e:	4413      	add	r3, r2
 8002560:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			appSetMovingAverageFilterWindow(app, receivedMovingAverageWindow);
 8002564:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002568:	4619      	mov	r1, r3
 800256a:	6838      	ldr	r0, [r7, #0]
 800256c:	f7ff f8c1 	bl	80016f2 <appSetMovingAverageFilterWindow>

			// ************* Min Sum Of Errors ************* //
			receivedPidMinSumOfErrors = (comm->data[18] << 24) + (comm->data[19] << 16) + (comm->data[20] << 8) + comm->data[21];
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8002576:	061a      	lsls	r2, r3, #24
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	441a      	add	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	4413      	add	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	f892 218d 	ldrb.w	r2, [r2, #397]	; 0x18d
 8002592:	4413      	add	r3, r2
 8002594:	647b      	str	r3, [r7, #68]	; 0x44
			receivedPidMinSumOfErrors -= 1000000000;
 8002596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002598:	4b74      	ldr	r3, [pc, #464]	; (800276c <commDecodeReceivedCommand+0x3d8>)
 800259a:	4413      	add	r3, r2
 800259c:	647b      	str	r3, [r7, #68]	; 0x44
			appSetPidMinSumOfErrors(app, receivedPidMinSumOfErrors);
 800259e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80025a0:	6838      	ldr	r0, [r7, #0]
 80025a2:	f7fe ff2a 	bl	80013fa <appSetPidMinSumOfErrors>

			// ************* Max Sum Of Errors ************* //
			receivedPidMaxSumOfErrors = (comm->data[22] << 24) + (comm->data[23] << 16) + (comm->data[24] << 8) + comm->data[25];
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 80025ac:	061a      	lsls	r2, r3, #24
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 318f 	ldrb.w	r3, [r3, #399]	; 0x18f
 80025b4:	041b      	lsls	r3, r3, #16
 80025b6:	441a      	add	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	4413      	add	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	f892 2191 	ldrb.w	r2, [r2, #401]	; 0x191
 80025c8:	4413      	add	r3, r2
 80025ca:	643b      	str	r3, [r7, #64]	; 0x40
			receivedPidMaxSumOfErrors -= 1000000000;
 80025cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025ce:	4b67      	ldr	r3, [pc, #412]	; (800276c <commDecodeReceivedCommand+0x3d8>)
 80025d0:	4413      	add	r3, r2
 80025d2:	643b      	str	r3, [r7, #64]	; 0x40
			appSetPidMaxSumOfErrors(app, receivedPidMaxSumOfErrors);
 80025d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025d6:	6838      	ldr	r0, [r7, #0]
 80025d8:	f7fe ff2e 	bl	8001438 <appSetPidMaxSumOfErrors>

			// ************* Min Controlled Variable ************* //
			receivedPidMinControlledVariable = (comm->data[26] << 24) + (comm->data[27] << 16) + (comm->data[28] << 8) + comm->data[29];
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 80025e2:	061a      	lsls	r2, r3, #24
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
 80025ea:	041b      	lsls	r3, r3, #16
 80025ec:	441a      	add	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	4413      	add	r3, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	f892 2195 	ldrb.w	r2, [r2, #405]	; 0x195
 80025fe:	4413      	add	r3, r2
 8002600:	63fb      	str	r3, [r7, #60]	; 0x3c
			receivedPidMinControlledVariable -= 1000000000;
 8002602:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002604:	4b59      	ldr	r3, [pc, #356]	; (800276c <commDecodeReceivedCommand+0x3d8>)
 8002606:	4413      	add	r3, r2
 8002608:	63fb      	str	r3, [r7, #60]	; 0x3c
			appSetPidMinControlledVariable(app, receivedPidMinControlledVariable);
 800260a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800260c:	6838      	ldr	r0, [r7, #0]
 800260e:	f7fe ff32 	bl	8001476 <appSetPidMinControlledVariable>

			// ************* Max Controlled Variable ************* //
			receivedPidMaxControlledVariable = (comm->data[30] << 24) + (comm->data[31] << 16) + (comm->data[32] << 8) + comm->data[33];
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8002618:	061a      	lsls	r2, r3, #24
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	441a      	add	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	4413      	add	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	f892 2199 	ldrb.w	r2, [r2, #409]	; 0x199
 8002634:	4413      	add	r3, r2
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
			receivedPidMaxControlledVariable -= 1000000000;
 8002638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800263a:	4b4c      	ldr	r3, [pc, #304]	; (800276c <commDecodeReceivedCommand+0x3d8>)
 800263c:	4413      	add	r3, r2
 800263e:	63bb      	str	r3, [r7, #56]	; 0x38
			appSetPidMaxControlledVariable(app, receivedPidMaxControlledVariable);
 8002640:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002642:	6838      	ldr	r0, [r7, #0]
 8002644:	f7fe ff36 	bl	80014b4 <appSetPidMaxControlledVariable>

			// ************* Pid Offset ************* //
			receiveidPidOffset = (comm->data[34] << 24) + (comm->data[35] << 16) + (comm->data[36] << 8) + comm->data[37];
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 319a 	ldrb.w	r3, [r3, #410]	; 0x19a
 800264e:	061a      	lsls	r2, r3, #24
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 319b 	ldrb.w	r3, [r3, #411]	; 0x19b
 8002656:	041b      	lsls	r3, r3, #16
 8002658:	441a      	add	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	4413      	add	r3, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	f892 219d 	ldrb.w	r2, [r2, #413]	; 0x19d
 800266a:	4413      	add	r3, r2
 800266c:	617b      	str	r3, [r7, #20]
			pidOffset = (((float) receiveidPidOffset) - 1000000) / 1000;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002678:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002770 <commDecodeReceivedCommand+0x3dc>
 800267c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002680:	eddf 6a39 	vldr	s13, [pc, #228]	; 8002768 <commDecodeReceivedCommand+0x3d4>
 8002684:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002688:	edc7 7a04 	vstr	s15, [r7, #16]
			appSetPidOffset(app, pidOffset);
 800268c:	ed97 0a04 	vldr	s0, [r7, #16]
 8002690:	6838      	ldr	r0, [r7, #0]
 8002692:	f7fe ff30 	bl	80014f6 <appSetPidOffset>

			// ************* Pid Bias ************* //
			receiveidPidBias = (comm->data[38] << 24) + (comm->data[39] << 16) + (comm->data[40] << 8) + comm->data[41];
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 800269c:	061a      	lsls	r2, r3, #24
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	441a      	add	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	4413      	add	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	f892 21a1 	ldrb.w	r2, [r2, #417]	; 0x1a1
 80026b8:	4413      	add	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
			pidBias = (((float) receiveidPidBias) - 1000000) / 1000;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002770 <commDecodeReceivedCommand+0x3dc>
 80026ca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002768 <commDecodeReceivedCommand+0x3d4>
 80026d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026d6:	edc7 7a02 	vstr	s15, [r7, #8]
			appSetPidBias(app, pidBias);
 80026da:	ed97 0a02 	vldr	s0, [r7, #8]
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	f7fe ff2c 	bl	800153c <appSetPidBias>

			// ************* Send The New Config Data Values ************* //
			commSetEnableSendCurrentConfigDataValues(comm, TRUE);
 80026e4:	2101      	movs	r1, #1
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f890 	bl	800280c <commSetEnableSendCurrentConfigDataValues>
			break;
 80026ec:	e060      	b.n	80027b0 <commDecodeReceivedCommand+0x41c>

		case CMD_RX_ASK_FOR_CURRENT_CONFIG_DATA_VALUES:
			commSetEnableSendCurrentConfigDataValues(comm, TRUE);
 80026ee:	2101      	movs	r1, #1
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f88b 	bl	800280c <commSetEnableSendCurrentConfigDataValues>
			break;
 80026f6:	e05b      	b.n	80027b0 <commDecodeReceivedCommand+0x41c>

		case CMD_RX_SET_PID_SETPOINT:
			receivedPidSetpointTimes1000 = (comm->data[0] << 24) + (comm->data[1] << 16) + (comm->data[2] << 8) + comm->data[3];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80026fe:	061a      	lsls	r2, r3, #24
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	441a      	add	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	4413      	add	r3, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	f892 217b 	ldrb.w	r2, [r2, #379]	; 0x17b
 800271a:	4413      	add	r3, r2
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
			receivedPidSetpoint = ((float) receivedPidSetpointTimes1000) / 1000;
 800271e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002720:	ee07 3a90 	vmov	s15, r3
 8002724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002728:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002768 <commDecodeReceivedCommand+0x3d4>
 800272c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002730:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			appSetPidSetpoint(app, receivedPidSetpoint);
 8002734:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8002738:	6838      	ldr	r0, [r7, #0]
 800273a:	f7fe ff23 	bl	8001584 <appSetPidSetpoint>
			break;
 800273e:	e037      	b.n	80027b0 <commDecodeReceivedCommand+0x41c>

		case CMD_RX_SET_RUN_PID_CONTROLLER_STATUS:
			if (comm->data[0] == HALT)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8002746:	2b00      	cmp	r3, #0
 8002748:	d104      	bne.n	8002754 <commDecodeReceivedCommand+0x3c0>
			{
				appSetRunPidControllerStatus(app, FALSE);
 800274a:	2100      	movs	r1, #0
 800274c:	6838      	ldr	r0, [r7, #0]
 800274e:	f7fe ff7b 	bl	8001648 <appSetRunPidControllerStatus>
			}
			else if (comm->data[0] == RUN)
			{
				appSetRunPidControllerStatus(app, TRUE);
			}
			break;
 8002752:	e02a      	b.n	80027aa <commDecodeReceivedCommand+0x416>
			else if (comm->data[0] == RUN)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800275a:	2b01      	cmp	r3, #1
 800275c:	d125      	bne.n	80027aa <commDecodeReceivedCommand+0x416>
				appSetRunPidControllerStatus(app, TRUE);
 800275e:	2101      	movs	r1, #1
 8002760:	6838      	ldr	r0, [r7, #0]
 8002762:	f7fe ff71 	bl	8001648 <appSetRunPidControllerStatus>
			break;
 8002766:	e020      	b.n	80027aa <commDecodeReceivedCommand+0x416>
 8002768:	447a0000 	.word	0x447a0000
 800276c:	c4653600 	.word	0xc4653600
 8002770:	49742400 	.word	0x49742400

		case CMD_RX_SET_SEND_PROCESS_VARIABLE_STATUS:
			if (comm->data[0] == NOT_SEND)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800277a:	2b00      	cmp	r3, #0
 800277c:	d104      	bne.n	8002788 <commDecodeReceivedCommand+0x3f4>
			{
				commSetEnableSendProcessVariable(comm, FALSE);
 800277e:	2100      	movs	r1, #0
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f826 	bl	80027d2 <commSetEnableSendProcessVariable>
			}
			else if (comm->data[0] == SEND)
			{
				commSetEnableSendProcessVariable(comm, TRUE);
			}
			break;
 8002786:	e012      	b.n	80027ae <commDecodeReceivedCommand+0x41a>
			else if (comm->data[0] == SEND)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800278e:	2b01      	cmp	r3, #1
 8002790:	d10d      	bne.n	80027ae <commDecodeReceivedCommand+0x41a>
				commSetEnableSendProcessVariable(comm, TRUE);
 8002792:	2101      	movs	r1, #1
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f81c 	bl	80027d2 <commSetEnableSendProcessVariable>
			break;
 800279a:	e008      	b.n	80027ae <commDecodeReceivedCommand+0x41a>

		case CMD_RX_ASK_FOR_CURRENT_PID_SETPOINT_VALUE:
			commSetEnableSendCurrentPidSetpointValue(comm, TRUE);
 800279c:	2101      	movs	r1, #1
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f851 	bl	8002846 <commSetEnableSendCurrentPidSetpointValue>
			break;
 80027a4:	e004      	b.n	80027b0 <commDecodeReceivedCommand+0x41c>

		default:
			break;
 80027a6:	bf00      	nop
 80027a8:	e002      	b.n	80027b0 <commDecodeReceivedCommand+0x41c>
			break;
 80027aa:	bf00      	nop
 80027ac:	e000      	b.n	80027b0 <commDecodeReceivedCommand+0x41c>
			break;
 80027ae:	bf00      	nop
	}
}
 80027b0:	bf00      	nop
 80027b2:	3750      	adds	r7, #80	; 0x50
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <commGetEnableSendProcessVariable>:

// ======== TX - Getters and Setters ======== //
Bool commGetEnableSendProcessVariable(Comm *comm)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	return comm->enableSendProcessVariable;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <commSetEnableSendProcessVariable>:

void commSetEnableSendProcessVariable(Comm *comm, Bool status)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	70fb      	strb	r3, [r7, #3]
	comm->enableSendProcessVariable = status;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <commGetEnableSendCurrentConfigDataValues>:

Bool commGetEnableSendCurrentConfigDataValues(Comm *comm)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
	return comm->enableSendCurrentConfigDataValues;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <commSetEnableSendCurrentConfigDataValues>:

void commSetEnableSendCurrentConfigDataValues(Comm *comm, Bool status)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	70fb      	strb	r3, [r7, #3]
	comm->enableSendCurrentConfigDataValues = status;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <commGetEnableSendCurrentPidSetpointValue>:

Bool commGetEnableSendCurrentPidSetpointValue(Comm *comm)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	return comm->enableSendCurrentPidSetpointValue;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <commSetEnableSendCurrentPidSetpointValue>:

void commSetEnableSendCurrentPidSetpointValue(Comm *comm, Bool status)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	460b      	mov	r3, r1
 8002850:	70fb      	strb	r3, [r7, #3]
	comm->enableSendCurrentPidSetpointValue = status;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <commGetEnableSendKeepAliveMessage>:

Bool commGetEnableSendKeepAliveMessage(Comm *comm)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
	return comm->enableSendKeepAliveMessage;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <commSetEnableSendKeepAliveMessage>:

void commSetEnableSendKeepAliveMessage(Comm *comm, Bool status)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	70fb      	strb	r3, [r7, #3]
	comm->enableSendKeepAliveMessage = status;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <commGetDecodeCommandStatus>:

// ======== RX - Getters and Setters ======== //
Bool commGetDecodeCommandStatus(Comm *comm)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	return comm->decodeCommandStatus;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <commSetDecodeCommandStatus>:

void commSetDecodeCommandStatus(Comm *comm, Bool status)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	70fb      	strb	r3, [r7, #3]
	comm->decodeCommandStatus = status;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <commGetCommand>:

uint8_t commGetCommand(Comm *comm)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
	return comm->command;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3177 	ldrb.w	r3, [r3, #375]	; 0x177
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <commSetCommand>:

void commSetCommand(Comm *comm, uint8_t command)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
	comm->command = command;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <commSetDataLenght>:
{
	return comm->dataLenght;
}

void commSetDataLenght(Comm *comm, uint8_t dataLenght)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	70fb      	strb	r3, [r7, #3]
	comm->dataLenght = dataLenght;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <controllerInit>:

#include "controller.h"

// ======== Init ======== //
void controllerInit(Controller *controller, DAC_HandleTypeDef hdac)
{
 8002934:	b084      	sub	sp, #16
 8002936:	b5b0      	push	{r4, r5, r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	f107 001c 	add.w	r0, r7, #28
 8002942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	controller->hdac = hdac;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 800294c:	f107 051c 	add.w	r5, r7, #28
 8002950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002954:	682b      	ldr	r3, [r5, #0]
 8002956:	6023      	str	r3, [r4, #0]

	pidInit(&controller->pid, 10, 0.85, 0.35, 0, 0, PID_CONTROLLER);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2102      	movs	r1, #2
 800295c:	ed9f 2a12 	vldr	s4, [pc, #72]	; 80029a8 <controllerInit+0x74>
 8002960:	eddf 1a11 	vldr	s3, [pc, #68]	; 80029a8 <controllerInit+0x74>
 8002964:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80029ac <controllerInit+0x78>
 8002968:	eddf 0a11 	vldr	s1, [pc, #68]	; 80029b0 <controllerInit+0x7c>
 800296c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002970:	4618      	mov	r0, r3
 8002972:	f004 fe39 	bl	80075e8 <pidInit>
	pidSetSetpoint(&controller->pid, 0);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80029a8 <controllerInit+0x74>
 800297c:	4618      	mov	r0, r3
 800297e:	f005 f83f 	bl	8007a00 <pidSetSetpoint>
	controllerSetRunPidControllerStatus(controller, FALSE);
 8002982:	2100      	movs	r1, #0
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f9a5 	bl	8002cd4 <controllerSetRunPidControllerStatus>
	HAL_DAC_SetValue(&controller->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8002990:	2300      	movs	r3, #0
 8002992:	2200      	movs	r2, #0
 8002994:	2100      	movs	r1, #0
 8002996:	f002 f89e 	bl	8004ad6 <HAL_DAC_SetValue>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80029a4:	b004      	add	sp, #16
 80029a6:	4770      	bx	lr
 80029a8:	00000000 	.word	0x00000000
 80029ac:	3eb33333 	.word	0x3eb33333
 80029b0:	3f59999a 	.word	0x3f59999a

080029b4 <controllerRunPidController>:

// ======== Controller =========== //
void controllerRunPidController(Controller *controller)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	pidCompute(&controller->pid);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fe6c 	bl	800769c <pidCompute>
	uint32_t controlledVariable = (uint32_t) pidGetControlledVariable(&controller->pid);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f005 f84e 	bl	8007a68 <pidGetControlledVariable>
 80029cc:	eef0 7a40 	vmov.f32	s15, s0
 80029d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029d4:	ee17 3a90 	vmov	r3, s15
 80029d8:	60fb      	str	r3, [r7, #12]
	HAL_DAC_SetValue(&controller->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, controlledVariable);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	f002 f876 	bl	8004ad6 <HAL_DAC_SetValue>
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <controllerGetPidKp>:

// ======= Getters and Setters ======== //
float controllerGetPidKp(Controller *controller)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
	return pidGetKp(&controller->pid);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f004 ff78 	bl	80078f2 <pidGetKp>
 8002a02:	eef0 7a40 	vmov.f32	s15, s0
}
 8002a06:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <controllerSetPidKp>:

void controllerSetPidKp(Controller *controller, float kp)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	ed87 0a00 	vstr	s0, [r7]
	pidSetKp(&controller->pid, kp);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	ed97 0a00 	vldr	s0, [r7]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 ff74 	bl	8007910 <pidSetKp>
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <controllerGetPidKi>:

float controllerGetPidKi(Controller *controller)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	return pidGetKi(&controller->pid);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 ff77 	bl	800792e <pidGetKi>
 8002a40:	eef0 7a40 	vmov.f32	s15, s0
}
 8002a44:	eeb0 0a67 	vmov.f32	s0, s15
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <controllerSetPidKi>:

void controllerSetPidKi(Controller *controller, float ki)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	ed87 0a00 	vstr	s0, [r7]
	pidSetKi(&controller->pid, ki);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	ed97 0a00 	vldr	s0, [r7]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 ff73 	bl	800794c <pidSetKi>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <controllerGetPidKd>:

float controllerGetPidKd(Controller *controller)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
	return pidGetKd(&controller->pid);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f004 ff76 	bl	800796a <pidGetKd>
 8002a7e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002a82:	eeb0 0a67 	vmov.f32	s0, s15
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <controllerSetPidKd>:

void controllerSetPidKd(Controller *controller, float kd)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	ed87 0a00 	vstr	s0, [r7]
	pidSetKd(&controller->pid, kd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	ed97 0a00 	vldr	s0, [r7]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 ff72 	bl	8007988 <pidSetKd>
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <controllerGetPidInterval>:

float controllerGetPidInterval(Controller *controller)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	return pidGetInterval(&controller->pid);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 ff75 	bl	80079a6 <pidGetInterval>
 8002abc:	eef0 7a40 	vmov.f32	s15, s0
}
 8002ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <controllerSetPidInterval>:

void controllerSetPidInterval(Controller *controller, float pidInterval)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	ed87 0a00 	vstr	s0, [r7]
	pidSetInterval(&controller->pid, pidInterval);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	ed97 0a00 	vldr	s0, [r7]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f004 ff71 	bl	80079c4 <pidSetInterval>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <controllerGetPidMinSumOfErrors>:

int32_t controllerGetPidMinSumOfErrors(Controller *controller)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
	return pidGetMinSumOfErrors(&controller->pid);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f005 f802 	bl	8007afe <pidGetMinSumOfErrors>
 8002afa:	4603      	mov	r3, r0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <controllerSetPidMinSumOfErrors>:

void controllerSetPidMinSumOfErrors(Controller *controller, int32_t minSumOfErrors)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
	pidSetMinSumOfErrors(&controller->pid, minSumOfErrors);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6839      	ldr	r1, [r7, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f005 f800 	bl	8007b18 <pidSetMinSumOfErrors>
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <controllerGetPidMaxSumOfErrors>:

int32_t controllerGetPidMaxSumOfErrors(Controller *controller)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	return pidGetMaxSumOfErrors(&controller->pid);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f005 f814 	bl	8007b58 <pidGetMaxSumOfErrors>
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <controllerSetPidMaxSumOfErrors>:

void controllerSetPidMaxSumOfErrors(Controller *controller, int32_t maxSumOfErrors)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
	pidSetMaxSumOfErrors(&controller->pid, maxSumOfErrors);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6839      	ldr	r1, [r7, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f005 f811 	bl	8007b70 <pidSetMaxSumOfErrors>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <controllerGetPidMinControlledVariable>:

int32_t controllerGetPidMinControlledVariable(Controller *controller)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
	return pidGetMinControlledVariable(&controller->pid);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f005 f825 	bl	8007bb0 <pidGetMinControlledVariable>
 8002b66:	4603      	mov	r3, r0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <controllerSetPidMinControlledVariable>:

void controllerSetPidMinControlledVariable(Controller *controller, int32_t minControlledVariable)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
	pidSetMinControlledVariable(&controller->pid, minControlledVariable);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6839      	ldr	r1, [r7, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f005 f822 	bl	8007bc8 <pidSetMinControlledVariable>
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <controllerGetPidMaxControlledVariable>:

int32_t controllerGetPidMaxControlledVariable(Controller *controller)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	return pidGetMaxControlledVariable(&controller->pid);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f005 f831 	bl	8007bfe <pidGetMaxControlledVariable>
 8002b9c:	4603      	mov	r3, r0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <controllerSetPidMaxControlledVariable>:

void controllerSetPidMaxControlledVariable(Controller *controller, int32_t maxControlledVariable)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
	pidSetMaxControlledVariable(&controller->pid, maxControlledVariable);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6839      	ldr	r1, [r7, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f005 f82e 	bl	8007c16 <pidSetMaxControlledVariable>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <controllerGetPidOffset>:

float controllerGetPidOffset(Controller *controller)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
	return pidGetOffset(&controller->pid);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 ff5a 	bl	8007a86 <pidGetOffset>
 8002bd2:	eef0 7a40 	vmov.f32	s15, s0
}
 8002bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <controllerSetPidOffset>:

void controllerSetPidOffset(Controller *controller, float offset)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	ed87 0a00 	vstr	s0, [r7]
	pidSetOffset(&controller->pid, offset);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	ed97 0a00 	vldr	s0, [r7]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f004 ff56 	bl	8007aa4 <pidSetOffset>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <controllerGetPidBias>:

float controllerGetPidBias(Controller *controller)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	return pidGetBias(&controller->pid);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 ff59 	bl	8007ac2 <pidGetBias>
 8002c10:	eef0 7a40 	vmov.f32	s15, s0
}
 8002c14:	eeb0 0a67 	vmov.f32	s0, s15
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <controllerSetPidBias>:

void controllerSetPidBias(Controller *controller, float bias)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	ed87 0a00 	vstr	s0, [r7]
	pidSetBias(&controller->pid, bias);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	ed97 0a00 	vldr	s0, [r7]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f004 ff55 	bl	8007ae0 <pidSetBias>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <controllerGetPidSetpoint>:

float controllerGetPidSetpoint(Controller *controller)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
	return pidGetSetpoint(&controller->pid);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f004 feca 	bl	80079e2 <pidGetSetpoint>
 8002c4e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002c52:	eeb0 0a67 	vmov.f32	s0, s15
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <controllerSetPidSetpoint>:

void controllerSetPidSetpoint(Controller *controller, float setpoint)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	ed87 0a00 	vstr	s0, [r7]
	pidSetSetpoint(&controller->pid, setpoint);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	ed97 0a00 	vldr	s0, [r7]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f004 fec6 	bl	8007a00 <pidSetSetpoint>
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <controllerGetPidProcessVariable>:

float controllerGetPidProcessVariable(Controller *controller)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	return pidGetProcessVariable(&controller->pid);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f004 fec9 	bl	8007a1e <pidGetProcessVariable>
 8002c8c:	eef0 7a40 	vmov.f32	s15, s0
}
 8002c90:	eeb0 0a67 	vmov.f32	s0, s15
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <controllerSetPidProcessVariable>:

void controllerSetPidProcessVariable(Controller *controller, float value)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	ed87 0a00 	vstr	s0, [r7]
	pidSetProcessVariable(&controller->pid, value);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	ed97 0a00 	vldr	s0, [r7]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f004 fec5 	bl	8007a3c <pidSetProcessVariable>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <controllerGetRunPidControllerStatus>:

Bool controllerGetRunPidControllerStatus(Controller *controller)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
	return controller->runPidController;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <controllerSetRunPidControllerStatus>:

void controllerSetRunPidControllerStatus(Controller *controller, Bool status)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
	if (status == FALSE)
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10b      	bne.n	8002cfe <controllerSetRunPidControllerStatus+0x2a>
	{
		pidClearParameters(&controller->pid);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f004 fde0 	bl	80078ae <pidClearParameters>
		HAL_DAC_SetValue(&controller->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	f001 feec 	bl	8004ad6 <HAL_DAC_SetValue>
	}

	controller->runPidController = status;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <samplingInit>:

#include "sampling.h"

// ======== Init ======== //
void samplingInit(Sampling *sampling, ADC_HandleTypeDef hadc)
{
 8002d0e:	b084      	sub	sp, #16
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	f107 0014 	add.w	r0, r7, #20
 8002d1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	sampling->hadc = hadc;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3310      	adds	r3, #16
 8002d24:	f107 0114 	add.w	r1, r7, #20
 8002d28:	2248      	movs	r2, #72	; 0x48
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f004 ffb2 	bl	8007c94 <memcpy>
	sampling->adcHysteresisCriticalValue = 3000;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d36:	809a      	strh	r2, [r3, #4]
	sampling->adcHysteresisThreshold = 500;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d3e:	80da      	strh	r2, [r3, #6]
	sampling->currentMagnitudeOrder = LOW_CURRENT;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	731a      	strb	r2, [r3, #12]

	samplingSetSamplingInterval(sampling, DELAY_1_MILISECONDS);
 8002d46:	210a      	movs	r1, #10
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f86b 	bl	8002e24 <samplingSetSamplingInterval>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d58:	b004      	add	sp, #16
 8002d5a:	4770      	bx	lr

08002d5c <samplingExecuteAdcRead>:

// ======== Sampling ============ //
void samplingExecuteAdcRead(Sampling *sampling)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&sampling->hadc);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3310      	adds	r3, #16
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 f963 	bl	8004034 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&sampling->hadc, HAL_MAX_DELAY);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3310      	adds	r3, #16
 8002d72:	f04f 31ff 	mov.w	r1, #4294967295
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 fa61 	bl	800423e <HAL_ADC_PollForConversion>
	uint16_t adc1In1Value = HAL_ADC_GetValue(&sampling->hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3310      	adds	r3, #16
 8002d80:	4618      	mov	r0, r3
 8002d82:	f001 fae7 	bl	8004354 <HAL_ADC_GetValue>
 8002d86:	4603      	mov	r3, r0
 8002d88:	81fb      	strh	r3, [r7, #14]

	HAL_ADC_PollForConversion(&sampling->hadc, HAL_MAX_DELAY);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3310      	adds	r3, #16
 8002d8e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d92:	4618      	mov	r0, r3
 8002d94:	f001 fa53 	bl	800423e <HAL_ADC_PollForConversion>
	uint16_t adc1In6Value = HAL_ADC_GetValue(&sampling->hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3310      	adds	r3, #16
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 fad9 	bl	8004354 <HAL_ADC_GetValue>
 8002da2:	4603      	mov	r3, r0
 8002da4:	81bb      	strh	r3, [r7, #12]

	HAL_ADC_Stop(&sampling->hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3310      	adds	r3, #16
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 fa14 	bl	80041d8 <HAL_ADC_Stop>

	sampling->adcValueHigh = adc1In1Value;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	89fa      	ldrh	r2, [r7, #14]
 8002db4:	811a      	strh	r2, [r3, #8]
	sampling->adcValueLow = adc1In6Value;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	89ba      	ldrh	r2, [r7, #12]
 8002dba:	815a      	strh	r2, [r3, #10]

	if (adc1In6Value >= (sampling->adcHysteresisCriticalValue + sampling->adcHysteresisThreshold))
 8002dbc:	89ba      	ldrh	r2, [r7, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	889b      	ldrh	r3, [r3, #4]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	88db      	ldrh	r3, [r3, #6]
 8002dc8:	440b      	add	r3, r1
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	db03      	blt.n	8002dd6 <samplingExecuteAdcRead+0x7a>
	{
		sampling->currentMagnitudeOrder = HIGH_CURRENT;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	731a      	strb	r2, [r3, #12]
 8002dd4:	e00b      	b.n	8002dee <samplingExecuteAdcRead+0x92>
	}
	else if (adc1In6Value <= (sampling->adcHysteresisCriticalValue - sampling->adcHysteresisThreshold))
 8002dd6:	89ba      	ldrh	r2, [r7, #12]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	889b      	ldrh	r3, [r3, #4]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	88db      	ldrh	r3, [r3, #6]
 8002de2:	1acb      	subs	r3, r1, r3
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dc02      	bgt.n	8002dee <samplingExecuteAdcRead+0x92>
	{
		sampling->currentMagnitudeOrder = LOW_CURRENT;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	731a      	strb	r2, [r3, #12]
	}

	if (sampling->currentMagnitudeOrder == LOW_CURRENT)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	7b1b      	ldrb	r3, [r3, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d103      	bne.n	8002dfe <samplingExecuteAdcRead+0xa2>
	{
		sampling->adcValue = adc1In6Value;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	89ba      	ldrh	r2, [r7, #12]
 8002dfa:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		sampling->adcValue = adc1In1Value;
	}
}
 8002dfc:	e002      	b.n	8002e04 <samplingExecuteAdcRead+0xa8>
		sampling->adcValue = adc1In1Value;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	89fa      	ldrh	r2, [r7, #14]
 8002e02:	805a      	strh	r2, [r3, #2]
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <samplingGetSamplingInterval>:

// ======= Getters and Setters ======== //
uint16_t samplingGetSamplingInterval(Sampling *sampling)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	return sampling->samplingInterval;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	881b      	ldrh	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <samplingSetSamplingInterval>:

void samplingSetSamplingInterval(Sampling *sampling, uint16_t samplingInterval)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
	sampling->samplingInterval = samplingInterval;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	801a      	strh	r2, [r3, #0]
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <samplingGetAdcValue>:

uint16_t samplingGetAdcValue(Sampling *sampling)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
	return sampling->adcValue;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	885b      	ldrh	r3, [r3, #2]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <samplingGetCurrentMagnitudeOrder>:
{
	sampling->adcValue = adcValue;
}

uint8_t samplingGetCurrentMagnitudeOrder(Sampling *sampling)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
	return sampling->currentMagnitudeOrder;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7b1b      	ldrb	r3, [r3, #12]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d123      	bne.n	8002ecc <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		decodeDataPacketDelay++;
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002e8e:	801a      	strh	r2, [r3, #0]
		blinkLedDelay++;
 8002e90:	4b13      	ldr	r3, [pc, #76]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002e9a:	801a      	strh	r2, [r3, #0]
		sendDataDelay1++;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002ea6:	801a      	strh	r2, [r3, #0]
		samplingInterval++;
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	3301      	adds	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002eb2:	801a      	strh	r2, [r3, #0]
		controllerInterval++;
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002ebe:	801a      	strh	r2, [r3, #0]
		sendKeepAliveDelay++;
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002eca:	801a      	strh	r2, [r3, #0]
	}
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	20000084 	.word	0x20000084
 8002edc:	20000156 	.word	0x20000156
 8002ee0:	20000158 	.word	0x20000158
 8002ee4:	2000015a 	.word	0x2000015a
 8002ee8:	2000015c 	.word	0x2000015c
 8002eec:	2000015e 	.word	0x2000015e
 8002ef0:	20000160 	.word	0x20000160

08002ef4 <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <HAL_UART_RxCpltCallback+0x34>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d10d      	bne.n	8002f20 <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8002f04:	2201      	movs	r2, #1
 8002f06:	4909      	ldr	r1, [pc, #36]	; (8002f2c <HAL_UART_RxCpltCallback+0x38>)
 8002f08:	4807      	ldr	r0, [pc, #28]	; (8002f28 <HAL_UART_RxCpltCallback+0x34>)
 8002f0a:	f003 fb4a 	bl	80065a2 <HAL_UART_Receive_IT>
		appAppendReceivedByte(&app, receivedByte);
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <HAL_UART_RxCpltCallback+0x38>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	4619      	mov	r1, r3
 8002f14:	4806      	ldr	r0, [pc, #24]	; (8002f30 <HAL_UART_RxCpltCallback+0x3c>)
 8002f16:	f7fe f972 	bl	80011fe <appAppendReceivedByte>
		receivedByte = 0x00;
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <HAL_UART_RxCpltCallback+0x38>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
	}
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	200000cc 	.word	0x200000cc
 8002f2c:	20000154 	.word	0x20000154
 8002f30:	20000164 	.word	0x20000164

08002f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f36:	b0b9      	sub	sp, #228	; 0xe4
 8002f38:	af38      	add	r7, sp, #224	; 0xe0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f3a:	f000 ffc5 	bl	8003ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f3e:	f000 f8e9 	bl	8003114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f42:	f000 fa71 	bl	8003428 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002f46:	f000 f957 	bl	80031f8 <MX_ADC1_Init>
  MX_TIM9_Init();
 8002f4a:	f000 f9df 	bl	800330c <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8002f4e:	f000 fa17 	bl	8003380 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002f52:	f000 fa3f 	bl	80033d4 <MX_USART3_UART_Init>
  MX_DAC_Init();
 8002f56:	f000 f9af 	bl	80032b8 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 8002f5a:	485f      	ldr	r0, [pc, #380]	; (80030d8 <main+0x1a4>)
 8002f5c:	f002 fe8c 	bl	8005c78 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002f60:	2100      	movs	r1, #0
 8002f62:	485e      	ldr	r0, [pc, #376]	; (80030dc <main+0x1a8>)
 8002f64:	f001 fd65 	bl	8004a32 <HAL_DAC_Start>
  appInit(&app, LED_GPIO_Port, LED_Pin, huart2, hdac, huart3, hadc1);
 8002f68:	4e5d      	ldr	r6, [pc, #372]	; (80030e0 <main+0x1ac>)
 8002f6a:	4a5e      	ldr	r2, [pc, #376]	; (80030e4 <main+0x1b0>)
 8002f6c:	ab26      	add	r3, sp, #152	; 0x98
 8002f6e:	4611      	mov	r1, r2
 8002f70:	2248      	movs	r2, #72	; 0x48
 8002f72:	4618      	mov	r0, r3
 8002f74:	f004 fe8e 	bl	8007c94 <memcpy>
 8002f78:	4a5b      	ldr	r2, [pc, #364]	; (80030e8 <main+0x1b4>)
 8002f7a:	ab15      	add	r3, sp, #84	; 0x54
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	2244      	movs	r2, #68	; 0x44
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 fe87 	bl	8007c94 <memcpy>
 8002f86:	4b55      	ldr	r3, [pc, #340]	; (80030dc <main+0x1a8>)
 8002f88:	ac10      	add	r4, sp, #64	; 0x40
 8002f8a:	461d      	mov	r5, r3
 8002f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f90:	682b      	ldr	r3, [r5, #0]
 8002f92:	6023      	str	r3, [r4, #0]
 8002f94:	466d      	mov	r5, sp
 8002f96:	1d34      	adds	r4, r6, #4
 8002f98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002fa8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002fac:	6833      	ldr	r3, [r6, #0]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	494e      	ldr	r1, [pc, #312]	; (80030ec <main+0x1b8>)
 8002fb2:	484f      	ldr	r0, [pc, #316]	; (80030f0 <main+0x1bc>)
 8002fb4:	f7fd fec8 	bl	8000d48 <appInit>
  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	494e      	ldr	r1, [pc, #312]	; (80030f4 <main+0x1c0>)
 8002fbc:	4848      	ldr	r0, [pc, #288]	; (80030e0 <main+0x1ac>)
 8002fbe:	f003 faf0 	bl	80065a2 <HAL_UART_Receive_IT>

	  /********************************* TOP SLOT START ********************************/

	  /* Put here the code to be executed in all cycles before the state machine */

	  if (samplingInterval >= appGetSamplingInterval(&app))
 8002fc2:	484b      	ldr	r0, [pc, #300]	; (80030f0 <main+0x1bc>)
 8002fc4:	f7fe fb60 	bl	8001688 <appGetSamplingInterval>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b4a      	ldr	r3, [pc, #296]	; (80030f8 <main+0x1c4>)
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d805      	bhi.n	8002fe0 <main+0xac>
	  {
		  appExecuteSampling(&app);
 8002fd4:	4846      	ldr	r0, [pc, #280]	; (80030f0 <main+0x1bc>)
 8002fd6:	f7fe f809 	bl	8000fec <appExecuteSampling>
		  samplingInterval = 0;
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <main+0x1c4>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	801a      	strh	r2, [r3, #0]
	  }

	  if (controllerInterval >= appGetPidInterval(&app))
 8002fe0:	4843      	ldr	r0, [pc, #268]	; (80030f0 <main+0x1bc>)
 8002fe2:	f7fe f9bd 	bl	8001360 <appGetPidInterval>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b44      	ldr	r3, [pc, #272]	; (80030fc <main+0x1c8>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d80b      	bhi.n	800300a <main+0xd6>
	  {
		  if (appGetRunPidControllerStatus(&app) == TRUE)
 8002ff2:	483f      	ldr	r0, [pc, #252]	; (80030f0 <main+0x1bc>)
 8002ff4:	f7fe fb19 	bl	800162a <appGetRunPidControllerStatus>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d102      	bne.n	8003004 <main+0xd0>
		  {
			  appRunController(&app);
 8002ffe:	483c      	ldr	r0, [pc, #240]	; (80030f0 <main+0x1bc>)
 8003000:	f7fd ff70 	bl	8000ee4 <appRunController>
		  }
		  controllerInterval = 0;
 8003004:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <main+0x1c8>)
 8003006:	2200      	movs	r2, #0
 8003008:	801a      	strh	r2, [r3, #0]

	  /* ============================================================================= */

	  /****************************** STATE MACHINE START ******************************/

	  switch (stateMachine)
 800300a:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <main+0x1cc>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b05      	cmp	r3, #5
 8003010:	d85d      	bhi.n	80030ce <main+0x19a>
 8003012:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <main+0xe4>)
 8003014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003018:	08003031 	.word	0x08003031
 800301c:	0800304d 	.word	0x0800304d
 8003020:	0800305b 	.word	0x0800305b
 8003024:	08003069 	.word	0x08003069
 8003028:	0800308f 	.word	0x0800308f
 800302c:	080030ad 	.word	0x080030ad
	  {
	  	  case 0:
	  		  if (decodeDataPacketDelay >= DELAY_10_MILISECONDS)
 8003030:	4b34      	ldr	r3, [pc, #208]	; (8003104 <main+0x1d0>)
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	2b63      	cmp	r3, #99	; 0x63
 8003036:	d905      	bls.n	8003044 <main+0x110>
	  		  {
	  			appDecodeReceivedData(&app);
 8003038:	482d      	ldr	r0, [pc, #180]	; (80030f0 <main+0x1bc>)
 800303a:	f7fe f8f1 	bl	8001220 <appDecodeReceivedData>
	  			decodeDataPacketDelay = 0;
 800303e:	4b31      	ldr	r3, [pc, #196]	; (8003104 <main+0x1d0>)
 8003040:	2200      	movs	r2, #0
 8003042:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  stateMachine = 1;
 8003044:	4b2e      	ldr	r3, [pc, #184]	; (8003100 <main+0x1cc>)
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
	  		  break;
 800304a:	e044      	b.n	80030d6 <main+0x1a2>

		  case 1:
			  appExtractCommandAndPayloadFromDecodedData(&app);
 800304c:	4828      	ldr	r0, [pc, #160]	; (80030f0 <main+0x1bc>)
 800304e:	f7fe f8f4 	bl	800123a <appExtractCommandAndPayloadFromDecodedData>
			  stateMachine = 2;
 8003052:	4b2b      	ldr	r3, [pc, #172]	; (8003100 <main+0x1cc>)
 8003054:	2202      	movs	r2, #2
 8003056:	701a      	strb	r2, [r3, #0]
			  break;
 8003058:	e03d      	b.n	80030d6 <main+0x1a2>

		  case 2:
			  appDecodeExtractedCommand(&app);
 800305a:	4825      	ldr	r0, [pc, #148]	; (80030f0 <main+0x1bc>)
 800305c:	f7fe f8fa 	bl	8001254 <appDecodeExtractedCommand>
			  stateMachine = 3;
 8003060:	4b27      	ldr	r3, [pc, #156]	; (8003100 <main+0x1cc>)
 8003062:	2203      	movs	r2, #3
 8003064:	701a      	strb	r2, [r3, #0]
			  break;
 8003066:	e036      	b.n	80030d6 <main+0x1a2>

		  case 3:
			  if (blinkLedDelay >= appGetBlinkDelay(&app))
 8003068:	4b27      	ldr	r3, [pc, #156]	; (8003108 <main+0x1d4>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	461c      	mov	r4, r3
 800306e:	4820      	ldr	r0, [pc, #128]	; (80030f0 <main+0x1bc>)
 8003070:	f7fe fb62 	bl	8001738 <appGetBlinkDelay>
 8003074:	4603      	mov	r3, r0
 8003076:	429c      	cmp	r4, r3
 8003078:	d305      	bcc.n	8003086 <main+0x152>
			  {
				  appExecuteBlinkLed(&app);
 800307a:	481d      	ldr	r0, [pc, #116]	; (80030f0 <main+0x1bc>)
 800307c:	f7fd ff26 	bl	8000ecc <appExecuteBlinkLed>
				  blinkLedDelay = 0;
 8003080:	4b21      	ldr	r3, [pc, #132]	; (8003108 <main+0x1d4>)
 8003082:	2200      	movs	r2, #0
 8003084:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 4;
 8003086:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <main+0x1cc>)
 8003088:	2204      	movs	r2, #4
 800308a:	701a      	strb	r2, [r3, #0]
			  break;
 800308c:	e023      	b.n	80030d6 <main+0x1a2>

		  case 4:
			  if (sendDataDelay1 >= DELAY_100_MILISECONDS)
 800308e:	4b1f      	ldr	r3, [pc, #124]	; (800310c <main+0x1d8>)
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003096:	d305      	bcc.n	80030a4 <main+0x170>
			  {
				  appSendData(&app);
 8003098:	4815      	ldr	r0, [pc, #84]	; (80030f0 <main+0x1bc>)
 800309a:	f7fe f8e9 	bl	8001270 <appSendData>
				  sendDataDelay1 = 0;
 800309e:	4b1b      	ldr	r3, [pc, #108]	; (800310c <main+0x1d8>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 5;
 80030a4:	4b16      	ldr	r3, [pc, #88]	; (8003100 <main+0x1cc>)
 80030a6:	2205      	movs	r2, #5
 80030a8:	701a      	strb	r2, [r3, #0]
			  break;
 80030aa:	e014      	b.n	80030d6 <main+0x1a2>

		  case 5:
			  if (sendKeepAliveDelay >= DELAY_2000_MILISECONDS)
 80030ac:	4b18      	ldr	r3, [pc, #96]	; (8003110 <main+0x1dc>)
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d906      	bls.n	80030c6 <main+0x192>
			  {
				  appSetEnableSendKeepAliveMessage(&app, TRUE);
 80030b8:	2101      	movs	r1, #1
 80030ba:	480d      	ldr	r0, [pc, #52]	; (80030f0 <main+0x1bc>)
 80030bc:	f7fe fb2b 	bl	8001716 <appSetEnableSendKeepAliveMessage>
				  sendKeepAliveDelay = 0;
 80030c0:	4b13      	ldr	r3, [pc, #76]	; (8003110 <main+0x1dc>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 0;
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <main+0x1cc>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
			  break;
 80030cc:	e003      	b.n	80030d6 <main+0x1a2>

		  default:
			  stateMachine = 0;
 80030ce:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <main+0x1cc>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
			  break;
 80030d4:	bf00      	nop
	  if (samplingInterval >= appGetSamplingInterval(&app))
 80030d6:	e774      	b.n	8002fc2 <main+0x8e>
 80030d8:	20000084 	.word	0x20000084
 80030dc:	20000070 	.word	0x20000070
 80030e0:	200000cc 	.word	0x200000cc
 80030e4:	20000028 	.word	0x20000028
 80030e8:	20000110 	.word	0x20000110
 80030ec:	40020000 	.word	0x40020000
 80030f0:	20000164 	.word	0x20000164
 80030f4:	20000154 	.word	0x20000154
 80030f8:	2000015c 	.word	0x2000015c
 80030fc:	2000015e 	.word	0x2000015e
 8003100:	20000a7c 	.word	0x20000a7c
 8003104:	20000156 	.word	0x20000156
 8003108:	20000158 	.word	0x20000158
 800310c:	2000015a 	.word	0x2000015a
 8003110:	20000160 	.word	0x20000160

08003114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b094      	sub	sp, #80	; 0x50
 8003118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800311a:	f107 031c 	add.w	r3, r7, #28
 800311e:	2234      	movs	r2, #52	; 0x34
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f004 fdc4 	bl	8007cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003128:	f107 0308 	add.w	r3, r7, #8
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003138:	2300      	movs	r3, #0
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	4b2c      	ldr	r3, [pc, #176]	; (80031f0 <SystemClock_Config+0xdc>)
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	4a2b      	ldr	r2, [pc, #172]	; (80031f0 <SystemClock_Config+0xdc>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003146:	6413      	str	r3, [r2, #64]	; 0x40
 8003148:	4b29      	ldr	r3, [pc, #164]	; (80031f0 <SystemClock_Config+0xdc>)
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003154:	2300      	movs	r3, #0
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <SystemClock_Config+0xe0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a25      	ldr	r2, [pc, #148]	; (80031f4 <SystemClock_Config+0xe0>)
 800315e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <SystemClock_Config+0xe0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800316c:	603b      	str	r3, [r7, #0]
 800316e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003170:	2302      	movs	r3, #2
 8003172:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003174:	2301      	movs	r3, #1
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003178:	2310      	movs	r3, #16
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800317c:	2302      	movs	r3, #2
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003180:	2300      	movs	r3, #0
 8003182:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003184:	2308      	movs	r3, #8
 8003186:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003188:	23b4      	movs	r3, #180	; 0xb4
 800318a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800318c:	2302      	movs	r3, #2
 800318e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003190:	2302      	movs	r3, #2
 8003192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003194:	2302      	movs	r3, #2
 8003196:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003198:	f107 031c 	add.w	r3, r7, #28
 800319c:	4618      	mov	r0, r3
 800319e:	f002 fa7d 	bl	800569c <HAL_RCC_OscConfig>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80031a8:	f000 f990 	bl	80034cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80031ac:	f001 ff62 	bl	8005074 <HAL_PWREx_EnableOverDrive>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80031b6:	f000 f989 	bl	80034cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031ba:	230f      	movs	r3, #15
 80031bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031be:	2302      	movs	r3, #2
 80031c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80031d2:	f107 0308 	add.w	r3, r7, #8
 80031d6:	2105      	movs	r1, #5
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 ff9b 	bl	8005114 <HAL_RCC_ClockConfig>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80031e4:	f000 f972 	bl	80034cc <Error_Handler>
  }
}
 80031e8:	bf00      	nop
 80031ea:	3750      	adds	r7, #80	; 0x50
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40007000 	.word	0x40007000

080031f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031fe:	463b      	mov	r3, r7
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800320a:	4b28      	ldr	r3, [pc, #160]	; (80032ac <MX_ADC1_Init+0xb4>)
 800320c:	4a28      	ldr	r2, [pc, #160]	; (80032b0 <MX_ADC1_Init+0xb8>)
 800320e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003210:	4b26      	ldr	r3, [pc, #152]	; (80032ac <MX_ADC1_Init+0xb4>)
 8003212:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003216:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003218:	4b24      	ldr	r3, [pc, #144]	; (80032ac <MX_ADC1_Init+0xb4>)
 800321a:	2200      	movs	r2, #0
 800321c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <MX_ADC1_Init+0xb4>)
 8003220:	2201      	movs	r2, #1
 8003222:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003224:	4b21      	ldr	r3, [pc, #132]	; (80032ac <MX_ADC1_Init+0xb4>)
 8003226:	2201      	movs	r2, #1
 8003228:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800322a:	4b20      	ldr	r3, [pc, #128]	; (80032ac <MX_ADC1_Init+0xb4>)
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003232:	4b1e      	ldr	r3, [pc, #120]	; (80032ac <MX_ADC1_Init+0xb4>)
 8003234:	2200      	movs	r2, #0
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003238:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <MX_ADC1_Init+0xb4>)
 800323a:	4a1e      	ldr	r2, [pc, #120]	; (80032b4 <MX_ADC1_Init+0xbc>)
 800323c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800323e:	4b1b      	ldr	r3, [pc, #108]	; (80032ac <MX_ADC1_Init+0xb4>)
 8003240:	2200      	movs	r2, #0
 8003242:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <MX_ADC1_Init+0xb4>)
 8003246:	2202      	movs	r2, #2
 8003248:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800324a:	4b18      	ldr	r3, [pc, #96]	; (80032ac <MX_ADC1_Init+0xb4>)
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <MX_ADC1_Init+0xb4>)
 8003254:	2201      	movs	r2, #1
 8003256:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003258:	4814      	ldr	r0, [pc, #80]	; (80032ac <MX_ADC1_Init+0xb4>)
 800325a:	f000 fea7 	bl	8003fac <HAL_ADC_Init>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003264:	f000 f932 	bl	80034cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003268:	2301      	movs	r3, #1
 800326a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800326c:	2301      	movs	r3, #1
 800326e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003270:	2306      	movs	r3, #6
 8003272:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003274:	463b      	mov	r3, r7
 8003276:	4619      	mov	r1, r3
 8003278:	480c      	ldr	r0, [pc, #48]	; (80032ac <MX_ADC1_Init+0xb4>)
 800327a:	f001 f879 	bl	8004370 <HAL_ADC_ConfigChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003284:	f000 f922 	bl	80034cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003288:	2306      	movs	r3, #6
 800328a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800328c:	2302      	movs	r3, #2
 800328e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003290:	463b      	mov	r3, r7
 8003292:	4619      	mov	r1, r3
 8003294:	4805      	ldr	r0, [pc, #20]	; (80032ac <MX_ADC1_Init+0xb4>)
 8003296:	f001 f86b 	bl	8004370 <HAL_ADC_ConfigChannel>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80032a0:	f000 f914 	bl	80034cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000028 	.word	0x20000028
 80032b0:	40012000 	.word	0x40012000
 80032b4:	0f000001 	.word	0x0f000001

080032b8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80032be:	463b      	mov	r3, r7
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80032c6:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <MX_DAC_Init+0x4c>)
 80032c8:	4a0f      	ldr	r2, [pc, #60]	; (8003308 <MX_DAC_Init+0x50>)
 80032ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80032cc:	480d      	ldr	r0, [pc, #52]	; (8003304 <MX_DAC_Init+0x4c>)
 80032ce:	f001 fb8e 	bl	80049ee <HAL_DAC_Init>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80032d8:	f000 f8f8 	bl	80034cc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80032dc:	2300      	movs	r3, #0
 80032de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80032e0:	2302      	movs	r3, #2
 80032e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80032e4:	463b      	mov	r3, r7
 80032e6:	2200      	movs	r2, #0
 80032e8:	4619      	mov	r1, r3
 80032ea:	4806      	ldr	r0, [pc, #24]	; (8003304 <MX_DAC_Init+0x4c>)
 80032ec:	f001 fc18 	bl	8004b20 <HAL_DAC_ConfigChannel>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80032f6:	f000 f8e9 	bl	80034cc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000070 	.word	0x20000070
 8003308:	40007400 	.word	0x40007400

0800330c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003312:	463b      	mov	r3, r7
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800331e:	4b16      	ldr	r3, [pc, #88]	; (8003378 <MX_TIM9_Init+0x6c>)
 8003320:	4a16      	ldr	r2, [pc, #88]	; (800337c <MX_TIM9_Init+0x70>)
 8003322:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 8003324:	4b14      	ldr	r3, [pc, #80]	; (8003378 <MX_TIM9_Init+0x6c>)
 8003326:	2204      	movs	r2, #4
 8003328:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800332a:	4b13      	ldr	r3, [pc, #76]	; (8003378 <MX_TIM9_Init+0x6c>)
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3665;
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <MX_TIM9_Init+0x6c>)
 8003332:	f640 6251 	movw	r2, #3665	; 0xe51
 8003336:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <MX_TIM9_Init+0x6c>)
 800333a:	2200      	movs	r2, #0
 800333c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800333e:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <MX_TIM9_Init+0x6c>)
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003344:	480c      	ldr	r0, [pc, #48]	; (8003378 <MX_TIM9_Init+0x6c>)
 8003346:	f002 fc47 	bl	8005bd8 <HAL_TIM_Base_Init>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003350:	f000 f8bc 	bl	80034cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003358:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800335a:	463b      	mov	r3, r7
 800335c:	4619      	mov	r1, r3
 800335e:	4806      	ldr	r0, [pc, #24]	; (8003378 <MX_TIM9_Init+0x6c>)
 8003360:	f002 fe02 	bl	8005f68 <HAL_TIM_ConfigClockSource>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800336a:	f000 f8af 	bl	80034cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000084 	.word	0x20000084
 800337c:	40014000 	.word	0x40014000

08003380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 8003386:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <MX_USART2_UART_Init+0x50>)
 8003388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800338a:	4b10      	ldr	r3, [pc, #64]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 800338c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 80033a6:	220c      	movs	r2, #12
 80033a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033b6:	4805      	ldr	r0, [pc, #20]	; (80033cc <MX_USART2_UART_Init+0x4c>)
 80033b8:	f003 f814 	bl	80063e4 <HAL_UART_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80033c2:	f000 f883 	bl	80034cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	200000cc 	.word	0x200000cc
 80033d0:	40004400 	.word	0x40004400

080033d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <MX_USART3_UART_Init+0x4c>)
 80033da:	4a12      	ldr	r2, [pc, #72]	; (8003424 <MX_USART3_UART_Init+0x50>)
 80033dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <MX_USART3_UART_Init+0x4c>)
 80033e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <MX_USART3_UART_Init+0x4c>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <MX_USART3_UART_Init+0x4c>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <MX_USART3_UART_Init+0x4c>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <MX_USART3_UART_Init+0x4c>)
 80033fa:	220c      	movs	r2, #12
 80033fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <MX_USART3_UART_Init+0x4c>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <MX_USART3_UART_Init+0x4c>)
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800340a:	4805      	ldr	r0, [pc, #20]	; (8003420 <MX_USART3_UART_Init+0x4c>)
 800340c:	f002 ffea 	bl	80063e4 <HAL_UART_Init>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003416:	f000 f859 	bl	80034cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000110 	.word	0x20000110
 8003424:	40004800 	.word	0x40004800

08003428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	609a      	str	r2, [r3, #8]
 800343a:	60da      	str	r2, [r3, #12]
 800343c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <MX_GPIO_Init+0x98>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a1e      	ldr	r2, [pc, #120]	; (80034c0 <MX_GPIO_Init+0x98>)
 8003448:	f043 0304 	orr.w	r3, r3, #4
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b1c      	ldr	r3, [pc, #112]	; (80034c0 <MX_GPIO_Init+0x98>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <MX_GPIO_Init+0x98>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <MX_GPIO_Init+0x98>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6313      	str	r3, [r2, #48]	; 0x30
 800346a:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <MX_GPIO_Init+0x98>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	607b      	str	r3, [r7, #4]
 8003474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003476:	2200      	movs	r2, #0
 8003478:	2120      	movs	r1, #32
 800347a:	4812      	ldr	r0, [pc, #72]	; (80034c4 <MX_GPIO_Init+0x9c>)
 800347c:	f001 fdc6 	bl	800500c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800348e:	f107 030c 	add.w	r3, r7, #12
 8003492:	4619      	mov	r1, r3
 8003494:	480c      	ldr	r0, [pc, #48]	; (80034c8 <MX_GPIO_Init+0xa0>)
 8003496:	f001 fc25 	bl	8004ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800349a:	2320      	movs	r3, #32
 800349c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800349e:	2301      	movs	r3, #1
 80034a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80034aa:	f107 030c 	add.w	r3, r7, #12
 80034ae:	4619      	mov	r1, r3
 80034b0:	4804      	ldr	r0, [pc, #16]	; (80034c4 <MX_GPIO_Init+0x9c>)
 80034b2:	f001 fc17 	bl	8004ce4 <HAL_GPIO_Init>

}
 80034b6:	bf00      	nop
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40020000 	.word	0x40020000
 80034c8:	40020800 	.word	0x40020800

080034cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034d0:	b672      	cpsid	i
}
 80034d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <Error_Handler+0x8>
	...

080034d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_MspInit+0x4c>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	4a0f      	ldr	r2, [pc, #60]	; (8003524 <HAL_MspInit+0x4c>)
 80034e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ec:	6453      	str	r3, [r2, #68]	; 0x44
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <HAL_MspInit+0x4c>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f6:	607b      	str	r3, [r7, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_MspInit+0x4c>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	4a08      	ldr	r2, [pc, #32]	; (8003524 <HAL_MspInit+0x4c>)
 8003504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003508:	6413      	str	r3, [r2, #64]	; 0x40
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_MspInit+0x4c>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800

08003528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003530:	f107 0314 	add.w	r3, r7, #20
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a17      	ldr	r2, [pc, #92]	; (80035a4 <HAL_ADC_MspInit+0x7c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d127      	bne.n	800359a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <HAL_ADC_MspInit+0x80>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <HAL_ADC_MspInit+0x80>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003558:	6453      	str	r3, [r2, #68]	; 0x44
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <HAL_ADC_MspInit+0x80>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <HAL_ADC_MspInit+0x80>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	4a0e      	ldr	r2, [pc, #56]	; (80035a8 <HAL_ADC_MspInit+0x80>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6313      	str	r3, [r2, #48]	; 0x30
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <HAL_ADC_MspInit+0x80>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = HIGH_CURRENT_SENSE_Pin|LOW_CURRENT_SENSE_Pin;
 8003582:	2342      	movs	r3, #66	; 0x42
 8003584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003586:	2303      	movs	r3, #3
 8003588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358e:	f107 0314 	add.w	r3, r7, #20
 8003592:	4619      	mov	r1, r3
 8003594:	4805      	ldr	r0, [pc, #20]	; (80035ac <HAL_ADC_MspInit+0x84>)
 8003596:	f001 fba5 	bl	8004ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800359a:	bf00      	nop
 800359c:	3728      	adds	r7, #40	; 0x28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40012000 	.word	0x40012000
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40020000 	.word	0x40020000

080035b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a17      	ldr	r2, [pc, #92]	; (800362c <HAL_DAC_MspInit+0x7c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d127      	bne.n	8003622 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	4b16      	ldr	r3, [pc, #88]	; (8003630 <HAL_DAC_MspInit+0x80>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	4a15      	ldr	r2, [pc, #84]	; (8003630 <HAL_DAC_MspInit+0x80>)
 80035dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035e0:	6413      	str	r3, [r2, #64]	; 0x40
 80035e2:	4b13      	ldr	r3, [pc, #76]	; (8003630 <HAL_DAC_MspInit+0x80>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <HAL_DAC_MspInit+0x80>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <HAL_DAC_MspInit+0x80>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6313      	str	r3, [r2, #48]	; 0x30
 80035fe:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <HAL_DAC_MspInit+0x80>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = CURRENT_CTRL_Pin;
 800360a:	2310      	movs	r3, #16
 800360c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800360e:	2303      	movs	r3, #3
 8003610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003616:	f107 0314 	add.w	r3, r7, #20
 800361a:	4619      	mov	r1, r3
 800361c:	4805      	ldr	r0, [pc, #20]	; (8003634 <HAL_DAC_MspInit+0x84>)
 800361e:	f001 fb61 	bl	8004ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003622:	bf00      	nop
 8003624:	3728      	adds	r7, #40	; 0x28
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40007400 	.word	0x40007400
 8003630:	40023800 	.word	0x40023800
 8003634:	40020000 	.word	0x40020000

08003638 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a0e      	ldr	r2, [pc, #56]	; (8003680 <HAL_TIM_Base_MspInit+0x48>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d115      	bne.n	8003676 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_TIM_Base_MspInit+0x4c>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <HAL_TIM_Base_MspInit+0x4c>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6453      	str	r3, [r2, #68]	; 0x44
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_TIM_Base_MspInit+0x4c>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003666:	2200      	movs	r2, #0
 8003668:	2100      	movs	r1, #0
 800366a:	2018      	movs	r0, #24
 800366c:	f001 f989 	bl	8004982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003670:	2018      	movs	r0, #24
 8003672:	f001 f9a2 	bl	80049ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40014000 	.word	0x40014000
 8003684:	40023800 	.word	0x40023800

08003688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003690:	f107 031c 	add.w	r3, r7, #28
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a36      	ldr	r2, [pc, #216]	; (8003780 <HAL_UART_MspInit+0xf8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d134      	bne.n	8003714 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	4b35      	ldr	r3, [pc, #212]	; (8003784 <HAL_UART_MspInit+0xfc>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a34      	ldr	r2, [pc, #208]	; (8003784 <HAL_UART_MspInit+0xfc>)
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ba:	4b32      	ldr	r3, [pc, #200]	; (8003784 <HAL_UART_MspInit+0xfc>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <HAL_UART_MspInit+0xfc>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	4a2d      	ldr	r2, [pc, #180]	; (8003784 <HAL_UART_MspInit+0xfc>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6313      	str	r3, [r2, #48]	; 0x30
 80036d6:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <HAL_UART_MspInit+0xfc>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036e2:	230c      	movs	r3, #12
 80036e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ee:	2303      	movs	r3, #3
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036f2:	2307      	movs	r3, #7
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f6:	f107 031c 	add.w	r3, r7, #28
 80036fa:	4619      	mov	r1, r3
 80036fc:	4822      	ldr	r0, [pc, #136]	; (8003788 <HAL_UART_MspInit+0x100>)
 80036fe:	f001 faf1 	bl	8004ce4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003702:	2200      	movs	r2, #0
 8003704:	2100      	movs	r1, #0
 8003706:	2026      	movs	r0, #38	; 0x26
 8003708:	f001 f93b 	bl	8004982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800370c:	2026      	movs	r0, #38	; 0x26
 800370e:	f001 f954 	bl	80049ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003712:	e031      	b.n	8003778 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1c      	ldr	r2, [pc, #112]	; (800378c <HAL_UART_MspInit+0x104>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d12c      	bne.n	8003778 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	4b18      	ldr	r3, [pc, #96]	; (8003784 <HAL_UART_MspInit+0xfc>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	4a17      	ldr	r2, [pc, #92]	; (8003784 <HAL_UART_MspInit+0xfc>)
 8003728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372c:	6413      	str	r3, [r2, #64]	; 0x40
 800372e:	4b15      	ldr	r3, [pc, #84]	; (8003784 <HAL_UART_MspInit+0xfc>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	4b11      	ldr	r3, [pc, #68]	; (8003784 <HAL_UART_MspInit+0xfc>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	4a10      	ldr	r2, [pc, #64]	; (8003784 <HAL_UART_MspInit+0xfc>)
 8003744:	f043 0304 	orr.w	r3, r3, #4
 8003748:	6313      	str	r3, [r2, #48]	; 0x30
 800374a:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <HAL_UART_MspInit+0xfc>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003756:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800375a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003764:	2303      	movs	r3, #3
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003768:	2307      	movs	r3, #7
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800376c:	f107 031c 	add.w	r3, r7, #28
 8003770:	4619      	mov	r1, r3
 8003772:	4807      	ldr	r0, [pc, #28]	; (8003790 <HAL_UART_MspInit+0x108>)
 8003774:	f001 fab6 	bl	8004ce4 <HAL_GPIO_Init>
}
 8003778:	bf00      	nop
 800377a:	3730      	adds	r7, #48	; 0x30
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40004400 	.word	0x40004400
 8003784:	40023800 	.word	0x40023800
 8003788:	40020000 	.word	0x40020000
 800378c:	40004800 	.word	0x40004800
 8003790:	40020800 	.word	0x40020800

08003794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003798:	e7fe      	b.n	8003798 <NMI_Handler+0x4>

0800379a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800379a:	b480      	push	{r7}
 800379c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800379e:	e7fe      	b.n	800379e <HardFault_Handler+0x4>

080037a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037a4:	e7fe      	b.n	80037a4 <MemManage_Handler+0x4>

080037a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037aa:	e7fe      	b.n	80037aa <BusFault_Handler+0x4>

080037ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037b0:	e7fe      	b.n	80037b0 <UsageFault_Handler+0x4>

080037b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037b2:	b480      	push	{r7}
 80037b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ce:	b480      	push	{r7}
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037e0:	f000 fbc4 	bl	8003f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037e4:	bf00      	nop
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80037ec:	4802      	ldr	r0, [pc, #8]	; (80037f8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80037ee:	f002 fab3 	bl	8005d58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000084 	.word	0x20000084

080037fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003800:	4802      	ldr	r0, [pc, #8]	; (800380c <USART2_IRQHandler+0x10>)
 8003802:	f002 feff 	bl	8006604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	200000cc 	.word	0x200000cc

08003810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003814:	4b06      	ldr	r3, [pc, #24]	; (8003830 <SystemInit+0x20>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381a:	4a05      	ldr	r2, [pc, #20]	; (8003830 <SystemInit+0x20>)
 800381c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800386c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003838:	480d      	ldr	r0, [pc, #52]	; (8003870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800383a:	490e      	ldr	r1, [pc, #56]	; (8003874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800383c:	4a0e      	ldr	r2, [pc, #56]	; (8003878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800383e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003840:	e002      	b.n	8003848 <LoopCopyDataInit>

08003842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003846:	3304      	adds	r3, #4

08003848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800384a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800384c:	d3f9      	bcc.n	8003842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800384e:	4a0b      	ldr	r2, [pc, #44]	; (800387c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003850:	4c0b      	ldr	r4, [pc, #44]	; (8003880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003854:	e001      	b.n	800385a <LoopFillZerobss>

08003856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003858:	3204      	adds	r2, #4

0800385a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800385a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800385c:	d3fb      	bcc.n	8003856 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800385e:	f7ff ffd7 	bl	8003810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003862:	f004 f9f3 	bl	8007c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003866:	f7ff fb65 	bl	8002f34 <main>
  bx  lr    
 800386a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800386c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003878:	08007fe8 	.word	0x08007fe8
  ldr r2, =_sbss
 800387c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003880:	20000a84 	.word	0x20000a84

08003884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003884:	e7fe      	b.n	8003884 <ADC_IRQHandler>

08003886 <genCrc>:

/**
  * Calcula o crc8 entre o range passado como parametro.
  */
uint8_t genCrc(uint8_t buffer[], uint16_t qtd_de_bytes_no_pacote)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 800389a:	2300      	movs	r3, #0
 800389c:	73bb      	strb	r3, [r7, #14]
 800389e:	e00d      	b.n	80038bc <genCrc+0x36>
    {
      crc = calcCrc8(crc, buffer[i]);
 80038a0:	7bbb      	ldrb	r3, [r7, #14]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	781a      	ldrb	r2, [r3, #0]
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	4611      	mov	r1, r2
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 f80f 	bl	80038d0 <calcCrc8>
 80038b2:	4603      	mov	r3, r0
 80038b4:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	3301      	adds	r3, #1
 80038ba:	73bb      	strb	r3, [r7, #14]
 80038bc:	7bbb      	ldrb	r3, [r7, #14]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	887a      	ldrh	r2, [r7, #2]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d8ec      	bhi.n	80038a0 <genCrc+0x1a>
    }

  return crc;
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <calcCrc8>:

/**
  * Funcao que calcula o CRC8
  */
static uint8_t calcCrc8(uint8_t crc3, uint8_t b)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	460a      	mov	r2, r1
 80038da:	71fb      	strb	r3, [r7, #7]
 80038dc:	4613      	mov	r3, r2
 80038de:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	73fb      	strb	r3, [r7, #15]
    pos = (((crc3 & 0xff) ^ b) & 0xff);
 80038e4:	79fa      	ldrb	r2, [r7, #7]
 80038e6:	79bb      	ldrb	r3, [r7, #6]
 80038e8:	4053      	eors	r3, r2
 80038ea:	73fb      	strb	r3, [r7, #15]

    return ((crc3) >> 8) ^ table[pos];
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	121b      	asrs	r3, r3, #8
 80038f0:	b25a      	sxtb	r2, r3
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	4905      	ldr	r1, [pc, #20]	; (800390c <calcCrc8+0x3c>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	b25b      	sxtb	r3, r3
 80038fa:	4053      	eors	r3, r2
 80038fc:	b25b      	sxtb	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	08007ed8 	.word	0x08007ed8

08003910 <dataPacketRxInit>:
 */

#include "dataPacketRx.h"

void dataPacketRxInit(DataPacketRx *dataPacketRx, uint8_t start_1, uint8_t start_2)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	70fb      	strb	r3, [r7, #3]
 800391c:	4613      	mov	r3, r2
 800391e:	70bb      	strb	r3, [r7, #2]
	dataPacketRx->start_1 = start_1;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	701a      	strb	r2, [r3, #0]
	dataPacketRx->start_2 = start_2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	78ba      	ldrb	r2, [r7, #2]
 800392a:	705a      	strb	r2, [r3, #1]
	dataPacketRx->command = 0x00;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	709a      	strb	r2, [r3, #2]
	dataPacketRx->payloadDataLength = 0x00;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	70da      	strb	r2, [r3, #3]
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	2232      	movs	r2, #50	; 0x32
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f004 f9b5 	bl	8007cb0 <memset>
	dataPacketRx->crc8 = 0x00;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3337      	adds	r3, #55	; 0x37
 8003952:	2237      	movs	r2, #55	; 0x37
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f004 f9aa 	bl	8007cb0 <memset>
	dataPacketRx->dataPacketLength = 0x00;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketRx->currentRxByteIndex = 0;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	dataPacketRx->containsStarterBytes = FALSE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	dataPacketRx->starterByteIndex = 0;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <dataPacketRxAppend>:

void dataPacketRxAppend(DataPacketRx *dataPacketRx, uint8_t newByte)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacket[dataPacketRx->currentRxByteIndex] = newByte;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800399e:	461a      	mov	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4413      	add	r3, r2
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketRx->currentRxByteIndex++;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80039b0:	3301      	adds	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketLength++;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80039c0:	3301      	adds	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	if (dataPacketRx->currentRxByteIndex > QTY_PACKET_RX_BYTES)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80039d0:	2b37      	cmp	r3, #55	; 0x37
 80039d2:	d90a      	bls.n	80039ea <dataPacketRxAppend+0x5e>
	{
		dataPacketRxClear(dataPacketRx);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f8cf 	bl	8003b78 <dataPacketRxClear>
		dataPacketRx->currentRxByteIndex = 0;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		dataPacketRx->dataPacketLength = 0;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	}
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <dataPacketRxDecode>:

void dataPacketRxDecode(DataPacketRx *dataPacketRx)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
	if (dataPacketRx->containsStarterBytes == TRUE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d17e      	bne.n	8003b02 <dataPacketRxDecode+0x110>
	{
		dataPacketRxSetCommand(dataPacketRx, dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 2]);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f8e2 	bl	8003be0 <dataPacketRxSetCommand>
		dataPacketRx->payloadDataLength = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 3];
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8003a22:	3303      	adds	r3, #3
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	4413      	add	r3, r2
 8003a28:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	70da      	strb	r2, [r3, #3]

		if (dataPacketRx->payloadDataLength == 0)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	78db      	ldrb	r3, [r3, #3]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d126      	bne.n	8003a86 <dataPacketRxDecode+0x94>
		{
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 4];
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8003a3e:	3304      	adds	r3, #4
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4413      	add	r3, r2
 8003a44:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003a48:	733b      	strb	r3, [r7, #12]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, 4);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3337      	adds	r3, #55	; 0x37
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	f8b2 2074 	ldrh.w	r2, [r2, #116]	; 0x74
 8003a54:	4413      	add	r3, r2
 8003a56:	2104      	movs	r1, #4
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff14 	bl	8003886 <genCrc>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461a      	mov	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

			if (dataPacketRx->crc8 == receivedCrc8)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003a6e:	7b3a      	ldrb	r2, [r7, #12]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d17d      	bne.n	8003b70 <dataPacketRxDecode+0x17e>
			{
				dataPacketRx->currentRxByteIndex = 0;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
			{
				dataPacketRxClear(dataPacketRx);
			}
		}
	}
}
 8003a84:	e074      	b.n	8003b70 <dataPacketRxDecode+0x17e>
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + dataPacketRx->payloadDataLength + 4];
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	78db      	ldrb	r3, [r3, #3]
 8003a92:	4413      	add	r3, r2
 8003a94:	3304      	adds	r3, #4
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003a9e:	737b      	strb	r3, [r7, #13]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, dataPacketRx->payloadDataLength + 4);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3337      	adds	r3, #55	; 0x37
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	f8b2 2074 	ldrh.w	r2, [r2, #116]	; 0x74
 8003aaa:	441a      	add	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	78db      	ldrb	r3, [r3, #3]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	f7ff fee4 	bl	8003886 <genCrc>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			if (dataPacketRx->crc8 == receivedCrc8)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ace:	7b7a      	ldrb	r2, [r7, #13]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d14d      	bne.n	8003b70 <dataPacketRxDecode+0x17e>
				dataPacketRxSetPayloadData(dataPacketRx, dataPacketRx->dataPacket + dataPacketRx->starterByteIndex + 4, dataPacketRx->payloadDataLength);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	18d1      	adds	r1, r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	78db      	ldrb	r3, [r3, #3]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f89e 	bl	8003c2c <dataPacketRxSetPayloadData>
				dataPacketRx->currentRxByteIndex = 0;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
 8003b00:	e036      	b.n	8003b70 <dataPacketRxDecode+0x17e>
		if (dataPacketRx->dataPacketLength >= MIN_PACKET_RX_BYTES)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d931      	bls.n	8003b70 <dataPacketRxDecode+0x17e>
			uint16_t index = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	81fb      	strh	r3, [r7, #14]
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 8003b10:	2300      	movs	r3, #0
 8003b12:	81fb      	strh	r3, [r7, #14]
 8003b14:	e01e      	b.n	8003b54 <dataPacketRxDecode+0x162>
				if ((dataPacketRx->dataPacket[index] == dataPacketRx->start_1) && (dataPacketRx->dataPacket[index+1] == dataPacketRx->start_2))
 8003b16:	89fb      	ldrh	r3, [r7, #14]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d112      	bne.n	8003b4e <dataPacketRxDecode+0x15c>
 8003b28:	89fb      	ldrh	r3, [r7, #14]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	785b      	ldrb	r3, [r3, #1]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d108      	bne.n	8003b4e <dataPacketRxDecode+0x15c>
					dataPacketRx->containsStarterBytes = TRUE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
					dataPacketRx->starterByteIndex = index;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	89fa      	ldrh	r2, [r7, #14]
 8003b48:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
					break;
 8003b4c:	e008      	b.n	8003b60 <dataPacketRxDecode+0x16e>
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 8003b4e:	89fb      	ldrh	r3, [r7, #14]
 8003b50:	3301      	adds	r3, #1
 8003b52:	81fb      	strh	r3, [r7, #14]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8003b5a:	89fa      	ldrh	r2, [r7, #14]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d3da      	bcc.n	8003b16 <dataPacketRxDecode+0x124>
			if (dataPacketRx->containsStarterBytes == FALSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d102      	bne.n	8003b70 <dataPacketRxDecode+0x17e>
				dataPacketRxClear(dataPacketRx);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f804 	bl	8003b78 <dataPacketRxClear>
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <dataPacketRxClear>:

void dataPacketRxClear(DataPacketRx *dataPacketRx)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	dataPacketRx->containsStarterBytes = FALSE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	dataPacketRx->currentRxByteIndex = 0;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketLength = 0;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketRx->payloadDataLength = 0;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	70da      	strb	r2, [r3, #3]
	dataPacketRx->command = 0x00;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	709a      	strb	r2, [r3, #2]
	dataPacketRx->crc8 = 0x00;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketRx->starterByteIndex = 0;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	2232      	movs	r2, #50	; 0x32
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f004 f873 	bl	8007cb0 <memset>
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3337      	adds	r3, #55	; 0x37
 8003bce:	2237      	movs	r2, #55	; 0x37
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f004 f86c 	bl	8007cb0 <memset>
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <dataPacketRxSetCommand>:
	dataPacketRx->crc8 = 0x00;
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
}

void dataPacketRxSetCommand(DataPacketRx *dataPacketRx, uint8_t command)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	if ((command < 0x01) || (command > 0xFE))
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d006      	beq.n	8003c08 <dataPacketRxSetCommand+0x28>
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	2bff      	cmp	r3, #255	; 0xff
 8003bfe:	d003      	beq.n	8003c08 <dataPacketRxSetCommand+0x28>
	{
		return;
	}

	dataPacketRx->command = command;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	709a      	strb	r2, [r3, #2]
 8003c06:	e000      	b.n	8003c0a <dataPacketRxSetCommand+0x2a>
		return;
 8003c08:	bf00      	nop
}
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <dataPacketRxGetCommand>:

uint8_t dataPacketRxGetCommand(DataPacketRx *dataPacketRx)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	return dataPacketRx->command;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	789b      	ldrb	r3, [r3, #2]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <dataPacketRxSetPayloadData>:

void dataPacketRxSetPayloadData(DataPacketRx *dataPacketRx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	4613      	mov	r3, r2
 8003c38:	71fb      	strb	r3, [r7, #7]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	memcpy(dataPacketRx->payloadData, payloadData, payloadDataLength);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3304      	adds	r3, #4
 8003c46:	79fa      	ldrb	r2, [r7, #7]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 f822 	bl	8007c94 <memcpy>
	dataPacketRx->payloadDataLength = payloadDataLength;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	79fa      	ldrb	r2, [r7, #7]
 8003c54:	70da      	strb	r2, [r3, #3]
}
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <dataPacketRxGetPayloadData>:

uint8_t *dataPacketRxGetPayloadData(DataPacketRx *dataPacketRx)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadData;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3304      	adds	r3, #4
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <dataPacketRxGetPayloadDataLength>:

uint8_t dataPacketRxGetPayloadDataLength(DataPacketRx *dataPacketRx)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadDataLength;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	78db      	ldrb	r3, [r3, #3]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <dataPacketRxGetDataPacketStatus>:
{
	return dataPacketRx->dataPacketLength;
}

DataPacketRxStatus dataPacketRxGetDataPacketStatus(DataPacketRx *dataPacketRx)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
	return dataPacketRx->dataPacketRxStatus;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <dataPacketTxInit>:
 */

#include "dataPacketTx.h"

void dataPacketTxInit(DataPacketTx *dataPacketTx, uint8_t start_1, uint8_t start_2)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70fb      	strb	r3, [r7, #3]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	70bb      	strb	r3, [r7, #2]
	dataPacketTx->start_1 = start_1;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	701a      	strb	r2, [r3, #0]
	dataPacketTx->start_2 = start_2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	78ba      	ldrb	r2, [r7, #2]
 8003cc2:	705a      	strb	r2, [r3, #1]
	dataPacketTx->command = 0x00;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	709a      	strb	r2, [r3, #2]
	dataPacketTx->payloadDataLength = 0x00;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	70da      	strb	r2, [r3, #3]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	2232      	movs	r2, #50	; 0x32
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f003 ffe9 	bl	8007cb0 <memset>
	dataPacketTx->crc8 = 0x00;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3337      	adds	r3, #55	; 0x37
 8003cea:	2237      	movs	r2, #55	; 0x37
 8003cec:	2100      	movs	r1, #0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f003 ffde 	bl	8007cb0 <memset>
	dataPacketTx->dataPacketLength = 0x00;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <dataPacketTxMount>:

void dataPacketTxMount(DataPacketTx *dataPacketTx)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacket[0] = dataPacketTx->start_1;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	781a      	ldrb	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketTx->dataPacket[1] = dataPacketTx->start_2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	785a      	ldrb	r2, [r3, #1]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dataPacketTx->dataPacket[2] = dataPacketTx->command;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	789a      	ldrb	r2, [r3, #2]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dataPacketTx->dataPacket[3] = dataPacketTx->payloadDataLength;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	78da      	ldrb	r2, [r3, #3]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	memcpy(dataPacketTx->dataPacket + 4, dataPacketTx->payloadData, dataPacketTx->payloadDataLength);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3337      	adds	r3, #55	; 0x37
 8003d40:	1d18      	adds	r0, r3, #4
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	1d19      	adds	r1, r3, #4
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	78db      	ldrb	r3, [r3, #3]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f003 ffa2 	bl	8007c94 <memcpy>
	dataPacketTx->dataPacketLength = dataPacketTx->payloadDataLength + 4 + 1;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	78db      	ldrb	r3, [r3, #3]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3305      	adds	r3, #5
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = genCrc(dataPacketTx->dataPacket, dataPacketTx->dataPacketLength - 1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f7ff fd87 	bl	8003886 <genCrc>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->dataPacket[dataPacketTx->payloadDataLength + 4] = dataPacketTx->crc8;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	78db      	ldrb	r3, [r3, #3]
 8003d86:	3304      	adds	r3, #4
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	f892 1036 	ldrb.w	r1, [r2, #54]	; 0x36
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	4413      	add	r3, r2
 8003d92:	460a      	mov	r2, r1
 8003d94:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketTx->dataPacketTxStatus = VALID_TX_DATA_PACKET;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8003da0:	bf00      	nop
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <dataPacketTxUartSend>:

void dataPacketTxUartSend(DataPacketTx *dataPacketTx, UART_HandleTypeDef huart)
{
 8003da8:	b084      	sub	sp, #16
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	f107 0014 	add.w	r0, r7, #20
 8003db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (dataPacketTx->dataPacketTxStatus == VALID_TX_DATA_PACKET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d10b      	bne.n	8003ddc <dataPacketTxUartSend+0x34>
	{
		HAL_UART_Transmit(&huart, dataPacketTx->dataPacket, dataPacketTx->dataPacketLength, HAL_MAX_DELAY);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8003dd0:	f107 0014 	add.w	r0, r7, #20
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd8:	f002 fb51 	bl	800647e <HAL_UART_Transmit>
	}
}
 8003ddc:	bf00      	nop
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003de6:	b004      	add	sp, #16
 8003de8:	4770      	bx	lr

08003dea <dataPacketTxClear>:

void dataPacketTxClear(DataPacketTx *dataPacketTx)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	dataPacketTx->dataPacketLength = 0;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = 0x00;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->command = 0x00;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3337      	adds	r3, #55	; 0x37
 8003e14:	2237      	movs	r2, #55	; 0x37
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f003 ff49 	bl	8007cb0 <memset>
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <dataPacketTxPayloadDataClear>:

void dataPacketTxPayloadDataClear(DataPacketTx *dataPacketTx)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	dataPacketTx->dataPacketLength = 0;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = 0x00;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->command = 0x00;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	2232      	movs	r2, #50	; 0x32
 8003e52:	2100      	movs	r1, #0
 8003e54:	4618      	mov	r0, r3
 8003e56:	f003 ff2b 	bl	8007cb0 <memset>
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <dataPacketTxSetCommand>:

void dataPacketTxSetCommand(DataPacketTx *dataPacketTx, uint8_t command)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	70fb      	strb	r3, [r7, #3]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	if ((command < 0x01) || (command > 0xFE))
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d006      	beq.n	8003e8a <dataPacketTxSetCommand+0x28>
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	2bff      	cmp	r3, #255	; 0xff
 8003e80:	d003      	beq.n	8003e8a <dataPacketTxSetCommand+0x28>
	{
		return;
	}

	dataPacketTx->command = command;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	709a      	strb	r2, [r3, #2]
 8003e88:	e000      	b.n	8003e8c <dataPacketTxSetCommand+0x2a>
		return;
 8003e8a:	bf00      	nop
}
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <dataPacketTxSetPayloadData>:
{
	return dataPacketTx->command;
}

void dataPacketTxSetPayloadData(DataPacketTx *dataPacketTx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	71fb      	strb	r3, [r7, #7]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	memcpy(dataPacketTx->payloadData, payloadData, payloadDataLength);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	79fa      	ldrb	r2, [r7, #7]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f003 feed 	bl	8007c94 <memcpy>
	dataPacketTx->payloadDataLength = payloadDataLength;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	79fa      	ldrb	r2, [r7, #7]
 8003ebe:	70da      	strb	r2, [r3, #3]
}
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <HAL_Init+0x40>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a0d      	ldr	r2, [pc, #52]	; (8003f08 <HAL_Init+0x40>)
 8003ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_Init+0x40>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <HAL_Init+0x40>)
 8003ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ee4:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <HAL_Init+0x40>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a07      	ldr	r2, [pc, #28]	; (8003f08 <HAL_Init+0x40>)
 8003eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ef0:	2003      	movs	r0, #3
 8003ef2:	f000 fd3b 	bl	800496c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ef6:	200f      	movs	r0, #15
 8003ef8:	f000 f808 	bl	8003f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003efc:	f7ff faec 	bl	80034d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40023c00 	.word	0x40023c00

08003f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f14:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <HAL_InitTick+0x54>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <HAL_InitTick+0x58>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fd53 	bl	80049d6 <HAL_SYSTICK_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e00e      	b.n	8003f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b0f      	cmp	r3, #15
 8003f3e:	d80a      	bhi.n	8003f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f40:	2200      	movs	r2, #0
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	f04f 30ff 	mov.w	r0, #4294967295
 8003f48:	f000 fd1b 	bl	8004982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f4c:	4a06      	ldr	r2, [pc, #24]	; (8003f68 <HAL_InitTick+0x5c>)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20000000 	.word	0x20000000
 8003f64:	20000008 	.word	0x20000008
 8003f68:	20000004 	.word	0x20000004

08003f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <HAL_IncTick+0x20>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	461a      	mov	r2, r3
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <HAL_IncTick+0x24>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <HAL_IncTick+0x24>)
 8003f7e:	6013      	str	r3, [r2, #0]
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20000008 	.word	0x20000008
 8003f90:	20000a80 	.word	0x20000a80

08003f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return uwTick;
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <HAL_GetTick+0x14>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000a80 	.word	0x20000a80

08003fac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e033      	b.n	800402a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff faac 	bl	8003528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d118      	bne.n	800401c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ff2:	f023 0302 	bic.w	r3, r3, #2
 8003ff6:	f043 0202 	orr.w	r2, r3, #2
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fae8 	bl	80045d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f023 0303 	bic.w	r3, r3, #3
 8004012:	f043 0201 	orr.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40
 800401a:	e001      	b.n	8004020 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_ADC_Start+0x1a>
 800404a:	2302      	movs	r3, #2
 800404c:	e0b2      	b.n	80041b4 <HAL_ADC_Start+0x180>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	d018      	beq.n	8004096 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004074:	4b52      	ldr	r3, [pc, #328]	; (80041c0 <HAL_ADC_Start+0x18c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a52      	ldr	r2, [pc, #328]	; (80041c4 <HAL_ADC_Start+0x190>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	0c9a      	lsrs	r2, r3, #18
 8004080:	4613      	mov	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4413      	add	r3, r2
 8004086:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004088:	e002      	b.n	8004090 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	3b01      	subs	r3, #1
 800408e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f9      	bne.n	800408a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d17a      	bne.n	800419a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80040ac:	f023 0301 	bic.w	r3, r3, #1
 80040b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d007      	beq.n	80040d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e2:	d106      	bne.n	80040f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e8:	f023 0206 	bic.w	r2, r3, #6
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	645a      	str	r2, [r3, #68]	; 0x44
 80040f0:	e002      	b.n	80040f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004100:	4b31      	ldr	r3, [pc, #196]	; (80041c8 <HAL_ADC_Start+0x194>)
 8004102:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800410c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	2b00      	cmp	r3, #0
 8004118:	d12a      	bne.n	8004170 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2b      	ldr	r2, [pc, #172]	; (80041cc <HAL_ADC_Start+0x198>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d015      	beq.n	8004150 <HAL_ADC_Start+0x11c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <HAL_ADC_Start+0x19c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d105      	bne.n	800413a <HAL_ADC_Start+0x106>
 800412e:	4b26      	ldr	r3, [pc, #152]	; (80041c8 <HAL_ADC_Start+0x194>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a25      	ldr	r2, [pc, #148]	; (80041d4 <HAL_ADC_Start+0x1a0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d136      	bne.n	80041b2 <HAL_ADC_Start+0x17e>
 8004144:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <HAL_ADC_Start+0x194>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	d130      	bne.n	80041b2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d129      	bne.n	80041b2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800416c:	609a      	str	r2, [r3, #8]
 800416e:	e020      	b.n	80041b2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a15      	ldr	r2, [pc, #84]	; (80041cc <HAL_ADC_Start+0x198>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d11b      	bne.n	80041b2 <HAL_ADC_Start+0x17e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d114      	bne.n	80041b2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	e00b      	b.n	80041b2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f043 0210 	orr.w	r2, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	f043 0201 	orr.w	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	20000000 	.word	0x20000000
 80041c4:	431bde83 	.word	0x431bde83
 80041c8:	40012300 	.word	0x40012300
 80041cc:	40012000 	.word	0x40012000
 80041d0:	40012100 	.word	0x40012100
 80041d4:	40012200 	.word	0x40012200

080041d8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_ADC_Stop+0x16>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e021      	b.n	8004232 <HAL_ADC_Stop+0x5a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0201 	bic.w	r2, r2, #1
 8004204:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d109      	bne.n	8004228 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800421c:	f023 0301 	bic.w	r3, r3, #1
 8004220:	f043 0201 	orr.w	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425a:	d113      	bne.n	8004284 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800426a:	d10b      	bne.n	8004284 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	f043 0220 	orr.w	r2, r3, #32
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e063      	b.n	800434c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004284:	f7ff fe86 	bl	8003f94 <HAL_GetTick>
 8004288:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800428a:	e021      	b.n	80042d0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d01d      	beq.n	80042d0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <HAL_ADC_PollForConversion+0x6c>
 800429a:	f7ff fe7b 	bl	8003f94 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d212      	bcs.n	80042d0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d00b      	beq.n	80042d0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	f043 0204 	orr.w	r2, r3, #4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e03d      	b.n	800434c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d1d6      	bne.n	800428c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f06f 0212 	mvn.w	r2, #18
 80042e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d123      	bne.n	800434a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004306:	2b00      	cmp	r3, #0
 8004308:	d11f      	bne.n	800434a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004314:	2b00      	cmp	r3, #0
 8004316:	d006      	beq.n	8004326 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004322:	2b00      	cmp	r3, #0
 8004324:	d111      	bne.n	800434a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d105      	bne.n	800434a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0201 	orr.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004362:	4618      	mov	r0, r3
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_ADC_ConfigChannel+0x1c>
 8004388:	2302      	movs	r3, #2
 800438a:	e113      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x244>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b09      	cmp	r3, #9
 800439a:	d925      	bls.n	80043e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68d9      	ldr	r1, [r3, #12]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	4613      	mov	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4413      	add	r3, r2
 80043b0:	3b1e      	subs	r3, #30
 80043b2:	2207      	movs	r2, #7
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	43da      	mvns	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	400a      	ands	r2, r1
 80043c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68d9      	ldr	r1, [r3, #12]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	4618      	mov	r0, r3
 80043d4:	4603      	mov	r3, r0
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	4403      	add	r3, r0
 80043da:	3b1e      	subs	r3, #30
 80043dc:	409a      	lsls	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	60da      	str	r2, [r3, #12]
 80043e6:	e022      	b.n	800442e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6919      	ldr	r1, [r3, #16]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	2207      	movs	r2, #7
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43da      	mvns	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	400a      	ands	r2, r1
 800440a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6919      	ldr	r1, [r3, #16]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	4618      	mov	r0, r3
 800441e:	4603      	mov	r3, r0
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	4403      	add	r3, r0
 8004424:	409a      	lsls	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b06      	cmp	r3, #6
 8004434:	d824      	bhi.n	8004480 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	3b05      	subs	r3, #5
 8004448:	221f      	movs	r2, #31
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43da      	mvns	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	400a      	ands	r2, r1
 8004456:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	4618      	mov	r0, r3
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	3b05      	subs	r3, #5
 8004472:	fa00 f203 	lsl.w	r2, r0, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	635a      	str	r2, [r3, #52]	; 0x34
 800447e:	e04c      	b.n	800451a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b0c      	cmp	r3, #12
 8004486:	d824      	bhi.n	80044d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	3b23      	subs	r3, #35	; 0x23
 800449a:	221f      	movs	r2, #31
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	43da      	mvns	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	400a      	ands	r2, r1
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	4618      	mov	r0, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	3b23      	subs	r3, #35	; 0x23
 80044c4:	fa00 f203 	lsl.w	r2, r0, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
 80044d0:	e023      	b.n	800451a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	3b41      	subs	r3, #65	; 0x41
 80044e4:	221f      	movs	r2, #31
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43da      	mvns	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	400a      	ands	r2, r1
 80044f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	4618      	mov	r0, r3
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	3b41      	subs	r3, #65	; 0x41
 800450e:	fa00 f203 	lsl.w	r2, r0, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800451a:	4b29      	ldr	r3, [pc, #164]	; (80045c0 <HAL_ADC_ConfigChannel+0x250>)
 800451c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a28      	ldr	r2, [pc, #160]	; (80045c4 <HAL_ADC_ConfigChannel+0x254>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10f      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x1d8>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b12      	cmp	r3, #18
 800452e:	d10b      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1d      	ldr	r2, [pc, #116]	; (80045c4 <HAL_ADC_ConfigChannel+0x254>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d12b      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x23a>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <HAL_ADC_ConfigChannel+0x258>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <HAL_ADC_ConfigChannel+0x1f4>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b11      	cmp	r3, #17
 8004562:	d122      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a11      	ldr	r2, [pc, #68]	; (80045c8 <HAL_ADC_ConfigChannel+0x258>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d111      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004586:	4b11      	ldr	r3, [pc, #68]	; (80045cc <HAL_ADC_ConfigChannel+0x25c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <HAL_ADC_ConfigChannel+0x260>)
 800458c:	fba2 2303 	umull	r2, r3, r2, r3
 8004590:	0c9a      	lsrs	r2, r3, #18
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800459c:	e002      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f9      	bne.n	800459e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40012300 	.word	0x40012300
 80045c4:	40012000 	.word	0x40012000
 80045c8:	10000012 	.word	0x10000012
 80045cc:	20000000 	.word	0x20000000
 80045d0:	431bde83 	.word	0x431bde83

080045d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045dc:	4b79      	ldr	r3, [pc, #484]	; (80047c4 <ADC_Init+0x1f0>)
 80045de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6859      	ldr	r1, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	021a      	lsls	r2, r3, #8
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800462c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800464e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6899      	ldr	r1, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	4a58      	ldr	r2, [pc, #352]	; (80047c8 <ADC_Init+0x1f4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d022      	beq.n	80046b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800467a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6899      	ldr	r1, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800469c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6899      	ldr	r1, [r3, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	e00f      	b.n	80046d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0202 	bic.w	r2, r2, #2
 80046e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6899      	ldr	r1, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	7e1b      	ldrb	r3, [r3, #24]
 80046ec:	005a      	lsls	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800470e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800471e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	3b01      	subs	r3, #1
 800472c:	035a      	lsls	r2, r3, #13
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	e007      	b.n	8004748 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004746:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	3b01      	subs	r3, #1
 8004764:	051a      	lsls	r2, r3, #20
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800477c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6899      	ldr	r1, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800478a:	025a      	lsls	r2, r3, #9
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6899      	ldr	r1, [r3, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	029a      	lsls	r2, r3, #10
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	609a      	str	r2, [r3, #8]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	40012300 	.word	0x40012300
 80047c8:	0f000001 	.word	0x0f000001

080047cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <__NVIC_SetPriorityGrouping+0x44>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047e8:	4013      	ands	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047fe:	4a04      	ldr	r2, [pc, #16]	; (8004810 <__NVIC_SetPriorityGrouping+0x44>)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	60d3      	str	r3, [r2, #12]
}
 8004804:	bf00      	nop
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <__NVIC_GetPriorityGrouping+0x18>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	0a1b      	lsrs	r3, r3, #8
 800481e:	f003 0307 	and.w	r3, r3, #7
}
 8004822:	4618      	mov	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800483a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483e:	2b00      	cmp	r3, #0
 8004840:	db0b      	blt.n	800485a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	f003 021f 	and.w	r2, r3, #31
 8004848:	4907      	ldr	r1, [pc, #28]	; (8004868 <__NVIC_EnableIRQ+0x38>)
 800484a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2001      	movs	r0, #1
 8004852:	fa00 f202 	lsl.w	r2, r0, r2
 8004856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	e000e100 	.word	0xe000e100

0800486c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	6039      	str	r1, [r7, #0]
 8004876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487c:	2b00      	cmp	r3, #0
 800487e:	db0a      	blt.n	8004896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	b2da      	uxtb	r2, r3
 8004884:	490c      	ldr	r1, [pc, #48]	; (80048b8 <__NVIC_SetPriority+0x4c>)
 8004886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488a:	0112      	lsls	r2, r2, #4
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	440b      	add	r3, r1
 8004890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004894:	e00a      	b.n	80048ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	4908      	ldr	r1, [pc, #32]	; (80048bc <__NVIC_SetPriority+0x50>)
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	3b04      	subs	r3, #4
 80048a4:	0112      	lsls	r2, r2, #4
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	440b      	add	r3, r1
 80048aa:	761a      	strb	r2, [r3, #24]
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	e000e100 	.word	0xe000e100
 80048bc:	e000ed00 	.word	0xe000ed00

080048c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b089      	sub	sp, #36	; 0x24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f1c3 0307 	rsb	r3, r3, #7
 80048da:	2b04      	cmp	r3, #4
 80048dc:	bf28      	it	cs
 80048de:	2304      	movcs	r3, #4
 80048e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	3304      	adds	r3, #4
 80048e6:	2b06      	cmp	r3, #6
 80048e8:	d902      	bls.n	80048f0 <NVIC_EncodePriority+0x30>
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	3b03      	subs	r3, #3
 80048ee:	e000      	b.n	80048f2 <NVIC_EncodePriority+0x32>
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f4:	f04f 32ff 	mov.w	r2, #4294967295
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43da      	mvns	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	401a      	ands	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004908:	f04f 31ff 	mov.w	r1, #4294967295
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	43d9      	mvns	r1, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004918:	4313      	orrs	r3, r2
         );
}
 800491a:	4618      	mov	r0, r3
 800491c:	3724      	adds	r7, #36	; 0x24
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3b01      	subs	r3, #1
 8004934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004938:	d301      	bcc.n	800493e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800493a:	2301      	movs	r3, #1
 800493c:	e00f      	b.n	800495e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800493e:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <SysTick_Config+0x40>)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3b01      	subs	r3, #1
 8004944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004946:	210f      	movs	r1, #15
 8004948:	f04f 30ff 	mov.w	r0, #4294967295
 800494c:	f7ff ff8e 	bl	800486c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <SysTick_Config+0x40>)
 8004952:	2200      	movs	r2, #0
 8004954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004956:	4b04      	ldr	r3, [pc, #16]	; (8004968 <SysTick_Config+0x40>)
 8004958:	2207      	movs	r2, #7
 800495a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	e000e010 	.word	0xe000e010

0800496c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff ff29 	bl	80047cc <__NVIC_SetPriorityGrouping>
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004982:	b580      	push	{r7, lr}
 8004984:	b086      	sub	sp, #24
 8004986:	af00      	add	r7, sp, #0
 8004988:	4603      	mov	r3, r0
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004994:	f7ff ff3e 	bl	8004814 <__NVIC_GetPriorityGrouping>
 8004998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	6978      	ldr	r0, [r7, #20]
 80049a0:	f7ff ff8e 	bl	80048c0 <NVIC_EncodePriority>
 80049a4:	4602      	mov	r2, r0
 80049a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff ff5d 	bl	800486c <__NVIC_SetPriority>
}
 80049b2:	bf00      	nop
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	4603      	mov	r3, r0
 80049c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff ff31 	bl	8004830 <__NVIC_EnableIRQ>
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff ffa2 	bl	8004928 <SysTick_Config>
 80049e4:	4603      	mov	r3, r0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e014      	b.n	8004a2a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	791b      	ldrb	r3, [r3, #4]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d105      	bne.n	8004a16 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7fe fdcd 	bl	80035b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	795b      	ldrb	r3, [r3, #5]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_DAC_Start+0x16>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e040      	b.n	8004aca <HAL_DAC_Start+0x98>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6819      	ldr	r1, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2201      	movs	r2, #1
 8004a62:	409a      	lsls	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10f      	bne.n	8004a92 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004a7c:	2b3c      	cmp	r3, #60	; 0x3c
 8004a7e:	d11d      	bne.n	8004abc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	605a      	str	r2, [r3, #4]
 8004a90:	e014      	b.n	8004abc <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	213c      	movs	r1, #60	; 0x3c
 8004aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d107      	bne.n	8004abc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0202 	orr.w	r2, r2, #2
 8004aba:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b087      	sub	sp, #28
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4413      	add	r3, r2
 8004afa:	3308      	adds	r3, #8
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e004      	b.n	8004b0a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	3314      	adds	r3, #20
 8004b08:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	795b      	ldrb	r3, [r3, #5]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_DAC_ConfigChannel+0x18>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e03c      	b.n	8004bb2 <HAL_DAC_ConfigChannel+0x92>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2202      	movs	r2, #2
 8004b42:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6819      	ldr	r1, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	22c0      	movs	r2, #192	; 0xc0
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43da      	mvns	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	400a      	ands	r2, r1
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004bcc:	f7ff f9e2 	bl	8003f94 <HAL_GetTick>
 8004bd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d008      	beq.n	8004bf0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2280      	movs	r2, #128	; 0x80
 8004be2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e052      	b.n	8004c96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0216 	bic.w	r2, r2, #22
 8004bfe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d103      	bne.n	8004c20 <HAL_DMA_Abort+0x62>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0208 	bic.w	r2, r2, #8
 8004c2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0201 	bic.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c40:	e013      	b.n	8004c6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c42:	f7ff f9a7 	bl	8003f94 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b05      	cmp	r3, #5
 8004c4e:	d90c      	bls.n	8004c6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2203      	movs	r2, #3
 8004c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e015      	b.n	8004c96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e4      	bne.n	8004c42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7c:	223f      	movs	r2, #63	; 0x3f
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d004      	beq.n	8004cbc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2280      	movs	r2, #128	; 0x80
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e00c      	b.n	8004cd6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2205      	movs	r2, #5
 8004cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0201 	bic.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b089      	sub	sp, #36	; 0x24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e165      	b.n	8004fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d00:	2201      	movs	r2, #1
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	f040 8154 	bne.w	8004fc6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d005      	beq.n	8004d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d130      	bne.n	8004d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	2203      	movs	r2, #3
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 0201 	and.w	r2, r3, #1
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d017      	beq.n	8004dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	2203      	movs	r2, #3
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d123      	bne.n	8004e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	220f      	movs	r2, #15
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	08da      	lsrs	r2, r3, #3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3208      	adds	r2, #8
 8004e22:	69b9      	ldr	r1, [r7, #24]
 8004e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	2203      	movs	r2, #3
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0203 	and.w	r2, r3, #3
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80ae 	beq.w	8004fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	4b5d      	ldr	r3, [pc, #372]	; (8004fe4 <HAL_GPIO_Init+0x300>)
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	4a5c      	ldr	r2, [pc, #368]	; (8004fe4 <HAL_GPIO_Init+0x300>)
 8004e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e78:	6453      	str	r3, [r2, #68]	; 0x44
 8004e7a:	4b5a      	ldr	r3, [pc, #360]	; (8004fe4 <HAL_GPIO_Init+0x300>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e86:	4a58      	ldr	r2, [pc, #352]	; (8004fe8 <HAL_GPIO_Init+0x304>)
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	089b      	lsrs	r3, r3, #2
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	220f      	movs	r2, #15
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a4f      	ldr	r2, [pc, #316]	; (8004fec <HAL_GPIO_Init+0x308>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d025      	beq.n	8004efe <HAL_GPIO_Init+0x21a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a4e      	ldr	r2, [pc, #312]	; (8004ff0 <HAL_GPIO_Init+0x30c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01f      	beq.n	8004efa <HAL_GPIO_Init+0x216>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a4d      	ldr	r2, [pc, #308]	; (8004ff4 <HAL_GPIO_Init+0x310>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d019      	beq.n	8004ef6 <HAL_GPIO_Init+0x212>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a4c      	ldr	r2, [pc, #304]	; (8004ff8 <HAL_GPIO_Init+0x314>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_GPIO_Init+0x20e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a4b      	ldr	r2, [pc, #300]	; (8004ffc <HAL_GPIO_Init+0x318>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00d      	beq.n	8004eee <HAL_GPIO_Init+0x20a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a4a      	ldr	r2, [pc, #296]	; (8005000 <HAL_GPIO_Init+0x31c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d007      	beq.n	8004eea <HAL_GPIO_Init+0x206>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a49      	ldr	r2, [pc, #292]	; (8005004 <HAL_GPIO_Init+0x320>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <HAL_GPIO_Init+0x202>
 8004ee2:	2306      	movs	r3, #6
 8004ee4:	e00c      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004ee6:	2307      	movs	r3, #7
 8004ee8:	e00a      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004eea:	2305      	movs	r3, #5
 8004eec:	e008      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004eee:	2304      	movs	r3, #4
 8004ef0:	e006      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e004      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e002      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <HAL_GPIO_Init+0x21c>
 8004efe:	2300      	movs	r3, #0
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	f002 0203 	and.w	r2, r2, #3
 8004f06:	0092      	lsls	r2, r2, #2
 8004f08:	4093      	lsls	r3, r2
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f10:	4935      	ldr	r1, [pc, #212]	; (8004fe8 <HAL_GPIO_Init+0x304>)
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	089b      	lsrs	r3, r3, #2
 8004f16:	3302      	adds	r3, #2
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f1e:	4b3a      	ldr	r3, [pc, #232]	; (8005008 <HAL_GPIO_Init+0x324>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	43db      	mvns	r3, r3
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f42:	4a31      	ldr	r2, [pc, #196]	; (8005008 <HAL_GPIO_Init+0x324>)
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f48:	4b2f      	ldr	r3, [pc, #188]	; (8005008 <HAL_GPIO_Init+0x324>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	4013      	ands	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f6c:	4a26      	ldr	r2, [pc, #152]	; (8005008 <HAL_GPIO_Init+0x324>)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f72:	4b25      	ldr	r3, [pc, #148]	; (8005008 <HAL_GPIO_Init+0x324>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f96:	4a1c      	ldr	r2, [pc, #112]	; (8005008 <HAL_GPIO_Init+0x324>)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	; (8005008 <HAL_GPIO_Init+0x324>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fc0:	4a11      	ldr	r2, [pc, #68]	; (8005008 <HAL_GPIO_Init+0x324>)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b0f      	cmp	r3, #15
 8004fd0:	f67f ae96 	bls.w	8004d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	3724      	adds	r7, #36	; 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	40013800 	.word	0x40013800
 8004fec:	40020000 	.word	0x40020000
 8004ff0:	40020400 	.word	0x40020400
 8004ff4:	40020800 	.word	0x40020800
 8004ff8:	40020c00 	.word	0x40020c00
 8004ffc:	40021000 	.word	0x40021000
 8005000:	40021400 	.word	0x40021400
 8005004:	40021800 	.word	0x40021800
 8005008:	40013c00 	.word	0x40013c00

0800500c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	807b      	strh	r3, [r7, #2]
 8005018:	4613      	mov	r3, r2
 800501a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800501c:	787b      	ldrb	r3, [r7, #1]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005022:	887a      	ldrh	r2, [r7, #2]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005028:	e003      	b.n	8005032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800502a:	887b      	ldrh	r3, [r7, #2]
 800502c:	041a      	lsls	r2, r3, #16
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	619a      	str	r2, [r3, #24]
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005050:	887a      	ldrh	r2, [r7, #2]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4013      	ands	r3, r2
 8005056:	041a      	lsls	r2, r3, #16
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	43d9      	mvns	r1, r3
 800505c:	887b      	ldrh	r3, [r7, #2]
 800505e:	400b      	ands	r3, r1
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	619a      	str	r2, [r3, #24]
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800507e:	2300      	movs	r3, #0
 8005080:	603b      	str	r3, [r7, #0]
 8005082:	4b20      	ldr	r3, [pc, #128]	; (8005104 <HAL_PWREx_EnableOverDrive+0x90>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	4a1f      	ldr	r2, [pc, #124]	; (8005104 <HAL_PWREx_EnableOverDrive+0x90>)
 8005088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508c:	6413      	str	r3, [r2, #64]	; 0x40
 800508e:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <HAL_PWREx_EnableOverDrive+0x90>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800509a:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <HAL_PWREx_EnableOverDrive+0x94>)
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050a0:	f7fe ff78 	bl	8003f94 <HAL_GetTick>
 80050a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050a6:	e009      	b.n	80050bc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050a8:	f7fe ff74 	bl	8003f94 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050b6:	d901      	bls.n	80050bc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e01f      	b.n	80050fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050bc:	4b13      	ldr	r3, [pc, #76]	; (800510c <HAL_PWREx_EnableOverDrive+0x98>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c8:	d1ee      	bne.n	80050a8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80050ca:	4b11      	ldr	r3, [pc, #68]	; (8005110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050d0:	f7fe ff60 	bl	8003f94 <HAL_GetTick>
 80050d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050d6:	e009      	b.n	80050ec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050d8:	f7fe ff5c 	bl	8003f94 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050e6:	d901      	bls.n	80050ec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e007      	b.n	80050fc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050ec:	4b07      	ldr	r3, [pc, #28]	; (800510c <HAL_PWREx_EnableOverDrive+0x98>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050f8:	d1ee      	bne.n	80050d8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40023800 	.word	0x40023800
 8005108:	420e0040 	.word	0x420e0040
 800510c:	40007000 	.word	0x40007000
 8005110:	420e0044 	.word	0x420e0044

08005114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0cc      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005128:	4b68      	ldr	r3, [pc, #416]	; (80052cc <HAL_RCC_ClockConfig+0x1b8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d90c      	bls.n	8005150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005136:	4b65      	ldr	r3, [pc, #404]	; (80052cc <HAL_RCC_ClockConfig+0x1b8>)
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800513e:	4b63      	ldr	r3, [pc, #396]	; (80052cc <HAL_RCC_ClockConfig+0x1b8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d001      	beq.n	8005150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0b8      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d020      	beq.n	800519e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005168:	4b59      	ldr	r3, [pc, #356]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4a58      	ldr	r2, [pc, #352]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005172:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005180:	4b53      	ldr	r3, [pc, #332]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4a52      	ldr	r2, [pc, #328]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800518a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800518c:	4b50      	ldr	r3, [pc, #320]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	494d      	ldr	r1, [pc, #308]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	4313      	orrs	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d044      	beq.n	8005234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d107      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b2:	4b47      	ldr	r3, [pc, #284]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d119      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e07f      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d003      	beq.n	80051d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d107      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d2:	4b3f      	ldr	r3, [pc, #252]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d109      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e06f      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e2:	4b3b      	ldr	r3, [pc, #236]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e067      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051f2:	4b37      	ldr	r3, [pc, #220]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f023 0203 	bic.w	r2, r3, #3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	4934      	ldr	r1, [pc, #208]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005200:	4313      	orrs	r3, r2
 8005202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005204:	f7fe fec6 	bl	8003f94 <HAL_GetTick>
 8005208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520a:	e00a      	b.n	8005222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800520c:	f7fe fec2 	bl	8003f94 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f241 3288 	movw	r2, #5000	; 0x1388
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e04f      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	4b2b      	ldr	r3, [pc, #172]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 020c 	and.w	r2, r3, #12
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	429a      	cmp	r2, r3
 8005232:	d1eb      	bne.n	800520c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005234:	4b25      	ldr	r3, [pc, #148]	; (80052cc <HAL_RCC_ClockConfig+0x1b8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d20c      	bcs.n	800525c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005242:	4b22      	ldr	r3, [pc, #136]	; (80052cc <HAL_RCC_ClockConfig+0x1b8>)
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800524a:	4b20      	ldr	r3, [pc, #128]	; (80052cc <HAL_RCC_ClockConfig+0x1b8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d001      	beq.n	800525c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e032      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d008      	beq.n	800527a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005268:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4916      	ldr	r1, [pc, #88]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d009      	beq.n	800529a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005286:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	490e      	ldr	r1, [pc, #56]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	4313      	orrs	r3, r2
 8005298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800529a:	f000 f855 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 800529e:	4602      	mov	r2, r0
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	490a      	ldr	r1, [pc, #40]	; (80052d4 <HAL_RCC_ClockConfig+0x1c0>)
 80052ac:	5ccb      	ldrb	r3, [r1, r3]
 80052ae:	fa22 f303 	lsr.w	r3, r2, r3
 80052b2:	4a09      	ldr	r2, [pc, #36]	; (80052d8 <HAL_RCC_ClockConfig+0x1c4>)
 80052b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052b6:	4b09      	ldr	r3, [pc, #36]	; (80052dc <HAL_RCC_ClockConfig+0x1c8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fe fe26 	bl	8003f0c <HAL_InitTick>

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40023c00 	.word	0x40023c00
 80052d0:	40023800 	.word	0x40023800
 80052d4:	08007ec0 	.word	0x08007ec0
 80052d8:	20000000 	.word	0x20000000
 80052dc:	20000004 	.word	0x20000004

080052e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e4:	4b03      	ldr	r3, [pc, #12]	; (80052f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052e6:	681b      	ldr	r3, [r3, #0]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20000000 	.word	0x20000000

080052f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052fc:	f7ff fff0 	bl	80052e0 <HAL_RCC_GetHCLKFreq>
 8005300:	4602      	mov	r2, r0
 8005302:	4b05      	ldr	r3, [pc, #20]	; (8005318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	0a9b      	lsrs	r3, r3, #10
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	4903      	ldr	r1, [pc, #12]	; (800531c <HAL_RCC_GetPCLK1Freq+0x24>)
 800530e:	5ccb      	ldrb	r3, [r1, r3]
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005314:	4618      	mov	r0, r3
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40023800 	.word	0x40023800
 800531c:	08007ed0 	.word	0x08007ed0

08005320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005324:	f7ff ffdc 	bl	80052e0 <HAL_RCC_GetHCLKFreq>
 8005328:	4602      	mov	r2, r0
 800532a:	4b05      	ldr	r3, [pc, #20]	; (8005340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	0b5b      	lsrs	r3, r3, #13
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	4903      	ldr	r1, [pc, #12]	; (8005344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005336:	5ccb      	ldrb	r3, [r1, r3]
 8005338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800533c:	4618      	mov	r0, r3
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40023800 	.word	0x40023800
 8005344:	08007ed0 	.word	0x08007ed0

08005348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800534c:	b0a6      	sub	sp, #152	; 0x98
 800534e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800536e:	4bc8      	ldr	r3, [pc, #800]	; (8005690 <HAL_RCC_GetSysClockFreq+0x348>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 030c 	and.w	r3, r3, #12
 8005376:	2b0c      	cmp	r3, #12
 8005378:	f200 817e 	bhi.w	8005678 <HAL_RCC_GetSysClockFreq+0x330>
 800537c:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <HAL_RCC_GetSysClockFreq+0x3c>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	080053b9 	.word	0x080053b9
 8005388:	08005679 	.word	0x08005679
 800538c:	08005679 	.word	0x08005679
 8005390:	08005679 	.word	0x08005679
 8005394:	080053c1 	.word	0x080053c1
 8005398:	08005679 	.word	0x08005679
 800539c:	08005679 	.word	0x08005679
 80053a0:	08005679 	.word	0x08005679
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	08005679 	.word	0x08005679
 80053ac:	08005679 	.word	0x08005679
 80053b0:	08005679 	.word	0x08005679
 80053b4:	08005533 	.word	0x08005533
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053b8:	4bb6      	ldr	r3, [pc, #728]	; (8005694 <HAL_RCC_GetSysClockFreq+0x34c>)
 80053ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80053be:	e15f      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053c0:	4bb5      	ldr	r3, [pc, #724]	; (8005698 <HAL_RCC_GetSysClockFreq+0x350>)
 80053c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80053c6:	e15b      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053c8:	4bb1      	ldr	r3, [pc, #708]	; (8005690 <HAL_RCC_GetSysClockFreq+0x348>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053d4:	4bae      	ldr	r3, [pc, #696]	; (8005690 <HAL_RCC_GetSysClockFreq+0x348>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d031      	beq.n	8005444 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053e0:	4bab      	ldr	r3, [pc, #684]	; (8005690 <HAL_RCC_GetSysClockFreq+0x348>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	099b      	lsrs	r3, r3, #6
 80053e6:	2200      	movs	r2, #0
 80053e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80053ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f2:	663b      	str	r3, [r7, #96]	; 0x60
 80053f4:	2300      	movs	r3, #0
 80053f6:	667b      	str	r3, [r7, #100]	; 0x64
 80053f8:	4ba7      	ldr	r3, [pc, #668]	; (8005698 <HAL_RCC_GetSysClockFreq+0x350>)
 80053fa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80053fe:	462a      	mov	r2, r5
 8005400:	fb03 f202 	mul.w	r2, r3, r2
 8005404:	2300      	movs	r3, #0
 8005406:	4621      	mov	r1, r4
 8005408:	fb01 f303 	mul.w	r3, r1, r3
 800540c:	4413      	add	r3, r2
 800540e:	4aa2      	ldr	r2, [pc, #648]	; (8005698 <HAL_RCC_GetSysClockFreq+0x350>)
 8005410:	4621      	mov	r1, r4
 8005412:	fba1 1202 	umull	r1, r2, r1, r2
 8005416:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005418:	460a      	mov	r2, r1
 800541a:	67ba      	str	r2, [r7, #120]	; 0x78
 800541c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800541e:	4413      	add	r3, r2
 8005420:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005426:	2200      	movs	r2, #0
 8005428:	65bb      	str	r3, [r7, #88]	; 0x58
 800542a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800542c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005430:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005434:	f7fb fb06 	bl	8000a44 <__aeabi_uldivmod>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4613      	mov	r3, r2
 800543e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005442:	e064      	b.n	800550e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005444:	4b92      	ldr	r3, [pc, #584]	; (8005690 <HAL_RCC_GetSysClockFreq+0x348>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	099b      	lsrs	r3, r3, #6
 800544a:	2200      	movs	r2, #0
 800544c:	653b      	str	r3, [r7, #80]	; 0x50
 800544e:	657a      	str	r2, [r7, #84]	; 0x54
 8005450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005456:	64bb      	str	r3, [r7, #72]	; 0x48
 8005458:	2300      	movs	r3, #0
 800545a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800545c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005460:	4622      	mov	r2, r4
 8005462:	462b      	mov	r3, r5
 8005464:	f04f 0000 	mov.w	r0, #0
 8005468:	f04f 0100 	mov.w	r1, #0
 800546c:	0159      	lsls	r1, r3, #5
 800546e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005472:	0150      	lsls	r0, r2, #5
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4621      	mov	r1, r4
 800547a:	1a51      	subs	r1, r2, r1
 800547c:	6139      	str	r1, [r7, #16]
 800547e:	4629      	mov	r1, r5
 8005480:	eb63 0301 	sbc.w	r3, r3, r1
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005492:	4659      	mov	r1, fp
 8005494:	018b      	lsls	r3, r1, #6
 8005496:	4651      	mov	r1, sl
 8005498:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800549c:	4651      	mov	r1, sl
 800549e:	018a      	lsls	r2, r1, #6
 80054a0:	4651      	mov	r1, sl
 80054a2:	ebb2 0801 	subs.w	r8, r2, r1
 80054a6:	4659      	mov	r1, fp
 80054a8:	eb63 0901 	sbc.w	r9, r3, r1
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054c0:	4690      	mov	r8, r2
 80054c2:	4699      	mov	r9, r3
 80054c4:	4623      	mov	r3, r4
 80054c6:	eb18 0303 	adds.w	r3, r8, r3
 80054ca:	60bb      	str	r3, [r7, #8]
 80054cc:	462b      	mov	r3, r5
 80054ce:	eb49 0303 	adc.w	r3, r9, r3
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054e0:	4629      	mov	r1, r5
 80054e2:	028b      	lsls	r3, r1, #10
 80054e4:	4621      	mov	r1, r4
 80054e6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054ea:	4621      	mov	r1, r4
 80054ec:	028a      	lsls	r2, r1, #10
 80054ee:	4610      	mov	r0, r2
 80054f0:	4619      	mov	r1, r3
 80054f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054f6:	2200      	movs	r2, #0
 80054f8:	643b      	str	r3, [r7, #64]	; 0x40
 80054fa:	647a      	str	r2, [r7, #68]	; 0x44
 80054fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005500:	f7fb faa0 	bl	8000a44 <__aeabi_uldivmod>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4613      	mov	r3, r2
 800550a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800550e:	4b60      	ldr	r3, [pc, #384]	; (8005690 <HAL_RCC_GetSysClockFreq+0x348>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	0c1b      	lsrs	r3, r3, #16
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	3301      	adds	r3, #1
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005520:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005528:	fbb2 f3f3 	udiv	r3, r2, r3
 800552c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005530:	e0a6      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005532:	4b57      	ldr	r3, [pc, #348]	; (8005690 <HAL_RCC_GetSysClockFreq+0x348>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800553a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800553e:	4b54      	ldr	r3, [pc, #336]	; (8005690 <HAL_RCC_GetSysClockFreq+0x348>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d02a      	beq.n	80055a0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800554a:	4b51      	ldr	r3, [pc, #324]	; (8005690 <HAL_RCC_GetSysClockFreq+0x348>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	099b      	lsrs	r3, r3, #6
 8005550:	2200      	movs	r2, #0
 8005552:	63bb      	str	r3, [r7, #56]	; 0x38
 8005554:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800555c:	2100      	movs	r1, #0
 800555e:	4b4e      	ldr	r3, [pc, #312]	; (8005698 <HAL_RCC_GetSysClockFreq+0x350>)
 8005560:	fb03 f201 	mul.w	r2, r3, r1
 8005564:	2300      	movs	r3, #0
 8005566:	fb00 f303 	mul.w	r3, r0, r3
 800556a:	4413      	add	r3, r2
 800556c:	4a4a      	ldr	r2, [pc, #296]	; (8005698 <HAL_RCC_GetSysClockFreq+0x350>)
 800556e:	fba0 1202 	umull	r1, r2, r0, r2
 8005572:	677a      	str	r2, [r7, #116]	; 0x74
 8005574:	460a      	mov	r2, r1
 8005576:	673a      	str	r2, [r7, #112]	; 0x70
 8005578:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800557a:	4413      	add	r3, r2
 800557c:	677b      	str	r3, [r7, #116]	; 0x74
 800557e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005582:	2200      	movs	r2, #0
 8005584:	633b      	str	r3, [r7, #48]	; 0x30
 8005586:	637a      	str	r2, [r7, #52]	; 0x34
 8005588:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800558c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005590:	f7fb fa58 	bl	8000a44 <__aeabi_uldivmod>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	4613      	mov	r3, r2
 800559a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800559e:	e05b      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a0:	4b3b      	ldr	r3, [pc, #236]	; (8005690 <HAL_RCC_GetSysClockFreq+0x348>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	099b      	lsrs	r3, r3, #6
 80055a6:	2200      	movs	r2, #0
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80055aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b2:	623b      	str	r3, [r7, #32]
 80055b4:	2300      	movs	r3, #0
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
 80055b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055bc:	4642      	mov	r2, r8
 80055be:	464b      	mov	r3, r9
 80055c0:	f04f 0000 	mov.w	r0, #0
 80055c4:	f04f 0100 	mov.w	r1, #0
 80055c8:	0159      	lsls	r1, r3, #5
 80055ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ce:	0150      	lsls	r0, r2, #5
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4641      	mov	r1, r8
 80055d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80055da:	4649      	mov	r1, r9
 80055dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055f4:	ebb2 040a 	subs.w	r4, r2, sl
 80055f8:	eb63 050b 	sbc.w	r5, r3, fp
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	00eb      	lsls	r3, r5, #3
 8005606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800560a:	00e2      	lsls	r2, r4, #3
 800560c:	4614      	mov	r4, r2
 800560e:	461d      	mov	r5, r3
 8005610:	4643      	mov	r3, r8
 8005612:	18e3      	adds	r3, r4, r3
 8005614:	603b      	str	r3, [r7, #0]
 8005616:	464b      	mov	r3, r9
 8005618:	eb45 0303 	adc.w	r3, r5, r3
 800561c:	607b      	str	r3, [r7, #4]
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	e9d7 4500 	ldrd	r4, r5, [r7]
 800562a:	4629      	mov	r1, r5
 800562c:	028b      	lsls	r3, r1, #10
 800562e:	4621      	mov	r1, r4
 8005630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005634:	4621      	mov	r1, r4
 8005636:	028a      	lsls	r2, r1, #10
 8005638:	4610      	mov	r0, r2
 800563a:	4619      	mov	r1, r3
 800563c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005640:	2200      	movs	r2, #0
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	61fa      	str	r2, [r7, #28]
 8005646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800564a:	f7fb f9fb 	bl	8000a44 <__aeabi_uldivmod>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	4613      	mov	r3, r2
 8005654:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005658:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <HAL_RCC_GetSysClockFreq+0x348>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	0f1b      	lsrs	r3, r3, #28
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8005666:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800566a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005676:	e003      	b.n	8005680 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005678:	4b06      	ldr	r3, [pc, #24]	; (8005694 <HAL_RCC_GetSysClockFreq+0x34c>)
 800567a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800567e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8005684:	4618      	mov	r0, r3
 8005686:	3798      	adds	r7, #152	; 0x98
 8005688:	46bd      	mov	sp, r7
 800568a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800568e:	bf00      	nop
 8005690:	40023800 	.word	0x40023800
 8005694:	00f42400 	.word	0x00f42400
 8005698:	017d7840 	.word	0x017d7840

0800569c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e28d      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 8083 	beq.w	80057c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056bc:	4b94      	ldr	r3, [pc, #592]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 030c 	and.w	r3, r3, #12
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d019      	beq.n	80056fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056c8:	4b91      	ldr	r3, [pc, #580]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d106      	bne.n	80056e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056d4:	4b8e      	ldr	r3, [pc, #568]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e0:	d00c      	beq.n	80056fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056e2:	4b8b      	ldr	r3, [pc, #556]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056ea:	2b0c      	cmp	r3, #12
 80056ec:	d112      	bne.n	8005714 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ee:	4b88      	ldr	r3, [pc, #544]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056fa:	d10b      	bne.n	8005714 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056fc:	4b84      	ldr	r3, [pc, #528]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d05b      	beq.n	80057c0 <HAL_RCC_OscConfig+0x124>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d157      	bne.n	80057c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e25a      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571c:	d106      	bne.n	800572c <HAL_RCC_OscConfig+0x90>
 800571e:	4b7c      	ldr	r3, [pc, #496]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a7b      	ldr	r2, [pc, #492]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 8005724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	e01d      	b.n	8005768 <HAL_RCC_OscConfig+0xcc>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005734:	d10c      	bne.n	8005750 <HAL_RCC_OscConfig+0xb4>
 8005736:	4b76      	ldr	r3, [pc, #472]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a75      	ldr	r2, [pc, #468]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 800573c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	4b73      	ldr	r3, [pc, #460]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a72      	ldr	r2, [pc, #456]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 8005748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	e00b      	b.n	8005768 <HAL_RCC_OscConfig+0xcc>
 8005750:	4b6f      	ldr	r3, [pc, #444]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a6e      	ldr	r2, [pc, #440]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 8005756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	4b6c      	ldr	r3, [pc, #432]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a6b      	ldr	r2, [pc, #428]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 8005762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d013      	beq.n	8005798 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005770:	f7fe fc10 	bl	8003f94 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005778:	f7fe fc0c 	bl	8003f94 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b64      	cmp	r3, #100	; 0x64
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e21f      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578a:	4b61      	ldr	r3, [pc, #388]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0f0      	beq.n	8005778 <HAL_RCC_OscConfig+0xdc>
 8005796:	e014      	b.n	80057c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005798:	f7fe fbfc 	bl	8003f94 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057a0:	f7fe fbf8 	bl	8003f94 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b64      	cmp	r3, #100	; 0x64
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e20b      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057b2:	4b57      	ldr	r3, [pc, #348]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0x104>
 80057be:	e000      	b.n	80057c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d06f      	beq.n	80058ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057ce:	4b50      	ldr	r3, [pc, #320]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 030c 	and.w	r3, r3, #12
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d017      	beq.n	800580a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057da:	4b4d      	ldr	r3, [pc, #308]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d105      	bne.n	80057f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057e6:	4b4a      	ldr	r3, [pc, #296]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057f2:	4b47      	ldr	r3, [pc, #284]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057fa:	2b0c      	cmp	r3, #12
 80057fc:	d11c      	bne.n	8005838 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057fe:	4b44      	ldr	r3, [pc, #272]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d116      	bne.n	8005838 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800580a:	4b41      	ldr	r3, [pc, #260]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_RCC_OscConfig+0x186>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d001      	beq.n	8005822 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e1d3      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005822:	4b3b      	ldr	r3, [pc, #236]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4937      	ldr	r1, [pc, #220]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 8005832:	4313      	orrs	r3, r2
 8005834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005836:	e03a      	b.n	80058ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d020      	beq.n	8005882 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005840:	4b34      	ldr	r3, [pc, #208]	; (8005914 <HAL_RCC_OscConfig+0x278>)
 8005842:	2201      	movs	r2, #1
 8005844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005846:	f7fe fba5 	bl	8003f94 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800584e:	f7fe fba1 	bl	8003f94 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e1b4      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005860:	4b2b      	ldr	r3, [pc, #172]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0f0      	beq.n	800584e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586c:	4b28      	ldr	r3, [pc, #160]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	4925      	ldr	r1, [pc, #148]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 800587c:	4313      	orrs	r3, r2
 800587e:	600b      	str	r3, [r1, #0]
 8005880:	e015      	b.n	80058ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005882:	4b24      	ldr	r3, [pc, #144]	; (8005914 <HAL_RCC_OscConfig+0x278>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fe fb84 	bl	8003f94 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005890:	f7fe fb80 	bl	8003f94 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e193      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058a2:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d036      	beq.n	8005928 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058c2:	4b15      	ldr	r3, [pc, #84]	; (8005918 <HAL_RCC_OscConfig+0x27c>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c8:	f7fe fb64 	bl	8003f94 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058d0:	f7fe fb60 	bl	8003f94 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e173      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058e2:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <HAL_RCC_OscConfig+0x274>)
 80058e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f0      	beq.n	80058d0 <HAL_RCC_OscConfig+0x234>
 80058ee:	e01b      	b.n	8005928 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f0:	4b09      	ldr	r3, [pc, #36]	; (8005918 <HAL_RCC_OscConfig+0x27c>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f6:	f7fe fb4d 	bl	8003f94 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058fc:	e00e      	b.n	800591c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058fe:	f7fe fb49 	bl	8003f94 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d907      	bls.n	800591c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e15c      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
 8005910:	40023800 	.word	0x40023800
 8005914:	42470000 	.word	0x42470000
 8005918:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800591c:	4b8a      	ldr	r3, [pc, #552]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 800591e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1ea      	bne.n	80058fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 8097 	beq.w	8005a64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005936:	2300      	movs	r3, #0
 8005938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800593a:	4b83      	ldr	r3, [pc, #524]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10f      	bne.n	8005966 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	4b7f      	ldr	r3, [pc, #508]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	4a7e      	ldr	r2, [pc, #504]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 8005950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005954:	6413      	str	r3, [r2, #64]	; 0x40
 8005956:	4b7c      	ldr	r3, [pc, #496]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595e:	60bb      	str	r3, [r7, #8]
 8005960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005962:	2301      	movs	r3, #1
 8005964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005966:	4b79      	ldr	r3, [pc, #484]	; (8005b4c <HAL_RCC_OscConfig+0x4b0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d118      	bne.n	80059a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005972:	4b76      	ldr	r3, [pc, #472]	; (8005b4c <HAL_RCC_OscConfig+0x4b0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a75      	ldr	r2, [pc, #468]	; (8005b4c <HAL_RCC_OscConfig+0x4b0>)
 8005978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800597c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800597e:	f7fe fb09 	bl	8003f94 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005986:	f7fe fb05 	bl	8003f94 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e118      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005998:	4b6c      	ldr	r3, [pc, #432]	; (8005b4c <HAL_RCC_OscConfig+0x4b0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0f0      	beq.n	8005986 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d106      	bne.n	80059ba <HAL_RCC_OscConfig+0x31e>
 80059ac:	4b66      	ldr	r3, [pc, #408]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 80059ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b0:	4a65      	ldr	r2, [pc, #404]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	6713      	str	r3, [r2, #112]	; 0x70
 80059b8:	e01c      	b.n	80059f4 <HAL_RCC_OscConfig+0x358>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b05      	cmp	r3, #5
 80059c0:	d10c      	bne.n	80059dc <HAL_RCC_OscConfig+0x340>
 80059c2:	4b61      	ldr	r3, [pc, #388]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	4a60      	ldr	r2, [pc, #384]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 80059c8:	f043 0304 	orr.w	r3, r3, #4
 80059cc:	6713      	str	r3, [r2, #112]	; 0x70
 80059ce:	4b5e      	ldr	r3, [pc, #376]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	4a5d      	ldr	r2, [pc, #372]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	6713      	str	r3, [r2, #112]	; 0x70
 80059da:	e00b      	b.n	80059f4 <HAL_RCC_OscConfig+0x358>
 80059dc:	4b5a      	ldr	r3, [pc, #360]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 80059de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e0:	4a59      	ldr	r2, [pc, #356]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 80059e2:	f023 0301 	bic.w	r3, r3, #1
 80059e6:	6713      	str	r3, [r2, #112]	; 0x70
 80059e8:	4b57      	ldr	r3, [pc, #348]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ec:	4a56      	ldr	r2, [pc, #344]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 80059ee:	f023 0304 	bic.w	r3, r3, #4
 80059f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d015      	beq.n	8005a28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fc:	f7fe faca 	bl	8003f94 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a02:	e00a      	b.n	8005a1a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a04:	f7fe fac6 	bl	8003f94 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e0d7      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1a:	4b4b      	ldr	r3, [pc, #300]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0ee      	beq.n	8005a04 <HAL_RCC_OscConfig+0x368>
 8005a26:	e014      	b.n	8005a52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a28:	f7fe fab4 	bl	8003f94 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a2e:	e00a      	b.n	8005a46 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a30:	f7fe fab0 	bl	8003f94 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e0c1      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a46:	4b40      	ldr	r3, [pc, #256]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 8005a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1ee      	bne.n	8005a30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d105      	bne.n	8005a64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a58:	4b3b      	ldr	r3, [pc, #236]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	4a3a      	ldr	r2, [pc, #232]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 8005a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80ad 	beq.w	8005bc8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a6e:	4b36      	ldr	r3, [pc, #216]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 030c 	and.w	r3, r3, #12
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d060      	beq.n	8005b3c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d145      	bne.n	8005b0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a82:	4b33      	ldr	r3, [pc, #204]	; (8005b50 <HAL_RCC_OscConfig+0x4b4>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a88:	f7fe fa84 	bl	8003f94 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a90:	f7fe fa80 	bl	8003f94 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e093      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa2:	4b29      	ldr	r3, [pc, #164]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1f0      	bne.n	8005a90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69da      	ldr	r2, [r3, #28]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	019b      	lsls	r3, r3, #6
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	041b      	lsls	r3, r3, #16
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad8:	071b      	lsls	r3, r3, #28
 8005ada:	491b      	ldr	r1, [pc, #108]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ae0:	4b1b      	ldr	r3, [pc, #108]	; (8005b50 <HAL_RCC_OscConfig+0x4b4>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae6:	f7fe fa55 	bl	8003f94 <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aee:	f7fe fa51 	bl	8003f94 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e064      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b00:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0f0      	beq.n	8005aee <HAL_RCC_OscConfig+0x452>
 8005b0c:	e05c      	b.n	8005bc8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0e:	4b10      	ldr	r3, [pc, #64]	; (8005b50 <HAL_RCC_OscConfig+0x4b4>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b14:	f7fe fa3e 	bl	8003f94 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b1c:	f7fe fa3a 	bl	8003f94 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e04d      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <HAL_RCC_OscConfig+0x4ac>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x480>
 8005b3a:	e045      	b.n	8005bc8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d107      	bne.n	8005b54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e040      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
 8005b48:	40023800 	.word	0x40023800
 8005b4c:	40007000 	.word	0x40007000
 8005b50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b54:	4b1f      	ldr	r3, [pc, #124]	; (8005bd4 <HAL_RCC_OscConfig+0x538>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d030      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d129      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d122      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b84:	4013      	ands	r3, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d119      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d10f      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d107      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e000      	b.n	8005bca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40023800 	.word	0x40023800

08005bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e041      	b.n	8005c6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d106      	bne.n	8005c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fd fd1a 	bl	8003638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4619      	mov	r1, r3
 8005c16:	4610      	mov	r0, r2
 8005c18:	f000 fa96 	bl	8006148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d001      	beq.n	8005c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e04e      	b.n	8005d2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a23      	ldr	r2, [pc, #140]	; (8005d3c <HAL_TIM_Base_Start_IT+0xc4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d022      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cba:	d01d      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <HAL_TIM_Base_Start_IT+0xc8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d018      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1e      	ldr	r2, [pc, #120]	; (8005d44 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00e      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1b      	ldr	r2, [pc, #108]	; (8005d4c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x80>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <HAL_TIM_Base_Start_IT+0xdc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d111      	bne.n	8005d1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b06      	cmp	r3, #6
 8005d08:	d010      	beq.n	8005d2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0201 	orr.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1a:	e007      	b.n	8005d2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	40010000 	.word	0x40010000
 8005d40:	40000400 	.word	0x40000400
 8005d44:	40000800 	.word	0x40000800
 8005d48:	40000c00 	.word	0x40000c00
 8005d4c:	40010400 	.word	0x40010400
 8005d50:	40014000 	.word	0x40014000
 8005d54:	40001800 	.word	0x40001800

08005d58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d122      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d11b      	bne.n	8005db4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0202 	mvn.w	r2, #2
 8005d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f9b5 	bl	800610a <HAL_TIM_IC_CaptureCallback>
 8005da0:	e005      	b.n	8005dae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f9a7 	bl	80060f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f9b8 	bl	800611e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d122      	bne.n	8005e08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d11b      	bne.n	8005e08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f06f 0204 	mvn.w	r2, #4
 8005dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f98b 	bl	800610a <HAL_TIM_IC_CaptureCallback>
 8005df4:	e005      	b.n	8005e02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f97d 	bl	80060f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f98e 	bl	800611e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d122      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d11b      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0208 	mvn.w	r2, #8
 8005e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2204      	movs	r2, #4
 8005e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f961 	bl	800610a <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f953 	bl	80060f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f964 	bl	800611e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	d122      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b10      	cmp	r3, #16
 8005e76:	d11b      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0210 	mvn.w	r2, #16
 8005e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2208      	movs	r2, #8
 8005e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f937 	bl	800610a <HAL_TIM_IC_CaptureCallback>
 8005e9c:	e005      	b.n	8005eaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f929 	bl	80060f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f93a 	bl	800611e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d10e      	bne.n	8005edc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d107      	bne.n	8005edc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0201 	mvn.w	r2, #1
 8005ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fc ffcc 	bl	8002e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee6:	2b80      	cmp	r3, #128	; 0x80
 8005ee8:	d10e      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef4:	2b80      	cmp	r3, #128	; 0x80
 8005ef6:	d107      	bne.n	8005f08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa64 	bl	80063d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f12:	2b40      	cmp	r3, #64	; 0x40
 8005f14:	d10e      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f20:	2b40      	cmp	r3, #64	; 0x40
 8005f22:	d107      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f8ff 	bl	8006132 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d10e      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b20      	cmp	r3, #32
 8005f4e:	d107      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f06f 0220 	mvn.w	r2, #32
 8005f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa2e 	bl	80063bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_TIM_ConfigClockSource+0x1c>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e0b4      	b.n	80060ee <HAL_TIM_ConfigClockSource+0x186>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005faa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fbc:	d03e      	beq.n	800603c <HAL_TIM_ConfigClockSource+0xd4>
 8005fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc2:	f200 8087 	bhi.w	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fca:	f000 8086 	beq.w	80060da <HAL_TIM_ConfigClockSource+0x172>
 8005fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd2:	d87f      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd4:	2b70      	cmp	r3, #112	; 0x70
 8005fd6:	d01a      	beq.n	800600e <HAL_TIM_ConfigClockSource+0xa6>
 8005fd8:	2b70      	cmp	r3, #112	; 0x70
 8005fda:	d87b      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fdc:	2b60      	cmp	r3, #96	; 0x60
 8005fde:	d050      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x11a>
 8005fe0:	2b60      	cmp	r3, #96	; 0x60
 8005fe2:	d877      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fe4:	2b50      	cmp	r3, #80	; 0x50
 8005fe6:	d03c      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0xfa>
 8005fe8:	2b50      	cmp	r3, #80	; 0x50
 8005fea:	d873      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d058      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0x13a>
 8005ff0:	2b40      	cmp	r3, #64	; 0x40
 8005ff2:	d86f      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff4:	2b30      	cmp	r3, #48	; 0x30
 8005ff6:	d064      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005ff8:	2b30      	cmp	r3, #48	; 0x30
 8005ffa:	d86b      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	d060      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006000:	2b20      	cmp	r3, #32
 8006002:	d867      	bhi.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d05c      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006008:	2b10      	cmp	r3, #16
 800600a:	d05a      	beq.n	80060c2 <HAL_TIM_ConfigClockSource+0x15a>
 800600c:	e062      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6899      	ldr	r1, [r3, #8]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f000 f9ad 	bl	800637c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	609a      	str	r2, [r3, #8]
      break;
 800603a:	e04f      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	6899      	ldr	r1, [r3, #8]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f000 f996 	bl	800637c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800605e:	609a      	str	r2, [r3, #8]
      break;
 8006060:	e03c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6859      	ldr	r1, [r3, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	461a      	mov	r2, r3
 8006070:	f000 f90a 	bl	8006288 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2150      	movs	r1, #80	; 0x50
 800607a:	4618      	mov	r0, r3
 800607c:	f000 f963 	bl	8006346 <TIM_ITRx_SetConfig>
      break;
 8006080:	e02c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	6859      	ldr	r1, [r3, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	461a      	mov	r2, r3
 8006090:	f000 f929 	bl	80062e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2160      	movs	r1, #96	; 0x60
 800609a:	4618      	mov	r0, r3
 800609c:	f000 f953 	bl	8006346 <TIM_ITRx_SetConfig>
      break;
 80060a0:	e01c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6859      	ldr	r1, [r3, #4]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	461a      	mov	r2, r3
 80060b0:	f000 f8ea 	bl	8006288 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2140      	movs	r1, #64	; 0x40
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 f943 	bl	8006346 <TIM_ITRx_SetConfig>
      break;
 80060c0:	e00c      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4619      	mov	r1, r3
 80060cc:	4610      	mov	r0, r2
 80060ce:	f000 f93a 	bl	8006346 <TIM_ITRx_SetConfig>
      break;
 80060d2:	e003      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	73fb      	strb	r3, [r7, #15]
      break;
 80060d8:	e000      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800610a:	b480      	push	{r7}
 800610c:	b083      	sub	sp, #12
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
	...

08006148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a40      	ldr	r2, [pc, #256]	; (800625c <TIM_Base_SetConfig+0x114>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d013      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006166:	d00f      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a3d      	ldr	r2, [pc, #244]	; (8006260 <TIM_Base_SetConfig+0x118>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00b      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a3c      	ldr	r2, [pc, #240]	; (8006264 <TIM_Base_SetConfig+0x11c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d007      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a3b      	ldr	r2, [pc, #236]	; (8006268 <TIM_Base_SetConfig+0x120>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d003      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a3a      	ldr	r2, [pc, #232]	; (800626c <TIM_Base_SetConfig+0x124>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d108      	bne.n	800619a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2f      	ldr	r2, [pc, #188]	; (800625c <TIM_Base_SetConfig+0x114>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d02b      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a8:	d027      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a2c      	ldr	r2, [pc, #176]	; (8006260 <TIM_Base_SetConfig+0x118>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d023      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a2b      	ldr	r2, [pc, #172]	; (8006264 <TIM_Base_SetConfig+0x11c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01f      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a2a      	ldr	r2, [pc, #168]	; (8006268 <TIM_Base_SetConfig+0x120>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01b      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a29      	ldr	r2, [pc, #164]	; (800626c <TIM_Base_SetConfig+0x124>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d017      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a28      	ldr	r2, [pc, #160]	; (8006270 <TIM_Base_SetConfig+0x128>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d013      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a27      	ldr	r2, [pc, #156]	; (8006274 <TIM_Base_SetConfig+0x12c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00f      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a26      	ldr	r2, [pc, #152]	; (8006278 <TIM_Base_SetConfig+0x130>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00b      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a25      	ldr	r2, [pc, #148]	; (800627c <TIM_Base_SetConfig+0x134>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d007      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a24      	ldr	r2, [pc, #144]	; (8006280 <TIM_Base_SetConfig+0x138>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d003      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a23      	ldr	r2, [pc, #140]	; (8006284 <TIM_Base_SetConfig+0x13c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d108      	bne.n	800620c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a0a      	ldr	r2, [pc, #40]	; (800625c <TIM_Base_SetConfig+0x114>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_Base_SetConfig+0xf8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a0c      	ldr	r2, [pc, #48]	; (800626c <TIM_Base_SetConfig+0x124>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d103      	bne.n	8006248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	615a      	str	r2, [r3, #20]
}
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40010000 	.word	0x40010000
 8006260:	40000400 	.word	0x40000400
 8006264:	40000800 	.word	0x40000800
 8006268:	40000c00 	.word	0x40000c00
 800626c:	40010400 	.word	0x40010400
 8006270:	40014000 	.word	0x40014000
 8006274:	40014400 	.word	0x40014400
 8006278:	40014800 	.word	0x40014800
 800627c:	40001800 	.word	0x40001800
 8006280:	40001c00 	.word	0x40001c00
 8006284:	40002000 	.word	0x40002000

08006288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f023 0201 	bic.w	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f023 030a 	bic.w	r3, r3, #10
 80062c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	621a      	str	r2, [r3, #32]
}
 80062da:	bf00      	nop
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b087      	sub	sp, #28
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	f023 0210 	bic.w	r2, r3, #16
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	031b      	lsls	r3, r3, #12
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006322:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006346:	b480      	push	{r7}
 8006348:	b085      	sub	sp, #20
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	f043 0307 	orr.w	r3, r3, #7
 8006368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	609a      	str	r2, [r3, #8]
}
 8006370:	bf00      	nop
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	021a      	lsls	r2, r3, #8
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	431a      	orrs	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	609a      	str	r2, [r3, #8]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e03f      	b.n	8006476 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fd f93c 	bl	8003688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2224      	movs	r2, #36	; 0x24
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006426:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fddf 	bl	8006fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800643c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	695a      	ldr	r2, [r3, #20]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800644c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800645c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b08a      	sub	sp, #40	; 0x28
 8006482:	af02      	add	r7, sp, #8
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	603b      	str	r3, [r7, #0]
 800648a:	4613      	mov	r3, r2
 800648c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b20      	cmp	r3, #32
 800649c:	d17c      	bne.n	8006598 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <HAL_UART_Transmit+0x2c>
 80064a4:	88fb      	ldrh	r3, [r7, #6]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e075      	b.n	800659a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d101      	bne.n	80064bc <HAL_UART_Transmit+0x3e>
 80064b8:	2302      	movs	r3, #2
 80064ba:	e06e      	b.n	800659a <HAL_UART_Transmit+0x11c>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2221      	movs	r2, #33	; 0x21
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064d2:	f7fd fd5f 	bl	8003f94 <HAL_GetTick>
 80064d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	88fa      	ldrh	r2, [r7, #6]
 80064e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ec:	d108      	bne.n	8006500 <HAL_UART_Transmit+0x82>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d104      	bne.n	8006500 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	e003      	b.n	8006508 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006510:	e02a      	b.n	8006568 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2200      	movs	r2, #0
 800651a:	2180      	movs	r1, #128	; 0x80
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fb1f 	bl	8006b60 <UART_WaitOnFlagUntilTimeout>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e036      	b.n	800659a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10b      	bne.n	800654a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006540:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	3302      	adds	r3, #2
 8006546:	61bb      	str	r3, [r7, #24]
 8006548:	e007      	b.n	800655a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	781a      	ldrb	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	3301      	adds	r3, #1
 8006558:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1cf      	bne.n	8006512 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2200      	movs	r2, #0
 800657a:	2140      	movs	r1, #64	; 0x40
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 faef 	bl	8006b60 <UART_WaitOnFlagUntilTimeout>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e006      	b.n	800659a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	e000      	b.n	800659a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006598:	2302      	movs	r3, #2
  }
}
 800659a:	4618      	mov	r0, r3
 800659c:	3720      	adds	r7, #32
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	4613      	mov	r3, r2
 80065ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d11d      	bne.n	80065f8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <HAL_UART_Receive_IT+0x26>
 80065c2:	88fb      	ldrh	r3, [r7, #6]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e016      	b.n	80065fa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d101      	bne.n	80065da <HAL_UART_Receive_IT+0x38>
 80065d6:	2302      	movs	r3, #2
 80065d8:	e00f      	b.n	80065fa <HAL_UART_Receive_IT+0x58>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065e8:	88fb      	ldrh	r3, [r7, #6]
 80065ea:	461a      	mov	r2, r3
 80065ec:	68b9      	ldr	r1, [r7, #8]
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 fb24 	bl	8006c3c <UART_Start_Receive_IT>
 80065f4:	4603      	mov	r3, r0
 80065f6:	e000      	b.n	80065fa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80065f8:	2302      	movs	r3, #2
  }
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b0ba      	sub	sp, #232	; 0xe8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800662a:	2300      	movs	r3, #0
 800662c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006630:	2300      	movs	r3, #0
 8006632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10f      	bne.n	800666a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800664a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <HAL_UART_IRQHandler+0x66>
 8006656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fc07 	bl	8006e76 <UART_Receive_IT>
      return;
 8006668:	e256      	b.n	8006b18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800666a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 80de 	beq.w	8006830 <HAL_UART_IRQHandler+0x22c>
 8006674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d106      	bne.n	800668e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006684:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80d1 	beq.w	8006830 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800668e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00b      	beq.n	80066b2 <HAL_UART_IRQHandler+0xae>
 800669a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d005      	beq.n	80066b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f043 0201 	orr.w	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <HAL_UART_IRQHandler+0xd2>
 80066be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	f043 0202 	orr.w	r2, r3, #2
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <HAL_UART_IRQHandler+0xf6>
 80066e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f043 0204 	orr.w	r2, r3, #4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	2b00      	cmp	r3, #0
 8006704:	d011      	beq.n	800672a <HAL_UART_IRQHandler+0x126>
 8006706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	d105      	bne.n	800671e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d005      	beq.n	800672a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	f043 0208 	orr.w	r2, r3, #8
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 81ed 	beq.w	8006b0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <HAL_UART_IRQHandler+0x14e>
 8006740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fb92 	bl	8006e76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675c:	2b40      	cmp	r3, #64	; 0x40
 800675e:	bf0c      	ite	eq
 8006760:	2301      	moveq	r3, #1
 8006762:	2300      	movne	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d103      	bne.n	800677e <HAL_UART_IRQHandler+0x17a>
 8006776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800677a:	2b00      	cmp	r3, #0
 800677c:	d04f      	beq.n	800681e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fa9a 	bl	8006cb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d141      	bne.n	8006816 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3314      	adds	r3, #20
 8006798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3314      	adds	r3, #20
 80067ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1d9      	bne.n	8006792 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d013      	beq.n	800680e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ea:	4a7d      	ldr	r2, [pc, #500]	; (80069e0 <HAL_UART_IRQHandler+0x3dc>)
 80067ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fa53 	bl	8004c9e <HAL_DMA_Abort_IT>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d016      	beq.n	800682c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006808:	4610      	mov	r0, r2
 800680a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	e00e      	b.n	800682c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f990 	bl	8006b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006814:	e00a      	b.n	800682c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f98c 	bl	8006b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681c:	e006      	b.n	800682c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f988 	bl	8006b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800682a:	e170      	b.n	8006b0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	bf00      	nop
    return;
 800682e:	e16e      	b.n	8006b0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006834:	2b01      	cmp	r3, #1
 8006836:	f040 814a 	bne.w	8006ace <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800683a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683e:	f003 0310 	and.w	r3, r3, #16
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 8143 	beq.w	8006ace <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800684c:	f003 0310 	and.w	r3, r3, #16
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 813c 	beq.w	8006ace <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006856:	2300      	movs	r3, #0
 8006858:	60bb      	str	r3, [r7, #8]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	60bb      	str	r3, [r7, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	60bb      	str	r3, [r7, #8]
 800686a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006876:	2b40      	cmp	r3, #64	; 0x40
 8006878:	f040 80b4 	bne.w	80069e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006888:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 8140 	beq.w	8006b12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800689a:	429a      	cmp	r2, r3
 800689c:	f080 8139 	bcs.w	8006b12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b2:	f000 8088 	beq.w	80069c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	330c      	adds	r3, #12
 80068bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068c4:	e853 3f00 	ldrex	r3, [r3]
 80068c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	330c      	adds	r3, #12
 80068de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80068e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1d9      	bne.n	80068b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3314      	adds	r3, #20
 8006908:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006914:	f023 0301 	bic.w	r3, r3, #1
 8006918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3314      	adds	r3, #20
 8006922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006926:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800692a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800692e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e1      	bne.n	8006902 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3314      	adds	r3, #20
 8006944:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800694e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006954:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3314      	adds	r3, #20
 800695e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006962:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006964:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006968:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e3      	bne.n	800693e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2220      	movs	r2, #32
 800697a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006996:	f023 0310 	bic.w	r3, r3, #16
 800699a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	330c      	adds	r3, #12
 80069a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80069aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e3      	bne.n	8006984 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe f8fc 	bl	8004bbe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f8b6 	bl	8006b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069dc:	e099      	b.n	8006b12 <HAL_UART_IRQHandler+0x50e>
 80069de:	bf00      	nop
 80069e0:	08006d7f 	.word	0x08006d7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 808b 	beq.w	8006b16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8086 	beq.w	8006b16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	330c      	adds	r3, #12
 8006a10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a2e:	647a      	str	r2, [r7, #68]	; 0x44
 8006a30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e3      	bne.n	8006a0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3314      	adds	r3, #20
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	623b      	str	r3, [r7, #32]
   return(result);
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	f023 0301 	bic.w	r3, r3, #1
 8006a58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3314      	adds	r3, #20
 8006a62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a66:	633a      	str	r2, [r7, #48]	; 0x30
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e3      	bne.n	8006a42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	330c      	adds	r3, #12
 8006a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0310 	bic.w	r3, r3, #16
 8006a9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	330c      	adds	r3, #12
 8006aa8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006aac:	61fa      	str	r2, [r7, #28]
 8006aae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	69b9      	ldr	r1, [r7, #24]
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e3      	bne.n	8006a88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f83e 	bl	8006b48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006acc:	e023      	b.n	8006b16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d009      	beq.n	8006aee <HAL_UART_IRQHandler+0x4ea>
 8006ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f95d 	bl	8006da6 <UART_Transmit_IT>
    return;
 8006aec:	e014      	b.n	8006b18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00e      	beq.n	8006b18 <HAL_UART_IRQHandler+0x514>
 8006afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d008      	beq.n	8006b18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f99d 	bl	8006e46 <UART_EndTransmit_IT>
    return;
 8006b0c:	e004      	b.n	8006b18 <HAL_UART_IRQHandler+0x514>
    return;
 8006b0e:	bf00      	nop
 8006b10:	e002      	b.n	8006b18 <HAL_UART_IRQHandler+0x514>
      return;
 8006b12:	bf00      	nop
 8006b14:	e000      	b.n	8006b18 <HAL_UART_IRQHandler+0x514>
      return;
 8006b16:	bf00      	nop
  }
}
 8006b18:	37e8      	adds	r7, #232	; 0xe8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop

08006b20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	460b      	mov	r3, r1
 8006b52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b090      	sub	sp, #64	; 0x40
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b70:	e050      	b.n	8006c14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d04c      	beq.n	8006c14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d007      	beq.n	8006b90 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b80:	f7fd fa08 	bl	8003f94 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d241      	bcs.n	8006c14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bb0:	637a      	str	r2, [r7, #52]	; 0x34
 8006bb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e5      	bne.n	8006b90 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3314      	adds	r3, #20
 8006bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f023 0301 	bic.w	r3, r3, #1
 8006bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3314      	adds	r3, #20
 8006be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006be4:	623a      	str	r2, [r7, #32]
 8006be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	69f9      	ldr	r1, [r7, #28]
 8006bea:	6a3a      	ldr	r2, [r7, #32]
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e5      	bne.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e00f      	b.n	8006c34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	bf0c      	ite	eq
 8006c24:	2301      	moveq	r3, #1
 8006c26:	2300      	movne	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d09f      	beq.n	8006b72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3740      	adds	r7, #64	; 0x40
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	4613      	mov	r3, r2
 8006c48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	88fa      	ldrh	r2, [r7, #6]
 8006c54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	88fa      	ldrh	r2, [r7, #6]
 8006c5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2222      	movs	r2, #34	; 0x22
 8006c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695a      	ldr	r2, [r3, #20]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0201 	orr.w	r2, r2, #1
 8006c98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f042 0220 	orr.w	r2, r2, #32
 8006ca8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b095      	sub	sp, #84	; 0x54
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	330c      	adds	r3, #12
 8006cde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ce0:	643a      	str	r2, [r7, #64]	; 0x40
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ce6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e5      	bne.n	8006cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3314      	adds	r3, #20
 8006cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	f023 0301 	bic.w	r3, r3, #1
 8006d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	3314      	adds	r3, #20
 8006d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e5      	bne.n	8006cf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d119      	bne.n	8006d64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	330c      	adds	r3, #12
 8006d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f023 0310 	bic.w	r3, r3, #16
 8006d46:	647b      	str	r3, [r7, #68]	; 0x44
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d50:	61ba      	str	r2, [r7, #24]
 8006d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	6979      	ldr	r1, [r7, #20]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e5      	bne.n	8006d30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d72:	bf00      	nop
 8006d74:	3754      	adds	r7, #84	; 0x54
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f7ff fecb 	bl	8006b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d9e:	bf00      	nop
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b21      	cmp	r3, #33	; 0x21
 8006db8:	d13e      	bne.n	8006e38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc2:	d114      	bne.n	8006dee <UART_Transmit_IT+0x48>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d110      	bne.n	8006dee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006de0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	1c9a      	adds	r2, r3, #2
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	621a      	str	r2, [r3, #32]
 8006dec:	e008      	b.n	8006e00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	1c59      	adds	r1, r3, #1
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6211      	str	r1, [r2, #32]
 8006df8:	781a      	ldrb	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10f      	bne.n	8006e34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	e000      	b.n	8006e3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e38:	2302      	movs	r3, #2
  }
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff fe5a 	bl	8006b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b08c      	sub	sp, #48	; 0x30
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b22      	cmp	r3, #34	; 0x22
 8006e88:	f040 80ab 	bne.w	8006fe2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e94:	d117      	bne.n	8006ec6 <UART_Receive_IT+0x50>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d113      	bne.n	8006ec6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebe:	1c9a      	adds	r2, r3, #2
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ec4:	e026      	b.n	8006f14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed8:	d007      	beq.n	8006eea <UART_Receive_IT+0x74>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <UART_Receive_IT+0x82>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	e008      	b.n	8006f0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	4619      	mov	r1, r3
 8006f22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d15a      	bne.n	8006fde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0220 	bic.w	r2, r2, #32
 8006f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695a      	ldr	r2, [r3, #20]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0201 	bic.w	r2, r2, #1
 8006f56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d135      	bne.n	8006fd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	330c      	adds	r3, #12
 8006f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f023 0310 	bic.w	r3, r3, #16
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8e:	623a      	str	r2, [r7, #32]
 8006f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	69f9      	ldr	r1, [r7, #28]
 8006f94:	6a3a      	ldr	r2, [r7, #32]
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e5      	bne.n	8006f6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0310 	and.w	r3, r3, #16
 8006fac:	2b10      	cmp	r3, #16
 8006fae:	d10a      	bne.n	8006fc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff fdbb 	bl	8006b48 <HAL_UARTEx_RxEventCallback>
 8006fd2:	e002      	b.n	8006fda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7fb ff8d 	bl	8002ef4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e002      	b.n	8006fe4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e000      	b.n	8006fe4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006fe2:	2302      	movs	r3, #2
  }
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3730      	adds	r7, #48	; 0x30
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ff0:	b0c0      	sub	sp, #256	; 0x100
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007008:	68d9      	ldr	r1, [r3, #12]
 800700a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	ea40 0301 	orr.w	r3, r0, r1
 8007014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	431a      	orrs	r2, r3
 8007024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	431a      	orrs	r2, r3
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	4313      	orrs	r3, r2
 8007034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007044:	f021 010c 	bic.w	r1, r1, #12
 8007048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007052:	430b      	orrs	r3, r1
 8007054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007066:	6999      	ldr	r1, [r3, #24]
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	ea40 0301 	orr.w	r3, r0, r1
 8007072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	4b8f      	ldr	r3, [pc, #572]	; (80072b8 <UART_SetConfig+0x2cc>)
 800707c:	429a      	cmp	r2, r3
 800707e:	d005      	beq.n	800708c <UART_SetConfig+0xa0>
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b8d      	ldr	r3, [pc, #564]	; (80072bc <UART_SetConfig+0x2d0>)
 8007088:	429a      	cmp	r2, r3
 800708a:	d104      	bne.n	8007096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800708c:	f7fe f948 	bl	8005320 <HAL_RCC_GetPCLK2Freq>
 8007090:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007094:	e003      	b.n	800709e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007096:	f7fe f92f 	bl	80052f8 <HAL_RCC_GetPCLK1Freq>
 800709a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800709e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a8:	f040 810c 	bne.w	80072c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80070ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80070be:	4622      	mov	r2, r4
 80070c0:	462b      	mov	r3, r5
 80070c2:	1891      	adds	r1, r2, r2
 80070c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80070c6:	415b      	adcs	r3, r3
 80070c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80070ce:	4621      	mov	r1, r4
 80070d0:	eb12 0801 	adds.w	r8, r2, r1
 80070d4:	4629      	mov	r1, r5
 80070d6:	eb43 0901 	adc.w	r9, r3, r1
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070ee:	4690      	mov	r8, r2
 80070f0:	4699      	mov	r9, r3
 80070f2:	4623      	mov	r3, r4
 80070f4:	eb18 0303 	adds.w	r3, r8, r3
 80070f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070fc:	462b      	mov	r3, r5
 80070fe:	eb49 0303 	adc.w	r3, r9, r3
 8007102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007112:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800711a:	460b      	mov	r3, r1
 800711c:	18db      	adds	r3, r3, r3
 800711e:	653b      	str	r3, [r7, #80]	; 0x50
 8007120:	4613      	mov	r3, r2
 8007122:	eb42 0303 	adc.w	r3, r2, r3
 8007126:	657b      	str	r3, [r7, #84]	; 0x54
 8007128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800712c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007130:	f7f9 fc88 	bl	8000a44 <__aeabi_uldivmod>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4b61      	ldr	r3, [pc, #388]	; (80072c0 <UART_SetConfig+0x2d4>)
 800713a:	fba3 2302 	umull	r2, r3, r3, r2
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	011c      	lsls	r4, r3, #4
 8007142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007146:	2200      	movs	r2, #0
 8007148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800714c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007154:	4642      	mov	r2, r8
 8007156:	464b      	mov	r3, r9
 8007158:	1891      	adds	r1, r2, r2
 800715a:	64b9      	str	r1, [r7, #72]	; 0x48
 800715c:	415b      	adcs	r3, r3
 800715e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007164:	4641      	mov	r1, r8
 8007166:	eb12 0a01 	adds.w	sl, r2, r1
 800716a:	4649      	mov	r1, r9
 800716c:	eb43 0b01 	adc.w	fp, r3, r1
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800717c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007184:	4692      	mov	sl, r2
 8007186:	469b      	mov	fp, r3
 8007188:	4643      	mov	r3, r8
 800718a:	eb1a 0303 	adds.w	r3, sl, r3
 800718e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007192:	464b      	mov	r3, r9
 8007194:	eb4b 0303 	adc.w	r3, fp, r3
 8007198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80071ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071b0:	460b      	mov	r3, r1
 80071b2:	18db      	adds	r3, r3, r3
 80071b4:	643b      	str	r3, [r7, #64]	; 0x40
 80071b6:	4613      	mov	r3, r2
 80071b8:	eb42 0303 	adc.w	r3, r2, r3
 80071bc:	647b      	str	r3, [r7, #68]	; 0x44
 80071be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80071c6:	f7f9 fc3d 	bl	8000a44 <__aeabi_uldivmod>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	4b3b      	ldr	r3, [pc, #236]	; (80072c0 <UART_SetConfig+0x2d4>)
 80071d2:	fba3 2301 	umull	r2, r3, r3, r1
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	2264      	movs	r2, #100	; 0x64
 80071da:	fb02 f303 	mul.w	r3, r2, r3
 80071de:	1acb      	subs	r3, r1, r3
 80071e0:	00db      	lsls	r3, r3, #3
 80071e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071e6:	4b36      	ldr	r3, [pc, #216]	; (80072c0 <UART_SetConfig+0x2d4>)
 80071e8:	fba3 2302 	umull	r2, r3, r3, r2
 80071ec:	095b      	lsrs	r3, r3, #5
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071f4:	441c      	add	r4, r3
 80071f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007200:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	1891      	adds	r1, r2, r2
 800720e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007210:	415b      	adcs	r3, r3
 8007212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007218:	4641      	mov	r1, r8
 800721a:	1851      	adds	r1, r2, r1
 800721c:	6339      	str	r1, [r7, #48]	; 0x30
 800721e:	4649      	mov	r1, r9
 8007220:	414b      	adcs	r3, r1
 8007222:	637b      	str	r3, [r7, #52]	; 0x34
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007230:	4659      	mov	r1, fp
 8007232:	00cb      	lsls	r3, r1, #3
 8007234:	4651      	mov	r1, sl
 8007236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800723a:	4651      	mov	r1, sl
 800723c:	00ca      	lsls	r2, r1, #3
 800723e:	4610      	mov	r0, r2
 8007240:	4619      	mov	r1, r3
 8007242:	4603      	mov	r3, r0
 8007244:	4642      	mov	r2, r8
 8007246:	189b      	adds	r3, r3, r2
 8007248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800724c:	464b      	mov	r3, r9
 800724e:	460a      	mov	r2, r1
 8007250:	eb42 0303 	adc.w	r3, r2, r3
 8007254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007264:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800726c:	460b      	mov	r3, r1
 800726e:	18db      	adds	r3, r3, r3
 8007270:	62bb      	str	r3, [r7, #40]	; 0x28
 8007272:	4613      	mov	r3, r2
 8007274:	eb42 0303 	adc.w	r3, r2, r3
 8007278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800727a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800727e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007282:	f7f9 fbdf 	bl	8000a44 <__aeabi_uldivmod>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <UART_SetConfig+0x2d4>)
 800728c:	fba3 1302 	umull	r1, r3, r3, r2
 8007290:	095b      	lsrs	r3, r3, #5
 8007292:	2164      	movs	r1, #100	; 0x64
 8007294:	fb01 f303 	mul.w	r3, r1, r3
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	3332      	adds	r3, #50	; 0x32
 800729e:	4a08      	ldr	r2, [pc, #32]	; (80072c0 <UART_SetConfig+0x2d4>)
 80072a0:	fba2 2303 	umull	r2, r3, r2, r3
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	f003 0207 	and.w	r2, r3, #7
 80072aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4422      	add	r2, r4
 80072b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072b4:	e105      	b.n	80074c2 <UART_SetConfig+0x4d6>
 80072b6:	bf00      	nop
 80072b8:	40011000 	.word	0x40011000
 80072bc:	40011400 	.word	0x40011400
 80072c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80072ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80072d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80072d6:	4642      	mov	r2, r8
 80072d8:	464b      	mov	r3, r9
 80072da:	1891      	adds	r1, r2, r2
 80072dc:	6239      	str	r1, [r7, #32]
 80072de:	415b      	adcs	r3, r3
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
 80072e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072e6:	4641      	mov	r1, r8
 80072e8:	1854      	adds	r4, r2, r1
 80072ea:	4649      	mov	r1, r9
 80072ec:	eb43 0501 	adc.w	r5, r3, r1
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	00eb      	lsls	r3, r5, #3
 80072fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072fe:	00e2      	lsls	r2, r4, #3
 8007300:	4614      	mov	r4, r2
 8007302:	461d      	mov	r5, r3
 8007304:	4643      	mov	r3, r8
 8007306:	18e3      	adds	r3, r4, r3
 8007308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800730c:	464b      	mov	r3, r9
 800730e:	eb45 0303 	adc.w	r3, r5, r3
 8007312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007332:	4629      	mov	r1, r5
 8007334:	008b      	lsls	r3, r1, #2
 8007336:	4621      	mov	r1, r4
 8007338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800733c:	4621      	mov	r1, r4
 800733e:	008a      	lsls	r2, r1, #2
 8007340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007344:	f7f9 fb7e 	bl	8000a44 <__aeabi_uldivmod>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4b60      	ldr	r3, [pc, #384]	; (80074d0 <UART_SetConfig+0x4e4>)
 800734e:	fba3 2302 	umull	r2, r3, r3, r2
 8007352:	095b      	lsrs	r3, r3, #5
 8007354:	011c      	lsls	r4, r3, #4
 8007356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800735a:	2200      	movs	r2, #0
 800735c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007368:	4642      	mov	r2, r8
 800736a:	464b      	mov	r3, r9
 800736c:	1891      	adds	r1, r2, r2
 800736e:	61b9      	str	r1, [r7, #24]
 8007370:	415b      	adcs	r3, r3
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007378:	4641      	mov	r1, r8
 800737a:	1851      	adds	r1, r2, r1
 800737c:	6139      	str	r1, [r7, #16]
 800737e:	4649      	mov	r1, r9
 8007380:	414b      	adcs	r3, r1
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007390:	4659      	mov	r1, fp
 8007392:	00cb      	lsls	r3, r1, #3
 8007394:	4651      	mov	r1, sl
 8007396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800739a:	4651      	mov	r1, sl
 800739c:	00ca      	lsls	r2, r1, #3
 800739e:	4610      	mov	r0, r2
 80073a0:	4619      	mov	r1, r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	4642      	mov	r2, r8
 80073a6:	189b      	adds	r3, r3, r2
 80073a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073ac:	464b      	mov	r3, r9
 80073ae:	460a      	mov	r2, r1
 80073b0:	eb42 0303 	adc.w	r3, r2, r3
 80073b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80073c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80073d0:	4649      	mov	r1, r9
 80073d2:	008b      	lsls	r3, r1, #2
 80073d4:	4641      	mov	r1, r8
 80073d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073da:	4641      	mov	r1, r8
 80073dc:	008a      	lsls	r2, r1, #2
 80073de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80073e2:	f7f9 fb2f 	bl	8000a44 <__aeabi_uldivmod>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4b39      	ldr	r3, [pc, #228]	; (80074d0 <UART_SetConfig+0x4e4>)
 80073ec:	fba3 1302 	umull	r1, r3, r3, r2
 80073f0:	095b      	lsrs	r3, r3, #5
 80073f2:	2164      	movs	r1, #100	; 0x64
 80073f4:	fb01 f303 	mul.w	r3, r1, r3
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	3332      	adds	r3, #50	; 0x32
 80073fe:	4a34      	ldr	r2, [pc, #208]	; (80074d0 <UART_SetConfig+0x4e4>)
 8007400:	fba2 2303 	umull	r2, r3, r2, r3
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800740a:	441c      	add	r4, r3
 800740c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007410:	2200      	movs	r2, #0
 8007412:	673b      	str	r3, [r7, #112]	; 0x70
 8007414:	677a      	str	r2, [r7, #116]	; 0x74
 8007416:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800741a:	4642      	mov	r2, r8
 800741c:	464b      	mov	r3, r9
 800741e:	1891      	adds	r1, r2, r2
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	415b      	adcs	r3, r3
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800742a:	4641      	mov	r1, r8
 800742c:	1851      	adds	r1, r2, r1
 800742e:	6039      	str	r1, [r7, #0]
 8007430:	4649      	mov	r1, r9
 8007432:	414b      	adcs	r3, r1
 8007434:	607b      	str	r3, [r7, #4]
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	f04f 0300 	mov.w	r3, #0
 800743e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007442:	4659      	mov	r1, fp
 8007444:	00cb      	lsls	r3, r1, #3
 8007446:	4651      	mov	r1, sl
 8007448:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800744c:	4651      	mov	r1, sl
 800744e:	00ca      	lsls	r2, r1, #3
 8007450:	4610      	mov	r0, r2
 8007452:	4619      	mov	r1, r3
 8007454:	4603      	mov	r3, r0
 8007456:	4642      	mov	r2, r8
 8007458:	189b      	adds	r3, r3, r2
 800745a:	66bb      	str	r3, [r7, #104]	; 0x68
 800745c:	464b      	mov	r3, r9
 800745e:	460a      	mov	r2, r1
 8007460:	eb42 0303 	adc.w	r3, r2, r3
 8007464:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	663b      	str	r3, [r7, #96]	; 0x60
 8007470:	667a      	str	r2, [r7, #100]	; 0x64
 8007472:	f04f 0200 	mov.w	r2, #0
 8007476:	f04f 0300 	mov.w	r3, #0
 800747a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800747e:	4649      	mov	r1, r9
 8007480:	008b      	lsls	r3, r1, #2
 8007482:	4641      	mov	r1, r8
 8007484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007488:	4641      	mov	r1, r8
 800748a:	008a      	lsls	r2, r1, #2
 800748c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007490:	f7f9 fad8 	bl	8000a44 <__aeabi_uldivmod>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4b0d      	ldr	r3, [pc, #52]	; (80074d0 <UART_SetConfig+0x4e4>)
 800749a:	fba3 1302 	umull	r1, r3, r3, r2
 800749e:	095b      	lsrs	r3, r3, #5
 80074a0:	2164      	movs	r1, #100	; 0x64
 80074a2:	fb01 f303 	mul.w	r3, r1, r3
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	011b      	lsls	r3, r3, #4
 80074aa:	3332      	adds	r3, #50	; 0x32
 80074ac:	4a08      	ldr	r2, [pc, #32]	; (80074d0 <UART_SetConfig+0x4e4>)
 80074ae:	fba2 2303 	umull	r2, r3, r2, r3
 80074b2:	095b      	lsrs	r3, r3, #5
 80074b4:	f003 020f 	and.w	r2, r3, #15
 80074b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4422      	add	r2, r4
 80074c0:	609a      	str	r2, [r3, #8]
}
 80074c2:	bf00      	nop
 80074c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80074c8:	46bd      	mov	sp, r7
 80074ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ce:	bf00      	nop
 80074d0:	51eb851f 	.word	0x51eb851f

080074d4 <movingAverageInit>:
 */

#include "movingAverage.h"

void movingAverageInit(MovingAverage *movingAverage, uint16_t window)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	807b      	strh	r3, [r7, #2]
	movingAverage->index = 0;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	801a      	strh	r2, [r3, #0]
	movingAverage->window = window;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	887a      	ldrh	r2, [r7, #2]
 80074ea:	805a      	strh	r2, [r3, #2]
	memset(movingAverage->buffer, 0x00, MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS * sizeof(int32_t));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	3304      	adds	r3, #4
 80074f0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80074f4:	2100      	movs	r1, #0
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fbda 	bl	8007cb0 <memset>
	movingAverage->sum = 0;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
	movingAverage->movingAverage = 0;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
}
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <movingAverageAddValue>:

void movingAverageAddValue(MovingAverage *movingAverage, int32_t newValue)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
	movingAverage->sum = movingAverage->sum - movingAverage->buffer[movingAverage->index] + newValue;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	; 0x4b4
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	1ad2      	subs	r2, r2, r3
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	441a      	add	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
	movingAverage->buffer[movingAverage->index] = newValue;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	605a      	str	r2, [r3, #4]
	movingAverage->movingAverage = movingAverage->sum / movingAverage->window;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	8852      	ldrh	r2, [r2, #2]
 8007558:	fb93 f2f2 	sdiv	r2, r3, r2
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
	movingAverage->index = (movingAverage->index + 1) % movingAverage->window;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007568:	3301      	adds	r3, #1
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	8852      	ldrh	r2, [r2, #2]
 800756e:	fb93 f1f2 	sdiv	r1, r3, r2
 8007572:	fb01 f202 	mul.w	r2, r1, r2
 8007576:	1a9b      	subs	r3, r3, r2
 8007578:	b21a      	sxth	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	801a      	strh	r2, [r3, #0]
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <movingAverageGetMean>:

int32_t movingAverageGetMean(MovingAverage *movingAverage)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
	return movingAverage->movingAverage;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8d3 34b8 	ldr.w	r3, [r3, #1208]	; 0x4b8
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <movingAverageGetWindow>:

uint16_t movingAverageGetWindow(MovingAverage *movingAverage)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
	return movingAverage->window;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	885b      	ldrh	r3, [r3, #2]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <movingAverageSetWindow>:

void movingAverageSetWindow(MovingAverage *movingAverage, uint16_t window)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	807b      	strh	r3, [r7, #2]
	if (window > MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS)
 80075c8:	887b      	ldrh	r3, [r7, #2]
 80075ca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80075ce:	d902      	bls.n	80075d6 <movingAverageSetWindow+0x1a>
	{
		window = MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS;
 80075d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80075d4:	807b      	strh	r3, [r7, #2]
	}
	movingAverage->window = window;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	887a      	ldrh	r2, [r7, #2]
 80075da:	805a      	strh	r2, [r3, #2]
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <pidInit>:

#include "pid.h"
#include "defs.h"

void pidInit(PidController *pidController, float kp, float ki, float kd, float offset, float bias, ControllerTopology controllerTopology)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b089      	sub	sp, #36	; 0x24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	61f8      	str	r0, [r7, #28]
 80075f0:	ed87 0a06 	vstr	s0, [r7, #24]
 80075f4:	edc7 0a05 	vstr	s1, [r7, #20]
 80075f8:	ed87 1a04 	vstr	s2, [r7, #16]
 80075fc:	edc7 1a03 	vstr	s3, [r7, #12]
 8007600:	ed87 2a02 	vstr	s4, [r7, #8]
 8007604:	460b      	mov	r3, r1
 8007606:	71fb      	strb	r3, [r7, #7]
	pidController->kp = kp;
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	601a      	str	r2, [r3, #0]
	pidController->ki = ki;
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	605a      	str	r2, [r3, #4]
	pidController->kd = kd;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	609a      	str	r2, [r3, #8]
	pidController->controllerTopology = controllerTopology;
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	79fa      	ldrb	r2, [r7, #7]
 800761e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	pidController->currentError = 0;
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	f04f 0200 	mov.w	r2, #0
 8007628:	60da      	str	r2, [r3, #12]
	pidController->previousError = 0;
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	f04f 0200 	mov.w	r2, #0
 8007630:	611a      	str	r2, [r3, #16]
	pidController->sumOfErrors = 0;
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	615a      	str	r2, [r3, #20]
	pidController->setpoint = 0;
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	619a      	str	r2, [r3, #24]
	pidController->controlledVariable = 0;
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	61da      	str	r2, [r3, #28]
	pidController->processVariable = 0;
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	621a      	str	r2, [r3, #32]
	pidController->differenceOfErrors = 0;
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	f04f 0200 	mov.w	r2, #0
 8007658:	625a      	str	r2, [r3, #36]	; 0x24
	pidController->minSumOfErrors = -10000;
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4a0d      	ldr	r2, [pc, #52]	; (8007694 <pidInit+0xac>)
 800765e:	635a      	str	r2, [r3, #52]	; 0x34
	pidController->maxSumOfErrors = 10000;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	f242 7210 	movw	r2, #10000	; 0x2710
 8007666:	639a      	str	r2, [r3, #56]	; 0x38
	pidController->minControlledVariable = 0;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	2200      	movs	r2, #0
 800766c:	63da      	str	r2, [r3, #60]	; 0x3c
	pidController->maxControlledVariable = 4095;
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007674:	641a      	str	r2, [r3, #64]	; 0x40
	pidController->offset = offset;
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	62da      	str	r2, [r3, #44]	; 0x2c
	pidController->bias = bias;
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	631a      	str	r2, [r3, #48]	; 0x30
	pidController->interval = ((float) DELAY_5_MILISECONDS) / 10000;
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4a04      	ldr	r2, [pc, #16]	; (8007698 <pidInit+0xb0>)
 8007686:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007688:	bf00      	nop
 800768a:	3724      	adds	r7, #36	; 0x24
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	ffffd8f0 	.word	0xffffd8f0
 8007698:	3ba3d70a 	.word	0x3ba3d70a

0800769c <pidCompute>:

void pidCompute(PidController *pidController)
{
 800769c:	b480      	push	{r7}
 800769e:	b089      	sub	sp, #36	; 0x24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	pidController->currentError = pidController->setpoint - pidController->processVariable;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	ed93 7a06 	vldr	s14, [r3, #24]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80076b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	edc3 7a03 	vstr	s15, [r3, #12]
	pidController->sumOfErrors += pidController->currentError;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	ed93 7a05 	vldr	s14, [r3, #20]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80076c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	edc3 7a05 	vstr	s15, [r3, #20]
	pidController->differenceOfErrors = pidController->currentError - pidController->previousError;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80076dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	if (pidController->sumOfErrors > pidController->maxSumOfErrors)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	ed93 7a05 	vldr	s14, [r3, #20]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f0:	ee07 3a90 	vmov	s15, r3
 80076f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007700:	dd09      	ble.n	8007716 <pidCompute+0x7a>
	{
		pidController->sumOfErrors = pidController->maxSumOfErrors;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	edc3 7a05 	vstr	s15, [r3, #20]
 8007714:	e016      	b.n	8007744 <pidCompute+0xa8>
	}
	else if (pidController->sumOfErrors < pidController->minSumOfErrors)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	ed93 7a05 	vldr	s14, [r3, #20]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007728:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800772c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007730:	d508      	bpl.n	8007744 <pidCompute+0xa8>
	{
		pidController->sumOfErrors = pidController->minSumOfErrors;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	if (pidController->controllerTopology == P_CONTROLLER)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800774a:	2b00      	cmp	r3, #0
 800774c:	d114      	bne.n	8007778 <pidCompute+0xdc>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	ed93 7a00 	vldr	s14, [r3]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	edd3 7a03 	vldr	s15, [r3, #12]
 800775a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775e:	edc7 7a02 	vstr	s15, [r7, #8]
		pidController->controlledVariable = proportionalTerm + pidController->bias;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007768:	edd7 7a02 	vldr	s15, [r7, #8]
 800776c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	edc3 7a07 	vstr	s15, [r3, #28]
 8007776:	e061      	b.n	800783c <pidCompute+0x1a0>
	}
	else if (pidController->controllerTopology == PI_CONTROLLER)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800777e:	2b01      	cmp	r3, #1
 8007780:	d122      	bne.n	80077c8 <pidCompute+0x12c>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	ed93 7a00 	vldr	s14, [r3]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	edd3 7a03 	vldr	s15, [r3, #12]
 800778e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007792:	edc7 7a04 	vstr	s15, [r7, #16]
		float integralTerm = pidController->ki * pidController->sumOfErrors;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	ed93 7a01 	vldr	s14, [r3, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	edd3 7a05 	vldr	s15, [r3, #20]
 80077a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a6:	edc7 7a03 	vstr	s15, [r7, #12]
		pidController->controlledVariable = proportionalTerm + integralTerm + pidController->bias;
 80077aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80077ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80077b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80077bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	edc3 7a07 	vstr	s15, [r3, #28]
 80077c6:	e039      	b.n	800783c <pidCompute+0x1a0>
	}
	else if (pidController->controllerTopology == PID_CONTROLLER)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d130      	bne.n	8007834 <pidCompute+0x198>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	ed93 7a00 	vldr	s14, [r3]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	edd3 7a03 	vldr	s15, [r3, #12]
 80077de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e2:	edc7 7a07 	vstr	s15, [r7, #28]
		float integralTerm = pidController->ki * pidController->sumOfErrors;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80077f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077f6:	edc7 7a06 	vstr	s15, [r7, #24]
		float derivativeTerm = pidController->kd * pidController->differenceOfErrors;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800780a:	edc7 7a05 	vstr	s15, [r7, #20]
		pidController->controlledVariable = proportionalTerm + integralTerm + derivativeTerm + pidController->bias;
 800780e:	ed97 7a07 	vldr	s14, [r7, #28]
 8007812:	edd7 7a06 	vldr	s15, [r7, #24]
 8007816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800781a:	edd7 7a05 	vldr	s15, [r7, #20]
 800781e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	edc3 7a07 	vstr	s15, [r3, #28]
 8007832:	e003      	b.n	800783c <pidCompute+0x1a0>
	}
	else
	{
		pidController->controlledVariable = 0;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f04f 0200 	mov.w	r2, #0
 800783a:	61da      	str	r2, [r3, #28]
	}

	if (pidController->controlledVariable > pidController->maxControlledVariable)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	ed93 7a07 	vldr	s14, [r3, #28]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800784e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007856:	dd09      	ble.n	800786c <pidCompute+0x1d0>
	{
		pidController->controlledVariable = pidController->maxControlledVariable;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	ee07 3a90 	vmov	s15, r3
 8007860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	edc3 7a07 	vstr	s15, [r3, #28]
 800786a:	e016      	b.n	800789a <pidCompute+0x1fe>
	}
	else if (pidController->controlledVariable < pidController->minControlledVariable)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	ed93 7a07 	vldr	s14, [r3, #28]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800787e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007886:	d508      	bpl.n	800789a <pidCompute+0x1fe>
	{
		pidController->controlledVariable = pidController->minControlledVariable;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800788c:	ee07 3a90 	vmov	s15, r3
 8007890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	pidController->previousError = pidController->currentError;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	611a      	str	r2, [r3, #16]
}
 80078a2:	bf00      	nop
 80078a4:	3724      	adds	r7, #36	; 0x24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <pidClearParameters>:

void pidClearParameters(PidController *pidController)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
	pidController->controlledVariable = 0;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f04f 0200 	mov.w	r2, #0
 80078bc:	61da      	str	r2, [r3, #28]
	pidController->currentError = 0;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f04f 0200 	mov.w	r2, #0
 80078c4:	60da      	str	r2, [r3, #12]
	pidController->differenceOfErrors = 0;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f04f 0200 	mov.w	r2, #0
 80078cc:	625a      	str	r2, [r3, #36]	; 0x24
	pidController->previousError = 0;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	611a      	str	r2, [r3, #16]
	pidController->processVariable = 0;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	621a      	str	r2, [r3, #32]
	pidController->sumOfErrors = 0;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	615a      	str	r2, [r3, #20]
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <pidGetKp>:

float pidGetKp(PidController *pidController)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
	return pidController->kp;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	ee07 3a90 	vmov	s15, r3
}
 8007902:	eeb0 0a67 	vmov.f32	s0, s15
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <pidSetKp>:

void pidSetKp(PidController *pidController, float kp)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	ed87 0a00 	vstr	s0, [r7]
	pidController->kp = kp;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	601a      	str	r2, [r3, #0]
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <pidGetKi>:

float pidGetKi(PidController *pidController)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
	return pidController->ki;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	ee07 3a90 	vmov	s15, r3
}
 800793e:	eeb0 0a67 	vmov.f32	s0, s15
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <pidSetKi>:

void pidSetKi(PidController *pidController, float ki)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	ed87 0a00 	vstr	s0, [r7]
	pidController->ki = ki;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	605a      	str	r2, [r3, #4]
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <pidGetKd>:

float pidGetKd(PidController *pidController)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
	return pidController->kd;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	ee07 3a90 	vmov	s15, r3
}
 800797a:	eeb0 0a67 	vmov.f32	s0, s15
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <pidSetKd>:

void pidSetKd(PidController *pidController, float kd)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	ed87 0a00 	vstr	s0, [r7]
	pidController->kd = kd;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	609a      	str	r2, [r3, #8]
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <pidGetInterval>:

float pidGetInterval(PidController *pidController)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
	return pidController->interval;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	ee07 3a90 	vmov	s15, r3
}
 80079b6:	eeb0 0a67 	vmov.f32	s0, s15
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <pidSetInterval>:

void pidSetInterval(PidController *pidController, float interval)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	ed87 0a00 	vstr	s0, [r7]
	pidController->interval = interval;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <pidGetSetpoint>:

float pidGetSetpoint(PidController *pidController)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
	return pidController->setpoint;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	ee07 3a90 	vmov	s15, r3
}
 80079f2:	eeb0 0a67 	vmov.f32	s0, s15
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <pidSetSetpoint>:

void pidSetSetpoint(PidController *pidController, float setpoint)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	ed87 0a00 	vstr	s0, [r7]
	pidController->setpoint = setpoint;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	619a      	str	r2, [r3, #24]
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <pidGetProcessVariable>:

float pidGetProcessVariable(PidController *pidController)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
	return pidController->processVariable;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	ee07 3a90 	vmov	s15, r3
}
 8007a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <pidSetProcessVariable>:

void pidSetProcessVariable(PidController *pidController, float processVariable)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	ed87 0a00 	vstr	s0, [r7]
	pidController->processVariable = processVariable + pidController->offset;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007a4e:	edd7 7a00 	vldr	s15, [r7]
 8007a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <pidGetControlledVariable>:

float pidGetControlledVariable(PidController *pidController)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
	return pidController->controlledVariable;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	ee07 3a90 	vmov	s15, r3
}
 8007a78:	eeb0 0a67 	vmov.f32	s0, s15
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <pidGetOffset>:

float pidGetOffset(PidController *pidController)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
	return pidController->offset;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a92:	ee07 3a90 	vmov	s15, r3
}
 8007a96:	eeb0 0a67 	vmov.f32	s0, s15
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <pidSetOffset>:

void pidSetOffset(PidController *pidController, float offset)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	ed87 0a00 	vstr	s0, [r7]
	pidController->offset = offset;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <pidGetBias>:

float pidGetBias(PidController *pidController)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
	return pidController->bias;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ace:	ee07 3a90 	vmov	s15, r3
}
 8007ad2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <pidSetBias>:

void pidSetBias(PidController *pidController, float bias)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	ed87 0a00 	vstr	s0, [r7]
	pidController->bias = bias;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <pidGetMinSumOfErrors>:

int32_t pidGetMinSumOfErrors(PidController *pidController)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
	return pidController->minSumOfErrors;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
	...

08007b18 <pidSetMinSumOfErrors>:

void pidSetMinSumOfErrors(PidController *pidController, int32_t minSumOfErrors)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
	if (minSumOfErrors < MIN_SUM_OF_ERRORS_ALLOWED)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	4a0a      	ldr	r2, [pc, #40]	; (8007b50 <pidSetMinSumOfErrors+0x38>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	da02      	bge.n	8007b30 <pidSetMinSumOfErrors+0x18>
	{
		minSumOfErrors = MIN_SUM_OF_ERRORS_ALLOWED;
 8007b2a:	4b09      	ldr	r3, [pc, #36]	; (8007b50 <pidSetMinSumOfErrors+0x38>)
 8007b2c:	603b      	str	r3, [r7, #0]
 8007b2e:	e005      	b.n	8007b3c <pidSetMinSumOfErrors+0x24>
	}
	else if (minSumOfErrors > MAX_SUM_OF_ERRORS_ALLOWED)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	4a08      	ldr	r2, [pc, #32]	; (8007b54 <pidSetMinSumOfErrors+0x3c>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	dd01      	ble.n	8007b3c <pidSetMinSumOfErrors+0x24>
	{
		minSumOfErrors = MAX_SUM_OF_ERRORS_ALLOWED;
 8007b38:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <pidSetMinSumOfErrors+0x3c>)
 8007b3a:	603b      	str	r3, [r7, #0]
	}
	pidController->minSumOfErrors = minSumOfErrors;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	c4653600 	.word	0xc4653600
 8007b54:	3b9aca00 	.word	0x3b9aca00

08007b58 <pidGetMaxSumOfErrors>:

int32_t pidGetMaxSumOfErrors(PidController *pidController)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
	return pidController->maxSumOfErrors;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <pidSetMaxSumOfErrors>:

void pidSetMaxSumOfErrors(PidController *pidController, int32_t maxSumOfErrors)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
	if (maxSumOfErrors < MIN_SUM_OF_ERRORS_ALLOWED)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	4a0a      	ldr	r2, [pc, #40]	; (8007ba8 <pidSetMaxSumOfErrors+0x38>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	da02      	bge.n	8007b88 <pidSetMaxSumOfErrors+0x18>
	{
		maxSumOfErrors = MIN_SUM_OF_ERRORS_ALLOWED;
 8007b82:	4b09      	ldr	r3, [pc, #36]	; (8007ba8 <pidSetMaxSumOfErrors+0x38>)
 8007b84:	603b      	str	r3, [r7, #0]
 8007b86:	e005      	b.n	8007b94 <pidSetMaxSumOfErrors+0x24>
	}
	else if (maxSumOfErrors > MAX_SUM_OF_ERRORS_ALLOWED)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	4a08      	ldr	r2, [pc, #32]	; (8007bac <pidSetMaxSumOfErrors+0x3c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	dd01      	ble.n	8007b94 <pidSetMaxSumOfErrors+0x24>
	{
		maxSumOfErrors = MAX_SUM_OF_ERRORS_ALLOWED;
 8007b90:	4b06      	ldr	r3, [pc, #24]	; (8007bac <pidSetMaxSumOfErrors+0x3c>)
 8007b92:	603b      	str	r3, [r7, #0]
	}
	pidController->maxSumOfErrors = maxSumOfErrors;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	c4653600 	.word	0xc4653600
 8007bac:	3b9aca00 	.word	0x3b9aca00

08007bb0 <pidGetMinControlledVariable>:

int32_t pidGetMinControlledVariable(PidController *pidController)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
	return pidController->minControlledVariable;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <pidSetMinControlledVariable>:

void pidSetMinControlledVariable(PidController *pidController, int32_t minControlledVariable)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
	if (minControlledVariable < MIN_CONTROLLED_VARIABLE_ALLOWED)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	da02      	bge.n	8007bde <pidSetMinControlledVariable+0x16>
	{
		minControlledVariable = MIN_CONTROLLED_VARIABLE_ALLOWED;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	e006      	b.n	8007bec <pidSetMinControlledVariable+0x24>
	}
	else if (minControlledVariable > MAX_CONTROLLED_VARIABLE_ALLOWED)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be4:	db02      	blt.n	8007bec <pidSetMinControlledVariable+0x24>
	{
		minControlledVariable = MAX_CONTROLLED_VARIABLE_ALLOWED;
 8007be6:	f640 73ff 	movw	r3, #4095	; 0xfff
 8007bea:	603b      	str	r3, [r7, #0]
	}
	pidController->minControlledVariable = minControlledVariable;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <pidGetMaxControlledVariable>:

int32_t pidGetMaxControlledVariable(PidController *pidController)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
	return pidController->maxControlledVariable;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <pidSetMaxControlledVariable>:

void pidSetMaxControlledVariable(PidController *pidController, int32_t maxControlledVariable)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
	if (maxControlledVariable < MIN_CONTROLLED_VARIABLE_ALLOWED)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	da02      	bge.n	8007c2c <pidSetMaxControlledVariable+0x16>
	{
		maxControlledVariable = MIN_CONTROLLED_VARIABLE_ALLOWED;
 8007c26:	2300      	movs	r3, #0
 8007c28:	603b      	str	r3, [r7, #0]
 8007c2a:	e006      	b.n	8007c3a <pidSetMaxControlledVariable+0x24>
	}
	else if (maxControlledVariable > MAX_CONTROLLED_VARIABLE_ALLOWED)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c32:	db02      	blt.n	8007c3a <pidSetMaxControlledVariable+0x24>
	{
		maxControlledVariable = MAX_CONTROLLED_VARIABLE_ALLOWED;
 8007c34:	f640 73ff 	movw	r3, #4095	; 0xfff
 8007c38:	603b      	str	r3, [r7, #0]
	}
	pidController->maxControlledVariable = maxControlledVariable;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <__libc_init_array>:
 8007c4c:	b570      	push	{r4, r5, r6, lr}
 8007c4e:	4d0d      	ldr	r5, [pc, #52]	; (8007c84 <__libc_init_array+0x38>)
 8007c50:	4c0d      	ldr	r4, [pc, #52]	; (8007c88 <__libc_init_array+0x3c>)
 8007c52:	1b64      	subs	r4, r4, r5
 8007c54:	10a4      	asrs	r4, r4, #2
 8007c56:	2600      	movs	r6, #0
 8007c58:	42a6      	cmp	r6, r4
 8007c5a:	d109      	bne.n	8007c70 <__libc_init_array+0x24>
 8007c5c:	4d0b      	ldr	r5, [pc, #44]	; (8007c8c <__libc_init_array+0x40>)
 8007c5e:	4c0c      	ldr	r4, [pc, #48]	; (8007c90 <__libc_init_array+0x44>)
 8007c60:	f000 f82e 	bl	8007cc0 <_init>
 8007c64:	1b64      	subs	r4, r4, r5
 8007c66:	10a4      	asrs	r4, r4, #2
 8007c68:	2600      	movs	r6, #0
 8007c6a:	42a6      	cmp	r6, r4
 8007c6c:	d105      	bne.n	8007c7a <__libc_init_array+0x2e>
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}
 8007c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c74:	4798      	blx	r3
 8007c76:	3601      	adds	r6, #1
 8007c78:	e7ee      	b.n	8007c58 <__libc_init_array+0xc>
 8007c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c7e:	4798      	blx	r3
 8007c80:	3601      	adds	r6, #1
 8007c82:	e7f2      	b.n	8007c6a <__libc_init_array+0x1e>
 8007c84:	08007fe0 	.word	0x08007fe0
 8007c88:	08007fe0 	.word	0x08007fe0
 8007c8c:	08007fe0 	.word	0x08007fe0
 8007c90:	08007fe4 	.word	0x08007fe4

08007c94 <memcpy>:
 8007c94:	440a      	add	r2, r1
 8007c96:	4291      	cmp	r1, r2
 8007c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c9c:	d100      	bne.n	8007ca0 <memcpy+0xc>
 8007c9e:	4770      	bx	lr
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007caa:	4291      	cmp	r1, r2
 8007cac:	d1f9      	bne.n	8007ca2 <memcpy+0xe>
 8007cae:	bd10      	pop	{r4, pc}

08007cb0 <memset>:
 8007cb0:	4402      	add	r2, r0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d100      	bne.n	8007cba <memset+0xa>
 8007cb8:	4770      	bx	lr
 8007cba:	f803 1b01 	strb.w	r1, [r3], #1
 8007cbe:	e7f9      	b.n	8007cb4 <memset+0x4>

08007cc0 <_init>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	bf00      	nop
 8007cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	469e      	mov	lr, r3
 8007cca:	4770      	bx	lr

08007ccc <_fini>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr
