
CurrentController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080071c0  080071c0  000171c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d8  080072d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080072d8  080072d8  000172d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072e0  080072e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072e0  080072e0  000172e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072e4  080072e4  000172e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080072e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  2000000c  080072f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  080072f4  00020840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160b7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ff8  00000000  00000000  000360f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  000390f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0003a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002475a  00000000  00000000  0003b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166b3  00000000  00000000  0005fe42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df6e0  00000000  00000000  000764f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155bd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005484  00000000  00000000  00155c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080071a8 	.word	0x080071a8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080071a8 	.word	0x080071a8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b974 	b.w	8000d44 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468e      	mov	lr, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14d      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	d969      	bls.n	8000b5c <__udivmoddi4+0xe8>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b152      	cbz	r2, 8000aa4 <__udivmoddi4+0x30>
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	f1c2 0120 	rsb	r1, r2, #32
 8000a96:	fa20 f101 	lsr.w	r1, r0, r1
 8000a9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa8:	0c21      	lsrs	r1, r4, #16
 8000aaa:	fbbe f6f8 	udiv	r6, lr, r8
 8000aae:	fa1f f78c 	uxth.w	r7, ip
 8000ab2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ab6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aba:	fb06 f107 	mul.w	r1, r6, r7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aca:	f080 811f 	bcs.w	8000d0c <__udivmoddi4+0x298>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 811c 	bls.w	8000d0c <__udivmoddi4+0x298>
 8000ad4:	3e02      	subs	r6, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae8:	fb00 f707 	mul.w	r7, r0, r7
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	d90a      	bls.n	8000b06 <__udivmoddi4+0x92>
 8000af0:	eb1c 0404 	adds.w	r4, ip, r4
 8000af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af8:	f080 810a 	bcs.w	8000d10 <__udivmoddi4+0x29c>
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	f240 8107 	bls.w	8000d10 <__udivmoddi4+0x29c>
 8000b02:	4464      	add	r4, ip
 8000b04:	3802      	subs	r0, #2
 8000b06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0a:	1be4      	subs	r4, r4, r7
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	b11d      	cbz	r5, 8000b18 <__udivmoddi4+0xa4>
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	2300      	movs	r3, #0
 8000b14:	e9c5 4300 	strd	r4, r3, [r5]
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d909      	bls.n	8000b36 <__udivmoddi4+0xc2>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	f000 80ef 	beq.w	8000d06 <__udivmoddi4+0x292>
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2e:	4630      	mov	r0, r6
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	fab3 f683 	clz	r6, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d14a      	bne.n	8000bd4 <__udivmoddi4+0x160>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xd4>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80f9 	bhi.w	8000d3a <__udivmoddi4+0x2c6>
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	469e      	mov	lr, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d0e0      	beq.n	8000b18 <__udivmoddi4+0xa4>
 8000b56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b5a:	e7dd      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000b5c:	b902      	cbnz	r2, 8000b60 <__udivmoddi4+0xec>
 8000b5e:	deff      	udf	#255	; 0xff
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	f040 8092 	bne.w	8000c8e <__udivmoddi4+0x21a>
 8000b6a:	eba1 010c 	sub.w	r1, r1, ip
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2601      	movs	r6, #1
 8000b78:	0c20      	lsrs	r0, r4, #16
 8000b7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b86:	fb0e f003 	mul.w	r0, lr, r3
 8000b8a:	4288      	cmp	r0, r1
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x12c>
 8000b8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x12a>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2c0>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x156>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x154>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bd2:	e79c      	b.n	8000b0e <__udivmoddi4+0x9a>
 8000bd4:	f1c6 0720 	rsb	r7, r6, #32
 8000bd8:	40b3      	lsls	r3, r6
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa20 f407 	lsr.w	r4, r0, r7
 8000be6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bea:	431c      	orrs	r4, r3
 8000bec:	40f9      	lsrs	r1, r7
 8000bee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bfa:	0c20      	lsrs	r0, r4, #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fb09 1118 	mls	r1, r9, r8, r1
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	fb08 f00e 	mul.w	r0, r8, lr
 8000c0c:	4288      	cmp	r0, r1
 8000c0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b8>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2bc>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2bc>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1a09      	subs	r1, r1, r0
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c34:	fb09 1110 	mls	r1, r9, r0, r1
 8000c38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	458e      	cmp	lr, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1e2>
 8000c44:	eb1c 0101 	adds.w	r1, ip, r1
 8000c48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2b4>
 8000c4e:	458e      	cmp	lr, r1
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2b4>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4461      	add	r1, ip
 8000c56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c5e:	eba1 010e 	sub.w	r1, r1, lr
 8000c62:	42a1      	cmp	r1, r4
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46a6      	mov	lr, r4
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x2a4>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x2a0>
 8000c6c:	b15d      	cbz	r5, 8000c86 <__udivmoddi4+0x212>
 8000c6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c72:	eb61 010e 	sbc.w	r1, r1, lr
 8000c76:	fa01 f707 	lsl.w	r7, r1, r7
 8000c7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c7e:	40f1      	lsrs	r1, r6
 8000c80:	431f      	orrs	r7, r3
 8000c82:	e9c5 7100 	strd	r7, r1, [r5]
 8000c86:	2600      	movs	r6, #0
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	f1c2 0320 	rsb	r3, r2, #32
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c98:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4301      	orrs	r1, r0
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cac:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb0:	0c0b      	lsrs	r3, r1, #16
 8000cb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x260>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b8>
 8000ccc:	429e      	cmp	r6, r3
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b8>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	b289      	uxth	r1, r1
 8000cd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x28a>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cfa:	3e02      	subs	r6, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0x104>
 8000d06:	462e      	mov	r6, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e705      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	e6e3      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000d10:	4618      	mov	r0, r3
 8000d12:	e6f8      	b.n	8000b06 <__udivmoddi4+0x92>
 8000d14:	454b      	cmp	r3, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f8>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d20:	3801      	subs	r0, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f8>
 8000d24:	4646      	mov	r6, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x28a>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1e2>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b8>
 8000d34:	3b02      	subs	r3, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x12c>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e709      	b.n	8000b52 <__udivmoddi4+0xde>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x156>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <appInit>:

#include "app.h"

// ======== Init =========== //
void appInit(App *app, GPIO_TypeDef* ledPort, uint16_t ledPin, UART_HandleTypeDef huart, DAC_HandleTypeDef hdac, UART_HandleTypeDef huartDebug)
{
 8000d48:	b082      	sub	sp, #8
 8000d4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4c:	b0a5      	sub	sp, #148	; 0x94
 8000d4e:	af20      	add	r7, sp, #128	; 0x80
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d56:	4613      	mov	r3, r2
 8000d58:	80fb      	strh	r3, [r7, #6]
	// ======== LED =========== //
	app->blinkDelay = DELAY_100_MILISECONDS;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d60:	601a      	str	r2, [r3, #0]
	app->ledPort = ledPort;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	605a      	str	r2, [r3, #4]
	app->ledPin = ledPin;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	88fa      	ldrh	r2, [r7, #6]
 8000d6c:	811a      	strh	r2, [r3, #8]

	// ======== DAC ============ //
	app->hdac = hdac;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f103 040c 	add.w	r4, r3, #12
 8000d74:	f107 0570 	add.w	r5, r7, #112	; 0x70
 8000d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7c:	682b      	ldr	r3, [r5, #0]
 8000d7e:	6023      	str	r3, [r4, #0]

	// ======== Comm ======== //
	commInit(&app->comm, huart, huartDebug);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f503 66a5 	add.w	r6, r3, #1320	; 0x528
 8000d86:	a80e      	add	r0, sp, #56	; 0x38
 8000d88:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d8c:	2244      	movs	r2, #68	; 0x44
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f006 f9f4 	bl	800717c <memcpy>
 8000d94:	466d      	mov	r5, sp
 8000d96:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000daa:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000db4:	4630      	mov	r0, r6
 8000db6:	f000 fb88 	bl	80014ca <commInit>

	// ======== Controller =========== //
	pidInit(&app->pid, 50, 2, 100, 2, 0, PID_CONTROLLER);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3320      	adds	r3, #32
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8000e24 <appInit+0xdc>
 8000dc4:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8000dc8:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8000e28 <appInit+0xe0>
 8000dcc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000dd0:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000e2c <appInit+0xe4>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f005 fe7b 	bl	8006ad0 <pidInit>
	pidSetSetpoint(&app->pid, 0);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3320      	adds	r3, #32
 8000dde:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000e24 <appInit+0xdc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	f006 f880 	bl	8006ee8 <pidSetSetpoint>
	appSetSamplingInterval(app, DELAY_5_MILISECONDS);
 8000de8:	2132      	movs	r1, #50	; 0x32
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f000 fa17 	bl	800121e <appSetSamplingInterval>
	appSetRunPidControllerStatus(app, FALSE);
 8000df0:	2100      	movs	r1, #0
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f000 fb47 	bl	8001486 <appSetRunPidControllerStatus>
	HAL_DAC_SetValue(&app->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f103 000c 	add.w	r0, r3, #12
 8000dfe:	2300      	movs	r3, #0
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	f003 f8db 	bl	8003fbe <HAL_DAC_SetValue>

	// ======== Filter =========== //
	movingAverageInit(&app->movingAverageFilter, 128);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	336c      	adds	r3, #108	; 0x6c
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f005 fdd4 	bl	80069bc <movingAverageInit>
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000e1e:	b002      	add	sp, #8
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	00000000 	.word	0x00000000
 8000e28:	42c80000 	.word	0x42c80000
 8000e2c:	42480000 	.word	0x42480000

08000e30 <appExecuteBlinkLed>:

// ======== LED =========== //
void appExecuteBlinkLed(App *app)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(app->ledPort, app->ledPin);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	891b      	ldrh	r3, [r3, #8]
 8000e40:	4619      	mov	r1, r3
 8000e42:	4610      	mov	r0, r2
 8000e44:	f003 fb6f 	bl	8004526 <HAL_GPIO_TogglePin>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <appGetBlinkDelay>:

uint32_t appGetBlinkDelay(App *app)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	return app->blinkDelay;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <appRunController>:

// ======== Controller =========== //
void appRunController(App *app)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	pidCompute(&app->pid);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3320      	adds	r3, #32
 8000e74:	4618      	mov	r0, r3
 8000e76:	f005 fe85 	bl	8006b84 <pidCompute>
	uint32_t controlledVariable = (uint32_t) pidGetControlledVariable(&app->pid);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3320      	adds	r3, #32
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f006 f866 	bl	8006f50 <pidGetControlledVariable>
 8000e84:	eef0 7a40 	vmov.f32	s15, s0
 8000e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e8c:	ee17 3a90 	vmov	r3, s15
 8000e90:	60fb      	str	r3, [r7, #12]
	HAL_DAC_SetValue(&app->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, controlledVariable);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f103 000c 	add.w	r0, r3, #12
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	f003 f88e 	bl	8003fbe <HAL_DAC_SetValue>
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <appSetProcessVariable>:

void appSetProcessVariable(App *app, uint32_t value)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
	pidSetProcessVariable(&app->pid, (float) value);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3320      	adds	r3, #32
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	ee07 2a90 	vmov	s15, r2
 8000ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f006 f82c 	bl	8006f24 <pidSetProcessVariable>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <appGetProcessVariable>:

float appGetProcessVariable(App *app)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	return pidGetProcessVariable(&app->pid);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3320      	adds	r3, #32
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f006 f810 	bl	8006f06 <pidGetProcessVariable>
 8000ee6:	eef0 7a40 	vmov.f32	s15, s0
}
 8000eea:	eeb0 0a67 	vmov.f32	s0, s15
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	0000      	movs	r0, r0
	...

08000ef8 <appGetCurrentInMiliAmps>:

uint32_t appGetCurrentInMiliAmps(uint16_t adcValue)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	80fb      	strh	r3, [r7, #6]
	uint32_t electronicCircuitGain = 10;
 8000f02:	230a      	movs	r3, #10
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t shuntResistorInOhms = 1;
 8000f06:	2301      	movs	r3, #1
 8000f08:	623b      	str	r3, [r7, #32]
  	float measuredSignalInVolts = ((3.3 * adcValue) / 4095);
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff facd 	bl	80004ac <__aeabi_i2d>
 8000f12:	a322      	add	r3, pc, #136	; (adr r3, 8000f9c <appGetCurrentInMiliAmps+0xa4>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fb32 	bl	8000580 <__aeabi_dmul>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	a31f      	add	r3, pc, #124	; (adr r3, 8000fa4 <appGetCurrentInMiliAmps+0xac>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	f7ff fc53 	bl	80007d4 <__aeabi_ddiv>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	f7ff fd35 	bl	80009a4 <__aeabi_d2f>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	61fb      	str	r3, [r7, #28]
  	float conditionedSignalInVolts = measuredSignalInVolts / electronicCircuitGain;
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f48:	edd7 6a07 	vldr	s13, [r7, #28]
 8000f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f50:	edc7 7a06 	vstr	s15, [r7, #24]
  	float calculatedCurrentInAmps = conditionedSignalInVolts / shuntResistorInOhms;
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f5e:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f66:	edc7 7a05 	vstr	s15, [r7, #20]
  	float calculatedCurrentInMiliAmpsAux = 1000 * calculatedCurrentInAmps;
 8000f6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f6e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000f98 <appGetCurrentInMiliAmps+0xa0>
 8000f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f76:	edc7 7a04 	vstr	s15, [r7, #16]
  	uint32_t calculatedCurrentInMiliAmps = (uint32_t) calculatedCurrentInMiliAmpsAux;
 8000f7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f82:	ee17 3a90 	vmov	r3, s15
 8000f86:	60fb      	str	r3, [r7, #12]
  	return calculatedCurrentInMiliAmps;
 8000f88:	68fb      	ldr	r3, [r7, #12]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3728      	adds	r7, #40	; 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	f3af 8000 	nop.w
 8000f98:	447a0000 	.word	0x447a0000
 8000f9c:	66666666 	.word	0x66666666
 8000fa0:	400a6666 	.word	0x400a6666
 8000fa4:	00000000 	.word	0x00000000
 8000fa8:	40affe00 	.word	0x40affe00

08000fac <appSetRunControllerStatus>:

void appSetRunControllerStatus(App *app, Bool status)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
	if (status == FALSE)
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d111      	bne.n	8000fe2 <appSetRunControllerStatus+0x36>
	{
		appSetRunPidControllerStatus(app, FALSE);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 fa60 	bl	8001486 <appSetRunPidControllerStatus>
		pidClearParameters(&app->pid);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3320      	adds	r3, #32
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f005 fee3 	bl	8006d96 <pidClearParameters>
		HAL_DAC_SetValue(&app->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f103 000c 	add.w	r0, r3, #12
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	f002 ffef 	bl	8003fbe <HAL_DAC_SetValue>
	}
	else
	{
		appSetRunPidControllerStatus(app, TRUE);
	}
}
 8000fe0:	e003      	b.n	8000fea <appSetRunControllerStatus+0x3e>
		appSetRunPidControllerStatus(app, TRUE);
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 fa4e 	bl	8001486 <appSetRunPidControllerStatus>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <appAddNewValueToFilter>:

// ======== Filter =========== //
void appAddNewValueToFilter(App *app, uint32_t newValue)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
	movingAverageAddValue(&app->movingAverageFilter, newValue);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	336c      	adds	r3, #108	; 0x6c
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f005 fcf9 	bl	80069fc <movingAverageAddValue>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <appGetFilterResult>:

uint32_t appGetFilterResult(App *app)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	return movingAverageGetMean(&app->movingAverageFilter);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	336c      	adds	r3, #108	; 0x6c
 800101e:	4618      	mov	r0, r3
 8001020:	f005 fd27 	bl	8006a72 <movingAverageGetMean>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <appAppendReceivedByte>:

// ======== Data Packet Rx =========== //
void appAppendReceivedByte(App *app, uint8_t receivedByte)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	70fb      	strb	r3, [r7, #3]
	commAppendReceivedByte(&app->comm, receivedByte);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8001040:	78fa      	ldrb	r2, [r7, #3]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fe3f 	bl	8001cc8 <commAppendReceivedByte>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <appDecodeReceivedData>:

void appDecodeReceivedData(App *app)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
	commTryDecodeReceivedDataPacket(&app->comm);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fe42 	bl	8001cea <commTryDecodeReceivedDataPacket>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <appExtractCommandAndPayloadFromDecodedData>:

void appExtractCommandAndPayloadFromDecodedData(App *app)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
	commTryExtractCommandAndPayloadFromDecodedDataPacket(&app->comm);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fe41 	bl	8001d04 <commTryExtractCommandAndPayloadFromDecodedDataPacket>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <appDecodeExtractedCommand>:

void appDecodeExtractedCommand(App *app)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	commTryDecodeExtractedCommand(&app->comm, app);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fe6d 	bl	8001d7a <commTryDecodeExtractedCommand>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <appSendData>:

// ======== Data Packet Tx =========== //
void appSendData(App *app)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	commTrySendData(&app->comm, app);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fa53 	bl	8001564 <commTrySendData>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <appGetPidKp>:

// ======= Getters and Setters ======== //
float appGetPidKp(App *app)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
	return pidGetKp(&app->pid);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3320      	adds	r3, #32
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 fe81 	bl	8006dda <pidGetKp>
 80010d8:	eef0 7a40 	vmov.f32	s15, s0
}
 80010dc:	eeb0 0a67 	vmov.f32	s0, s15
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <appSetPidKp>:

void appSetPidKp(App *app, float kp)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	ed87 0a00 	vstr	s0, [r7]
	pidSetKp(&app->pid, kp);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3320      	adds	r3, #32
 80010f6:	ed97 0a00 	vldr	s0, [r7]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 fe7c 	bl	8006df8 <pidSetKp>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <appGetPidKi>:

float appGetPidKi(App *app)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	return pidGetKi(&app->pid);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3320      	adds	r3, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f005 fe7e 	bl	8006e16 <pidGetKi>
 800111a:	eef0 7a40 	vmov.f32	s15, s0
}
 800111e:	eeb0 0a67 	vmov.f32	s0, s15
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <appSetPidKi>:

void appSetPidKi(App *app, float ki)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	ed87 0a00 	vstr	s0, [r7]
	pidSetKi(&app->pid, ki);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3320      	adds	r3, #32
 8001138:	ed97 0a00 	vldr	s0, [r7]
 800113c:	4618      	mov	r0, r3
 800113e:	f005 fe79 	bl	8006e34 <pidSetKi>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <appGetPidKd>:

float appGetPidKd(App *app)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	return pidGetKd(&app->pid);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3320      	adds	r3, #32
 8001156:	4618      	mov	r0, r3
 8001158:	f005 fe7b 	bl	8006e52 <pidGetKd>
 800115c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001160:	eeb0 0a67 	vmov.f32	s0, s15
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <appSetPidKd>:

void appSetPidKd(App *app, float kd)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	ed87 0a00 	vstr	s0, [r7]
	pidSetKd(&app->pid, kd);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3320      	adds	r3, #32
 800117a:	ed97 0a00 	vldr	s0, [r7]
 800117e:	4618      	mov	r0, r3
 8001180:	f005 fe76 	bl	8006e70 <pidSetKd>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <appGetPidInterval>:

uint16_t appGetPidInterval(App *app)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	return (uint16_t) (10000 * pidGetInterval(&app->pid));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3320      	adds	r3, #32
 8001198:	4618      	mov	r0, r3
 800119a:	f005 fe78 	bl	8006e8e <pidGetInterval>
 800119e:	eef0 7a40 	vmov.f32	s15, s0
 80011a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80011bc <appGetPidInterval+0x30>
 80011a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ae:	ee17 3a90 	vmov	r3, s15
 80011b2:	b29b      	uxth	r3, r3
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	461c4000 	.word	0x461c4000

080011c0 <appSetPidInterval>:

void appSetPidInterval(App *app, uint16_t pidInterval)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
	if ((pidInterval >= 0) && (pidInterval <= 50000))
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	f24c 3250 	movw	r2, #50000	; 0xc350
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d80f      	bhi.n	80011f6 <appSetPidInterval+0x36>
	{
		pidSetInterval(&app->pid, ((float) pidInterval) / 10000);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3320      	adds	r3, #32
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	ee07 2a90 	vmov	s15, r2
 80011e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e4:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001200 <appSetPidInterval+0x40>
 80011e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011ec:	eeb0 0a47 	vmov.f32	s0, s14
 80011f0:	4618      	mov	r0, r3
 80011f2:	f005 fe5b 	bl	8006eac <pidSetInterval>
	}
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	461c4000 	.word	0x461c4000

08001204 <appGetSamplingInterval>:

uint16_t appGetSamplingInterval(App *app)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	return app->samplingInterval;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <appSetSamplingInterval>:

void appSetSamplingInterval(App *app, uint16_t samplingInterval)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	807b      	strh	r3, [r7, #2]
	if ((samplingInterval >= 0) && (samplingInterval <= 50000))
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001230:	4293      	cmp	r3, r2
 8001232:	d803      	bhi.n	800123c <appSetSamplingInterval+0x1e>
	{
		app->samplingInterval = samplingInterval;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	}
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <appGetMovingAverageFilterWindow>:

uint16_t appGetMovingAverageFilterWindow(App *app)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	return movingAverageGetWindow(&app->movingAverageFilter);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	336c      	adds	r3, #108	; 0x6c
 8001254:	4618      	mov	r0, r3
 8001256:	f005 fc19 	bl	8006a8c <movingAverageGetWindow>
 800125a:	4603      	mov	r3, r0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <appSetMovingAverageFilterWindow>:

void appSetMovingAverageFilterWindow(App *app, uint16_t movingAverageFilterWindow)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
	movingAverageSetWindow(&app->movingAverageFilter, movingAverageFilterWindow);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	336c      	adds	r3, #108	; 0x6c
 8001274:	887a      	ldrh	r2, [r7, #2]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f005 fc13 	bl	8006aa4 <movingAverageSetWindow>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <appGetPidMinSumOfErrors>:

int32_t appGetPidMinSumOfErrors(App *app)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	return pidGetMinSumOfErrors(&app->pid);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3320      	adds	r3, #32
 8001292:	4618      	mov	r0, r3
 8001294:	f005 fea7 	bl	8006fe6 <pidGetMinSumOfErrors>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <appSetPidMinSumOfErrors>:

void appSetPidMinSumOfErrors(App *app, int32_t minSumOfErrors)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
	pidSetMinSumOfErrors(&app->pid, minSumOfErrors);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3320      	adds	r3, #32
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 fea4 	bl	8007000 <pidSetMinSumOfErrors>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <appGetPidMaxSumOfErrors>:

int32_t appGetPidMaxSumOfErrors(App *app)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	return pidGetMaxSumOfErrors(&app->pid);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3320      	adds	r3, #32
 80012cc:	4618      	mov	r0, r3
 80012ce:	f005 feb7 	bl	8007040 <pidGetMaxSumOfErrors>
 80012d2:	4603      	mov	r3, r0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <appSetPidMaxSumOfErrors>:

void appSetPidMaxSumOfErrors(App *app, int32_t maxSumOfErrors)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	pidSetMaxSumOfErrors(&app->pid, maxSumOfErrors);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3320      	adds	r3, #32
 80012ea:	6839      	ldr	r1, [r7, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f005 feb3 	bl	8007058 <pidSetMaxSumOfErrors>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <appGetPidMinControlledVariable>:

int32_t appGetPidMinControlledVariable(App *app)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	return pidGetMinControlledVariable(&app->pid);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3320      	adds	r3, #32
 8001306:	4618      	mov	r0, r3
 8001308:	f005 fec6 	bl	8007098 <pidGetMinControlledVariable>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <appSetPidMinControlledVariable>:

void appSetPidMinControlledVariable(App *app, int32_t minControlledVariable)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	6039      	str	r1, [r7, #0]
	pidSetMinControlledVariable(&app->pid, minControlledVariable);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3320      	adds	r3, #32
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f005 fec2 	bl	80070b0 <pidSetMinControlledVariable>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <appGetPidMaxControlledVariable>:

int32_t appGetPidMaxControlledVariable(App *app)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	return pidGetMaxControlledVariable(&app->pid);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3320      	adds	r3, #32
 8001340:	4618      	mov	r0, r3
 8001342:	f005 fed0 	bl	80070e6 <pidGetMaxControlledVariable>
 8001346:	4603      	mov	r3, r0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <appSetPidMaxControlledVariable>:

void appSetPidMaxControlledVariable(App *app, int32_t maxControlledVariable)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	pidSetMaxControlledVariable(&app->pid, maxControlledVariable);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3320      	adds	r3, #32
 800135e:	6839      	ldr	r1, [r7, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f005 fecc 	bl	80070fe <pidSetMaxControlledVariable>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <appGetPidOffset>:

float appGetPidOffset(App *app)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
	return pidGetOffset(&app->pid);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3320      	adds	r3, #32
 800137a:	4618      	mov	r0, r3
 800137c:	f005 fdf7 	bl	8006f6e <pidGetOffset>
 8001380:	eef0 7a40 	vmov.f32	s15, s0
}
 8001384:	eeb0 0a67 	vmov.f32	s0, s15
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <appSetPidOffset>:

void appSetPidOffset(App *app, float offset)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	ed87 0a00 	vstr	s0, [r7]
	pidSetOffset(&app->pid, offset);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3320      	adds	r3, #32
 800139e:	ed97 0a00 	vldr	s0, [r7]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 fdf2 	bl	8006f8c <pidSetOffset>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <appGetPidBias>:

float appGetPidBias(App *app)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	return pidGetBias(&app->pid);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3320      	adds	r3, #32
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 fdf4 	bl	8006faa <pidGetBias>
 80013c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80013c6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <appSetPidBias>:

void appSetPidBias(App *app, float bias)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	ed87 0a00 	vstr	s0, [r7]
	pidSetBias(&app->pid, bias);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3320      	adds	r3, #32
 80013e0:	ed97 0a00 	vldr	s0, [r7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f005 fdef 	bl	8006fc8 <pidSetBias>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <appGetPidSetpoint>:

float appGetPidSetpoint(App *app)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	return pidGetSetpoint(&app->pid);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3320      	adds	r3, #32
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 fd63 	bl	8006eca <pidGetSetpoint>
 8001404:	eef0 7a40 	vmov.f32	s15, s0
}
 8001408:	eeb0 0a67 	vmov.f32	s0, s15
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <appSetPidSetpoint>:

void appSetPidSetpoint(App *app, float setpoint)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	ed87 0a00 	vstr	s0, [r7]
	if ((setpoint >= 0) && (setpoint <= 300000))
 8001420:	edd7 7a00 	vldr	s15, [r7]
 8001424:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	da00      	bge.n	8001430 <appSetPidSetpoint+0x1c>
	{
		pidSetSetpoint(&app->pid, setpoint);
		commSetEnableSendCurrentPidSetpointValue(&app->comm, TRUE);
	}
}
 800142e:	e017      	b.n	8001460 <appSetPidSetpoint+0x4c>
	if ((setpoint >= 0) && (setpoint <= 300000))
 8001430:	edd7 7a00 	vldr	s15, [r7]
 8001434:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001468 <appSetPidSetpoint+0x54>
 8001438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	d900      	bls.n	8001444 <appSetPidSetpoint+0x30>
}
 8001442:	e00d      	b.n	8001460 <appSetPidSetpoint+0x4c>
		pidSetSetpoint(&app->pid, setpoint);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3320      	adds	r3, #32
 8001448:	ed97 0a00 	vldr	s0, [r7]
 800144c:	4618      	mov	r0, r3
 800144e:	f005 fd4b 	bl	8006ee8 <pidSetSetpoint>
		commSetEnableSendCurrentPidSetpointValue(&app->comm, TRUE);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 8001458:	2101      	movs	r1, #1
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fefd 	bl	800225a <commSetEnableSendCurrentPidSetpointValue>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	48927c00 	.word	0x48927c00

0800146c <appGetRunPidControllerStatus>:

Bool appGetRunPidControllerStatus(App *app)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return app->runPidController;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <appSetRunPidControllerStatus>:

void appSetRunPidControllerStatus(App *app, Bool status)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	70fb      	strb	r3, [r7, #3]
	app->runPidController = status;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	78fa      	ldrb	r2, [r7, #3]
 8001496:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <appSetEnableSendKeepAliveMessage>:
{
	return commGetEnableSendKeepAliveMessage(&app->comm);
}

void appSetEnableSendKeepAliveMessage(App *app, Bool status)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	70fb      	strb	r3, [r7, #3]
	commSetEnableSendKeepAliveMessage(&app->comm, status);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
 80014b8:	78fa      	ldrb	r2, [r7, #3]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 fee9 	bl	8002294 <commSetEnableSendKeepAliveMessage>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <commInit>:

#include "comm.h"

// ======== Init ======== //
void commInit(Comm *comm, UART_HandleTypeDef huart, UART_HandleTypeDef huartDebug)
{
 80014ca:	b084      	sub	sp, #16
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	f107 0014 	add.w	r0, r7, #20
 80014d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// ======== UART =========== //
	comm->huart = huart;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2244      	movs	r2, #68	; 0x44
 80014e6:	4619      	mov	r1, r3
 80014e8:	f005 fe48 	bl	800717c <memcpy>
	comm->huartDebug = huartDebug;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3344      	adds	r3, #68	; 0x44
 80014f0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80014f4:	2244      	movs	r2, #68	; 0x44
 80014f6:	4618      	mov	r0, r3
 80014f8:	f005 fe40 	bl	800717c <memcpy>

	// ======== Data Packet Tx =========== //
	dataPacketTxInit(&comm->dataPacketTx, 0xAA, 0x55);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3388      	adds	r3, #136	; 0x88
 8001500:	2255      	movs	r2, #85	; 0x55
 8001502:	21aa      	movs	r1, #170	; 0xaa
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fe43 	bl	8003190 <dataPacketTxInit>
	commSetEnableSendProcessVariable(comm, FALSE);
 800150a:	2100      	movs	r1, #0
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 fe6a 	bl	80021e6 <commSetEnableSendProcessVariable>
	commSetEnableSendCurrentConfigDataValues(comm, FALSE);
 8001512:	2100      	movs	r1, #0
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fe83 	bl	8002220 <commSetEnableSendCurrentConfigDataValues>
	commSetEnableSendCurrentPidSetpointValue(comm, FALSE);
 800151a:	2100      	movs	r1, #0
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 fe9c 	bl	800225a <commSetEnableSendCurrentPidSetpointValue>
	commSetEnableSendKeepAliveMessage(comm,  FALSE);
 8001522:	2100      	movs	r1, #0
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 feb5 	bl	8002294 <commSetEnableSendKeepAliveMessage>

	// ======== Data Packet Rx =========== //
	dataPacketRxInit(&comm->dataPacketRx, 0xAA, 0x55);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	33fe      	adds	r3, #254	; 0xfe
 800152e:	2255      	movs	r2, #85	; 0x55
 8001530:	21aa      	movs	r1, #170	; 0xaa
 8001532:	4618      	mov	r0, r3
 8001534:	f001 fc60 	bl	8002df8 <dataPacketRxInit>
	commSetDecodeCommandStatus(comm, FALSE);
 8001538:	2100      	movs	r1, #0
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fec7 	bl	80022ce <commSetDecodeCommandStatus>
	commSetCommand(comm, 0x00);
 8001540:	2100      	movs	r1, #0
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fee0 	bl	8002308 <commSetCommand>
	commClearData(comm);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fbad 	bl	8001ca8 <commClearData>
	commSetDataLenght(comm, 0);
 800154e:	2100      	movs	r1, #0
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 fee9 	bl	8002328 <commSetDataLenght>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001560:	b004      	add	sp, #16
 8001562:	4770      	bx	lr

08001564 <commTrySendData>:

// ======== TX - Data Packet =========== //
void commTrySendData(Comm *comm, App *app)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
	if (commGetEnableSendCurrentConfigDataValues(comm) == TRUE)
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 fe49 	bl	8002206 <commGetEnableSendCurrentConfigDataValues>
 8001574:	4603      	mov	r3, r0
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <commTrySendData+0x28>
	{
		commSendCurrentConfigDataValues(comm, app);
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f831 	bl	80015e4 <commSendCurrentConfigDataValues>
		commSetEnableSendCurrentConfigDataValues(comm, FALSE);
 8001582:	2100      	movs	r1, #0
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fe4b 	bl	8002220 <commSetEnableSendCurrentConfigDataValues>
	}
	else if (commGetEnableSendProcessVariable(comm) == TRUE)
	{
		commSendProcessVariable(comm, app);
	}
}
 800158a:	e027      	b.n	80015dc <commTrySendData+0x78>
	else if (commGetEnableSendCurrentPidSetpointValue(comm) == TRUE)
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fe57 	bl	8002240 <commGetEnableSendCurrentPidSetpointValue>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d108      	bne.n	80015aa <commTrySendData+0x46>
		commSendCurrentPidSetpointValue(comm, app);
 8001598:	6839      	ldr	r1, [r7, #0]
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f9e2 	bl	8001964 <commSendCurrentPidSetpointValue>
		commSetEnableSendCurrentPidSetpointValue(comm, FALSE);
 80015a0:	2100      	movs	r1, #0
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 fe59 	bl	800225a <commSetEnableSendCurrentPidSetpointValue>
}
 80015a8:	e018      	b.n	80015dc <commTrySendData+0x78>
	else if (commGetEnableSendKeepAliveMessage(comm) == TRUE)
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fe65 	bl	800227a <commGetEnableSendKeepAliveMessage>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d108      	bne.n	80015c8 <commTrySendData+0x64>
		commSendKeepAliveMessage(comm, app);
 80015b6:	6839      	ldr	r1, [r7, #0]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 fa5f 	bl	8001a7c <commSendKeepAliveMessage>
		commSetEnableSendKeepAliveMessage(comm, FALSE);
 80015be:	2100      	movs	r1, #0
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fe67 	bl	8002294 <commSetEnableSendKeepAliveMessage>
}
 80015c6:	e009      	b.n	80015dc <commTrySendData+0x78>
	else if (commGetEnableSendProcessVariable(comm) == TRUE)
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fdff 	bl	80021cc <commGetEnableSendProcessVariable>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d103      	bne.n	80015dc <commTrySendData+0x78>
		commSendProcessVariable(comm, app);
 80015d4:	6839      	ldr	r1, [r7, #0]
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fac6 	bl	8001b68 <commSendProcessVariable>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <commSendCurrentConfigDataValues>:

void commSendCurrentConfigDataValues(Comm *comm, App *app)
{
 80015e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015e8:	b09e      	sub	sp, #120	; 0x78
 80015ea:	af0e      	add	r7, sp, #56	; 0x38
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
 80015f0:	466b      	mov	r3, sp
 80015f2:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 42;
 80015f4:	232a      	movs	r3, #42	; 0x2a
 80015f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t bytes[qtyOfBytes];
 80015fa:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80015fe:	460b      	mov	r3, r1
 8001600:	3b01      	subs	r3, #1
 8001602:	63bb      	str	r3, [r7, #56]	; 0x38
 8001604:	b2cb      	uxtb	r3, r1
 8001606:	2200      	movs	r2, #0
 8001608:	4698      	mov	r8, r3
 800160a:	4691      	mov	r9, r2
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001618:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800161c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001620:	b2cb      	uxtb	r3, r1
 8001622:	2200      	movs	r2, #0
 8001624:	461c      	mov	r4, r3
 8001626:	4615      	mov	r5, r2
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	00eb      	lsls	r3, r5, #3
 8001632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001636:	00e2      	lsls	r2, r4, #3
 8001638:	460b      	mov	r3, r1
 800163a:	3307      	adds	r3, #7
 800163c:	08db      	lsrs	r3, r3, #3
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	ebad 0d03 	sub.w	sp, sp, r3
 8001644:	ab0e      	add	r3, sp, #56	; 0x38
 8001646:	3300      	adds	r3, #0
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t kpTimes1000 = (uint32_t)(1000 * appGetPidKp(app));
 800164a:	6838      	ldr	r0, [r7, #0]
 800164c:	f7ff fd3b 	bl	80010c6 <appGetPidKp>
 8001650:	eef0 7a40 	vmov.f32	s15, s0
 8001654:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800190c <commSendCurrentConfigDataValues+0x328>
 8001658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001660:	ee17 3a90 	vmov	r3, s15
 8001664:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t kiTimes1000 = (uint32_t)(1000 * appGetPidKi(app));
 8001666:	6838      	ldr	r0, [r7, #0]
 8001668:	f7ff fd4e 	bl	8001108 <appGetPidKi>
 800166c:	eef0 7a40 	vmov.f32	s15, s0
 8001670:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800190c <commSendCurrentConfigDataValues+0x328>
 8001674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167c:	ee17 3a90 	vmov	r3, s15
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t kdTimes1000 = (uint32_t)(1000 * appGetPidKd(app));
 8001682:	6838      	ldr	r0, [r7, #0]
 8001684:	f7ff fd61 	bl	800114a <appGetPidKd>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
 800168c:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 800190c <commSendCurrentConfigDataValues+0x328>
 8001690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001698:	ee17 3a90 	vmov	r3, s15
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t pidInterval = (uint16_t) appGetPidInterval(app);
 800169e:	6838      	ldr	r0, [r7, #0]
 80016a0:	f7ff fd74 	bl	800118c <appGetPidInterval>
 80016a4:	4603      	mov	r3, r0
 80016a6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t samplingInterval = appGetSamplingInterval(app);
 80016a8:	6838      	ldr	r0, [r7, #0]
 80016aa:	f7ff fdab 	bl	8001204 <appGetSamplingInterval>
 80016ae:	4603      	mov	r3, r0
 80016b0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t movingAverageWindow = appGetMovingAverageFilterWindow(app);
 80016b2:	6838      	ldr	r0, [r7, #0]
 80016b4:	f7ff fdc8 	bl	8001248 <appGetMovingAverageFilterWindow>
 80016b8:	4603      	mov	r3, r0
 80016ba:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t minSumOfErrors = (uint32_t) (appGetPidMinSumOfErrors(app) + 1000000000);
 80016bc:	6838      	ldr	r0, [r7, #0]
 80016be:	f7ff fde2 	bl	8001286 <appGetPidMinSumOfErrors>
 80016c2:	4602      	mov	r2, r0
 80016c4:	4b92      	ldr	r3, [pc, #584]	; (8001910 <commSendCurrentConfigDataValues+0x32c>)
 80016c6:	4413      	add	r3, r2
 80016c8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSumOfErrors = (uint32_t) (appGetPidMaxSumOfErrors(app) + 1000000000);
 80016ca:	6838      	ldr	r0, [r7, #0]
 80016cc:	f7ff fdf8 	bl	80012c0 <appGetPidMaxSumOfErrors>
 80016d0:	4602      	mov	r2, r0
 80016d2:	4b8f      	ldr	r3, [pc, #572]	; (8001910 <commSendCurrentConfigDataValues+0x32c>)
 80016d4:	4413      	add	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
	uint32_t minControlledVariable = (uint32_t) (appGetPidMinControlledVariable(app) + 1000000000);
 80016d8:	6838      	ldr	r0, [r7, #0]
 80016da:	f7ff fe0e 	bl	80012fa <appGetPidMinControlledVariable>
 80016de:	4602      	mov	r2, r0
 80016e0:	4b8b      	ldr	r3, [pc, #556]	; (8001910 <commSendCurrentConfigDataValues+0x32c>)
 80016e2:	4413      	add	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]
	uint32_t maxControlledVariable = (uint32_t) (appGetPidMaxControlledVariable(app) + 1000000000);
 80016e6:	6838      	ldr	r0, [r7, #0]
 80016e8:	f7ff fe24 	bl	8001334 <appGetPidMaxControlledVariable>
 80016ec:	4602      	mov	r2, r0
 80016ee:	4b88      	ldr	r3, [pc, #544]	; (8001910 <commSendCurrentConfigDataValues+0x32c>)
 80016f0:	4413      	add	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
	uint32_t offset = (uint32_t) ((appGetPidOffset(app) * 1000) + 1000000);
 80016f4:	6838      	ldr	r0, [r7, #0]
 80016f6:	f7ff fe3a 	bl	800136e <appGetPidOffset>
 80016fa:	eef0 7a40 	vmov.f32	s15, s0
 80016fe:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800190c <commSendCurrentConfigDataValues+0x328>
 8001702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001706:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001914 <commSendCurrentConfigDataValues+0x330>
 800170a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800170e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001712:	ee17 3a90 	vmov	r3, s15
 8001716:	60fb      	str	r3, [r7, #12]
	uint32_t bias = (uint32_t) ((appGetPidBias(app) * 1000) + 1000000);
 8001718:	6838      	ldr	r0, [r7, #0]
 800171a:	f7ff fe49 	bl	80013b0 <appGetPidBias>
 800171e:	eef0 7a40 	vmov.f32	s15, s0
 8001722:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800190c <commSendCurrentConfigDataValues+0x328>
 8001726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001914 <commSendCurrentConfigDataValues+0x330>
 800172e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001736:	ee17 3a90 	vmov	r3, s15
 800173a:	60bb      	str	r3, [r7, #8]

	/************* Kp *************/
	bytes[0] = ((kpTimes1000 >> 24) & 0x000000FF);
 800173c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173e:	0e1b      	lsrs	r3, r3, #24
 8001740:	b2da      	uxtb	r2, r3
 8001742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001744:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((kpTimes1000 >> 16) & 0x000000FF);
 8001746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001748:	0c1b      	lsrs	r3, r3, #16
 800174a:	b2da      	uxtb	r2, r3
 800174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174e:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((kpTimes1000 >> 8) & 0x000000FF);
 8001750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	b2da      	uxtb	r2, r3
 8001756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001758:	709a      	strb	r2, [r3, #2]
	bytes[3] = (kpTimes1000 & 0x000000FF);
 800175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175c:	b2da      	uxtb	r2, r3
 800175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001760:	70da      	strb	r2, [r3, #3]

	/************* Ki *************/
	bytes[4] = ((kiTimes1000 >> 24) & 0x000000FF);
 8001762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001764:	0e1b      	lsrs	r3, r3, #24
 8001766:	b2da      	uxtb	r2, r3
 8001768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800176a:	711a      	strb	r2, [r3, #4]
	bytes[5] = ((kiTimes1000 >> 16) & 0x000000FF);
 800176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176e:	0c1b      	lsrs	r3, r3, #16
 8001770:	b2da      	uxtb	r2, r3
 8001772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001774:	715a      	strb	r2, [r3, #5]
	bytes[6] = ((kiTimes1000 >> 8) & 0x000000FF);
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b2da      	uxtb	r2, r3
 800177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177e:	719a      	strb	r2, [r3, #6]
	bytes[7] = (kiTimes1000 & 0x000000FF);
 8001780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001782:	b2da      	uxtb	r2, r3
 8001784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001786:	71da      	strb	r2, [r3, #7]

	/************* Kd *************/
	bytes[8] = ((kdTimes1000 >> 24) & 0x000000FF);
 8001788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178a:	0e1b      	lsrs	r3, r3, #24
 800178c:	b2da      	uxtb	r2, r3
 800178e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001790:	721a      	strb	r2, [r3, #8]
	bytes[9] = ((kdTimes1000 >> 16) & 0x000000FF);
 8001792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001794:	0c1b      	lsrs	r3, r3, #16
 8001796:	b2da      	uxtb	r2, r3
 8001798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179a:	725a      	strb	r2, [r3, #9]
	bytes[10] = ((kdTimes1000 >> 8) & 0x000000FF);
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a4:	729a      	strb	r2, [r3, #10]
	bytes[11] = (kdTimes1000 & 0x000000FF);
 80017a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ac:	72da      	strb	r2, [r3, #11]

	/************* Pid Interval *************/
	bytes[12] = ((pidInterval >> 8) & 0x00FF);
 80017ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b8:	731a      	strb	r2, [r3, #12]
	bytes[13] = (pidInterval & 0x00FF);
 80017ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c0:	735a      	strb	r2, [r3, #13]

	/************* Sampling Interval *************/
	bytes[14] = ((samplingInterval >> 8) & 0x00FF);
 80017c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017cc:	739a      	strb	r2, [r3, #14]
	bytes[15] = (samplingInterval & 0x00FF);
 80017ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017d4:	73da      	strb	r2, [r3, #15]

	/************* Moving Average Window *************/
	bytes[16] = ((movingAverageWindow >> 8) & 0x00FF);
 80017d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	b29b      	uxth	r3, r3
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e0:	741a      	strb	r2, [r3, #16]
	bytes[17] = (movingAverageWindow & 0x00FF);
 80017e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e8:	745a      	strb	r2, [r3, #17]

	/************* Min Sum Of Errors *************/
	bytes[18] = ((minSumOfErrors >> 24) & 0x000000FF);
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	0e1b      	lsrs	r3, r3, #24
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f2:	749a      	strb	r2, [r3, #18]
	bytes[19] = ((minSumOfErrors >> 16) & 0x000000FF);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	0c1b      	lsrs	r3, r3, #16
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fc:	74da      	strb	r2, [r3, #19]
	bytes[20] = ((minSumOfErrors >> 8) & 0x000000FF);
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	b2da      	uxtb	r2, r3
 8001804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001806:	751a      	strb	r2, [r3, #20]
	bytes[21] = (minSumOfErrors & 0x000000FF);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180e:	755a      	strb	r2, [r3, #21]

	/************* Max Sum Of Errors *************/
	bytes[22] = ((maxSumOfErrors >> 24) & 0x000000FF);
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	0e1b      	lsrs	r3, r3, #24
 8001814:	b2da      	uxtb	r2, r3
 8001816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001818:	759a      	strb	r2, [r3, #22]
	bytes[23] = ((maxSumOfErrors >> 16) & 0x000000FF);
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	0c1b      	lsrs	r3, r3, #16
 800181e:	b2da      	uxtb	r2, r3
 8001820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001822:	75da      	strb	r2, [r3, #23]
	bytes[24] = ((maxSumOfErrors >> 8) & 0x000000FF);
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	b2da      	uxtb	r2, r3
 800182a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182c:	761a      	strb	r2, [r3, #24]
	bytes[25] = (maxSumOfErrors & 0x000000FF);
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001834:	765a      	strb	r2, [r3, #25]

	/************* Min Controlled Variable *************/
	bytes[26] = ((minControlledVariable >> 24) & 0x000000FF);
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	0e1b      	lsrs	r3, r3, #24
 800183a:	b2da      	uxtb	r2, r3
 800183c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183e:	769a      	strb	r2, [r3, #26]
	bytes[27] = ((minControlledVariable >> 16) & 0x000000FF);
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	0c1b      	lsrs	r3, r3, #16
 8001844:	b2da      	uxtb	r2, r3
 8001846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001848:	76da      	strb	r2, [r3, #27]
	bytes[28] = ((minControlledVariable >> 8) & 0x000000FF);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	b2da      	uxtb	r2, r3
 8001850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001852:	771a      	strb	r2, [r3, #28]
	bytes[29] = (minControlledVariable & 0x000000FF);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185a:	775a      	strb	r2, [r3, #29]

	/************* Max Controlled Variable *************/
	bytes[30] = ((maxControlledVariable >> 24) & 0x000000FF);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	0e1b      	lsrs	r3, r3, #24
 8001860:	b2da      	uxtb	r2, r3
 8001862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001864:	779a      	strb	r2, [r3, #30]
	bytes[31] = ((maxControlledVariable >> 16) & 0x000000FF);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	0c1b      	lsrs	r3, r3, #16
 800186a:	b2da      	uxtb	r2, r3
 800186c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186e:	77da      	strb	r2, [r3, #31]
	bytes[32] = ((maxControlledVariable >> 8) & 0x000000FF);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	0a1b      	lsrs	r3, r3, #8
 8001874:	b2da      	uxtb	r2, r3
 8001876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001878:	f883 2020 	strb.w	r2, [r3, #32]
	bytes[33] = (maxControlledVariable & 0x000000FF);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001882:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/************* Offset *************/
	bytes[34] = ((offset >> 24) & 0x000000FF);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	0e1b      	lsrs	r3, r3, #24
 800188a:	b2da      	uxtb	r2, r3
 800188c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	bytes[35] = ((offset >> 16) & 0x000000FF);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	b2da      	uxtb	r2, r3
 8001898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	bytes[36] = ((offset >> 8) & 0x000000FF);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	bytes[37] = (offset & 0x000000FF);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	/************* Bias *************/
	bytes[38] = ((bias >> 24) & 0x000000FF);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	0e1b      	lsrs	r3, r3, #24
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	bytes[39] = ((bias >> 16) & 0x000000FF);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	0c1b      	lsrs	r3, r3, #16
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	bytes[40] = ((bias >> 8) & 0x000000FF);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	0a1b      	lsrs	r3, r3, #8
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	bytes[41] = (bias & 0x000000FF);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_CURRENT_CONFIG_DATA_VALUES);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3388      	adds	r3, #136	; 0x88
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	4618      	mov	r0, r3
 80018ea:	f001 fd2e 	bl	800334a <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3388      	adds	r3, #136	; 0x88
 80018f2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80018f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018f8:	4618      	mov	r0, r3
 80018fa:	f001 fd40 	bl	800337e <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3388      	adds	r3, #136	; 0x88
 8001902:	4618      	mov	r0, r3
 8001904:	f001 fc76 	bl	80031f4 <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	e005      	b.n	8001918 <commSendCurrentConfigDataValues+0x334>
 800190c:	447a0000 	.word	0x447a0000
 8001910:	3b9aca00 	.word	0x3b9aca00
 8001914:	49742400 	.word	0x49742400
 8001918:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 800191c:	687e      	ldr	r6, [r7, #4]
 800191e:	466d      	mov	r5, sp
 8001920:	f106 040c 	add.w	r4, r6, #12
 8001924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001930:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001934:	e885 0003 	stmia.w	r5, {r0, r1}
 8001938:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800193c:	4660      	mov	r0, ip
 800193e:	f001 fca7 	bl	8003290 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3388      	adds	r3, #136	; 0x88
 8001946:	4618      	mov	r0, r3
 8001948:	f001 fce1 	bl	800330e <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3388      	adds	r3, #136	; 0x88
 8001950:	4618      	mov	r0, r3
 8001952:	f001 fcbe 	bl	80032d2 <dataPacketTxClear>
 8001956:	46d5      	mov	sp, sl
}
 8001958:	bf00      	nop
 800195a:	3740      	adds	r7, #64	; 0x40
 800195c:	46bd      	mov	sp, r7
 800195e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001962:	bf00      	nop

08001964 <commSendCurrentPidSetpointValue>:

void commSendCurrentPidSetpointValue(Comm *comm, App *app)
{
 8001964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001968:	b094      	sub	sp, #80	; 0x50
 800196a:	af0e      	add	r7, sp, #56	; 0x38
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
 8001970:	466b      	mov	r3, sp
 8001972:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 4;
 8001974:	2304      	movs	r3, #4
 8001976:	75fb      	strb	r3, [r7, #23]
	uint8_t bytes[qtyOfBytes];
 8001978:	7df9      	ldrb	r1, [r7, #23]
 800197a:	460b      	mov	r3, r1
 800197c:	3b01      	subs	r3, #1
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	b2cb      	uxtb	r3, r1
 8001982:	2200      	movs	r2, #0
 8001984:	4698      	mov	r8, r3
 8001986:	4691      	mov	r9, r2
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001994:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001998:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800199c:	b2cb      	uxtb	r3, r1
 800199e:	2200      	movs	r2, #0
 80019a0:	461c      	mov	r4, r3
 80019a2:	4615      	mov	r5, r2
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	00eb      	lsls	r3, r5, #3
 80019ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b2:	00e2      	lsls	r2, r4, #3
 80019b4:	460b      	mov	r3, r1
 80019b6:	3307      	adds	r3, #7
 80019b8:	08db      	lsrs	r3, r3, #3
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	ebad 0d03 	sub.w	sp, sp, r3
 80019c0:	ab0e      	add	r3, sp, #56	; 0x38
 80019c2:	3300      	adds	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
	uint32_t setpointTimes1000 = (uint32_t)(1000 * appGetPidSetpoint(app));
 80019c6:	6838      	ldr	r0, [r7, #0]
 80019c8:	f7ff fd13 	bl	80013f2 <appGetPidSetpoint>
 80019cc:	eef0 7a40 	vmov.f32	s15, s0
 80019d0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001a78 <commSendCurrentPidSetpointValue+0x114>
 80019d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019dc:	ee17 3a90 	vmov	r3, s15
 80019e0:	60bb      	str	r3, [r7, #8]

	bytes[0] = ((setpointTimes1000 >> 24) & 0x000000FF);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	0e1b      	lsrs	r3, r3, #24
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((setpointTimes1000 >> 16) & 0x000000FF);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	0c1b      	lsrs	r3, r3, #16
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((setpointTimes1000 >> 8) & 0x000000FF);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	709a      	strb	r2, [r3, #2]
	bytes[3] = (setpointTimes1000 & 0x000000FF);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	70da      	strb	r2, [r3, #3]

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_CURRENT_PID_SETPOINT);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3388      	adds	r3, #136	; 0x88
 8001a0c:	2181      	movs	r1, #129	; 0x81
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 fc9b 	bl	800334a <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3388      	adds	r3, #136	; 0x88
 8001a18:	7dfa      	ldrb	r2, [r7, #23]
 8001a1a:	68f9      	ldr	r1, [r7, #12]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 fcae 	bl	800337e <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3388      	adds	r3, #136	; 0x88
 8001a26:	4618      	mov	r0, r3
 8001a28:	f001 fbe4 	bl	80031f4 <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 8001a32:	687e      	ldr	r6, [r7, #4]
 8001a34:	466d      	mov	r5, sp
 8001a36:	f106 040c 	add.w	r4, r6, #12
 8001a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a4e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001a52:	4660      	mov	r0, ip
 8001a54:	f001 fc1c 	bl	8003290 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3388      	adds	r3, #136	; 0x88
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fc56 	bl	800330e <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3388      	adds	r3, #136	; 0x88
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 fc33 	bl	80032d2 <dataPacketTxClear>
 8001a6c:	46d5      	mov	sp, sl
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a78:	447a0000 	.word	0x447a0000

08001a7c <commSendKeepAliveMessage>:

void commSendKeepAliveMessage(Comm *comm, App *app)
{
 8001a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a80:	b094      	sub	sp, #80	; 0x50
 8001a82:	af0e      	add	r7, sp, #56	; 0x38
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
 8001a88:	466b      	mov	r3, sp
 8001a8a:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 1;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	75fb      	strb	r3, [r7, #23]
	uint8_t bytes[qtyOfBytes];
 8001a90:	7df9      	ldrb	r1, [r7, #23]
 8001a92:	460b      	mov	r3, r1
 8001a94:	3b01      	subs	r3, #1
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	b2cb      	uxtb	r3, r1
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	4698      	mov	r8, r3
 8001a9e:	4691      	mov	r9, r2
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ab0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ab4:	b2cb      	uxtb	r3, r1
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	461c      	mov	r4, r3
 8001aba:	4615      	mov	r5, r2
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	00eb      	lsls	r3, r5, #3
 8001ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aca:	00e2      	lsls	r2, r4, #3
 8001acc:	460b      	mov	r3, r1
 8001ace:	3307      	adds	r3, #7
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	ebad 0d03 	sub.w	sp, sp, r3
 8001ad8:	ab0e      	add	r3, sp, #56	; 0x38
 8001ada:	3300      	adds	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]

	if (appGetRunPidControllerStatus(app) == TRUE)
 8001ade:	6838      	ldr	r0, [r7, #0]
 8001ae0:	f7ff fcc4 	bl	800146c <appGetRunPidControllerStatus>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d103      	bne.n	8001af2 <commSendKeepAliveMessage+0x76>
	{
		bytes[0] = 0x01;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	e002      	b.n	8001af8 <commSendKeepAliveMessage+0x7c>
	}
	else
	{
		bytes[0] = 0x00;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
	}

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_KEEP_ALIVE_MESSAGE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3388      	adds	r3, #136	; 0x88
 8001afc:	2183      	movs	r1, #131	; 0x83
 8001afe:	4618      	mov	r0, r3
 8001b00:	f001 fc23 	bl	800334a <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3388      	adds	r3, #136	; 0x88
 8001b08:	7dfa      	ldrb	r2, [r7, #23]
 8001b0a:	68f9      	ldr	r1, [r7, #12]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f001 fc36 	bl	800337e <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3388      	adds	r3, #136	; 0x88
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 fb6c 	bl	80031f4 <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 8001b22:	687e      	ldr	r6, [r7, #4]
 8001b24:	466d      	mov	r5, sp
 8001b26:	f106 040c 	add.w	r4, r6, #12
 8001b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b3e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001b42:	4660      	mov	r0, ip
 8001b44:	f001 fba4 	bl	8003290 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3388      	adds	r3, #136	; 0x88
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f001 fbde 	bl	800330e <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3388      	adds	r3, #136	; 0x88
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 fbbb 	bl	80032d2 <dataPacketTxClear>
 8001b5c:	46d5      	mov	sp, sl
}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001b68 <commSendProcessVariable>:

void commSendProcessVariable(Comm *comm, App *app)
{
 8001b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b6c:	b094      	sub	sp, #80	; 0x50
 8001b6e:	af0e      	add	r7, sp, #56	; 0x38
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
 8001b74:	466b      	mov	r3, sp
 8001b76:	469a      	mov	sl, r3
	uint32_t processVariableValue = (uint32_t) appGetProcessVariable(app);
 8001b78:	6838      	ldr	r0, [r7, #0]
 8001b7a:	f7ff f9ab 	bl	8000ed4 <appGetProcessVariable>
 8001b7e:	eef0 7a40 	vmov.f32	s15, s0
 8001b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b86:	ee17 3a90 	vmov	r3, s15
 8001b8a:	617b      	str	r3, [r7, #20]
	uint8_t qtyOfBytes = 4;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	74fb      	strb	r3, [r7, #19]
	uint8_t bytes[qtyOfBytes];
 8001b90:	7cf9      	ldrb	r1, [r7, #19]
 8001b92:	460b      	mov	r3, r1
 8001b94:	3b01      	subs	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	b2cb      	uxtb	r3, r1
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4698      	mov	r8, r3
 8001b9e:	4691      	mov	r9, r2
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb4:	b2cb      	uxtb	r3, r1
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	461c      	mov	r4, r3
 8001bba:	4615      	mov	r5, r2
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	00eb      	lsls	r3, r5, #3
 8001bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bca:	00e2      	lsls	r2, r4, #3
 8001bcc:	460b      	mov	r3, r1
 8001bce:	3307      	adds	r3, #7
 8001bd0:	08db      	lsrs	r3, r3, #3
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	ebad 0d03 	sub.w	sp, sp, r3
 8001bd8:	ab0e      	add	r3, sp, #56	; 0x38
 8001bda:	3300      	adds	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
	bytes[0] = ((processVariableValue >> 24) & 0x000000FF);
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	0e1b      	lsrs	r3, r3, #24
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((processVariableValue >> 16) & 0x000000FF);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((processVariableValue >> 8) & 0x000000FF);
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	709a      	strb	r2, [r3, #2]
	bytes[3] = (processVariableValue & 0x000000FF);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	70da      	strb	r2, [r3, #3]

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_CURRENT_PROCESS_VARIABLE_VALUE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3388      	adds	r3, #136	; 0x88
 8001c08:	2182      	movs	r1, #130	; 0x82
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fb9d 	bl	800334a <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3388      	adds	r3, #136	; 0x88
 8001c14:	7cfa      	ldrb	r2, [r7, #19]
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f001 fbb0 	bl	800337e <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3388      	adds	r3, #136	; 0x88
 8001c22:	4618      	mov	r0, r3
 8001c24:	f001 fae6 	bl	80031f4 <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 8001c2e:	687e      	ldr	r6, [r7, #4]
 8001c30:	466d      	mov	r5, sp
 8001c32:	f106 040c 	add.w	r4, r6, #12
 8001c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c46:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c4a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001c4e:	4660      	mov	r0, ip
 8001c50:	f001 fb1e 	bl	8003290 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3388      	adds	r3, #136	; 0x88
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f001 fb58 	bl	800330e <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3388      	adds	r3, #136	; 0x88
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 fb35 	bl	80032d2 <dataPacketTxClear>
 8001c68:	46d5      	mov	sp, sl
}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001c74 <commSetData>:

// ======== RX - Data Packet =========== //
void commSetData(Comm *comm, uint8_t *data, uint8_t dataLength)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	71fb      	strb	r3, [r7, #7]
	if (dataLength <= QTY_DATA_BYTES)
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b32      	cmp	r3, #50	; 0x32
 8001c86:	d80b      	bhi.n	8001ca0 <commSetData+0x2c>
	{
		comm->dataLenght = dataLength;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	79fa      	ldrb	r2, [r7, #7]
 8001c8c:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
		memcpy(comm->data, data, dataLength);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c96:	79fa      	ldrb	r2, [r7, #7]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f005 fa6e 	bl	800717c <memcpy>
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <commClearData>:

void commClearData(Comm *comm)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	memset(comm->data, 0x00, QTY_DATA_BYTES);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cb6:	2232      	movs	r2, #50	; 0x32
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f005 fa6c 	bl	8007198 <memset>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <commAppendReceivedByte>:

void commAppendReceivedByte(Comm *comm, uint8_t receivedByte)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
	dataPacketRxAppend(&comm->dataPacketRx, receivedByte);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	33fe      	adds	r3, #254	; 0xfe
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 f8c9 	bl	8002e74 <dataPacketRxAppend>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <commTryDecodeReceivedDataPacket>:

void commTryDecodeReceivedDataPacket(Comm *comm)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	dataPacketRxDecode(&comm->dataPacketRx);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	33fe      	adds	r3, #254	; 0xfe
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f001 f8ef 	bl	8002eda <dataPacketRxDecode>
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <commTryExtractCommandAndPayloadFromDecodedDataPacket>:

void commTryExtractCommandAndPayloadFromDecodedDataPacket(Comm *comm)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	if (dataPacketRxGetDataPacketStatus(&comm->dataPacketRx) == VALID_RX_DATA_PACKET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	33fe      	adds	r3, #254	; 0xfe
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 fa30 	bl	8003176 <dataPacketRxGetDataPacketStatus>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d12a      	bne.n	8001d72 <commTryExtractCommandAndPayloadFromDecodedDataPacket+0x6e>
	{
		uint8_t receivedCmd = dataPacketRxGetCommand(&comm->dataPacketRx);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	33fe      	adds	r3, #254	; 0xfe
 8001d20:	4618      	mov	r0, r3
 8001d22:	f001 f9eb 	bl	80030fc <dataPacketRxGetCommand>
 8001d26:	4603      	mov	r3, r0
 8001d28:	73fb      	strb	r3, [r7, #15]
		uint8_t receivedPayloadDataLength = dataPacketRxGetPayloadDataLength(&comm->dataPacketRx);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	33fe      	adds	r3, #254	; 0xfe
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 fa15 	bl	800315e <dataPacketRxGetPayloadDataLength>
 8001d34:	4603      	mov	r3, r0
 8001d36:	73bb      	strb	r3, [r7, #14]

		if (receivedPayloadDataLength > 0)
 8001d38:	7bbb      	ldrb	r3, [r7, #14]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00b      	beq.n	8001d56 <commTryExtractCommandAndPayloadFromDecodedDataPacket+0x52>
		{
			uint8_t *receivedPayloadData = dataPacketRxGetPayloadData(&comm->dataPacketRx);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	33fe      	adds	r3, #254	; 0xfe
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 f9ff 	bl	8003146 <dataPacketRxGetPayloadData>
 8001d48:	60b8      	str	r0, [r7, #8]
			commSetData(comm, receivedPayloadData, receivedPayloadDataLength);
 8001d4a:	7bbb      	ldrb	r3, [r7, #14]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff8f 	bl	8001c74 <commSetData>
		}

		commSetCommand(comm, receivedCmd);
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fad4 	bl	8002308 <commSetCommand>
		commSetDecodeCommandStatus(comm, TRUE);
 8001d60:	2101      	movs	r1, #1
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fab3 	bl	80022ce <commSetDecodeCommandStatus>
		dataPacketRxClear(&comm->dataPacketRx);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	33fe      	adds	r3, #254	; 0xfe
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f001 f977 	bl	8003060 <dataPacketRxClear>
	}
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <commTryDecodeExtractedCommand>:

void commTryDecodeExtractedCommand(Comm *comm, App *app)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
	if (commGetDecodeCommandStatus(comm) == TRUE)
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fa95 	bl	80022b4 <commGetDecodeCommandStatus>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d107      	bne.n	8001da0 <commTryDecodeExtractedCommand+0x26>
	{
		commDecodeReceivedCommand(comm, app);
 8001d90:	6839      	ldr	r1, [r7, #0]
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f808 	bl	8001da8 <commDecodeReceivedCommand>
		commSetDecodeCommandStatus(comm, FALSE);
 8001d98:	2100      	movs	r1, #0
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fa97 	bl	80022ce <commSetDecodeCommandStatus>
	}
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <commDecodeReceivedCommand>:

void commDecodeReceivedCommand(Comm *comm, App *app)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b094      	sub	sp, #80	; 0x50
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
	uint16_t receivedSamplingInterval = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t receivedPidInterval = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t receivedMovingAverageWindow = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int32_t receivedPidMinSumOfErrors = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t receivedPidMaxSumOfErrors = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t receivedPidMinControlledVariable = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t receivedPidMaxControlledVariable = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	63bb      	str	r3, [r7, #56]	; 0x38

	uint32_t receivedPidSetpointTimes1000 = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34
	float receivedPidSetpoint = 0;
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30

	uint32_t pidKpTimes1000 = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
	float pidKp = 0;
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pidKiTimes1000 = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
	float pidKi = 0;
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]

	uint32_t pidKdTimes1000 = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
	float pidKd = 0;
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	61bb      	str	r3, [r7, #24]

	uint32_t receiveidPidOffset = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
	float pidOffset = 0;
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]

	uint32_t receiveidPidBias = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
	float pidBias = 0;
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]

	switch (commGetCommand(comm))
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fa6c 	bl	80022ee <commGetCommand>
 8001e16:	4603      	mov	r3, r0
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	f200 81cd 	bhi.w	80021ba <commDecodeReceivedCommand+0x412>
 8001e20:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <commDecodeReceivedCommand+0x80>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001e41 	.word	0x08001e41
 8001e2c:	08002103 	.word	0x08002103
 8001e30:	0800210d 	.word	0x0800210d
 8001e34:	08002155 	.word	0x08002155
 8001e38:	08002189 	.word	0x08002189
 8001e3c:	080021b1 	.word	0x080021b1
	{
		case CMD_RX_SET_CONFIG_DATA_VALUES:

			// ************* Kp ************* //
			pidKpTimes1000 = (comm->data[0] << 24) + (comm->data[1] << 16) + (comm->data[2] << 8) + comm->data[3];
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8001e46:	061a      	lsls	r2, r3, #24
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	441a      	add	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	4413      	add	r3, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	f892 217b 	ldrb.w	r2, [r2, #379]	; 0x17b
 8001e62:	4413      	add	r3, r2
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
			pidKp = ((float) pidKpTimes1000) / 1000;
 8001e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e70:	eddf 6ac2 	vldr	s13, [pc, #776]	; 800217c <commDecodeReceivedCommand+0x3d4>
 8001e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e78:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			appSetPidKp(app, pidKp);
 8001e7c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001e80:	6838      	ldr	r0, [r7, #0]
 8001e82:	f7ff f930 	bl	80010e6 <appSetPidKp>

			// ************* Ki ************* //
			pidKiTimes1000 = (comm->data[4] << 24) + (comm->data[5] << 16) + (comm->data[6] << 8) + comm->data[7];
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8001e8c:	061a      	lsls	r2, r3, #24
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	441a      	add	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	4413      	add	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	f892 217f 	ldrb.w	r2, [r2, #383]	; 0x17f
 8001ea8:	4413      	add	r3, r2
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
			pidKi = ((float) pidKiTimes1000) / 1000;
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eb6:	eddf 6ab1 	vldr	s13, [pc, #708]	; 800217c <commDecodeReceivedCommand+0x3d4>
 8001eba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ebe:	edc7 7a08 	vstr	s15, [r7, #32]
			appSetPidKi(app, pidKi);
 8001ec2:	ed97 0a08 	vldr	s0, [r7, #32]
 8001ec6:	6838      	ldr	r0, [r7, #0]
 8001ec8:	f7ff f92e 	bl	8001128 <appSetPidKi>

			// ************* Kd ************* //
			pidKdTimes1000 = (comm->data[8] << 24) + (comm->data[9] << 16) + (comm->data[10] << 8) + comm->data[11];
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8001ed2:	061a      	lsls	r2, r3, #24
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	441a      	add	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	4413      	add	r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	f892 2183 	ldrb.w	r2, [r2, #387]	; 0x183
 8001eee:	4413      	add	r3, r2
 8001ef0:	61fb      	str	r3, [r7, #28]
			pidKd = ((float) pidKdTimes1000) / 1000;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001efc:	eddf 6a9f 	vldr	s13, [pc, #636]	; 800217c <commDecodeReceivedCommand+0x3d4>
 8001f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f04:	edc7 7a06 	vstr	s15, [r7, #24]
			appSetPidKd(app, pidKd);
 8001f08:	ed97 0a06 	vldr	s0, [r7, #24]
 8001f0c:	6838      	ldr	r0, [r7, #0]
 8001f0e:	f7ff f92c 	bl	800116a <appSetPidKd>

			// ************* Pid Interval ************* //
			receivedPidInterval = (comm->data[12] << 8) + comm->data[13];
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4413      	add	r3, r2
 8001f28:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			appSetPidInterval(app, receivedPidInterval);
 8001f2c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001f30:	4619      	mov	r1, r3
 8001f32:	6838      	ldr	r0, [r7, #0]
 8001f34:	f7ff f944 	bl	80011c0 <appSetPidInterval>

			// ************* Sampling Interval ************* //
			receivedSamplingInterval = (comm->data[14] << 8) + comm->data[15];
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3186 	ldrb.w	r3, [r3, #390]	; 0x186
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			appSetSamplingInterval(app, receivedSamplingInterval);
 8001f52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f56:	4619      	mov	r1, r3
 8001f58:	6838      	ldr	r0, [r7, #0]
 8001f5a:	f7ff f960 	bl	800121e <appSetSamplingInterval>

			// ************* Moving Average Window ************* //
			receivedMovingAverageWindow = (comm->data[16] << 8) + comm->data[17];
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			appSetMovingAverageFilterWindow(app, receivedMovingAverageWindow);
 8001f78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6838      	ldr	r0, [r7, #0]
 8001f80:	f7ff f970 	bl	8001264 <appSetMovingAverageFilterWindow>

			// ************* Min Sum Of Errors ************* //
			receivedPidMinSumOfErrors = (comm->data[18] << 24) + (comm->data[19] << 16) + (comm->data[20] << 8) + comm->data[21];
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8001f8a:	061a      	lsls	r2, r3, #24
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 8001f92:	041b      	lsls	r3, r3, #16
 8001f94:	441a      	add	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	4413      	add	r3, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	f892 218d 	ldrb.w	r2, [r2, #397]	; 0x18d
 8001fa6:	4413      	add	r3, r2
 8001fa8:	647b      	str	r3, [r7, #68]	; 0x44
			receivedPidMinSumOfErrors -= 1000000000;
 8001faa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fac:	4b74      	ldr	r3, [pc, #464]	; (8002180 <commDecodeReceivedCommand+0x3d8>)
 8001fae:	4413      	add	r3, r2
 8001fb0:	647b      	str	r3, [r7, #68]	; 0x44
			appSetPidMinSumOfErrors(app, receivedPidMinSumOfErrors);
 8001fb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001fb4:	6838      	ldr	r0, [r7, #0]
 8001fb6:	f7ff f974 	bl	80012a2 <appSetPidMinSumOfErrors>

			// ************* Max Sum Of Errors ************* //
			receivedPidMaxSumOfErrors = (comm->data[22] << 24) + (comm->data[23] << 16) + (comm->data[24] << 8) + comm->data[25];
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 8001fc0:	061a      	lsls	r2, r3, #24
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 318f 	ldrb.w	r3, [r3, #399]	; 0x18f
 8001fc8:	041b      	lsls	r3, r3, #16
 8001fca:	441a      	add	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	4413      	add	r3, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	f892 2191 	ldrb.w	r2, [r2, #401]	; 0x191
 8001fdc:	4413      	add	r3, r2
 8001fde:	643b      	str	r3, [r7, #64]	; 0x40
			receivedPidMaxSumOfErrors -= 1000000000;
 8001fe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001fe2:	4b67      	ldr	r3, [pc, #412]	; (8002180 <commDecodeReceivedCommand+0x3d8>)
 8001fe4:	4413      	add	r3, r2
 8001fe6:	643b      	str	r3, [r7, #64]	; 0x40
			appSetPidMaxSumOfErrors(app, receivedPidMaxSumOfErrors);
 8001fe8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001fea:	6838      	ldr	r0, [r7, #0]
 8001fec:	f7ff f976 	bl	80012dc <appSetPidMaxSumOfErrors>

			// ************* Min Controlled Variable ************* //
			receivedPidMinControlledVariable = (comm->data[26] << 24) + (comm->data[27] << 16) + (comm->data[28] << 8) + comm->data[29];
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8001ff6:	061a      	lsls	r2, r3, #24
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	441a      	add	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	4413      	add	r3, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	f892 2195 	ldrb.w	r2, [r2, #405]	; 0x195
 8002012:	4413      	add	r3, r2
 8002014:	63fb      	str	r3, [r7, #60]	; 0x3c
			receivedPidMinControlledVariable -= 1000000000;
 8002016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002018:	4b59      	ldr	r3, [pc, #356]	; (8002180 <commDecodeReceivedCommand+0x3d8>)
 800201a:	4413      	add	r3, r2
 800201c:	63fb      	str	r3, [r7, #60]	; 0x3c
			appSetPidMinControlledVariable(app, receivedPidMinControlledVariable);
 800201e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002020:	6838      	ldr	r0, [r7, #0]
 8002022:	f7ff f978 	bl	8001316 <appSetPidMinControlledVariable>

			// ************* Max Controlled Variable ************* //
			receivedPidMaxControlledVariable = (comm->data[30] << 24) + (comm->data[31] << 16) + (comm->data[32] << 8) + comm->data[33];
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800202c:	061a      	lsls	r2, r3, #24
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8002034:	041b      	lsls	r3, r3, #16
 8002036:	441a      	add	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	4413      	add	r3, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	f892 2199 	ldrb.w	r2, [r2, #409]	; 0x199
 8002048:	4413      	add	r3, r2
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
			receivedPidMaxControlledVariable -= 1000000000;
 800204c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800204e:	4b4c      	ldr	r3, [pc, #304]	; (8002180 <commDecodeReceivedCommand+0x3d8>)
 8002050:	4413      	add	r3, r2
 8002052:	63bb      	str	r3, [r7, #56]	; 0x38
			appSetPidMaxControlledVariable(app, receivedPidMaxControlledVariable);
 8002054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002056:	6838      	ldr	r0, [r7, #0]
 8002058:	f7ff f97a 	bl	8001350 <appSetPidMaxControlledVariable>

			// ************* Pid Offset ************* //
			receiveidPidOffset = (comm->data[34] << 24) + (comm->data[35] << 16) + (comm->data[36] << 8) + comm->data[37];
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 319a 	ldrb.w	r3, [r3, #410]	; 0x19a
 8002062:	061a      	lsls	r2, r3, #24
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 319b 	ldrb.w	r3, [r3, #411]	; 0x19b
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	441a      	add	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	4413      	add	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	f892 219d 	ldrb.w	r2, [r2, #413]	; 0x19d
 800207e:	4413      	add	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
			pidOffset = (((float) receiveidPidOffset) - 1000000) / 1000;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800208c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002184 <commDecodeReceivedCommand+0x3dc>
 8002090:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002094:	eddf 6a39 	vldr	s13, [pc, #228]	; 800217c <commDecodeReceivedCommand+0x3d4>
 8002098:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800209c:	edc7 7a04 	vstr	s15, [r7, #16]
			appSetPidOffset(app, pidOffset);
 80020a0:	ed97 0a04 	vldr	s0, [r7, #16]
 80020a4:	6838      	ldr	r0, [r7, #0]
 80020a6:	f7ff f972 	bl	800138e <appSetPidOffset>

			// ************* Pid Bias ************* //
			receiveidPidBias = (comm->data[38] << 24) + (comm->data[39] << 16) + (comm->data[40] << 8) + comm->data[41];
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 80020b0:	061a      	lsls	r2, r3, #24
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 80020b8:	041b      	lsls	r3, r3, #16
 80020ba:	441a      	add	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	4413      	add	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	f892 21a1 	ldrb.w	r2, [r2, #417]	; 0x1a1
 80020cc:	4413      	add	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
			pidBias = (((float) receiveidPidBias) - 1000000) / 1000;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020da:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002184 <commDecodeReceivedCommand+0x3dc>
 80020de:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80020e2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800217c <commDecodeReceivedCommand+0x3d4>
 80020e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ea:	edc7 7a02 	vstr	s15, [r7, #8]
			appSetPidBias(app, pidBias);
 80020ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80020f2:	6838      	ldr	r0, [r7, #0]
 80020f4:	f7ff f96c 	bl	80013d0 <appSetPidBias>

			// ************* Send The New Config Data Values ************* //
			commSetEnableSendCurrentConfigDataValues(comm, TRUE);
 80020f8:	2101      	movs	r1, #1
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f890 	bl	8002220 <commSetEnableSendCurrentConfigDataValues>
			break;
 8002100:	e060      	b.n	80021c4 <commDecodeReceivedCommand+0x41c>

		case CMD_RX_ASK_FOR_CURRENT_CONFIG_DATA_VALUES:
			commSetEnableSendCurrentConfigDataValues(comm, TRUE);
 8002102:	2101      	movs	r1, #1
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f88b 	bl	8002220 <commSetEnableSendCurrentConfigDataValues>
			break;
 800210a:	e05b      	b.n	80021c4 <commDecodeReceivedCommand+0x41c>

		case CMD_RX_SET_PID_SETPOINT:
			receivedPidSetpointTimes1000 = (comm->data[0] << 24) + (comm->data[1] << 16) + (comm->data[2] << 8) + comm->data[3];
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8002112:	061a      	lsls	r2, r3, #24
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	441a      	add	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	4413      	add	r3, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	f892 217b 	ldrb.w	r2, [r2, #379]	; 0x17b
 800212e:	4413      	add	r3, r2
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
			receivedPidSetpoint = ((float) receivedPidSetpointTimes1000) / 1000;
 8002132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800213c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800217c <commDecodeReceivedCommand+0x3d4>
 8002140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002144:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			appSetPidSetpoint(app, receivedPidSetpoint);
 8002148:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800214c:	6838      	ldr	r0, [r7, #0]
 800214e:	f7ff f961 	bl	8001414 <appSetPidSetpoint>
			break;
 8002152:	e037      	b.n	80021c4 <commDecodeReceivedCommand+0x41c>

		case CMD_RX_SET_RUN_PID_CONTROLLER_STATUS:
			if (comm->data[0] == 0x00)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800215a:	2b00      	cmp	r3, #0
 800215c:	d104      	bne.n	8002168 <commDecodeReceivedCommand+0x3c0>
			{
				appSetRunControllerStatus(app, FALSE);
 800215e:	2100      	movs	r1, #0
 8002160:	6838      	ldr	r0, [r7, #0]
 8002162:	f7fe ff23 	bl	8000fac <appSetRunControllerStatus>
			}
			else if (comm->data[0] == 0x01)
			{
				appSetRunControllerStatus(app, TRUE);
			}
			break;
 8002166:	e02a      	b.n	80021be <commDecodeReceivedCommand+0x416>
			else if (comm->data[0] == 0x01)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800216e:	2b01      	cmp	r3, #1
 8002170:	d125      	bne.n	80021be <commDecodeReceivedCommand+0x416>
				appSetRunControllerStatus(app, TRUE);
 8002172:	2101      	movs	r1, #1
 8002174:	6838      	ldr	r0, [r7, #0]
 8002176:	f7fe ff19 	bl	8000fac <appSetRunControllerStatus>
			break;
 800217a:	e020      	b.n	80021be <commDecodeReceivedCommand+0x416>
 800217c:	447a0000 	.word	0x447a0000
 8002180:	c4653600 	.word	0xc4653600
 8002184:	49742400 	.word	0x49742400

		case CMD_RX_SET_SEND_PROCESS_VARIABLE_STATUS:
			if (comm->data[0] == 0x00)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800218e:	2b00      	cmp	r3, #0
 8002190:	d104      	bne.n	800219c <commDecodeReceivedCommand+0x3f4>
			{
				commSetEnableSendProcessVariable(comm, FALSE);
 8002192:	2100      	movs	r1, #0
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f826 	bl	80021e6 <commSetEnableSendProcessVariable>
			}
			else if (comm->data[0] == 0x01)
			{
				commSetEnableSendProcessVariable(comm, TRUE);
			}
			break;
 800219a:	e012      	b.n	80021c2 <commDecodeReceivedCommand+0x41a>
			else if (comm->data[0] == 0x01)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d10d      	bne.n	80021c2 <commDecodeReceivedCommand+0x41a>
				commSetEnableSendProcessVariable(comm, TRUE);
 80021a6:	2101      	movs	r1, #1
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f81c 	bl	80021e6 <commSetEnableSendProcessVariable>
			break;
 80021ae:	e008      	b.n	80021c2 <commDecodeReceivedCommand+0x41a>

		case CMD_RX_ASK_FOR_CURRENT_PID_SETPOINT_VALUE:
			commSetEnableSendCurrentPidSetpointValue(comm, TRUE);
 80021b0:	2101      	movs	r1, #1
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f851 	bl	800225a <commSetEnableSendCurrentPidSetpointValue>
			break;
 80021b8:	e004      	b.n	80021c4 <commDecodeReceivedCommand+0x41c>

		default:
			break;
 80021ba:	bf00      	nop
 80021bc:	e002      	b.n	80021c4 <commDecodeReceivedCommand+0x41c>
			break;
 80021be:	bf00      	nop
 80021c0:	e000      	b.n	80021c4 <commDecodeReceivedCommand+0x41c>
			break;
 80021c2:	bf00      	nop
	}
}
 80021c4:	bf00      	nop
 80021c6:	3750      	adds	r7, #80	; 0x50
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <commGetEnableSendProcessVariable>:

// ======== TX - Getters and Setters ======== //
Bool commGetEnableSendProcessVariable(Comm *comm)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	return comm->enableSendProcessVariable;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <commSetEnableSendProcessVariable>:

void commSetEnableSendProcessVariable(Comm *comm, Bool status)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	70fb      	strb	r3, [r7, #3]
	comm->enableSendProcessVariable = status;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <commGetEnableSendCurrentConfigDataValues>:

Bool commGetEnableSendCurrentConfigDataValues(Comm *comm)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
	return comm->enableSendCurrentConfigDataValues;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <commSetEnableSendCurrentConfigDataValues>:

void commSetEnableSendCurrentConfigDataValues(Comm *comm, Bool status)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
	comm->enableSendCurrentConfigDataValues = status;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <commGetEnableSendCurrentPidSetpointValue>:

Bool commGetEnableSendCurrentPidSetpointValue(Comm *comm)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	return comm->enableSendCurrentPidSetpointValue;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <commSetEnableSendCurrentPidSetpointValue>:

void commSetEnableSendCurrentPidSetpointValue(Comm *comm, Bool status)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	70fb      	strb	r3, [r7, #3]
	comm->enableSendCurrentPidSetpointValue = status;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <commGetEnableSendKeepAliveMessage>:

Bool commGetEnableSendKeepAliveMessage(Comm *comm)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
	return comm->enableSendKeepAliveMessage;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <commSetEnableSendKeepAliveMessage>:

void commSetEnableSendKeepAliveMessage(Comm *comm, Bool status)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
	comm->enableSendKeepAliveMessage = status;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <commGetDecodeCommandStatus>:

// ======== RX - Getters and Setters ======== //
Bool commGetDecodeCommandStatus(Comm *comm)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	return comm->decodeCommandStatus;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <commSetDecodeCommandStatus>:

void commSetDecodeCommandStatus(Comm *comm, Bool status)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	70fb      	strb	r3, [r7, #3]
	comm->decodeCommandStatus = status;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <commGetCommand>:

uint8_t commGetCommand(Comm *comm)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	return comm->command;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3177 	ldrb.w	r3, [r3, #375]	; 0x177
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <commSetCommand>:

void commSetCommand(Comm *comm, uint8_t command)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
	comm->command = command;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <commSetDataLenght>:
{
	return comm->dataLenght;
}

void commSetDataLenght(Comm *comm, uint8_t dataLenght)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	70fb      	strb	r3, [r7, #3]
	comm->dataLenght = dataLenght;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a16      	ldr	r2, [pc, #88]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d123      	bne.n	80023a0 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		decodeDataPacketDelay++;
 8002358:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002362:	801a      	strh	r2, [r3, #0]
		blinkLedDelay++;
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800236e:	801a      	strh	r2, [r3, #0]
		sendDataDelay1++;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	3301      	adds	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800237a:	801a      	strh	r2, [r3, #0]
		samplingInterval++;
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002386:	801a      	strh	r2, [r3, #0]
		controllerInterval++;
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002392:	801a      	strh	r2, [r3, #0]
		sendKeepAliveDelay++;
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	3301      	adds	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800239e:	801a      	strh	r2, [r3, #0]
	}
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	20000084 	.word	0x20000084
 80023b0:	20000156 	.word	0x20000156
 80023b4:	20000158 	.word	0x20000158
 80023b8:	2000015a 	.word	0x2000015a
 80023bc:	2000015c 	.word	0x2000015c
 80023c0:	2000015e 	.word	0x2000015e
 80023c4:	20000160 	.word	0x20000160

080023c8 <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_UART_RxCpltCallback+0x34>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d10d      	bne.n	80023f4 <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 80023d8:	2201      	movs	r2, #1
 80023da:	4909      	ldr	r1, [pc, #36]	; (8002400 <HAL_UART_RxCpltCallback+0x38>)
 80023dc:	4807      	ldr	r0, [pc, #28]	; (80023fc <HAL_UART_RxCpltCallback+0x34>)
 80023de:	f003 fb54 	bl	8005a8a <HAL_UART_Receive_IT>
		appAppendReceivedByte(&app, receivedByte);
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_UART_RxCpltCallback+0x38>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	4619      	mov	r1, r3
 80023e8:	4806      	ldr	r0, [pc, #24]	; (8002404 <HAL_UART_RxCpltCallback+0x3c>)
 80023ea:	f7fe fe20 	bl	800102e <appAppendReceivedByte>
		receivedByte = 0x00;
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <HAL_UART_RxCpltCallback+0x38>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
	}
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	200000cc 	.word	0x200000cc
 8002400:	20000154 	.word	0x20000154
 8002404:	20000164 	.word	0x20000164

08002408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240a:	b0ab      	sub	sp, #172	; 0xac
 800240c:	af26      	add	r7, sp, #152	; 0x98
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800240e:	f000 ffcf 	bl	80033b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002412:	f000 f901 	bl	8002618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002416:	f000 fa7b 	bl	8002910 <MX_GPIO_Init>
  MX_ADC1_Init();
 800241a:	f000 f96f 	bl	80026fc <MX_ADC1_Init>
  MX_TIM9_Init();
 800241e:	f000 f9e9 	bl	80027f4 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8002422:	f000 fa21 	bl	8002868 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002426:	f000 fa49 	bl	80028bc <MX_USART3_UART_Init>
  MX_DAC_Init();
 800242a:	f000 f9b9 	bl	80027a0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 800242e:	486b      	ldr	r0, [pc, #428]	; (80025dc <main+0x1d4>)
 8002430:	f002 fe96 	bl	8005160 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002434:	2100      	movs	r1, #0
 8002436:	486a      	ldr	r0, [pc, #424]	; (80025e0 <main+0x1d8>)
 8002438:	f001 fd6f 	bl	8003f1a <HAL_DAC_Start>
  appInit(&app, LED_GPIO_Port, LED_Pin, huart2, hdac, huart3);
 800243c:	4e69      	ldr	r6, [pc, #420]	; (80025e4 <main+0x1dc>)
 800243e:	4a6a      	ldr	r2, [pc, #424]	; (80025e8 <main+0x1e0>)
 8002440:	ab15      	add	r3, sp, #84	; 0x54
 8002442:	4611      	mov	r1, r2
 8002444:	2244      	movs	r2, #68	; 0x44
 8002446:	4618      	mov	r0, r3
 8002448:	f004 fe98 	bl	800717c <memcpy>
 800244c:	4b64      	ldr	r3, [pc, #400]	; (80025e0 <main+0x1d8>)
 800244e:	ac10      	add	r4, sp, #64	; 0x40
 8002450:	461d      	mov	r5, r3
 8002452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002456:	682b      	ldr	r3, [r5, #0]
 8002458:	6023      	str	r3, [r4, #0]
 800245a:	466d      	mov	r5, sp
 800245c:	1d34      	adds	r4, r6, #4
 800245e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800246e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002472:	6833      	ldr	r3, [r6, #0]
 8002474:	2220      	movs	r2, #32
 8002476:	495d      	ldr	r1, [pc, #372]	; (80025ec <main+0x1e4>)
 8002478:	485d      	ldr	r0, [pc, #372]	; (80025f0 <main+0x1e8>)
 800247a:	f7fe fc65 	bl	8000d48 <appInit>
  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 800247e:	2201      	movs	r2, #1
 8002480:	495c      	ldr	r1, [pc, #368]	; (80025f4 <main+0x1ec>)
 8002482:	4858      	ldr	r0, [pc, #352]	; (80025e4 <main+0x1dc>)
 8002484:	f003 fb01 	bl	8005a8a <HAL_UART_Receive_IT>

	  /********************************* TOP SLOT START ********************************/

	  /* Put here the code to be executed in all cycles before the state machine */

	  if (samplingInterval >= appGetSamplingInterval(&app))
 8002488:	4859      	ldr	r0, [pc, #356]	; (80025f0 <main+0x1e8>)
 800248a:	f7fe febb 	bl	8001204 <appGetSamplingInterval>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <main+0x1f0>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d823      	bhi.n	80024e2 <main+0xda>
	  {
		  HAL_ADC_Start(&hadc1);
 800249a:	4858      	ldr	r0, [pc, #352]	; (80025fc <main+0x1f4>)
 800249c:	f001 f83e 	bl	800351c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	4855      	ldr	r0, [pc, #340]	; (80025fc <main+0x1f4>)
 80024a6:	f001 f93e 	bl	8003726 <HAL_ADC_PollForConversion>
		  uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 80024aa:	4854      	ldr	r0, [pc, #336]	; (80025fc <main+0x1f4>)
 80024ac:	f001 f9c6 	bl	800383c <HAL_ADC_GetValue>
 80024b0:	4603      	mov	r3, r0
 80024b2:	81fb      	strh	r3, [r7, #14]
		  HAL_ADC_Stop(&hadc1);
 80024b4:	4851      	ldr	r0, [pc, #324]	; (80025fc <main+0x1f4>)
 80024b6:	f001 f903 	bl	80036c0 <HAL_ADC_Stop>

		  uint32_t calculatedCurrentInMiliAmps = appGetCurrentInMiliAmps(adcValue);
 80024ba:	89fb      	ldrh	r3, [r7, #14]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fd1b 	bl	8000ef8 <appGetCurrentInMiliAmps>
 80024c2:	60b8      	str	r0, [r7, #8]
		  appAddNewValueToFilter(&app, calculatedCurrentInMiliAmps);
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	484a      	ldr	r0, [pc, #296]	; (80025f0 <main+0x1e8>)
 80024c8:	f7fe fd93 	bl	8000ff2 <appAddNewValueToFilter>
		  uint32_t filteredCurrentInMiliAmps = appGetFilterResult(&app);
 80024cc:	4848      	ldr	r0, [pc, #288]	; (80025f0 <main+0x1e8>)
 80024ce:	f7fe fda0 	bl	8001012 <appGetFilterResult>
 80024d2:	6078      	str	r0, [r7, #4]
		  appSetProcessVariable(&app, filteredCurrentInMiliAmps);
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4846      	ldr	r0, [pc, #280]	; (80025f0 <main+0x1e8>)
 80024d8:	f7fe fce7 	bl	8000eaa <appSetProcessVariable>

		  samplingInterval = 0;
 80024dc:	4b46      	ldr	r3, [pc, #280]	; (80025f8 <main+0x1f0>)
 80024de:	2200      	movs	r2, #0
 80024e0:	801a      	strh	r2, [r3, #0]
	  }

	  if (controllerInterval >= appGetPidInterval(&app))
 80024e2:	4843      	ldr	r0, [pc, #268]	; (80025f0 <main+0x1e8>)
 80024e4:	f7fe fe52 	bl	800118c <appGetPidInterval>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b44      	ldr	r3, [pc, #272]	; (8002600 <main+0x1f8>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d80b      	bhi.n	800250c <main+0x104>
	  {
		  if (appGetRunPidControllerStatus(&app) == TRUE)
 80024f4:	483e      	ldr	r0, [pc, #248]	; (80025f0 <main+0x1e8>)
 80024f6:	f7fe ffb9 	bl	800146c <appGetRunPidControllerStatus>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d102      	bne.n	8002506 <main+0xfe>
		  {
			  appRunController(&app);
 8002500:	483b      	ldr	r0, [pc, #236]	; (80025f0 <main+0x1e8>)
 8002502:	f7fe fcb1 	bl	8000e68 <appRunController>
		  }
		  controllerInterval = 0;
 8002506:	4b3e      	ldr	r3, [pc, #248]	; (8002600 <main+0x1f8>)
 8002508:	2200      	movs	r2, #0
 800250a:	801a      	strh	r2, [r3, #0]

	  /* ============================================================================= */

	  /****************************** STATE MACHINE START ******************************/

	  switch (stateMachine)
 800250c:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <main+0x1fc>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b05      	cmp	r3, #5
 8002512:	d85e      	bhi.n	80025d2 <main+0x1ca>
 8002514:	a201      	add	r2, pc, #4	; (adr r2, 800251c <main+0x114>)
 8002516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251a:	bf00      	nop
 800251c:	08002535 	.word	0x08002535
 8002520:	08002551 	.word	0x08002551
 8002524:	0800255f 	.word	0x0800255f
 8002528:	0800256d 	.word	0x0800256d
 800252c:	08002593 	.word	0x08002593
 8002530:	080025b1 	.word	0x080025b1
	  {
	  	  case 0:
	  		  if (decodeDataPacketDelay >= DELAY_10_MILISECONDS)
 8002534:	4b34      	ldr	r3, [pc, #208]	; (8002608 <main+0x200>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	2b63      	cmp	r3, #99	; 0x63
 800253a:	d905      	bls.n	8002548 <main+0x140>
	  		  {
	  			appDecodeReceivedData(&app);
 800253c:	482c      	ldr	r0, [pc, #176]	; (80025f0 <main+0x1e8>)
 800253e:	f7fe fd88 	bl	8001052 <appDecodeReceivedData>
	  			decodeDataPacketDelay = 0;
 8002542:	4b31      	ldr	r3, [pc, #196]	; (8002608 <main+0x200>)
 8002544:	2200      	movs	r2, #0
 8002546:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  stateMachine = 1;
 8002548:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <main+0x1fc>)
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
	  		  break;
 800254e:	e044      	b.n	80025da <main+0x1d2>

		  case 1:
			  appExtractCommandAndPayloadFromDecodedData(&app);
 8002550:	4827      	ldr	r0, [pc, #156]	; (80025f0 <main+0x1e8>)
 8002552:	f7fe fd8c 	bl	800106e <appExtractCommandAndPayloadFromDecodedData>
			  stateMachine = 2;
 8002556:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <main+0x1fc>)
 8002558:	2202      	movs	r2, #2
 800255a:	701a      	strb	r2, [r3, #0]
			  break;
 800255c:	e03d      	b.n	80025da <main+0x1d2>

		  case 2:
			  appDecodeExtractedCommand(&app);
 800255e:	4824      	ldr	r0, [pc, #144]	; (80025f0 <main+0x1e8>)
 8002560:	f7fe fd93 	bl	800108a <appDecodeExtractedCommand>
			  stateMachine = 3;
 8002564:	4b27      	ldr	r3, [pc, #156]	; (8002604 <main+0x1fc>)
 8002566:	2203      	movs	r2, #3
 8002568:	701a      	strb	r2, [r3, #0]
			  break;
 800256a:	e036      	b.n	80025da <main+0x1d2>

		  case 3:
			  if (blinkLedDelay >= appGetBlinkDelay(&app))
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <main+0x204>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	461c      	mov	r4, r3
 8002572:	481f      	ldr	r0, [pc, #124]	; (80025f0 <main+0x1e8>)
 8002574:	f7fe fc6c 	bl	8000e50 <appGetBlinkDelay>
 8002578:	4603      	mov	r3, r0
 800257a:	429c      	cmp	r4, r3
 800257c:	d305      	bcc.n	800258a <main+0x182>
			  {
				  appExecuteBlinkLed(&app);
 800257e:	481c      	ldr	r0, [pc, #112]	; (80025f0 <main+0x1e8>)
 8002580:	f7fe fc56 	bl	8000e30 <appExecuteBlinkLed>
				  blinkLedDelay = 0;
 8002584:	4b21      	ldr	r3, [pc, #132]	; (800260c <main+0x204>)
 8002586:	2200      	movs	r2, #0
 8002588:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 4;
 800258a:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <main+0x1fc>)
 800258c:	2204      	movs	r2, #4
 800258e:	701a      	strb	r2, [r3, #0]
			  break;
 8002590:	e023      	b.n	80025da <main+0x1d2>

		  case 4:
			  if (sendDataDelay1 >= DELAY_100_MILISECONDS)
 8002592:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <main+0x208>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800259a:	d305      	bcc.n	80025a8 <main+0x1a0>
			  {
				  appSendData(&app);
 800259c:	4814      	ldr	r0, [pc, #80]	; (80025f0 <main+0x1e8>)
 800259e:	f7fe fd83 	bl	80010a8 <appSendData>
				  sendDataDelay1 = 0;
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <main+0x208>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 5;
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <main+0x1fc>)
 80025aa:	2205      	movs	r2, #5
 80025ac:	701a      	strb	r2, [r3, #0]
			  break;
 80025ae:	e014      	b.n	80025da <main+0x1d2>

		  case 5:
			  if (sendKeepAliveDelay >= DELAY_2000_MILISECONDS)
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <main+0x20c>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d906      	bls.n	80025ca <main+0x1c2>
			  {
				  appSetEnableSendKeepAliveMessage(&app, TRUE);
 80025bc:	2101      	movs	r1, #1
 80025be:	480c      	ldr	r0, [pc, #48]	; (80025f0 <main+0x1e8>)
 80025c0:	f7fe ff71 	bl	80014a6 <appSetEnableSendKeepAliveMessage>
				  sendKeepAliveDelay = 0;
 80025c4:	4b13      	ldr	r3, [pc, #76]	; (8002614 <main+0x20c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 0;
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <main+0x1fc>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
			  break;
 80025d0:	e003      	b.n	80025da <main+0x1d2>

		  default:
			  stateMachine = 0;
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <main+0x1fc>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
			  break;
 80025d8:	bf00      	nop
	  if (samplingInterval >= appGetSamplingInterval(&app))
 80025da:	e755      	b.n	8002488 <main+0x80>
 80025dc:	20000084 	.word	0x20000084
 80025e0:	20000070 	.word	0x20000070
 80025e4:	200000cc 	.word	0x200000cc
 80025e8:	20000110 	.word	0x20000110
 80025ec:	40020000 	.word	0x40020000
 80025f0:	20000164 	.word	0x20000164
 80025f4:	20000154 	.word	0x20000154
 80025f8:	2000015c 	.word	0x2000015c
 80025fc:	20000028 	.word	0x20000028
 8002600:	2000015e 	.word	0x2000015e
 8002604:	20000838 	.word	0x20000838
 8002608:	20000156 	.word	0x20000156
 800260c:	20000158 	.word	0x20000158
 8002610:	2000015a 	.word	0x2000015a
 8002614:	20000160 	.word	0x20000160

08002618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b094      	sub	sp, #80	; 0x50
 800261c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800261e:	f107 031c 	add.w	r3, r7, #28
 8002622:	2234      	movs	r2, #52	; 0x34
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f004 fdb6 	bl	8007198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800262c:	f107 0308 	add.w	r3, r7, #8
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800263c:	2300      	movs	r3, #0
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <SystemClock_Config+0xdc>)
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	4a2b      	ldr	r2, [pc, #172]	; (80026f4 <SystemClock_Config+0xdc>)
 8002646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264a:	6413      	str	r3, [r2, #64]	; 0x40
 800264c:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <SystemClock_Config+0xdc>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002658:	2300      	movs	r3, #0
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <SystemClock_Config+0xe0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a25      	ldr	r2, [pc, #148]	; (80026f8 <SystemClock_Config+0xe0>)
 8002662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <SystemClock_Config+0xe0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002670:	603b      	str	r3, [r7, #0]
 8002672:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002674:	2302      	movs	r3, #2
 8002676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002678:	2301      	movs	r3, #1
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800267c:	2310      	movs	r3, #16
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002680:	2302      	movs	r3, #2
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002684:	2300      	movs	r3, #0
 8002686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002688:	2308      	movs	r3, #8
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800268c:	23b4      	movs	r3, #180	; 0xb4
 800268e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002690:	2302      	movs	r3, #2
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002694:	2302      	movs	r3, #2
 8002696:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002698:	2302      	movs	r3, #2
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	4618      	mov	r0, r3
 80026a2:	f002 fa6f 	bl	8004b84 <HAL_RCC_OscConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80026ac:	f000 f982 	bl	80029b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80026b0:	f001 ff54 	bl	800455c <HAL_PWREx_EnableOverDrive>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80026ba:	f000 f97b 	bl	80029b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026be:	230f      	movs	r3, #15
 80026c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c2:	2302      	movs	r3, #2
 80026c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026d6:	f107 0308 	add.w	r3, r7, #8
 80026da:	2105      	movs	r1, #5
 80026dc:	4618      	mov	r0, r3
 80026de:	f001 ff8d 	bl	80045fc <HAL_RCC_ClockConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80026e8:	f000 f964 	bl	80029b4 <Error_Handler>
  }
}
 80026ec:	bf00      	nop
 80026ee:	3750      	adds	r7, #80	; 0x50
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40007000 	.word	0x40007000

080026fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002702:	463b      	mov	r3, r7
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800270e:	4b21      	ldr	r3, [pc, #132]	; (8002794 <MX_ADC1_Init+0x98>)
 8002710:	4a21      	ldr	r2, [pc, #132]	; (8002798 <MX_ADC1_Init+0x9c>)
 8002712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002714:	4b1f      	ldr	r3, [pc, #124]	; (8002794 <MX_ADC1_Init+0x98>)
 8002716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800271a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <MX_ADC1_Init+0x98>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002722:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <MX_ADC1_Init+0x98>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002728:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <MX_ADC1_Init+0x98>)
 800272a:	2200      	movs	r2, #0
 800272c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800272e:	4b19      	ldr	r3, [pc, #100]	; (8002794 <MX_ADC1_Init+0x98>)
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002736:	4b17      	ldr	r3, [pc, #92]	; (8002794 <MX_ADC1_Init+0x98>)
 8002738:	2200      	movs	r2, #0
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <MX_ADC1_Init+0x98>)
 800273e:	4a17      	ldr	r2, [pc, #92]	; (800279c <MX_ADC1_Init+0xa0>)
 8002740:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <MX_ADC1_Init+0x98>)
 8002744:	2200      	movs	r2, #0
 8002746:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <MX_ADC1_Init+0x98>)
 800274a:	2201      	movs	r2, #1
 800274c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <MX_ADC1_Init+0x98>)
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <MX_ADC1_Init+0x98>)
 8002758:	2201      	movs	r2, #1
 800275a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800275c:	480d      	ldr	r0, [pc, #52]	; (8002794 <MX_ADC1_Init+0x98>)
 800275e:	f000 fe99 	bl	8003494 <HAL_ADC_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002768:	f000 f924 	bl	80029b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800276c:	2301      	movs	r3, #1
 800276e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002770:	2301      	movs	r3, #1
 8002772:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002778:	463b      	mov	r3, r7
 800277a:	4619      	mov	r1, r3
 800277c:	4805      	ldr	r0, [pc, #20]	; (8002794 <MX_ADC1_Init+0x98>)
 800277e:	f001 f86b 	bl	8003858 <HAL_ADC_ConfigChannel>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002788:	f000 f914 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000028 	.word	0x20000028
 8002798:	40012000 	.word	0x40012000
 800279c:	0f000001 	.word	0x0f000001

080027a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80027a6:	463b      	mov	r3, r7
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <MX_DAC_Init+0x4c>)
 80027b0:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <MX_DAC_Init+0x50>)
 80027b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80027b4:	480d      	ldr	r0, [pc, #52]	; (80027ec <MX_DAC_Init+0x4c>)
 80027b6:	f001 fb8e 	bl	8003ed6 <HAL_DAC_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80027c0:	f000 f8f8 	bl	80029b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80027c8:	2302      	movs	r3, #2
 80027ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80027cc:	463b      	mov	r3, r7
 80027ce:	2200      	movs	r2, #0
 80027d0:	4619      	mov	r1, r3
 80027d2:	4806      	ldr	r0, [pc, #24]	; (80027ec <MX_DAC_Init+0x4c>)
 80027d4:	f001 fc18 	bl	8004008 <HAL_DAC_ConfigChannel>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80027de:	f000 f8e9 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000070 	.word	0x20000070
 80027f0:	40007400 	.word	0x40007400

080027f4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027fa:	463b      	mov	r3, r7
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002806:	4b16      	ldr	r3, [pc, #88]	; (8002860 <MX_TIM9_Init+0x6c>)
 8002808:	4a16      	ldr	r2, [pc, #88]	; (8002864 <MX_TIM9_Init+0x70>)
 800280a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <MX_TIM9_Init+0x6c>)
 800280e:	2204      	movs	r2, #4
 8002810:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002812:	4b13      	ldr	r3, [pc, #76]	; (8002860 <MX_TIM9_Init+0x6c>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3665;
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <MX_TIM9_Init+0x6c>)
 800281a:	f640 6251 	movw	r2, #3665	; 0xe51
 800281e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <MX_TIM9_Init+0x6c>)
 8002822:	2200      	movs	r2, #0
 8002824:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <MX_TIM9_Init+0x6c>)
 8002828:	2200      	movs	r2, #0
 800282a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800282c:	480c      	ldr	r0, [pc, #48]	; (8002860 <MX_TIM9_Init+0x6c>)
 800282e:	f002 fc47 	bl	80050c0 <HAL_TIM_Base_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002838:	f000 f8bc 	bl	80029b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800283c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002840:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002842:	463b      	mov	r3, r7
 8002844:	4619      	mov	r1, r3
 8002846:	4806      	ldr	r0, [pc, #24]	; (8002860 <MX_TIM9_Init+0x6c>)
 8002848:	f002 fe02 	bl	8005450 <HAL_TIM_ConfigClockSource>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002852:	f000 f8af 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000084 	.word	0x20000084
 8002864:	40014000 	.word	0x40014000

08002868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800286c:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <MX_USART2_UART_Init+0x4c>)
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <MX_USART2_UART_Init+0x50>)
 8002870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <MX_USART2_UART_Init+0x4c>)
 8002874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <MX_USART2_UART_Init+0x4c>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <MX_USART2_UART_Init+0x4c>)
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <MX_USART2_UART_Init+0x4c>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <MX_USART2_UART_Init+0x4c>)
 800288e:	220c      	movs	r2, #12
 8002890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <MX_USART2_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <MX_USART2_UART_Init+0x4c>)
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800289e:	4805      	ldr	r0, [pc, #20]	; (80028b4 <MX_USART2_UART_Init+0x4c>)
 80028a0:	f003 f814 	bl	80058cc <HAL_UART_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028aa:	f000 f883 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200000cc 	.word	0x200000cc
 80028b8:	40004400 	.word	0x40004400

080028bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <MX_USART3_UART_Init+0x4c>)
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <MX_USART3_UART_Init+0x50>)
 80028c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <MX_USART3_UART_Init+0x4c>)
 80028c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028ce:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <MX_USART3_UART_Init+0x4c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <MX_USART3_UART_Init+0x4c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <MX_USART3_UART_Init+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028e0:	4b09      	ldr	r3, [pc, #36]	; (8002908 <MX_USART3_UART_Init+0x4c>)
 80028e2:	220c      	movs	r2, #12
 80028e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <MX_USART3_UART_Init+0x4c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <MX_USART3_UART_Init+0x4c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028f2:	4805      	ldr	r0, [pc, #20]	; (8002908 <MX_USART3_UART_Init+0x4c>)
 80028f4:	f002 ffea 	bl	80058cc <HAL_UART_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028fe:	f000 f859 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000110 	.word	0x20000110
 800290c:	40004800 	.word	0x40004800

08002910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002916:	f107 030c 	add.w	r3, r7, #12
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <MX_GPIO_Init+0x98>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <MX_GPIO_Init+0x98>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <MX_GPIO_Init+0x98>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <MX_GPIO_Init+0x98>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <MX_GPIO_Init+0x98>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <MX_GPIO_Init+0x98>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800295e:	2200      	movs	r2, #0
 8002960:	2120      	movs	r1, #32
 8002962:	4812      	ldr	r0, [pc, #72]	; (80029ac <MX_GPIO_Init+0x9c>)
 8002964:	f001 fdc6 	bl	80044f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8002968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800296c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	4619      	mov	r1, r3
 800297c:	480c      	ldr	r0, [pc, #48]	; (80029b0 <MX_GPIO_Init+0xa0>)
 800297e:	f001 fc25 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002982:	2320      	movs	r3, #32
 8002984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002986:	2301      	movs	r3, #1
 8002988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	4619      	mov	r1, r3
 8002998:	4804      	ldr	r0, [pc, #16]	; (80029ac <MX_GPIO_Init+0x9c>)
 800299a:	f001 fc17 	bl	80041cc <HAL_GPIO_Init>

}
 800299e:	bf00      	nop
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020800 	.word	0x40020800

080029b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b8:	b672      	cpsid	i
}
 80029ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029bc:	e7fe      	b.n	80029bc <Error_Handler+0x8>
	...

080029c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_MspInit+0x4c>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4a0f      	ldr	r2, [pc, #60]	; (8002a0c <HAL_MspInit+0x4c>)
 80029d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d4:	6453      	str	r3, [r2, #68]	; 0x44
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HAL_MspInit+0x4c>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_MspInit+0x4c>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <HAL_MspInit+0x4c>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	; 0x40
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_MspInit+0x4c>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800

08002a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <HAL_ADC_MspInit+0x7c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d127      	bne.n	8002a82 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_ADC_MspInit+0x80>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <HAL_ADC_MspInit+0x80>)
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a40:	6453      	str	r3, [r2, #68]	; 0x44
 8002a42:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <HAL_ADC_MspInit+0x80>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <HAL_ADC_MspInit+0x80>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <HAL_ADC_MspInit+0x80>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <HAL_ADC_MspInit+0x80>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CURRENT_SENSE_Pin;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4805      	ldr	r0, [pc, #20]	; (8002a94 <HAL_ADC_MspInit+0x84>)
 8002a7e:	f001 fba5 	bl	80041cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	; 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40012000 	.word	0x40012000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020000 	.word	0x40020000

08002a98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <HAL_DAC_MspInit+0x7c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d127      	bne.n	8002b0a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_DAC_MspInit+0x80>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <HAL_DAC_MspInit+0x80>)
 8002ac4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <HAL_DAC_MspInit+0x80>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <HAL_DAC_MspInit+0x80>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <HAL_DAC_MspInit+0x80>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <HAL_DAC_MspInit+0x80>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = CURRENT_CTRL_Pin;
 8002af2:	2310      	movs	r3, #16
 8002af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af6:	2303      	movs	r3, #3
 8002af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	4619      	mov	r1, r3
 8002b04:	4805      	ldr	r0, [pc, #20]	; (8002b1c <HAL_DAC_MspInit+0x84>)
 8002b06:	f001 fb61 	bl	80041cc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002b0a:	bf00      	nop
 8002b0c:	3728      	adds	r7, #40	; 0x28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40007400 	.word	0x40007400
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020000 	.word	0x40020000

08002b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0e      	ldr	r2, [pc, #56]	; (8002b68 <HAL_TIM_Base_MspInit+0x48>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d115      	bne.n	8002b5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <HAL_TIM_Base_MspInit+0x4c>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <HAL_TIM_Base_MspInit+0x4c>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b40:	6453      	str	r3, [r2, #68]	; 0x44
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <HAL_TIM_Base_MspInit+0x4c>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2100      	movs	r1, #0
 8002b52:	2018      	movs	r0, #24
 8002b54:	f001 f989 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002b58:	2018      	movs	r0, #24
 8002b5a:	f001 f9a2 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40014000 	.word	0x40014000
 8002b6c:	40023800 	.word	0x40023800

08002b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	; 0x30
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 031c 	add.w	r3, r7, #28
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a36      	ldr	r2, [pc, #216]	; (8002c68 <HAL_UART_MspInit+0xf8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d134      	bne.n	8002bfc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	4b35      	ldr	r3, [pc, #212]	; (8002c6c <HAL_UART_MspInit+0xfc>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	4a34      	ldr	r2, [pc, #208]	; (8002c6c <HAL_UART_MspInit+0xfc>)
 8002b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba2:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <HAL_UART_MspInit+0xfc>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	4b2e      	ldr	r3, [pc, #184]	; (8002c6c <HAL_UART_MspInit+0xfc>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	4a2d      	ldr	r2, [pc, #180]	; (8002c6c <HAL_UART_MspInit+0xfc>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bbe:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <HAL_UART_MspInit+0xfc>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bca:	230c      	movs	r3, #12
 8002bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bda:	2307      	movs	r3, #7
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	4619      	mov	r1, r3
 8002be4:	4822      	ldr	r0, [pc, #136]	; (8002c70 <HAL_UART_MspInit+0x100>)
 8002be6:	f001 faf1 	bl	80041cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2100      	movs	r1, #0
 8002bee:	2026      	movs	r0, #38	; 0x26
 8002bf0:	f001 f93b 	bl	8003e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bf4:	2026      	movs	r0, #38	; 0x26
 8002bf6:	f001 f954 	bl	8003ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bfa:	e031      	b.n	8002c60 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <HAL_UART_MspInit+0x104>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d12c      	bne.n	8002c60 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_UART_MspInit+0xfc>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_UART_MspInit+0xfc>)
 8002c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_UART_MspInit+0xfc>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <HAL_UART_MspInit+0xfc>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a10      	ldr	r2, [pc, #64]	; (8002c6c <HAL_UART_MspInit+0xfc>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <HAL_UART_MspInit+0xfc>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c44:	2302      	movs	r3, #2
 8002c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c50:	2307      	movs	r3, #7
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c54:	f107 031c 	add.w	r3, r7, #28
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4807      	ldr	r0, [pc, #28]	; (8002c78 <HAL_UART_MspInit+0x108>)
 8002c5c:	f001 fab6 	bl	80041cc <HAL_GPIO_Init>
}
 8002c60:	bf00      	nop
 8002c62:	3730      	adds	r7, #48	; 0x30
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40004400 	.word	0x40004400
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40004800 	.word	0x40004800
 8002c78:	40020800 	.word	0x40020800

08002c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c80:	e7fe      	b.n	8002c80 <NMI_Handler+0x4>

08002c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c86:	e7fe      	b.n	8002c86 <HardFault_Handler+0x4>

08002c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <MemManage_Handler+0x4>

08002c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c92:	e7fe      	b.n	8002c92 <BusFault_Handler+0x4>

08002c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <UsageFault_Handler+0x4>

08002c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc8:	f000 fbc4 	bl	8003454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002cd6:	f002 fab3 	bl	8005240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000084 	.word	0x20000084

08002ce4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <USART2_IRQHandler+0x10>)
 8002cea:	f002 feff 	bl	8005aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200000cc 	.word	0x200000cc

08002cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <SystemInit+0x20>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <SystemInit+0x20>)
 8002d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d20:	480d      	ldr	r0, [pc, #52]	; (8002d58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d22:	490e      	ldr	r1, [pc, #56]	; (8002d5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d24:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d28:	e002      	b.n	8002d30 <LoopCopyDataInit>

08002d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d2e:	3304      	adds	r3, #4

08002d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d34:	d3f9      	bcc.n	8002d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d36:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d38:	4c0b      	ldr	r4, [pc, #44]	; (8002d68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d3c:	e001      	b.n	8002d42 <LoopFillZerobss>

08002d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d40:	3204      	adds	r2, #4

08002d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d44:	d3fb      	bcc.n	8002d3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d46:	f7ff ffd7 	bl	8002cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d4a:	f004 f9f3 	bl	8007134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d4e:	f7ff fb5b 	bl	8002408 <main>
  bx  lr    
 8002d52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002d60:	080072e8 	.word	0x080072e8
  ldr r2, =_sbss
 8002d64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002d68:	20000840 	.word	0x20000840

08002d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d6c:	e7fe      	b.n	8002d6c <ADC_IRQHandler>

08002d6e <genCrc>:

/**
  * Calcula o crc8 entre o range passado como parametro.
  */
uint8_t genCrc(uint8_t buffer[], uint16_t qtd_de_bytes_no_pacote)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	73bb      	strb	r3, [r7, #14]
 8002d86:	e00d      	b.n	8002da4 <genCrc+0x36>
    {
      crc = calcCrc8(crc, buffer[i]);
 8002d88:	7bbb      	ldrb	r3, [r7, #14]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	781a      	ldrb	r2, [r3, #0]
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 f80f 	bl	8002db8 <calcCrc8>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 8002d9e:	7bbb      	ldrb	r3, [r7, #14]
 8002da0:	3301      	adds	r3, #1
 8002da2:	73bb      	strb	r3, [r7, #14]
 8002da4:	7bbb      	ldrb	r3, [r7, #14]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	887a      	ldrh	r2, [r7, #2]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d8ec      	bhi.n	8002d88 <genCrc+0x1a>
    }

  return crc;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <calcCrc8>:

/**
  * Funcao que calcula o CRC8
  */
static uint8_t calcCrc8(uint8_t crc3, uint8_t b)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	460a      	mov	r2, r1
 8002dc2:	71fb      	strb	r3, [r7, #7]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	73fb      	strb	r3, [r7, #15]
    pos = (((crc3 & 0xff) ^ b) & 0xff);
 8002dcc:	79fa      	ldrb	r2, [r7, #7]
 8002dce:	79bb      	ldrb	r3, [r7, #6]
 8002dd0:	4053      	eors	r3, r2
 8002dd2:	73fb      	strb	r3, [r7, #15]

    return ((crc3) >> 8) ^ table[pos];
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	121b      	asrs	r3, r3, #8
 8002dd8:	b25a      	sxtb	r2, r3
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	4905      	ldr	r1, [pc, #20]	; (8002df4 <calcCrc8+0x3c>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	b25b      	sxtb	r3, r3
 8002de2:	4053      	eors	r3, r2
 8002de4:	b25b      	sxtb	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	080071d8 	.word	0x080071d8

08002df8 <dataPacketRxInit>:
 */

#include "dataPacketRx.h"

void dataPacketRxInit(DataPacketRx *dataPacketRx, uint8_t start_1, uint8_t start_2)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
 8002e04:	4613      	mov	r3, r2
 8002e06:	70bb      	strb	r3, [r7, #2]
	dataPacketRx->start_1 = start_1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	701a      	strb	r2, [r3, #0]
	dataPacketRx->start_2 = start_2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	78ba      	ldrb	r2, [r7, #2]
 8002e12:	705a      	strb	r2, [r3, #1]
	dataPacketRx->command = 0x00;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	709a      	strb	r2, [r3, #2]
	dataPacketRx->payloadDataLength = 0x00;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	70da      	strb	r2, [r3, #3]
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	2232      	movs	r2, #50	; 0x32
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f004 f9b5 	bl	8007198 <memset>
	dataPacketRx->crc8 = 0x00;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3337      	adds	r3, #55	; 0x37
 8002e3a:	2237      	movs	r2, #55	; 0x37
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f004 f9aa 	bl	8007198 <memset>
	dataPacketRx->dataPacketLength = 0x00;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketRx->currentRxByteIndex = 0;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	dataPacketRx->containsStarterBytes = FALSE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	dataPacketRx->starterByteIndex = 0;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <dataPacketRxAppend>:

void dataPacketRxAppend(DataPacketRx *dataPacketRx, uint8_t newByte)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacket[dataPacketRx->currentRxByteIndex] = newByte;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002e86:	461a      	mov	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketRx->currentRxByteIndex++;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketLength++;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	if (dataPacketRx->currentRxByteIndex > QTY_PACKET_RX_BYTES)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002eb8:	2b37      	cmp	r3, #55	; 0x37
 8002eba:	d90a      	bls.n	8002ed2 <dataPacketRxAppend+0x5e>
	{
		dataPacketRxClear(dataPacketRx);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f8cf 	bl	8003060 <dataPacketRxClear>
		dataPacketRx->currentRxByteIndex = 0;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		dataPacketRx->dataPacketLength = 0;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	}
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <dataPacketRxDecode>:

void dataPacketRxDecode(DataPacketRx *dataPacketRx)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
	if (dataPacketRx->containsStarterBytes == TRUE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d17e      	bne.n	8002fea <dataPacketRxDecode+0x110>
	{
		dataPacketRxSetCommand(dataPacketRx, dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 2]);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8002ef2:	3302      	adds	r3, #2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002efc:	4619      	mov	r1, r3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8e2 	bl	80030c8 <dataPacketRxSetCommand>
		dataPacketRx->payloadDataLength = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 3];
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8002f0a:	3303      	adds	r3, #3
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	70da      	strb	r2, [r3, #3]

		if (dataPacketRx->payloadDataLength == 0)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	78db      	ldrb	r3, [r3, #3]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d126      	bne.n	8002f6e <dataPacketRxDecode+0x94>
		{
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 4];
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8002f26:	3304      	adds	r3, #4
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002f30:	733b      	strb	r3, [r7, #12]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, 4);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3337      	adds	r3, #55	; 0x37
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	f8b2 2074 	ldrh.w	r2, [r2, #116]	; 0x74
 8002f3c:	4413      	add	r3, r2
 8002f3e:	2104      	movs	r1, #4
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff14 	bl	8002d6e <genCrc>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

			if (dataPacketRx->crc8 == receivedCrc8)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002f56:	7b3a      	ldrb	r2, [r7, #12]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d17d      	bne.n	8003058 <dataPacketRxDecode+0x17e>
			{
				dataPacketRx->currentRxByteIndex = 0;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
			{
				dataPacketRxClear(dataPacketRx);
			}
		}
	}
}
 8002f6c:	e074      	b.n	8003058 <dataPacketRxDecode+0x17e>
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + dataPacketRx->payloadDataLength + 4];
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8002f74:	461a      	mov	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	78db      	ldrb	r3, [r3, #3]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002f86:	737b      	strb	r3, [r7, #13]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, dataPacketRx->payloadDataLength + 4);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3337      	adds	r3, #55	; 0x37
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	f8b2 2074 	ldrh.w	r2, [r2, #116]	; 0x74
 8002f92:	441a      	add	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	78db      	ldrb	r3, [r3, #3]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	f7ff fee4 	bl	8002d6e <genCrc>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	461a      	mov	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			if (dataPacketRx->crc8 == receivedCrc8)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002fb6:	7b7a      	ldrb	r2, [r7, #13]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d14d      	bne.n	8003058 <dataPacketRxDecode+0x17e>
				dataPacketRxSetPayloadData(dataPacketRx, dataPacketRx->dataPacket + dataPacketRx->starterByteIndex + 4, dataPacketRx->payloadDataLength);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8002fc8:	3304      	adds	r3, #4
 8002fca:	18d1      	adds	r1, r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	78db      	ldrb	r3, [r3, #3]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f89e 	bl	8003114 <dataPacketRxSetPayloadData>
				dataPacketRx->currentRxByteIndex = 0;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
 8002fe8:	e036      	b.n	8003058 <dataPacketRxDecode+0x17e>
		if (dataPacketRx->dataPacketLength >= MIN_PACKET_RX_BYTES)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d931      	bls.n	8003058 <dataPacketRxDecode+0x17e>
			uint16_t index = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	81fb      	strh	r3, [r7, #14]
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	81fb      	strh	r3, [r7, #14]
 8002ffc:	e01e      	b.n	800303c <dataPacketRxDecode+0x162>
				if ((dataPacketRx->dataPacket[index] == dataPacketRx->start_1) && (dataPacketRx->dataPacket[index+1] == dataPacketRx->start_2))
 8002ffe:	89fb      	ldrh	r3, [r7, #14]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d112      	bne.n	8003036 <dataPacketRxDecode+0x15c>
 8003010:	89fb      	ldrh	r3, [r7, #14]
 8003012:	3301      	adds	r3, #1
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	785b      	ldrb	r3, [r3, #1]
 8003020:	429a      	cmp	r2, r3
 8003022:	d108      	bne.n	8003036 <dataPacketRxDecode+0x15c>
					dataPacketRx->containsStarterBytes = TRUE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
					dataPacketRx->starterByteIndex = index;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	89fa      	ldrh	r2, [r7, #14]
 8003030:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
					break;
 8003034:	e008      	b.n	8003048 <dataPacketRxDecode+0x16e>
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 8003036:	89fb      	ldrh	r3, [r7, #14]
 8003038:	3301      	adds	r3, #1
 800303a:	81fb      	strh	r3, [r7, #14]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8003042:	89fa      	ldrh	r2, [r7, #14]
 8003044:	429a      	cmp	r2, r3
 8003046:	d3da      	bcc.n	8002ffe <dataPacketRxDecode+0x124>
			if (dataPacketRx->containsStarterBytes == FALSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <dataPacketRxDecode+0x17e>
				dataPacketRxClear(dataPacketRx);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f804 	bl	8003060 <dataPacketRxClear>
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <dataPacketRxClear>:

void dataPacketRxClear(DataPacketRx *dataPacketRx)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	dataPacketRx->containsStarterBytes = FALSE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	dataPacketRx->currentRxByteIndex = 0;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketLength = 0;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketRx->payloadDataLength = 0;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	70da      	strb	r2, [r3, #3]
	dataPacketRx->command = 0x00;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	709a      	strb	r2, [r3, #2]
	dataPacketRx->crc8 = 0x00;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketRx->starterByteIndex = 0;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	2232      	movs	r2, #50	; 0x32
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f004 f873 	bl	8007198 <memset>
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3337      	adds	r3, #55	; 0x37
 80030b6:	2237      	movs	r2, #55	; 0x37
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f004 f86c 	bl	8007198 <memset>
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <dataPacketRxSetCommand>:
	dataPacketRx->crc8 = 0x00;
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
}

void dataPacketRxSetCommand(DataPacketRx *dataPacketRx, uint8_t command)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	if ((command < 0x01) || (command > 0xFE))
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <dataPacketRxSetCommand+0x28>
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	2bff      	cmp	r3, #255	; 0xff
 80030e6:	d003      	beq.n	80030f0 <dataPacketRxSetCommand+0x28>
	{
		return;
	}

	dataPacketRx->command = command;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	709a      	strb	r2, [r3, #2]
 80030ee:	e000      	b.n	80030f2 <dataPacketRxSetCommand+0x2a>
		return;
 80030f0:	bf00      	nop
}
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <dataPacketRxGetCommand>:

uint8_t dataPacketRxGetCommand(DataPacketRx *dataPacketRx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	return dataPacketRx->command;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	789b      	ldrb	r3, [r3, #2]
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <dataPacketRxSetPayloadData>:

void dataPacketRxSetPayloadData(DataPacketRx *dataPacketRx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	4613      	mov	r3, r2
 8003120:	71fb      	strb	r3, [r7, #7]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	memcpy(dataPacketRx->payloadData, payloadData, payloadDataLength);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3304      	adds	r3, #4
 800312e:	79fa      	ldrb	r2, [r7, #7]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	4618      	mov	r0, r3
 8003134:	f004 f822 	bl	800717c <memcpy>
	dataPacketRx->payloadDataLength = payloadDataLength;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	79fa      	ldrb	r2, [r7, #7]
 800313c:	70da      	strb	r2, [r3, #3]
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <dataPacketRxGetPayloadData>:

uint8_t *dataPacketRxGetPayloadData(DataPacketRx *dataPacketRx)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadData;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3304      	adds	r3, #4
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <dataPacketRxGetPayloadDataLength>:

uint8_t dataPacketRxGetPayloadDataLength(DataPacketRx *dataPacketRx)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadDataLength;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	78db      	ldrb	r3, [r3, #3]
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <dataPacketRxGetDataPacketStatus>:
{
	return dataPacketRx->dataPacketLength;
}

DataPacketRxStatus dataPacketRxGetDataPacketStatus(DataPacketRx *dataPacketRx)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
	return dataPacketRx->dataPacketRxStatus;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <dataPacketTxInit>:
 */

#include "dataPacketTx.h"

void dataPacketTxInit(DataPacketTx *dataPacketTx, uint8_t start_1, uint8_t start_2)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	70fb      	strb	r3, [r7, #3]
 800319c:	4613      	mov	r3, r2
 800319e:	70bb      	strb	r3, [r7, #2]
	dataPacketTx->start_1 = start_1;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	701a      	strb	r2, [r3, #0]
	dataPacketTx->start_2 = start_2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	78ba      	ldrb	r2, [r7, #2]
 80031aa:	705a      	strb	r2, [r3, #1]
	dataPacketTx->command = 0x00;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	709a      	strb	r2, [r3, #2]
	dataPacketTx->payloadDataLength = 0x00;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	70da      	strb	r2, [r3, #3]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	2232      	movs	r2, #50	; 0x32
 80031be:	2100      	movs	r1, #0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 ffe9 	bl	8007198 <memset>
	dataPacketTx->crc8 = 0x00;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3337      	adds	r3, #55	; 0x37
 80031d2:	2237      	movs	r2, #55	; 0x37
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f003 ffde 	bl	8007198 <memset>
	dataPacketTx->dataPacketLength = 0x00;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <dataPacketTxMount>:

void dataPacketTxMount(DataPacketTx *dataPacketTx)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacket[0] = dataPacketTx->start_1;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	781a      	ldrb	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketTx->dataPacket[1] = dataPacketTx->start_2;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	785a      	ldrb	r2, [r3, #1]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dataPacketTx->dataPacket[2] = dataPacketTx->command;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	789a      	ldrb	r2, [r3, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dataPacketTx->dataPacket[3] = dataPacketTx->payloadDataLength;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	78da      	ldrb	r2, [r3, #3]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	memcpy(dataPacketTx->dataPacket + 4, dataPacketTx->payloadData, dataPacketTx->payloadDataLength);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3337      	adds	r3, #55	; 0x37
 8003228:	1d18      	adds	r0, r3, #4
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	1d19      	adds	r1, r3, #4
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	78db      	ldrb	r3, [r3, #3]
 8003232:	461a      	mov	r2, r3
 8003234:	f003 ffa2 	bl	800717c <memcpy>
	dataPacketTx->dataPacketLength = dataPacketTx->payloadDataLength + 4 + 1;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	78db      	ldrb	r3, [r3, #3]
 800323c:	b29b      	uxth	r3, r3
 800323e:	3305      	adds	r3, #5
 8003240:	b29a      	uxth	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = genCrc(dataPacketTx->dataPacket, dataPacketTx->dataPacketLength - 1);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f103 0237 	add.w	r2, r3, #55	; 0x37
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8003254:	3b01      	subs	r3, #1
 8003256:	b29b      	uxth	r3, r3
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f7ff fd87 	bl	8002d6e <genCrc>
 8003260:	4603      	mov	r3, r0
 8003262:	461a      	mov	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->dataPacket[dataPacketTx->payloadDataLength + 4] = dataPacketTx->crc8;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	78db      	ldrb	r3, [r3, #3]
 800326e:	3304      	adds	r3, #4
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	f892 1036 	ldrb.w	r1, [r2, #54]	; 0x36
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	460a      	mov	r2, r1
 800327c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketTx->dataPacketTxStatus = VALID_TX_DATA_PACKET;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <dataPacketTxUartSend>:

void dataPacketTxUartSend(DataPacketTx *dataPacketTx, UART_HandleTypeDef huart)
{
 8003290:	b084      	sub	sp, #16
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	f107 0014 	add.w	r0, r7, #20
 800329e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (dataPacketTx->dataPacketTxStatus == VALID_TX_DATA_PACKET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d10b      	bne.n	80032c4 <dataPacketTxUartSend+0x34>
	{
		HAL_UART_Transmit(&huart, dataPacketTx->dataPacket, dataPacketTx->dataPacketLength, HAL_MAX_DELAY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f103 0137 	add.w	r1, r3, #55	; 0x37
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 80032b8:	f107 0014 	add.w	r0, r7, #20
 80032bc:	f04f 33ff 	mov.w	r3, #4294967295
 80032c0:	f002 fb51 	bl	8005966 <HAL_UART_Transmit>
	}
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032ce:	b004      	add	sp, #16
 80032d0:	4770      	bx	lr

080032d2 <dataPacketTxClear>:

void dataPacketTxClear(DataPacketTx *dataPacketTx)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	dataPacketTx->dataPacketLength = 0;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = 0x00;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->command = 0x00;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3337      	adds	r3, #55	; 0x37
 80032fc:	2237      	movs	r2, #55	; 0x37
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f003 ff49 	bl	8007198 <memset>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <dataPacketTxPayloadDataClear>:

void dataPacketTxPayloadDataClear(DataPacketTx *dataPacketTx)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	dataPacketTx->dataPacketLength = 0;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = 0x00;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->command = 0x00;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3304      	adds	r3, #4
 8003338:	2232      	movs	r2, #50	; 0x32
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f003 ff2b 	bl	8007198 <memset>
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <dataPacketTxSetCommand>:

void dataPacketTxSetCommand(DataPacketTx *dataPacketTx, uint8_t command)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	460b      	mov	r3, r1
 8003354:	70fb      	strb	r3, [r7, #3]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	if ((command < 0x01) || (command > 0xFE))
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d006      	beq.n	8003372 <dataPacketTxSetCommand+0x28>
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	2bff      	cmp	r3, #255	; 0xff
 8003368:	d003      	beq.n	8003372 <dataPacketTxSetCommand+0x28>
	{
		return;
	}

	dataPacketTx->command = command;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	709a      	strb	r2, [r3, #2]
 8003370:	e000      	b.n	8003374 <dataPacketTxSetCommand+0x2a>
		return;
 8003372:	bf00      	nop
}
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <dataPacketTxSetPayloadData>:
{
	return dataPacketTx->command;
}

void dataPacketTxSetPayloadData(DataPacketTx *dataPacketTx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	4613      	mov	r3, r2
 800338a:	71fb      	strb	r3, [r7, #7]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	memcpy(dataPacketTx->payloadData, payloadData, payloadDataLength);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3304      	adds	r3, #4
 8003398:	79fa      	ldrb	r2, [r7, #7]
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	4618      	mov	r0, r3
 800339e:	f003 feed 	bl	800717c <memcpy>
	dataPacketTx->payloadDataLength = payloadDataLength;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	79fa      	ldrb	r2, [r7, #7]
 80033a6:	70da      	strb	r2, [r3, #3]
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033b4:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <HAL_Init+0x40>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a0d      	ldr	r2, [pc, #52]	; (80033f0 <HAL_Init+0x40>)
 80033ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_Init+0x40>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <HAL_Init+0x40>)
 80033c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_Init+0x40>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a07      	ldr	r2, [pc, #28]	; (80033f0 <HAL_Init+0x40>)
 80033d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033d8:	2003      	movs	r0, #3
 80033da:	f000 fd3b 	bl	8003e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033de:	200f      	movs	r0, #15
 80033e0:	f000 f808 	bl	80033f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033e4:	f7ff faec 	bl	80029c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023c00 	.word	0x40023c00

080033f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033fc:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_InitTick+0x54>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_InitTick+0x58>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	4619      	mov	r1, r3
 8003406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800340a:	fbb3 f3f1 	udiv	r3, r3, r1
 800340e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fd53 	bl	8003ebe <HAL_SYSTICK_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e00e      	b.n	8003440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b0f      	cmp	r3, #15
 8003426:	d80a      	bhi.n	800343e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003428:	2200      	movs	r2, #0
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	f000 fd1b 	bl	8003e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003434:	4a06      	ldr	r2, [pc, #24]	; (8003450 <HAL_InitTick+0x5c>)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000000 	.word	0x20000000
 800344c:	20000008 	.word	0x20000008
 8003450:	20000004 	.word	0x20000004

08003454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_IncTick+0x20>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_IncTick+0x24>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4413      	add	r3, r2
 8003464:	4a04      	ldr	r2, [pc, #16]	; (8003478 <HAL_IncTick+0x24>)
 8003466:	6013      	str	r3, [r2, #0]
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20000008 	.word	0x20000008
 8003478:	2000083c 	.word	0x2000083c

0800347c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return uwTick;
 8003480:	4b03      	ldr	r3, [pc, #12]	; (8003490 <HAL_GetTick+0x14>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	2000083c 	.word	0x2000083c

08003494 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e033      	b.n	8003512 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff faac 	bl	8002a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d118      	bne.n	8003504 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034da:	f023 0302 	bic.w	r3, r3, #2
 80034de:	f043 0202 	orr.w	r2, r3, #2
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fae8 	bl	8003abc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f023 0303 	bic.w	r3, r3, #3
 80034fa:	f043 0201 	orr.w	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	641a      	str	r2, [r3, #64]	; 0x40
 8003502:	e001      	b.n	8003508 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003510:	7bfb      	ldrb	r3, [r7, #15]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_ADC_Start+0x1a>
 8003532:	2302      	movs	r3, #2
 8003534:	e0b2      	b.n	800369c <HAL_ADC_Start+0x180>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d018      	beq.n	800357e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800355c:	4b52      	ldr	r3, [pc, #328]	; (80036a8 <HAL_ADC_Start+0x18c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a52      	ldr	r2, [pc, #328]	; (80036ac <HAL_ADC_Start+0x190>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	0c9a      	lsrs	r2, r3, #18
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003570:	e002      	b.n	8003578 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3b01      	subs	r3, #1
 8003576:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f9      	bne.n	8003572 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d17a      	bne.n	8003682 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ca:	d106      	bne.n	80035da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	f023 0206 	bic.w	r2, r3, #6
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	645a      	str	r2, [r3, #68]	; 0x44
 80035d8:	e002      	b.n	80035e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035e8:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <HAL_ADC_Start+0x194>)
 80035ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80035f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d12a      	bne.n	8003658 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a2b      	ldr	r2, [pc, #172]	; (80036b4 <HAL_ADC_Start+0x198>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d015      	beq.n	8003638 <HAL_ADC_Start+0x11c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a29      	ldr	r2, [pc, #164]	; (80036b8 <HAL_ADC_Start+0x19c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d105      	bne.n	8003622 <HAL_ADC_Start+0x106>
 8003616:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <HAL_ADC_Start+0x194>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a25      	ldr	r2, [pc, #148]	; (80036bc <HAL_ADC_Start+0x1a0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d136      	bne.n	800369a <HAL_ADC_Start+0x17e>
 800362c:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_ADC_Start+0x194>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b00      	cmp	r3, #0
 8003636:	d130      	bne.n	800369a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d129      	bne.n	800369a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003654:	609a      	str	r2, [r3, #8]
 8003656:	e020      	b.n	800369a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <HAL_ADC_Start+0x198>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d11b      	bne.n	800369a <HAL_ADC_Start+0x17e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d114      	bne.n	800369a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	e00b      	b.n	800369a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0210 	orr.w	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f043 0201 	orr.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	20000000 	.word	0x20000000
 80036ac:	431bde83 	.word	0x431bde83
 80036b0:	40012300 	.word	0x40012300
 80036b4:	40012000 	.word	0x40012000
 80036b8:	40012100 	.word	0x40012100
 80036bc:	40012200 	.word	0x40012200

080036c0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_Stop+0x16>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e021      	b.n	800371a <HAL_ADC_Stop+0x5a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d109      	bne.n	8003710 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	f043 0201 	orr.w	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003742:	d113      	bne.n	800376c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800374e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003752:	d10b      	bne.n	800376c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e063      	b.n	8003834 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800376c:	f7ff fe86 	bl	800347c <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003772:	e021      	b.n	80037b8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d01d      	beq.n	80037b8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_ADC_PollForConversion+0x6c>
 8003782:	f7ff fe7b 	bl	800347c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d212      	bcs.n	80037b8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b02      	cmp	r3, #2
 800379e:	d00b      	beq.n	80037b8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f043 0204 	orr.w	r2, r3, #4
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e03d      	b.n	8003834 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d1d6      	bne.n	8003774 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f06f 0212 	mvn.w	r2, #18
 80037ce:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d123      	bne.n	8003832 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d11f      	bne.n	8003832 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d006      	beq.n	800380e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800380a:	2b00      	cmp	r3, #0
 800380c:	d111      	bne.n	8003832 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d105      	bne.n	8003832 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f043 0201 	orr.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x1c>
 8003870:	2302      	movs	r3, #2
 8003872:	e113      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x244>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b09      	cmp	r3, #9
 8003882:	d925      	bls.n	80038d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68d9      	ldr	r1, [r3, #12]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	4613      	mov	r3, r2
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	4413      	add	r3, r2
 8003898:	3b1e      	subs	r3, #30
 800389a:	2207      	movs	r2, #7
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43da      	mvns	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	400a      	ands	r2, r1
 80038a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68d9      	ldr	r1, [r3, #12]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	4618      	mov	r0, r3
 80038bc:	4603      	mov	r3, r0
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4403      	add	r3, r0
 80038c2:	3b1e      	subs	r3, #30
 80038c4:	409a      	lsls	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	e022      	b.n	8003916 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6919      	ldr	r1, [r3, #16]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	4613      	mov	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	2207      	movs	r2, #7
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	400a      	ands	r2, r1
 80038f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6919      	ldr	r1, [r3, #16]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	b29b      	uxth	r3, r3
 8003904:	4618      	mov	r0, r3
 8003906:	4603      	mov	r3, r0
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	4403      	add	r3, r0
 800390c:	409a      	lsls	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b06      	cmp	r3, #6
 800391c:	d824      	bhi.n	8003968 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	3b05      	subs	r3, #5
 8003930:	221f      	movs	r2, #31
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43da      	mvns	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	400a      	ands	r2, r1
 800393e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	b29b      	uxth	r3, r3
 800394c:	4618      	mov	r0, r3
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	3b05      	subs	r3, #5
 800395a:	fa00 f203 	lsl.w	r2, r0, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	635a      	str	r2, [r3, #52]	; 0x34
 8003966:	e04c      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b0c      	cmp	r3, #12
 800396e:	d824      	bhi.n	80039ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	3b23      	subs	r3, #35	; 0x23
 8003982:	221f      	movs	r2, #31
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43da      	mvns	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	400a      	ands	r2, r1
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	4618      	mov	r0, r3
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	3b23      	subs	r3, #35	; 0x23
 80039ac:	fa00 f203 	lsl.w	r2, r0, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
 80039b8:	e023      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	3b41      	subs	r3, #65	; 0x41
 80039cc:	221f      	movs	r2, #31
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43da      	mvns	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	400a      	ands	r2, r1
 80039da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	4618      	mov	r0, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	3b41      	subs	r3, #65	; 0x41
 80039f6:	fa00 f203 	lsl.w	r2, r0, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a02:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <HAL_ADC_ConfigChannel+0x250>)
 8003a04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a28      	ldr	r2, [pc, #160]	; (8003aac <HAL_ADC_ConfigChannel+0x254>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d10f      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x1d8>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b12      	cmp	r3, #18
 8003a16:	d10b      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1d      	ldr	r2, [pc, #116]	; (8003aac <HAL_ADC_ConfigChannel+0x254>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d12b      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x23a>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <HAL_ADC_ConfigChannel+0x258>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <HAL_ADC_ConfigChannel+0x1f4>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b11      	cmp	r3, #17
 8003a4a:	d122      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a11      	ldr	r2, [pc, #68]	; (8003ab0 <HAL_ADC_ConfigChannel+0x258>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d111      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <HAL_ADC_ConfigChannel+0x25c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a11      	ldr	r2, [pc, #68]	; (8003ab8 <HAL_ADC_ConfigChannel+0x260>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	0c9a      	lsrs	r2, r3, #18
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a84:	e002      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f9      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	40012300 	.word	0x40012300
 8003aac:	40012000 	.word	0x40012000
 8003ab0:	10000012 	.word	0x10000012
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	431bde83 	.word	0x431bde83

08003abc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ac4:	4b79      	ldr	r3, [pc, #484]	; (8003cac <ADC_Init+0x1f0>)
 8003ac6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6859      	ldr	r1, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	021a      	lsls	r2, r3, #8
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6859      	ldr	r1, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6899      	ldr	r1, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <ADC_Init+0x1f4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d022      	beq.n	8003b9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6899      	ldr	r1, [r3, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6899      	ldr	r1, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	e00f      	b.n	8003bba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0202 	bic.w	r2, r2, #2
 8003bc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6899      	ldr	r1, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	7e1b      	ldrb	r3, [r3, #24]
 8003bd4:	005a      	lsls	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01b      	beq.n	8003c20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	3b01      	subs	r3, #1
 8003c14:	035a      	lsls	r2, r3, #13
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	e007      	b.n	8003c30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	051a      	lsls	r2, r3, #20
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6899      	ldr	r1, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c72:	025a      	lsls	r2, r3, #9
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6899      	ldr	r1, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	029a      	lsls	r2, r3, #10
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	609a      	str	r2, [r3, #8]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	40012300 	.word	0x40012300
 8003cb0:	0f000001 	.word	0x0f000001

08003cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ce6:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	60d3      	str	r3, [r2, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <__NVIC_GetPriorityGrouping+0x18>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	f003 0307 	and.w	r3, r3, #7
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	db0b      	blt.n	8003d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	4907      	ldr	r1, [pc, #28]	; (8003d50 <__NVIC_EnableIRQ+0x38>)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2001      	movs	r0, #1
 8003d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000e100 	.word	0xe000e100

08003d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	6039      	str	r1, [r7, #0]
 8003d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	db0a      	blt.n	8003d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	490c      	ldr	r1, [pc, #48]	; (8003da0 <__NVIC_SetPriority+0x4c>)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	0112      	lsls	r2, r2, #4
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	440b      	add	r3, r1
 8003d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d7c:	e00a      	b.n	8003d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	4908      	ldr	r1, [pc, #32]	; (8003da4 <__NVIC_SetPriority+0x50>)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	3b04      	subs	r3, #4
 8003d8c:	0112      	lsls	r2, r2, #4
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	440b      	add	r3, r1
 8003d92:	761a      	strb	r2, [r3, #24]
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	e000e100 	.word	0xe000e100
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f1c3 0307 	rsb	r3, r3, #7
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	bf28      	it	cs
 8003dc6:	2304      	movcs	r3, #4
 8003dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2b06      	cmp	r3, #6
 8003dd0:	d902      	bls.n	8003dd8 <NVIC_EncodePriority+0x30>
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3b03      	subs	r3, #3
 8003dd6:	e000      	b.n	8003dda <NVIC_EncodePriority+0x32>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43da      	mvns	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	401a      	ands	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003df0:	f04f 31ff 	mov.w	r1, #4294967295
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfa:	43d9      	mvns	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	4313      	orrs	r3, r2
         );
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3724      	adds	r7, #36	; 0x24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e20:	d301      	bcc.n	8003e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e22:	2301      	movs	r3, #1
 8003e24:	e00f      	b.n	8003e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <SysTick_Config+0x40>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e2e:	210f      	movs	r1, #15
 8003e30:	f04f 30ff 	mov.w	r0, #4294967295
 8003e34:	f7ff ff8e 	bl	8003d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <SysTick_Config+0x40>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e3e:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <SysTick_Config+0x40>)
 8003e40:	2207      	movs	r2, #7
 8003e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	e000e010 	.word	0xe000e010

08003e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff29 	bl	8003cb4 <__NVIC_SetPriorityGrouping>
}
 8003e62:	bf00      	nop
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	4603      	mov	r3, r0
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e7c:	f7ff ff3e 	bl	8003cfc <__NVIC_GetPriorityGrouping>
 8003e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	f7ff ff8e 	bl	8003da8 <NVIC_EncodePriority>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff5d 	bl	8003d54 <__NVIC_SetPriority>
}
 8003e9a:	bf00      	nop
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ff31 	bl	8003d18 <__NVIC_EnableIRQ>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff ffa2 	bl	8003e10 <SysTick_Config>
 8003ecc:	4603      	mov	r3, r0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e014      	b.n	8003f12 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	791b      	ldrb	r3, [r3, #4]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d105      	bne.n	8003efe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7fe fdcd 	bl	8002a98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	795b      	ldrb	r3, [r3, #5]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_DAC_Start+0x16>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e040      	b.n	8003fb2 <HAL_DAC_Start+0x98>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6819      	ldr	r1, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2201      	movs	r2, #1
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10f      	bne.n	8003f7a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003f64:	2b3c      	cmp	r3, #60	; 0x3c
 8003f66:	d11d      	bne.n	8003fa4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	605a      	str	r2, [r3, #4]
 8003f78:	e014      	b.n	8003fa4 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	213c      	movs	r1, #60	; 0x3c
 8003f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d107      	bne.n	8003fa4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0202 	orr.w	r2, r2, #2
 8003fa2:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b087      	sub	sp, #28
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e004      	b.n	8003ff2 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	3314      	adds	r3, #20
 8003ff0:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	795b      	ldrb	r3, [r3, #5]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_DAC_ConfigChannel+0x18>
 800401c:	2302      	movs	r3, #2
 800401e:	e03c      	b.n	800409a <HAL_DAC_ConfigChannel+0x92>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2202      	movs	r2, #2
 800402a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4013      	ands	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	22c0      	movs	r2, #192	; 0xc0
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43da      	mvns	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	400a      	ands	r2, r1
 800408a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7ff f9e2 	bl	800347c <HAL_GetTick>
 80040b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d008      	beq.n	80040d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2280      	movs	r2, #128	; 0x80
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e052      	b.n	800417e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0216 	bic.w	r2, r2, #22
 80040e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d103      	bne.n	8004108 <HAL_DMA_Abort+0x62>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0208 	bic.w	r2, r2, #8
 8004116:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004128:	e013      	b.n	8004152 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800412a:	f7ff f9a7 	bl	800347c <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b05      	cmp	r3, #5
 8004136:	d90c      	bls.n	8004152 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2203      	movs	r2, #3
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e015      	b.n	800417e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e4      	bne.n	800412a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004164:	223f      	movs	r2, #63	; 0x3f
 8004166:	409a      	lsls	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d004      	beq.n	80041a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2280      	movs	r2, #128	; 0x80
 800419e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e00c      	b.n	80041be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2205      	movs	r2, #5
 80041a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b089      	sub	sp, #36	; 0x24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041de:	2300      	movs	r3, #0
 80041e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	e165      	b.n	80044b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041e8:	2201      	movs	r2, #1
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	429a      	cmp	r2, r3
 8004202:	f040 8154 	bne.w	80044ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b01      	cmp	r3, #1
 8004210:	d005      	beq.n	800421e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800421a:	2b02      	cmp	r3, #2
 800421c:	d130      	bne.n	8004280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	2203      	movs	r2, #3
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4013      	ands	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4313      	orrs	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004254:	2201      	movs	r2, #1
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	091b      	lsrs	r3, r3, #4
 800426a:	f003 0201 	and.w	r2, r3, #1
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f003 0303 	and.w	r3, r3, #3
 8004288:	2b03      	cmp	r3, #3
 800428a:	d017      	beq.n	80042bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	2203      	movs	r2, #3
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d123      	bne.n	8004310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	08da      	lsrs	r2, r3, #3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3208      	adds	r2, #8
 80042d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	220f      	movs	r2, #15
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4013      	ands	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	08da      	lsrs	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3208      	adds	r2, #8
 800430a:	69b9      	ldr	r1, [r7, #24]
 800430c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	2203      	movs	r2, #3
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4013      	ands	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0203 	and.w	r2, r3, #3
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80ae 	beq.w	80044ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	4b5d      	ldr	r3, [pc, #372]	; (80044cc <HAL_GPIO_Init+0x300>)
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	4a5c      	ldr	r2, [pc, #368]	; (80044cc <HAL_GPIO_Init+0x300>)
 800435c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004360:	6453      	str	r3, [r2, #68]	; 0x44
 8004362:	4b5a      	ldr	r3, [pc, #360]	; (80044cc <HAL_GPIO_Init+0x300>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800436e:	4a58      	ldr	r2, [pc, #352]	; (80044d0 <HAL_GPIO_Init+0x304>)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	3302      	adds	r3, #2
 8004376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	220f      	movs	r2, #15
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a4f      	ldr	r2, [pc, #316]	; (80044d4 <HAL_GPIO_Init+0x308>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d025      	beq.n	80043e6 <HAL_GPIO_Init+0x21a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a4e      	ldr	r2, [pc, #312]	; (80044d8 <HAL_GPIO_Init+0x30c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d01f      	beq.n	80043e2 <HAL_GPIO_Init+0x216>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a4d      	ldr	r2, [pc, #308]	; (80044dc <HAL_GPIO_Init+0x310>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d019      	beq.n	80043de <HAL_GPIO_Init+0x212>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a4c      	ldr	r2, [pc, #304]	; (80044e0 <HAL_GPIO_Init+0x314>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <HAL_GPIO_Init+0x20e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a4b      	ldr	r2, [pc, #300]	; (80044e4 <HAL_GPIO_Init+0x318>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00d      	beq.n	80043d6 <HAL_GPIO_Init+0x20a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a4a      	ldr	r2, [pc, #296]	; (80044e8 <HAL_GPIO_Init+0x31c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d007      	beq.n	80043d2 <HAL_GPIO_Init+0x206>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a49      	ldr	r2, [pc, #292]	; (80044ec <HAL_GPIO_Init+0x320>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_GPIO_Init+0x202>
 80043ca:	2306      	movs	r3, #6
 80043cc:	e00c      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043ce:	2307      	movs	r3, #7
 80043d0:	e00a      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043d2:	2305      	movs	r3, #5
 80043d4:	e008      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043d6:	2304      	movs	r3, #4
 80043d8:	e006      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043da:	2303      	movs	r3, #3
 80043dc:	e004      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043de:	2302      	movs	r3, #2
 80043e0:	e002      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e000      	b.n	80043e8 <HAL_GPIO_Init+0x21c>
 80043e6:	2300      	movs	r3, #0
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	f002 0203 	and.w	r2, r2, #3
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	4093      	lsls	r3, r2
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043f8:	4935      	ldr	r1, [pc, #212]	; (80044d0 <HAL_GPIO_Init+0x304>)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	3302      	adds	r3, #2
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004406:	4b3a      	ldr	r3, [pc, #232]	; (80044f0 <HAL_GPIO_Init+0x324>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800442a:	4a31      	ldr	r2, [pc, #196]	; (80044f0 <HAL_GPIO_Init+0x324>)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004430:	4b2f      	ldr	r3, [pc, #188]	; (80044f0 <HAL_GPIO_Init+0x324>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004454:	4a26      	ldr	r2, [pc, #152]	; (80044f0 <HAL_GPIO_Init+0x324>)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800445a:	4b25      	ldr	r3, [pc, #148]	; (80044f0 <HAL_GPIO_Init+0x324>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	43db      	mvns	r3, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4013      	ands	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800447e:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <HAL_GPIO_Init+0x324>)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004484:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <HAL_GPIO_Init+0x324>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044a8:	4a11      	ldr	r2, [pc, #68]	; (80044f0 <HAL_GPIO_Init+0x324>)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3301      	adds	r3, #1
 80044b2:	61fb      	str	r3, [r7, #28]
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	f67f ae96 	bls.w	80041e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044bc:	bf00      	nop
 80044be:	bf00      	nop
 80044c0:	3724      	adds	r7, #36	; 0x24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40013800 	.word	0x40013800
 80044d4:	40020000 	.word	0x40020000
 80044d8:	40020400 	.word	0x40020400
 80044dc:	40020800 	.word	0x40020800
 80044e0:	40020c00 	.word	0x40020c00
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40021400 	.word	0x40021400
 80044ec:	40021800 	.word	0x40021800
 80044f0:	40013c00 	.word	0x40013c00

080044f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	807b      	strh	r3, [r7, #2]
 8004500:	4613      	mov	r3, r2
 8004502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004504:	787b      	ldrb	r3, [r7, #1]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800450a:	887a      	ldrh	r2, [r7, #2]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004510:	e003      	b.n	800451a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004512:	887b      	ldrh	r3, [r7, #2]
 8004514:	041a      	lsls	r2, r3, #16
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	619a      	str	r2, [r3, #24]
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004526:	b480      	push	{r7}
 8004528:	b085      	sub	sp, #20
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004538:	887a      	ldrh	r2, [r7, #2]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4013      	ands	r3, r2
 800453e:	041a      	lsls	r2, r3, #16
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	43d9      	mvns	r1, r3
 8004544:	887b      	ldrh	r3, [r7, #2]
 8004546:	400b      	ands	r3, r1
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	619a      	str	r2, [r3, #24]
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
	...

0800455c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004566:	2300      	movs	r3, #0
 8004568:	603b      	str	r3, [r7, #0]
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <HAL_PWREx_EnableOverDrive+0x90>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <HAL_PWREx_EnableOverDrive+0x90>)
 8004570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004574:	6413      	str	r3, [r2, #64]	; 0x40
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <HAL_PWREx_EnableOverDrive+0x90>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004582:	4b1b      	ldr	r3, [pc, #108]	; (80045f0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004588:	f7fe ff78 	bl	800347c <HAL_GetTick>
 800458c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800458e:	e009      	b.n	80045a4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004590:	f7fe ff74 	bl	800347c <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800459e:	d901      	bls.n	80045a4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e01f      	b.n	80045e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80045a4:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b0:	d1ee      	bne.n	8004590 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80045b2:	4b11      	ldr	r3, [pc, #68]	; (80045f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045b8:	f7fe ff60 	bl	800347c <HAL_GetTick>
 80045bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045be:	e009      	b.n	80045d4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045c0:	f7fe ff5c 	bl	800347c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045ce:	d901      	bls.n	80045d4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e007      	b.n	80045e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045d4:	4b07      	ldr	r3, [pc, #28]	; (80045f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045e0:	d1ee      	bne.n	80045c0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	420e0040 	.word	0x420e0040
 80045f4:	40007000 	.word	0x40007000
 80045f8:	420e0044 	.word	0x420e0044

080045fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0cc      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004610:	4b68      	ldr	r3, [pc, #416]	; (80047b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d90c      	bls.n	8004638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b65      	ldr	r3, [pc, #404]	; (80047b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b63      	ldr	r3, [pc, #396]	; (80047b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0b8      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004650:	4b59      	ldr	r3, [pc, #356]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4a58      	ldr	r2, [pc, #352]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800465a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004668:	4b53      	ldr	r3, [pc, #332]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	4a52      	ldr	r2, [pc, #328]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004674:	4b50      	ldr	r3, [pc, #320]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	494d      	ldr	r1, [pc, #308]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d044      	beq.n	800471c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d107      	bne.n	80046aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469a:	4b47      	ldr	r3, [pc, #284]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d119      	bne.n	80046da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e07f      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d003      	beq.n	80046ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d107      	bne.n	80046ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ba:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e06f      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ca:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e067      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046da:	4b37      	ldr	r3, [pc, #220]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f023 0203 	bic.w	r2, r3, #3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4934      	ldr	r1, [pc, #208]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046ec:	f7fe fec6 	bl	800347c <HAL_GetTick>
 80046f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f2:	e00a      	b.n	800470a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f4:	f7fe fec2 	bl	800347c <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e04f      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800470a:	4b2b      	ldr	r3, [pc, #172]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 020c 	and.w	r2, r3, #12
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	429a      	cmp	r2, r3
 800471a:	d1eb      	bne.n	80046f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800471c:	4b25      	ldr	r3, [pc, #148]	; (80047b4 <HAL_RCC_ClockConfig+0x1b8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d20c      	bcs.n	8004744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472a:	4b22      	ldr	r3, [pc, #136]	; (80047b4 <HAL_RCC_ClockConfig+0x1b8>)
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004732:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	429a      	cmp	r2, r3
 800473e:	d001      	beq.n	8004744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e032      	b.n	80047aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4916      	ldr	r1, [pc, #88]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800476e:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	490e      	ldr	r1, [pc, #56]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004782:	f000 f855 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 8004786:	4602      	mov	r2, r0
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	490a      	ldr	r1, [pc, #40]	; (80047bc <HAL_RCC_ClockConfig+0x1c0>)
 8004794:	5ccb      	ldrb	r3, [r1, r3]
 8004796:	fa22 f303 	lsr.w	r3, r2, r3
 800479a:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <HAL_RCC_ClockConfig+0x1c4>)
 800479c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800479e:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <HAL_RCC_ClockConfig+0x1c8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fe fe26 	bl	80033f4 <HAL_InitTick>

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40023c00 	.word	0x40023c00
 80047b8:	40023800 	.word	0x40023800
 80047bc:	080071c0 	.word	0x080071c0
 80047c0:	20000000 	.word	0x20000000
 80047c4:	20000004 	.word	0x20000004

080047c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <HAL_RCC_GetHCLKFreq+0x14>)
 80047ce:	681b      	ldr	r3, [r3, #0]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000000 	.word	0x20000000

080047e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047e4:	f7ff fff0 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	0a9b      	lsrs	r3, r3, #10
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4903      	ldr	r1, [pc, #12]	; (8004804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40023800 	.word	0x40023800
 8004804:	080071d0 	.word	0x080071d0

08004808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800480c:	f7ff ffdc 	bl	80047c8 <HAL_RCC_GetHCLKFreq>
 8004810:	4602      	mov	r2, r0
 8004812:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	0b5b      	lsrs	r3, r3, #13
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	4903      	ldr	r1, [pc, #12]	; (800482c <HAL_RCC_GetPCLK2Freq+0x24>)
 800481e:	5ccb      	ldrb	r3, [r1, r3]
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40023800 	.word	0x40023800
 800482c:	080071d0 	.word	0x080071d0

08004830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004834:	b0a6      	sub	sp, #152	; 0x98
 8004836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004856:	4bc8      	ldr	r3, [pc, #800]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x348>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 030c 	and.w	r3, r3, #12
 800485e:	2b0c      	cmp	r3, #12
 8004860:	f200 817e 	bhi.w	8004b60 <HAL_RCC_GetSysClockFreq+0x330>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	080048a1 	.word	0x080048a1
 8004870:	08004b61 	.word	0x08004b61
 8004874:	08004b61 	.word	0x08004b61
 8004878:	08004b61 	.word	0x08004b61
 800487c:	080048a9 	.word	0x080048a9
 8004880:	08004b61 	.word	0x08004b61
 8004884:	08004b61 	.word	0x08004b61
 8004888:	08004b61 	.word	0x08004b61
 800488c:	080048b1 	.word	0x080048b1
 8004890:	08004b61 	.word	0x08004b61
 8004894:	08004b61 	.word	0x08004b61
 8004898:	08004b61 	.word	0x08004b61
 800489c:	08004a1b 	.word	0x08004a1b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048a0:	4bb6      	ldr	r3, [pc, #728]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x34c>)
 80048a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80048a6:	e15f      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048a8:	4bb5      	ldr	r3, [pc, #724]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x350>)
 80048aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80048ae:	e15b      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048b0:	4bb1      	ldr	r3, [pc, #708]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x348>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048bc:	4bae      	ldr	r3, [pc, #696]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x348>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d031      	beq.n	800492c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c8:	4bab      	ldr	r3, [pc, #684]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x348>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	099b      	lsrs	r3, r3, #6
 80048ce:	2200      	movs	r2, #0
 80048d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80048d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048da:	663b      	str	r3, [r7, #96]	; 0x60
 80048dc:	2300      	movs	r3, #0
 80048de:	667b      	str	r3, [r7, #100]	; 0x64
 80048e0:	4ba7      	ldr	r3, [pc, #668]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x350>)
 80048e2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80048e6:	462a      	mov	r2, r5
 80048e8:	fb03 f202 	mul.w	r2, r3, r2
 80048ec:	2300      	movs	r3, #0
 80048ee:	4621      	mov	r1, r4
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	4413      	add	r3, r2
 80048f6:	4aa2      	ldr	r2, [pc, #648]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x350>)
 80048f8:	4621      	mov	r1, r4
 80048fa:	fba1 1202 	umull	r1, r2, r1, r2
 80048fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004900:	460a      	mov	r2, r1
 8004902:	67ba      	str	r2, [r7, #120]	; 0x78
 8004904:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004906:	4413      	add	r3, r2
 8004908:	67fb      	str	r3, [r7, #124]	; 0x7c
 800490a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800490e:	2200      	movs	r2, #0
 8004910:	65bb      	str	r3, [r7, #88]	; 0x58
 8004912:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004914:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004918:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800491c:	f7fc f892 	bl	8000a44 <__aeabi_uldivmod>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4613      	mov	r3, r2
 8004926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800492a:	e064      	b.n	80049f6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492c:	4b92      	ldr	r3, [pc, #584]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x348>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	099b      	lsrs	r3, r3, #6
 8004932:	2200      	movs	r2, #0
 8004934:	653b      	str	r3, [r7, #80]	; 0x50
 8004936:	657a      	str	r2, [r7, #84]	; 0x54
 8004938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004940:	2300      	movs	r3, #0
 8004942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004944:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004948:	4622      	mov	r2, r4
 800494a:	462b      	mov	r3, r5
 800494c:	f04f 0000 	mov.w	r0, #0
 8004950:	f04f 0100 	mov.w	r1, #0
 8004954:	0159      	lsls	r1, r3, #5
 8004956:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800495a:	0150      	lsls	r0, r2, #5
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4621      	mov	r1, r4
 8004962:	1a51      	subs	r1, r2, r1
 8004964:	6139      	str	r1, [r7, #16]
 8004966:	4629      	mov	r1, r5
 8004968:	eb63 0301 	sbc.w	r3, r3, r1
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800497a:	4659      	mov	r1, fp
 800497c:	018b      	lsls	r3, r1, #6
 800497e:	4651      	mov	r1, sl
 8004980:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004984:	4651      	mov	r1, sl
 8004986:	018a      	lsls	r2, r1, #6
 8004988:	4651      	mov	r1, sl
 800498a:	ebb2 0801 	subs.w	r8, r2, r1
 800498e:	4659      	mov	r1, fp
 8004990:	eb63 0901 	sbc.w	r9, r3, r1
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049a8:	4690      	mov	r8, r2
 80049aa:	4699      	mov	r9, r3
 80049ac:	4623      	mov	r3, r4
 80049ae:	eb18 0303 	adds.w	r3, r8, r3
 80049b2:	60bb      	str	r3, [r7, #8]
 80049b4:	462b      	mov	r3, r5
 80049b6:	eb49 0303 	adc.w	r3, r9, r3
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049c8:	4629      	mov	r1, r5
 80049ca:	028b      	lsls	r3, r1, #10
 80049cc:	4621      	mov	r1, r4
 80049ce:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049d2:	4621      	mov	r1, r4
 80049d4:	028a      	lsls	r2, r1, #10
 80049d6:	4610      	mov	r0, r2
 80049d8:	4619      	mov	r1, r3
 80049da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049de:	2200      	movs	r2, #0
 80049e0:	643b      	str	r3, [r7, #64]	; 0x40
 80049e2:	647a      	str	r2, [r7, #68]	; 0x44
 80049e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049e8:	f7fc f82c 	bl	8000a44 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4613      	mov	r3, r2
 80049f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049f6:	4b60      	ldr	r3, [pc, #384]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x348>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	0c1b      	lsrs	r3, r3, #16
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	3301      	adds	r3, #1
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004a08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004a18:	e0a6      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a1a:	4b57      	ldr	r3, [pc, #348]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a26:	4b54      	ldr	r3, [pc, #336]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d02a      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a32:	4b51      	ldr	r3, [pc, #324]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	2200      	movs	r2, #0
 8004a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a44:	2100      	movs	r1, #0
 8004a46:	4b4e      	ldr	r3, [pc, #312]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a48:	fb03 f201 	mul.w	r2, r3, r1
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	fb00 f303 	mul.w	r3, r0, r3
 8004a52:	4413      	add	r3, r2
 8004a54:	4a4a      	ldr	r2, [pc, #296]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x350>)
 8004a56:	fba0 1202 	umull	r1, r2, r0, r2
 8004a5a:	677a      	str	r2, [r7, #116]	; 0x74
 8004a5c:	460a      	mov	r2, r1
 8004a5e:	673a      	str	r2, [r7, #112]	; 0x70
 8004a60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004a62:	4413      	add	r3, r2
 8004a64:	677b      	str	r3, [r7, #116]	; 0x74
 8004a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6e:	637a      	str	r2, [r7, #52]	; 0x34
 8004a70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a74:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004a78:	f7fb ffe4 	bl	8000a44 <__aeabi_uldivmod>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4613      	mov	r3, r2
 8004a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a86:	e05b      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a88:	4b3b      	ldr	r3, [pc, #236]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	099b      	lsrs	r3, r3, #6
 8004a8e:	2200      	movs	r2, #0
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	623b      	str	r3, [r7, #32]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	f04f 0000 	mov.w	r0, #0
 8004aac:	f04f 0100 	mov.w	r1, #0
 8004ab0:	0159      	lsls	r1, r3, #5
 8004ab2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab6:	0150      	lsls	r0, r2, #5
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4641      	mov	r1, r8
 8004abe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ad4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ad8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004adc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ae0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	00eb      	lsls	r3, r5, #3
 8004aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004af2:	00e2      	lsls	r2, r4, #3
 8004af4:	4614      	mov	r4, r2
 8004af6:	461d      	mov	r5, r3
 8004af8:	4643      	mov	r3, r8
 8004afa:	18e3      	adds	r3, r4, r3
 8004afc:	603b      	str	r3, [r7, #0]
 8004afe:	464b      	mov	r3, r9
 8004b00:	eb45 0303 	adc.w	r3, r5, r3
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b12:	4629      	mov	r1, r5
 8004b14:	028b      	lsls	r3, r1, #10
 8004b16:	4621      	mov	r1, r4
 8004b18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	028a      	lsls	r2, r1, #10
 8004b20:	4610      	mov	r0, r2
 8004b22:	4619      	mov	r1, r3
 8004b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b28:	2200      	movs	r2, #0
 8004b2a:	61bb      	str	r3, [r7, #24]
 8004b2c:	61fa      	str	r2, [r7, #28]
 8004b2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b32:	f7fb ff87 	bl	8000a44 <__aeabi_uldivmod>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b40:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	0f1b      	lsrs	r3, r3, #28
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004b4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004b5e:	e003      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x34c>)
 8004b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004b66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3798      	adds	r7, #152	; 0x98
 8004b70:	46bd      	mov	sp, r7
 8004b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	00f42400 	.word	0x00f42400
 8004b80:	017d7840 	.word	0x017d7840

08004b84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e28d      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 8083 	beq.w	8004caa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ba4:	4b94      	ldr	r3, [pc, #592]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 030c 	and.w	r3, r3, #12
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d019      	beq.n	8004be4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bb0:	4b91      	ldr	r3, [pc, #580]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d106      	bne.n	8004bca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bbc:	4b8e      	ldr	r3, [pc, #568]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc8:	d00c      	beq.n	8004be4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bca:	4b8b      	ldr	r3, [pc, #556]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	d112      	bne.n	8004bfc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd6:	4b88      	ldr	r3, [pc, #544]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be2:	d10b      	bne.n	8004bfc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	4b84      	ldr	r3, [pc, #528]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05b      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x124>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d157      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e25a      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x90>
 8004c06:	4b7c      	ldr	r3, [pc, #496]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a7b      	ldr	r2, [pc, #492]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e01d      	b.n	8004c50 <HAL_RCC_OscConfig+0xcc>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0xb4>
 8004c1e:	4b76      	ldr	r3, [pc, #472]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a75      	ldr	r2, [pc, #468]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b73      	ldr	r3, [pc, #460]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a72      	ldr	r2, [pc, #456]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e00b      	b.n	8004c50 <HAL_RCC_OscConfig+0xcc>
 8004c38:	4b6f      	ldr	r3, [pc, #444]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a6e      	ldr	r2, [pc, #440]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b6c      	ldr	r3, [pc, #432]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a6b      	ldr	r2, [pc, #428]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c58:	f7fe fc10 	bl	800347c <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c60:	f7fe fc0c 	bl	800347c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	; 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e21f      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c72:	4b61      	ldr	r3, [pc, #388]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0xdc>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fe fbfc 	bl	800347c <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fe fbf8 	bl	800347c <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	; 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e20b      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9a:	4b57      	ldr	r3, [pc, #348]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x104>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d06f      	beq.n	8004d96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cb6:	4b50      	ldr	r3, [pc, #320]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d017      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cc2:	4b4d      	ldr	r3, [pc, #308]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d105      	bne.n	8004cda <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cce:	4b4a      	ldr	r3, [pc, #296]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cda:	4b47      	ldr	r3, [pc, #284]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ce2:	2b0c      	cmp	r3, #12
 8004ce4:	d11c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ce6:	4b44      	ldr	r3, [pc, #272]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d116      	bne.n	8004d20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf2:	4b41      	ldr	r3, [pc, #260]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_RCC_OscConfig+0x186>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d001      	beq.n	8004d0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e1d3      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0a:	4b3b      	ldr	r3, [pc, #236]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4937      	ldr	r1, [pc, #220]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1e:	e03a      	b.n	8004d96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d020      	beq.n	8004d6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d28:	4b34      	ldr	r3, [pc, #208]	; (8004dfc <HAL_RCC_OscConfig+0x278>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2e:	f7fe fba5 	bl	800347c <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d36:	f7fe fba1 	bl	800347c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e1b4      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d48:	4b2b      	ldr	r3, [pc, #172]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f0      	beq.n	8004d36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d54:	4b28      	ldr	r3, [pc, #160]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4925      	ldr	r1, [pc, #148]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	600b      	str	r3, [r1, #0]
 8004d68:	e015      	b.n	8004d96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d6a:	4b24      	ldr	r3, [pc, #144]	; (8004dfc <HAL_RCC_OscConfig+0x278>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fe fb84 	bl	800347c <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d78:	f7fe fb80 	bl	800347c <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e193      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d8a:	4b1b      	ldr	r3, [pc, #108]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d036      	beq.n	8004e10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004daa:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <HAL_RCC_OscConfig+0x27c>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db0:	f7fe fb64 	bl	800347c <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db8:	f7fe fb60 	bl	800347c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e173      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dca:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <HAL_RCC_OscConfig+0x274>)
 8004dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x234>
 8004dd6:	e01b      	b.n	8004e10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dd8:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <HAL_RCC_OscConfig+0x27c>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dde:	f7fe fb4d 	bl	800347c <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de4:	e00e      	b.n	8004e04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004de6:	f7fe fb49 	bl	800347c <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d907      	bls.n	8004e04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e15c      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	42470000 	.word	0x42470000
 8004e00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e04:	4b8a      	ldr	r3, [pc, #552]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1ea      	bne.n	8004de6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8097 	beq.w	8004f4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e22:	4b83      	ldr	r3, [pc, #524]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10f      	bne.n	8004e4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	4b7f      	ldr	r3, [pc, #508]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	4a7e      	ldr	r2, [pc, #504]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e3e:	4b7c      	ldr	r3, [pc, #496]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e46:	60bb      	str	r3, [r7, #8]
 8004e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4e:	4b79      	ldr	r3, [pc, #484]	; (8005034 <HAL_RCC_OscConfig+0x4b0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d118      	bne.n	8004e8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e5a:	4b76      	ldr	r3, [pc, #472]	; (8005034 <HAL_RCC_OscConfig+0x4b0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a75      	ldr	r2, [pc, #468]	; (8005034 <HAL_RCC_OscConfig+0x4b0>)
 8004e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e66:	f7fe fb09 	bl	800347c <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6e:	f7fe fb05 	bl	800347c <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e118      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e80:	4b6c      	ldr	r3, [pc, #432]	; (8005034 <HAL_RCC_OscConfig+0x4b0>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d106      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x31e>
 8004e94:	4b66      	ldr	r3, [pc, #408]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e98:	4a65      	ldr	r2, [pc, #404]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004e9a:	f043 0301 	orr.w	r3, r3, #1
 8004e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea0:	e01c      	b.n	8004edc <HAL_RCC_OscConfig+0x358>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b05      	cmp	r3, #5
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x340>
 8004eaa:	4b61      	ldr	r3, [pc, #388]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	4a60      	ldr	r2, [pc, #384]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004eb0:	f043 0304 	orr.w	r3, r3, #4
 8004eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb6:	4b5e      	ldr	r3, [pc, #376]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eba:	4a5d      	ldr	r2, [pc, #372]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec2:	e00b      	b.n	8004edc <HAL_RCC_OscConfig+0x358>
 8004ec4:	4b5a      	ldr	r3, [pc, #360]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec8:	4a59      	ldr	r2, [pc, #356]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004eca:	f023 0301 	bic.w	r3, r3, #1
 8004ece:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed0:	4b57      	ldr	r3, [pc, #348]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed4:	4a56      	ldr	r2, [pc, #344]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004ed6:	f023 0304 	bic.w	r3, r3, #4
 8004eda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee4:	f7fe faca 	bl	800347c <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eea:	e00a      	b.n	8004f02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eec:	f7fe fac6 	bl	800347c <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e0d7      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f02:	4b4b      	ldr	r3, [pc, #300]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0ee      	beq.n	8004eec <HAL_RCC_OscConfig+0x368>
 8004f0e:	e014      	b.n	8004f3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f10:	f7fe fab4 	bl	800347c <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f16:	e00a      	b.n	8004f2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f18:	f7fe fab0 	bl	800347c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e0c1      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f2e:	4b40      	ldr	r3, [pc, #256]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1ee      	bne.n	8004f18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f3a:	7dfb      	ldrb	r3, [r7, #23]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f40:	4b3b      	ldr	r3, [pc, #236]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	4a3a      	ldr	r2, [pc, #232]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80ad 	beq.w	80050b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f56:	4b36      	ldr	r3, [pc, #216]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d060      	beq.n	8005024 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d145      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6a:	4b33      	ldr	r3, [pc, #204]	; (8005038 <HAL_RCC_OscConfig+0x4b4>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fe fa84 	bl	800347c <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f78:	f7fe fa80 	bl	800347c <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e093      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8a:	4b29      	ldr	r3, [pc, #164]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69da      	ldr	r2, [r3, #28]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	019b      	lsls	r3, r3, #6
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	041b      	lsls	r3, r3, #16
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	061b      	lsls	r3, r3, #24
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	071b      	lsls	r3, r3, #28
 8004fc2:	491b      	ldr	r1, [pc, #108]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc8:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <HAL_RCC_OscConfig+0x4b4>)
 8004fca:	2201      	movs	r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fce:	f7fe fa55 	bl	800347c <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd6:	f7fe fa51 	bl	800347c <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e064      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0f0      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x452>
 8004ff4:	e05c      	b.n	80050b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff6:	4b10      	ldr	r3, [pc, #64]	; (8005038 <HAL_RCC_OscConfig+0x4b4>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fe fa3e 	bl	800347c <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005004:	f7fe fa3a 	bl	800347c <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e04d      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005016:	4b06      	ldr	r3, [pc, #24]	; (8005030 <HAL_RCC_OscConfig+0x4ac>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0x480>
 8005022:	e045      	b.n	80050b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d107      	bne.n	800503c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e040      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
 8005030:	40023800 	.word	0x40023800
 8005034:	40007000 	.word	0x40007000
 8005038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800503c:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <HAL_RCC_OscConfig+0x538>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d030      	beq.n	80050ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d129      	bne.n	80050ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005062:	429a      	cmp	r2, r3
 8005064:	d122      	bne.n	80050ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800506c:	4013      	ands	r3, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005074:	4293      	cmp	r3, r2
 8005076:	d119      	bne.n	80050ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	3b01      	subs	r3, #1
 8005086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005088:	429a      	cmp	r2, r3
 800508a:	d10f      	bne.n	80050ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d107      	bne.n	80050ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d001      	beq.n	80050b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40023800 	.word	0x40023800

080050c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e041      	b.n	8005156 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fd fd1a 	bl	8002b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f000 fa96 	bl	8005630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	d001      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e04e      	b.n	8005216 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a23      	ldr	r2, [pc, #140]	; (8005224 <HAL_TIM_Base_Start_IT+0xc4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d022      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a2:	d01d      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1f      	ldr	r2, [pc, #124]	; (8005228 <HAL_TIM_Base_Start_IT+0xc8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d018      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1e      	ldr	r2, [pc, #120]	; (800522c <HAL_TIM_Base_Start_IT+0xcc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d013      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1c      	ldr	r2, [pc, #112]	; (8005230 <HAL_TIM_Base_Start_IT+0xd0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00e      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1b      	ldr	r2, [pc, #108]	; (8005234 <HAL_TIM_Base_Start_IT+0xd4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d009      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a19      	ldr	r2, [pc, #100]	; (8005238 <HAL_TIM_Base_Start_IT+0xd8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <HAL_TIM_Base_Start_IT+0x80>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a18      	ldr	r2, [pc, #96]	; (800523c <HAL_TIM_Base_Start_IT+0xdc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d111      	bne.n	8005204 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b06      	cmp	r3, #6
 80051f0:	d010      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f042 0201 	orr.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005202:	e007      	b.n	8005214 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40010000 	.word	0x40010000
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40010400 	.word	0x40010400
 8005238:	40014000 	.word	0x40014000
 800523c:	40001800 	.word	0x40001800

08005240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b02      	cmp	r3, #2
 8005254:	d122      	bne.n	800529c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b02      	cmp	r3, #2
 8005262:	d11b      	bne.n	800529c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0202 	mvn.w	r2, #2
 800526c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f9b5 	bl	80055f2 <HAL_TIM_IC_CaptureCallback>
 8005288:	e005      	b.n	8005296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f9a7 	bl	80055de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f9b8 	bl	8005606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d122      	bne.n	80052f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d11b      	bne.n	80052f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0204 	mvn.w	r2, #4
 80052c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f98b 	bl	80055f2 <HAL_TIM_IC_CaptureCallback>
 80052dc:	e005      	b.n	80052ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f97d 	bl	80055de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f98e 	bl	8005606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d122      	bne.n	8005344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b08      	cmp	r3, #8
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0208 	mvn.w	r2, #8
 8005314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2204      	movs	r2, #4
 800531a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f961 	bl	80055f2 <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f953 	bl	80055de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f964 	bl	8005606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0310 	and.w	r3, r3, #16
 800534e:	2b10      	cmp	r3, #16
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b10      	cmp	r3, #16
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0210 	mvn.w	r2, #16
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2208      	movs	r2, #8
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f937 	bl	80055f2 <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f929 	bl	80055de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f93a 	bl	8005606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d10e      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d107      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0201 	mvn.w	r2, #1
 80053bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fc ffc2 	bl	8002348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ce:	2b80      	cmp	r3, #128	; 0x80
 80053d0:	d10e      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053dc:	2b80      	cmp	r3, #128	; 0x80
 80053de:	d107      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa64 	bl	80058b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	2b40      	cmp	r3, #64	; 0x40
 80053fc:	d10e      	bne.n	800541c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d107      	bne.n	800541c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f8ff 	bl	800561a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b20      	cmp	r3, #32
 8005428:	d10e      	bne.n	8005448 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b20      	cmp	r3, #32
 8005436:	d107      	bne.n	8005448 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0220 	mvn.w	r2, #32
 8005440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fa2e 	bl	80058a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_TIM_ConfigClockSource+0x1c>
 8005468:	2302      	movs	r3, #2
 800546a:	e0b4      	b.n	80055d6 <HAL_TIM_ConfigClockSource+0x186>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800548a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a4:	d03e      	beq.n	8005524 <HAL_TIM_ConfigClockSource+0xd4>
 80054a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054aa:	f200 8087 	bhi.w	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b2:	f000 8086 	beq.w	80055c2 <HAL_TIM_ConfigClockSource+0x172>
 80054b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ba:	d87f      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054bc:	2b70      	cmp	r3, #112	; 0x70
 80054be:	d01a      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0xa6>
 80054c0:	2b70      	cmp	r3, #112	; 0x70
 80054c2:	d87b      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054c4:	2b60      	cmp	r3, #96	; 0x60
 80054c6:	d050      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x11a>
 80054c8:	2b60      	cmp	r3, #96	; 0x60
 80054ca:	d877      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054cc:	2b50      	cmp	r3, #80	; 0x50
 80054ce:	d03c      	beq.n	800554a <HAL_TIM_ConfigClockSource+0xfa>
 80054d0:	2b50      	cmp	r3, #80	; 0x50
 80054d2:	d873      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d058      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x13a>
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	d86f      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054dc:	2b30      	cmp	r3, #48	; 0x30
 80054de:	d064      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x15a>
 80054e0:	2b30      	cmp	r3, #48	; 0x30
 80054e2:	d86b      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d060      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x15a>
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d867      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d05c      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x15a>
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d05a      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x15a>
 80054f4:	e062      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6899      	ldr	r1, [r3, #8]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f000 f9ad 	bl	8005864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	609a      	str	r2, [r3, #8]
      break;
 8005522:	e04f      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	6899      	ldr	r1, [r3, #8]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f000 f996 	bl	8005864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005546:	609a      	str	r2, [r3, #8]
      break;
 8005548:	e03c      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6859      	ldr	r1, [r3, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	461a      	mov	r2, r3
 8005558:	f000 f90a 	bl	8005770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2150      	movs	r1, #80	; 0x50
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f963 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 8005568:	e02c      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6859      	ldr	r1, [r3, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	461a      	mov	r2, r3
 8005578:	f000 f929 	bl	80057ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2160      	movs	r1, #96	; 0x60
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f953 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 8005588:	e01c      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6859      	ldr	r1, [r3, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	461a      	mov	r2, r3
 8005598:	f000 f8ea 	bl	8005770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2140      	movs	r1, #64	; 0x40
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 f943 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 80055a8:	e00c      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f000 f93a 	bl	800582e <TIM_ITRx_SetConfig>
      break;
 80055ba:	e003      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
      break;
 80055c0:	e000      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a40      	ldr	r2, [pc, #256]	; (8005744 <TIM_Base_SetConfig+0x114>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d013      	beq.n	8005670 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564e:	d00f      	beq.n	8005670 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a3d      	ldr	r2, [pc, #244]	; (8005748 <TIM_Base_SetConfig+0x118>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00b      	beq.n	8005670 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a3c      	ldr	r2, [pc, #240]	; (800574c <TIM_Base_SetConfig+0x11c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a3b      	ldr	r2, [pc, #236]	; (8005750 <TIM_Base_SetConfig+0x120>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a3a      	ldr	r2, [pc, #232]	; (8005754 <TIM_Base_SetConfig+0x124>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d108      	bne.n	8005682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2f      	ldr	r2, [pc, #188]	; (8005744 <TIM_Base_SetConfig+0x114>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d02b      	beq.n	80056e2 <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005690:	d027      	beq.n	80056e2 <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a2c      	ldr	r2, [pc, #176]	; (8005748 <TIM_Base_SetConfig+0x118>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d023      	beq.n	80056e2 <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2b      	ldr	r2, [pc, #172]	; (800574c <TIM_Base_SetConfig+0x11c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d01f      	beq.n	80056e2 <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2a      	ldr	r2, [pc, #168]	; (8005750 <TIM_Base_SetConfig+0x120>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01b      	beq.n	80056e2 <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a29      	ldr	r2, [pc, #164]	; (8005754 <TIM_Base_SetConfig+0x124>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d017      	beq.n	80056e2 <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a28      	ldr	r2, [pc, #160]	; (8005758 <TIM_Base_SetConfig+0x128>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a27      	ldr	r2, [pc, #156]	; (800575c <TIM_Base_SetConfig+0x12c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00f      	beq.n	80056e2 <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a26      	ldr	r2, [pc, #152]	; (8005760 <TIM_Base_SetConfig+0x130>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00b      	beq.n	80056e2 <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a25      	ldr	r2, [pc, #148]	; (8005764 <TIM_Base_SetConfig+0x134>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d007      	beq.n	80056e2 <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a24      	ldr	r2, [pc, #144]	; (8005768 <TIM_Base_SetConfig+0x138>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d003      	beq.n	80056e2 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a23      	ldr	r2, [pc, #140]	; (800576c <TIM_Base_SetConfig+0x13c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d108      	bne.n	80056f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a0a      	ldr	r2, [pc, #40]	; (8005744 <TIM_Base_SetConfig+0x114>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_Base_SetConfig+0xf8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a0c      	ldr	r2, [pc, #48]	; (8005754 <TIM_Base_SetConfig+0x124>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d103      	bne.n	8005730 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	615a      	str	r2, [r3, #20]
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40010000 	.word	0x40010000
 8005748:	40000400 	.word	0x40000400
 800574c:	40000800 	.word	0x40000800
 8005750:	40000c00 	.word	0x40000c00
 8005754:	40010400 	.word	0x40010400
 8005758:	40014000 	.word	0x40014000
 800575c:	40014400 	.word	0x40014400
 8005760:	40014800 	.word	0x40014800
 8005764:	40001800 	.word	0x40001800
 8005768:	40001c00 	.word	0x40001c00
 800576c:	40002000 	.word	0x40002000

08005770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f023 0201 	bic.w	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800579a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f023 030a 	bic.w	r3, r3, #10
 80057ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b087      	sub	sp, #28
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f023 0210 	bic.w	r2, r3, #16
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	031b      	lsls	r3, r3, #12
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800580a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	f043 0307 	orr.w	r3, r3, #7
 8005850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	609a      	str	r2, [r3, #8]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800587e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	021a      	lsls	r2, r3, #8
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	431a      	orrs	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4313      	orrs	r3, r2
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	609a      	str	r2, [r3, #8]
}
 8005898:	bf00      	nop
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e03f      	b.n	800595e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d106      	bne.n	80058f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fd f93c 	bl	8002b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2224      	movs	r2, #36	; 0x24
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800590e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fddf 	bl	80064d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	695a      	ldr	r2, [r3, #20]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b08a      	sub	sp, #40	; 0x28
 800596a:	af02      	add	r7, sp, #8
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	603b      	str	r3, [r7, #0]
 8005972:	4613      	mov	r3, r2
 8005974:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b20      	cmp	r3, #32
 8005984:	d17c      	bne.n	8005a80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <HAL_UART_Transmit+0x2c>
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e075      	b.n	8005a82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_UART_Transmit+0x3e>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e06e      	b.n	8005a82 <HAL_UART_Transmit+0x11c>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2221      	movs	r2, #33	; 0x21
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ba:	f7fd fd5f 	bl	800347c <HAL_GetTick>
 80059be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	88fa      	ldrh	r2, [r7, #6]
 80059c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	88fa      	ldrh	r2, [r7, #6]
 80059ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d4:	d108      	bne.n	80059e8 <HAL_UART_Transmit+0x82>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d104      	bne.n	80059e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	e003      	b.n	80059f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80059f8:	e02a      	b.n	8005a50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2200      	movs	r2, #0
 8005a02:	2180      	movs	r1, #128	; 0x80
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fb1f 	bl	8006048 <UART_WaitOnFlagUntilTimeout>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e036      	b.n	8005a82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10b      	bne.n	8005a32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	61bb      	str	r3, [r7, #24]
 8005a30:	e007      	b.n	8005a42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	781a      	ldrb	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1cf      	bne.n	80059fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2200      	movs	r2, #0
 8005a62:	2140      	movs	r1, #64	; 0x40
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 faef 	bl	8006048 <UART_WaitOnFlagUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e006      	b.n	8005a82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	e000      	b.n	8005a82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a80:	2302      	movs	r3, #2
  }
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3720      	adds	r7, #32
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	4613      	mov	r3, r2
 8005a96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d11d      	bne.n	8005ae0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <HAL_UART_Receive_IT+0x26>
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e016      	b.n	8005ae2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_UART_Receive_IT+0x38>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e00f      	b.n	8005ae2 <HAL_UART_Receive_IT+0x58>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ad0:	88fb      	ldrh	r3, [r7, #6]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 fb24 	bl	8006124 <UART_Start_Receive_IT>
 8005adc:	4603      	mov	r3, r0
 8005ade:	e000      	b.n	8005ae2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ae0:	2302      	movs	r3, #2
  }
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b0ba      	sub	sp, #232	; 0xe8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10f      	bne.n	8005b52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d009      	beq.n	8005b52 <HAL_UART_IRQHandler+0x66>
 8005b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fc07 	bl	800635e <UART_Receive_IT>
      return;
 8005b50:	e256      	b.n	8006000 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 80de 	beq.w	8005d18 <HAL_UART_IRQHandler+0x22c>
 8005b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d106      	bne.n	8005b76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80d1 	beq.w	8005d18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00b      	beq.n	8005b9a <HAL_UART_IRQHandler+0xae>
 8005b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f043 0201 	orr.w	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9e:	f003 0304 	and.w	r3, r3, #4
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00b      	beq.n	8005bbe <HAL_UART_IRQHandler+0xd2>
 8005ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d005      	beq.n	8005bbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f043 0202 	orr.w	r2, r3, #2
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00b      	beq.n	8005be2 <HAL_UART_IRQHandler+0xf6>
 8005bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	f043 0204 	orr.w	r2, r3, #4
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d011      	beq.n	8005c12 <HAL_UART_IRQHandler+0x126>
 8005bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d105      	bne.n	8005c06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	f043 0208 	orr.w	r2, r3, #8
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 81ed 	beq.w	8005ff6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d008      	beq.n	8005c3a <HAL_UART_IRQHandler+0x14e>
 8005c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fb92 	bl	800635e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c44:	2b40      	cmp	r3, #64	; 0x40
 8005c46:	bf0c      	ite	eq
 8005c48:	2301      	moveq	r3, #1
 8005c4a:	2300      	movne	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <HAL_UART_IRQHandler+0x17a>
 8005c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d04f      	beq.n	8005d06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fa9a 	bl	80061a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d141      	bne.n	8005cfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3314      	adds	r3, #20
 8005c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c88:	e853 3f00 	ldrex	r3, [r3]
 8005c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3314      	adds	r3, #20
 8005ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1d9      	bne.n	8005c7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d013      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	4a7d      	ldr	r2, [pc, #500]	; (8005ec8 <HAL_UART_IRQHandler+0x3dc>)
 8005cd4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fa53 	bl	8004186 <HAL_DMA_Abort_IT>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d016      	beq.n	8005d14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf4:	e00e      	b.n	8005d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f990 	bl	800601c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	e00a      	b.n	8005d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f98c 	bl	800601c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d04:	e006      	b.n	8005d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f988 	bl	800601c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d12:	e170      	b.n	8005ff6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d14:	bf00      	nop
    return;
 8005d16:	e16e      	b.n	8005ff6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	f040 814a 	bne.w	8005fb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 8143 	beq.w	8005fb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 813c 	beq.w	8005fb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60bb      	str	r3, [r7, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	60bb      	str	r3, [r7, #8]
 8005d52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b40      	cmp	r3, #64	; 0x40
 8005d60:	f040 80b4 	bne.w	8005ecc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 8140 	beq.w	8005ffa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d82:	429a      	cmp	r2, r3
 8005d84:	f080 8139 	bcs.w	8005ffa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d9a:	f000 8088 	beq.w	8005eae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	330c      	adds	r3, #12
 8005da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005dca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005dd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1d9      	bne.n	8005d9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3314      	adds	r3, #20
 8005df0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dfc:	f023 0301 	bic.w	r3, r3, #1
 8005e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3314      	adds	r3, #20
 8005e0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e1      	bne.n	8005dea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3314      	adds	r3, #20
 8005e2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3314      	adds	r3, #20
 8005e46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e3      	bne.n	8005e26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	330c      	adds	r3, #12
 8005e72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e7e:	f023 0310 	bic.w	r3, r3, #16
 8005e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e90:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e98:	e841 2300 	strex	r3, r2, [r1]
 8005e9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1e3      	bne.n	8005e6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fe f8fc 	bl	80040a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f8b6 	bl	8006030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ec4:	e099      	b.n	8005ffa <HAL_UART_IRQHandler+0x50e>
 8005ec6:	bf00      	nop
 8005ec8:	08006267 	.word	0x08006267
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 808b 	beq.w	8005ffe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8086 	beq.w	8005ffe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	330c      	adds	r3, #12
 8005ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	330c      	adds	r3, #12
 8005f12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f16:	647a      	str	r2, [r7, #68]	; 0x44
 8005f18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e3      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3314      	adds	r3, #20
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	623b      	str	r3, [r7, #32]
   return(result);
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	f023 0301 	bic.w	r3, r3, #1
 8005f40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3314      	adds	r3, #20
 8005f4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f4e:	633a      	str	r2, [r7, #48]	; 0x30
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e3      	bne.n	8005f2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	330c      	adds	r3, #12
 8005f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	e853 3f00 	ldrex	r3, [r3]
 8005f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0310 	bic.w	r3, r3, #16
 8005f86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f94:	61fa      	str	r2, [r7, #28]
 8005f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	69b9      	ldr	r1, [r7, #24]
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e3      	bne.n	8005f70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f83e 	bl	8006030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fb4:	e023      	b.n	8005ffe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x4ea>
 8005fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f95d 	bl	800628e <UART_Transmit_IT>
    return;
 8005fd4:	e014      	b.n	8006000 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00e      	beq.n	8006000 <HAL_UART_IRQHandler+0x514>
 8005fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d008      	beq.n	8006000 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f99d 	bl	800632e <UART_EndTransmit_IT>
    return;
 8005ff4:	e004      	b.n	8006000 <HAL_UART_IRQHandler+0x514>
    return;
 8005ff6:	bf00      	nop
 8005ff8:	e002      	b.n	8006000 <HAL_UART_IRQHandler+0x514>
      return;
 8005ffa:	bf00      	nop
 8005ffc:	e000      	b.n	8006000 <HAL_UART_IRQHandler+0x514>
      return;
 8005ffe:	bf00      	nop
  }
}
 8006000:	37e8      	adds	r7, #232	; 0xe8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop

08006008 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b090      	sub	sp, #64	; 0x40
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	4613      	mov	r3, r2
 8006056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006058:	e050      	b.n	80060fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d04c      	beq.n	80060fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <UART_WaitOnFlagUntilTimeout+0x30>
 8006068:	f7fd fa08 	bl	800347c <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006074:	429a      	cmp	r2, r3
 8006076:	d241      	bcs.n	80060fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800608e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	330c      	adds	r3, #12
 8006096:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006098:	637a      	str	r2, [r7, #52]	; 0x34
 800609a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800609e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e5      	bne.n	8006078 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3314      	adds	r3, #20
 80060b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	613b      	str	r3, [r7, #16]
   return(result);
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f023 0301 	bic.w	r3, r3, #1
 80060c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3314      	adds	r3, #20
 80060ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060cc:	623a      	str	r2, [r7, #32]
 80060ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	69f9      	ldr	r1, [r7, #28]
 80060d2:	6a3a      	ldr	r2, [r7, #32]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e5      	bne.n	80060ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e00f      	b.n	800611c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4013      	ands	r3, r2
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	429a      	cmp	r2, r3
 800610a:	bf0c      	ite	eq
 800610c:	2301      	moveq	r3, #1
 800610e:	2300      	movne	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	429a      	cmp	r2, r3
 8006118:	d09f      	beq.n	800605a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3740      	adds	r7, #64	; 0x40
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	4613      	mov	r3, r2
 8006130:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	88fa      	ldrh	r2, [r7, #6]
 800613c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	88fa      	ldrh	r2, [r7, #6]
 8006142:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2222      	movs	r2, #34	; 0x22
 800614e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006170:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695a      	ldr	r2, [r3, #20]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0201 	orr.w	r2, r2, #1
 8006180:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0220 	orr.w	r2, r2, #32
 8006190:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b095      	sub	sp, #84	; 0x54
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	330c      	adds	r3, #12
 80061ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061c8:	643a      	str	r2, [r7, #64]	; 0x40
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e5      	bne.n	80061a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3314      	adds	r3, #20
 80061e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f023 0301 	bic.w	r3, r3, #1
 80061f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3314      	adds	r3, #20
 80061fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e5      	bne.n	80061dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006214:	2b01      	cmp	r3, #1
 8006216:	d119      	bne.n	800624c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	60bb      	str	r3, [r7, #8]
   return(result);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f023 0310 	bic.w	r3, r3, #16
 800622e:	647b      	str	r3, [r7, #68]	; 0x44
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006238:	61ba      	str	r2, [r7, #24]
 800623a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6979      	ldr	r1, [r7, #20]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	613b      	str	r3, [r7, #16]
   return(result);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e5      	bne.n	8006218 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	631a      	str	r2, [r3, #48]	; 0x30
}
 800625a:	bf00      	nop
 800625c:	3754      	adds	r7, #84	; 0x54
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff fecb 	bl	800601c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b21      	cmp	r3, #33	; 0x21
 80062a0:	d13e      	bne.n	8006320 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062aa:	d114      	bne.n	80062d6 <UART_Transmit_IT+0x48>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d110      	bne.n	80062d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	1c9a      	adds	r2, r3, #2
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	621a      	str	r2, [r3, #32]
 80062d4:	e008      	b.n	80062e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	1c59      	adds	r1, r3, #1
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6211      	str	r1, [r2, #32]
 80062e0:	781a      	ldrb	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	4619      	mov	r1, r3
 80062f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10f      	bne.n	800631c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800630a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800631a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	e000      	b.n	8006322 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006320:	2302      	movs	r3, #2
  }
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b082      	sub	sp, #8
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff fe5a 	bl	8006008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b08c      	sub	sp, #48	; 0x30
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b22      	cmp	r3, #34	; 0x22
 8006370:	f040 80ab 	bne.w	80064ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637c:	d117      	bne.n	80063ae <UART_Receive_IT+0x50>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d113      	bne.n	80063ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006386:	2300      	movs	r3, #0
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	b29b      	uxth	r3, r3
 8006398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639c:	b29a      	uxth	r2, r3
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	1c9a      	adds	r2, r3, #2
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	629a      	str	r2, [r3, #40]	; 0x28
 80063ac:	e026      	b.n	80063fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c0:	d007      	beq.n	80063d2 <UART_Receive_IT+0x74>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10a      	bne.n	80063e0 <UART_Receive_IT+0x82>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d106      	bne.n	80063e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	e008      	b.n	80063f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006400:	b29b      	uxth	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	b29b      	uxth	r3, r3
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	4619      	mov	r1, r3
 800640a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800640c:	2b00      	cmp	r3, #0
 800640e:	d15a      	bne.n	80064c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0220 	bic.w	r2, r2, #32
 800641e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800642e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695a      	ldr	r2, [r3, #20]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0201 	bic.w	r2, r2, #1
 800643e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	2b01      	cmp	r3, #1
 800644e:	d135      	bne.n	80064bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330c      	adds	r3, #12
 800645c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	613b      	str	r3, [r7, #16]
   return(result);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f023 0310 	bic.w	r3, r3, #16
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006476:	623a      	str	r2, [r7, #32]
 8006478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	69f9      	ldr	r1, [r7, #28]
 800647c:	6a3a      	ldr	r2, [r7, #32]
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	61bb      	str	r3, [r7, #24]
   return(result);
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e5      	bne.n	8006456 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b10      	cmp	r3, #16
 8006496:	d10a      	bne.n	80064ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff fdbb 	bl	8006030 <HAL_UARTEx_RxEventCallback>
 80064ba:	e002      	b.n	80064c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fb ff83 	bl	80023c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e002      	b.n	80064cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e000      	b.n	80064cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80064ca:	2302      	movs	r3, #2
  }
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3730      	adds	r7, #48	; 0x30
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064d8:	b0c0      	sub	sp, #256	; 0x100
 80064da:	af00      	add	r7, sp, #0
 80064dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f0:	68d9      	ldr	r1, [r3, #12]
 80064f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	ea40 0301 	orr.w	r3, r0, r1
 80064fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	431a      	orrs	r2, r3
 800650c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	431a      	orrs	r2, r3
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	4313      	orrs	r3, r2
 800651c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800652c:	f021 010c 	bic.w	r1, r1, #12
 8006530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800653a:	430b      	orrs	r3, r1
 800653c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800653e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800654a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654e:	6999      	ldr	r1, [r3, #24]
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	ea40 0301 	orr.w	r3, r0, r1
 800655a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800655c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4b8f      	ldr	r3, [pc, #572]	; (80067a0 <UART_SetConfig+0x2cc>)
 8006564:	429a      	cmp	r2, r3
 8006566:	d005      	beq.n	8006574 <UART_SetConfig+0xa0>
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4b8d      	ldr	r3, [pc, #564]	; (80067a4 <UART_SetConfig+0x2d0>)
 8006570:	429a      	cmp	r2, r3
 8006572:	d104      	bne.n	800657e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006574:	f7fe f948 	bl	8004808 <HAL_RCC_GetPCLK2Freq>
 8006578:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800657c:	e003      	b.n	8006586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800657e:	f7fe f92f 	bl	80047e0 <HAL_RCC_GetPCLK1Freq>
 8006582:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006590:	f040 810c 	bne.w	80067ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006598:	2200      	movs	r2, #0
 800659a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800659e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065a6:	4622      	mov	r2, r4
 80065a8:	462b      	mov	r3, r5
 80065aa:	1891      	adds	r1, r2, r2
 80065ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80065ae:	415b      	adcs	r3, r3
 80065b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065b6:	4621      	mov	r1, r4
 80065b8:	eb12 0801 	adds.w	r8, r2, r1
 80065bc:	4629      	mov	r1, r5
 80065be:	eb43 0901 	adc.w	r9, r3, r1
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	f04f 0300 	mov.w	r3, #0
 80065ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065d6:	4690      	mov	r8, r2
 80065d8:	4699      	mov	r9, r3
 80065da:	4623      	mov	r3, r4
 80065dc:	eb18 0303 	adds.w	r3, r8, r3
 80065e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065e4:	462b      	mov	r3, r5
 80065e6:	eb49 0303 	adc.w	r3, r9, r3
 80065ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006602:	460b      	mov	r3, r1
 8006604:	18db      	adds	r3, r3, r3
 8006606:	653b      	str	r3, [r7, #80]	; 0x50
 8006608:	4613      	mov	r3, r2
 800660a:	eb42 0303 	adc.w	r3, r2, r3
 800660e:	657b      	str	r3, [r7, #84]	; 0x54
 8006610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006618:	f7fa fa14 	bl	8000a44 <__aeabi_uldivmod>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4b61      	ldr	r3, [pc, #388]	; (80067a8 <UART_SetConfig+0x2d4>)
 8006622:	fba3 2302 	umull	r2, r3, r3, r2
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	011c      	lsls	r4, r3, #4
 800662a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800662e:	2200      	movs	r2, #0
 8006630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006634:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800663c:	4642      	mov	r2, r8
 800663e:	464b      	mov	r3, r9
 8006640:	1891      	adds	r1, r2, r2
 8006642:	64b9      	str	r1, [r7, #72]	; 0x48
 8006644:	415b      	adcs	r3, r3
 8006646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800664c:	4641      	mov	r1, r8
 800664e:	eb12 0a01 	adds.w	sl, r2, r1
 8006652:	4649      	mov	r1, r9
 8006654:	eb43 0b01 	adc.w	fp, r3, r1
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800666c:	4692      	mov	sl, r2
 800666e:	469b      	mov	fp, r3
 8006670:	4643      	mov	r3, r8
 8006672:	eb1a 0303 	adds.w	r3, sl, r3
 8006676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800667a:	464b      	mov	r3, r9
 800667c:	eb4b 0303 	adc.w	r3, fp, r3
 8006680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006690:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006698:	460b      	mov	r3, r1
 800669a:	18db      	adds	r3, r3, r3
 800669c:	643b      	str	r3, [r7, #64]	; 0x40
 800669e:	4613      	mov	r3, r2
 80066a0:	eb42 0303 	adc.w	r3, r2, r3
 80066a4:	647b      	str	r3, [r7, #68]	; 0x44
 80066a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066ae:	f7fa f9c9 	bl	8000a44 <__aeabi_uldivmod>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4611      	mov	r1, r2
 80066b8:	4b3b      	ldr	r3, [pc, #236]	; (80067a8 <UART_SetConfig+0x2d4>)
 80066ba:	fba3 2301 	umull	r2, r3, r3, r1
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	2264      	movs	r2, #100	; 0x64
 80066c2:	fb02 f303 	mul.w	r3, r2, r3
 80066c6:	1acb      	subs	r3, r1, r3
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80066ce:	4b36      	ldr	r3, [pc, #216]	; (80067a8 <UART_SetConfig+0x2d4>)
 80066d0:	fba3 2302 	umull	r2, r3, r3, r2
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066dc:	441c      	add	r4, r3
 80066de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066f0:	4642      	mov	r2, r8
 80066f2:	464b      	mov	r3, r9
 80066f4:	1891      	adds	r1, r2, r2
 80066f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80066f8:	415b      	adcs	r3, r3
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006700:	4641      	mov	r1, r8
 8006702:	1851      	adds	r1, r2, r1
 8006704:	6339      	str	r1, [r7, #48]	; 0x30
 8006706:	4649      	mov	r1, r9
 8006708:	414b      	adcs	r3, r1
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006718:	4659      	mov	r1, fp
 800671a:	00cb      	lsls	r3, r1, #3
 800671c:	4651      	mov	r1, sl
 800671e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006722:	4651      	mov	r1, sl
 8006724:	00ca      	lsls	r2, r1, #3
 8006726:	4610      	mov	r0, r2
 8006728:	4619      	mov	r1, r3
 800672a:	4603      	mov	r3, r0
 800672c:	4642      	mov	r2, r8
 800672e:	189b      	adds	r3, r3, r2
 8006730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006734:	464b      	mov	r3, r9
 8006736:	460a      	mov	r2, r1
 8006738:	eb42 0303 	adc.w	r3, r2, r3
 800673c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800674c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006754:	460b      	mov	r3, r1
 8006756:	18db      	adds	r3, r3, r3
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28
 800675a:	4613      	mov	r3, r2
 800675c:	eb42 0303 	adc.w	r3, r2, r3
 8006760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800676a:	f7fa f96b 	bl	8000a44 <__aeabi_uldivmod>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <UART_SetConfig+0x2d4>)
 8006774:	fba3 1302 	umull	r1, r3, r3, r2
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	2164      	movs	r1, #100	; 0x64
 800677c:	fb01 f303 	mul.w	r3, r1, r3
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	3332      	adds	r3, #50	; 0x32
 8006786:	4a08      	ldr	r2, [pc, #32]	; (80067a8 <UART_SetConfig+0x2d4>)
 8006788:	fba2 2303 	umull	r2, r3, r2, r3
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	f003 0207 	and.w	r2, r3, #7
 8006792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4422      	add	r2, r4
 800679a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800679c:	e105      	b.n	80069aa <UART_SetConfig+0x4d6>
 800679e:	bf00      	nop
 80067a0:	40011000 	.word	0x40011000
 80067a4:	40011400 	.word	0x40011400
 80067a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067b0:	2200      	movs	r2, #0
 80067b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80067be:	4642      	mov	r2, r8
 80067c0:	464b      	mov	r3, r9
 80067c2:	1891      	adds	r1, r2, r2
 80067c4:	6239      	str	r1, [r7, #32]
 80067c6:	415b      	adcs	r3, r3
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ce:	4641      	mov	r1, r8
 80067d0:	1854      	adds	r4, r2, r1
 80067d2:	4649      	mov	r1, r9
 80067d4:	eb43 0501 	adc.w	r5, r3, r1
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	00eb      	lsls	r3, r5, #3
 80067e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067e6:	00e2      	lsls	r2, r4, #3
 80067e8:	4614      	mov	r4, r2
 80067ea:	461d      	mov	r5, r3
 80067ec:	4643      	mov	r3, r8
 80067ee:	18e3      	adds	r3, r4, r3
 80067f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067f4:	464b      	mov	r3, r9
 80067f6:	eb45 0303 	adc.w	r3, r5, r3
 80067fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800680a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	f04f 0300 	mov.w	r3, #0
 8006816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800681a:	4629      	mov	r1, r5
 800681c:	008b      	lsls	r3, r1, #2
 800681e:	4621      	mov	r1, r4
 8006820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006824:	4621      	mov	r1, r4
 8006826:	008a      	lsls	r2, r1, #2
 8006828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800682c:	f7fa f90a 	bl	8000a44 <__aeabi_uldivmod>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4b60      	ldr	r3, [pc, #384]	; (80069b8 <UART_SetConfig+0x4e4>)
 8006836:	fba3 2302 	umull	r2, r3, r3, r2
 800683a:	095b      	lsrs	r3, r3, #5
 800683c:	011c      	lsls	r4, r3, #4
 800683e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006842:	2200      	movs	r2, #0
 8006844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006848:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800684c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006850:	4642      	mov	r2, r8
 8006852:	464b      	mov	r3, r9
 8006854:	1891      	adds	r1, r2, r2
 8006856:	61b9      	str	r1, [r7, #24]
 8006858:	415b      	adcs	r3, r3
 800685a:	61fb      	str	r3, [r7, #28]
 800685c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006860:	4641      	mov	r1, r8
 8006862:	1851      	adds	r1, r2, r1
 8006864:	6139      	str	r1, [r7, #16]
 8006866:	4649      	mov	r1, r9
 8006868:	414b      	adcs	r3, r1
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006878:	4659      	mov	r1, fp
 800687a:	00cb      	lsls	r3, r1, #3
 800687c:	4651      	mov	r1, sl
 800687e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006882:	4651      	mov	r1, sl
 8006884:	00ca      	lsls	r2, r1, #3
 8006886:	4610      	mov	r0, r2
 8006888:	4619      	mov	r1, r3
 800688a:	4603      	mov	r3, r0
 800688c:	4642      	mov	r2, r8
 800688e:	189b      	adds	r3, r3, r2
 8006890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006894:	464b      	mov	r3, r9
 8006896:	460a      	mov	r2, r1
 8006898:	eb42 0303 	adc.w	r3, r2, r3
 800689c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80068aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068ac:	f04f 0200 	mov.w	r2, #0
 80068b0:	f04f 0300 	mov.w	r3, #0
 80068b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80068b8:	4649      	mov	r1, r9
 80068ba:	008b      	lsls	r3, r1, #2
 80068bc:	4641      	mov	r1, r8
 80068be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068c2:	4641      	mov	r1, r8
 80068c4:	008a      	lsls	r2, r1, #2
 80068c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068ca:	f7fa f8bb 	bl	8000a44 <__aeabi_uldivmod>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4b39      	ldr	r3, [pc, #228]	; (80069b8 <UART_SetConfig+0x4e4>)
 80068d4:	fba3 1302 	umull	r1, r3, r3, r2
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	2164      	movs	r1, #100	; 0x64
 80068dc:	fb01 f303 	mul.w	r3, r1, r3
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	3332      	adds	r3, #50	; 0x32
 80068e6:	4a34      	ldr	r2, [pc, #208]	; (80069b8 <UART_SetConfig+0x4e4>)
 80068e8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ec:	095b      	lsrs	r3, r3, #5
 80068ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068f2:	441c      	add	r4, r3
 80068f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068f8:	2200      	movs	r2, #0
 80068fa:	673b      	str	r3, [r7, #112]	; 0x70
 80068fc:	677a      	str	r2, [r7, #116]	; 0x74
 80068fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006902:	4642      	mov	r2, r8
 8006904:	464b      	mov	r3, r9
 8006906:	1891      	adds	r1, r2, r2
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	415b      	adcs	r3, r3
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006912:	4641      	mov	r1, r8
 8006914:	1851      	adds	r1, r2, r1
 8006916:	6039      	str	r1, [r7, #0]
 8006918:	4649      	mov	r1, r9
 800691a:	414b      	adcs	r3, r1
 800691c:	607b      	str	r3, [r7, #4]
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800692a:	4659      	mov	r1, fp
 800692c:	00cb      	lsls	r3, r1, #3
 800692e:	4651      	mov	r1, sl
 8006930:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006934:	4651      	mov	r1, sl
 8006936:	00ca      	lsls	r2, r1, #3
 8006938:	4610      	mov	r0, r2
 800693a:	4619      	mov	r1, r3
 800693c:	4603      	mov	r3, r0
 800693e:	4642      	mov	r2, r8
 8006940:	189b      	adds	r3, r3, r2
 8006942:	66bb      	str	r3, [r7, #104]	; 0x68
 8006944:	464b      	mov	r3, r9
 8006946:	460a      	mov	r2, r1
 8006948:	eb42 0303 	adc.w	r3, r2, r3
 800694c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800694e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	663b      	str	r3, [r7, #96]	; 0x60
 8006958:	667a      	str	r2, [r7, #100]	; 0x64
 800695a:	f04f 0200 	mov.w	r2, #0
 800695e:	f04f 0300 	mov.w	r3, #0
 8006962:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006966:	4649      	mov	r1, r9
 8006968:	008b      	lsls	r3, r1, #2
 800696a:	4641      	mov	r1, r8
 800696c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006970:	4641      	mov	r1, r8
 8006972:	008a      	lsls	r2, r1, #2
 8006974:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006978:	f7fa f864 	bl	8000a44 <__aeabi_uldivmod>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <UART_SetConfig+0x4e4>)
 8006982:	fba3 1302 	umull	r1, r3, r3, r2
 8006986:	095b      	lsrs	r3, r3, #5
 8006988:	2164      	movs	r1, #100	; 0x64
 800698a:	fb01 f303 	mul.w	r3, r1, r3
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	3332      	adds	r3, #50	; 0x32
 8006994:	4a08      	ldr	r2, [pc, #32]	; (80069b8 <UART_SetConfig+0x4e4>)
 8006996:	fba2 2303 	umull	r2, r3, r2, r3
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	f003 020f 	and.w	r2, r3, #15
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4422      	add	r2, r4
 80069a8:	609a      	str	r2, [r3, #8]
}
 80069aa:	bf00      	nop
 80069ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069b0:	46bd      	mov	sp, r7
 80069b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069b6:	bf00      	nop
 80069b8:	51eb851f 	.word	0x51eb851f

080069bc <movingAverageInit>:
 */

#include "movingAverage.h"

void movingAverageInit(MovingAverage *movingAverage, uint16_t window)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	807b      	strh	r3, [r7, #2]
	movingAverage->index = 0;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	801a      	strh	r2, [r3, #0]
	movingAverage->window = window;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	887a      	ldrh	r2, [r7, #2]
 80069d2:	805a      	strh	r2, [r3, #2]
	memset(movingAverage->buffer, 0x00, MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS * sizeof(int32_t));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3304      	adds	r3, #4
 80069d8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80069dc:	2100      	movs	r1, #0
 80069de:	4618      	mov	r0, r3
 80069e0:	f000 fbda 	bl	8007198 <memset>
	movingAverage->sum = 0;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
	movingAverage->movingAverage = 0;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <movingAverageAddValue>:

void movingAverageAddValue(MovingAverage *movingAverage, int32_t newValue)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
	movingAverage->sum = movingAverage->sum - movingAverage->buffer[movingAverage->index] + newValue;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	; 0x4b4
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	440b      	add	r3, r1
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	1ad2      	subs	r2, r2, r3
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	441a      	add	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
	movingAverage->buffer[movingAverage->index] = newValue;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	605a      	str	r2, [r3, #4]
	movingAverage->movingAverage = movingAverage->sum / movingAverage->window;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	8852      	ldrh	r2, [r2, #2]
 8006a40:	fb93 f2f2 	sdiv	r2, r3, r2
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
	movingAverage->index = (movingAverage->index + 1) % movingAverage->window;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a50:	3301      	adds	r3, #1
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	8852      	ldrh	r2, [r2, #2]
 8006a56:	fb93 f1f2 	sdiv	r1, r3, r2
 8006a5a:	fb01 f202 	mul.w	r2, r1, r2
 8006a5e:	1a9b      	subs	r3, r3, r2
 8006a60:	b21a      	sxth	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	801a      	strh	r2, [r3, #0]
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <movingAverageGetMean>:

int32_t movingAverageGetMean(MovingAverage *movingAverage)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b083      	sub	sp, #12
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
	return movingAverage->movingAverage;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 34b8 	ldr.w	r3, [r3, #1208]	; 0x4b8
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <movingAverageGetWindow>:

uint16_t movingAverageGetWindow(MovingAverage *movingAverage)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	return movingAverage->window;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	885b      	ldrh	r3, [r3, #2]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <movingAverageSetWindow>:

void movingAverageSetWindow(MovingAverage *movingAverage, uint16_t window)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	807b      	strh	r3, [r7, #2]
	if (window > MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS)
 8006ab0:	887b      	ldrh	r3, [r7, #2]
 8006ab2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006ab6:	d902      	bls.n	8006abe <movingAverageSetWindow+0x1a>
	{
		window = MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS;
 8006ab8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8006abc:	807b      	strh	r3, [r7, #2]
	}
	movingAverage->window = window;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	887a      	ldrh	r2, [r7, #2]
 8006ac2:	805a      	strh	r2, [r3, #2]
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <pidInit>:

#include "pid.h"
#include "defs.h"

void pidInit(PidController *pidController, float kp, float ki, float kd, float offset, float bias, ControllerTopology controllerTopology)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b089      	sub	sp, #36	; 0x24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	61f8      	str	r0, [r7, #28]
 8006ad8:	ed87 0a06 	vstr	s0, [r7, #24]
 8006adc:	edc7 0a05 	vstr	s1, [r7, #20]
 8006ae0:	ed87 1a04 	vstr	s2, [r7, #16]
 8006ae4:	edc7 1a03 	vstr	s3, [r7, #12]
 8006ae8:	ed87 2a02 	vstr	s4, [r7, #8]
 8006aec:	460b      	mov	r3, r1
 8006aee:	71fb      	strb	r3, [r7, #7]
	pidController->kp = kp;
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	601a      	str	r2, [r3, #0]
	pidController->ki = ki;
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	605a      	str	r2, [r3, #4]
	pidController->kd = kd;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	609a      	str	r2, [r3, #8]
	pidController->controllerTopology = controllerTopology;
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	79fa      	ldrb	r2, [r7, #7]
 8006b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	pidController->currentError = 0;
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	60da      	str	r2, [r3, #12]
	pidController->previousError = 0;
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	f04f 0200 	mov.w	r2, #0
 8006b18:	611a      	str	r2, [r3, #16]
	pidController->sumOfErrors = 0;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	615a      	str	r2, [r3, #20]
	pidController->setpoint = 0;
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	f04f 0200 	mov.w	r2, #0
 8006b28:	619a      	str	r2, [r3, #24]
	pidController->controlledVariable = 0;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	61da      	str	r2, [r3, #28]
	pidController->processVariable = 0;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	621a      	str	r2, [r3, #32]
	pidController->differenceOfErrors = 0;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	625a      	str	r2, [r3, #36]	; 0x24
	pidController->minSumOfErrors = -10000;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	4a0d      	ldr	r2, [pc, #52]	; (8006b7c <pidInit+0xac>)
 8006b46:	635a      	str	r2, [r3, #52]	; 0x34
	pidController->maxSumOfErrors = 10000;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b4e:	639a      	str	r2, [r3, #56]	; 0x38
	pidController->minControlledVariable = 0;
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2200      	movs	r2, #0
 8006b54:	63da      	str	r2, [r3, #60]	; 0x3c
	pidController->maxControlledVariable = 4095;
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006b5c:	641a      	str	r2, [r3, #64]	; 0x40
	pidController->offset = offset;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	62da      	str	r2, [r3, #44]	; 0x2c
	pidController->bias = bias;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	631a      	str	r2, [r3, #48]	; 0x30
	pidController->interval = ((float) DELAY_25_MILISECONDS) / 10000;
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	4a04      	ldr	r2, [pc, #16]	; (8006b80 <pidInit+0xb0>)
 8006b6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006b70:	bf00      	nop
 8006b72:	3724      	adds	r7, #36	; 0x24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	ffffd8f0 	.word	0xffffd8f0
 8006b80:	3ccccccd 	.word	0x3ccccccd

08006b84 <pidCompute>:

void pidCompute(PidController *pidController)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b089      	sub	sp, #36	; 0x24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
	pidController->currentError = pidController->setpoint - pidController->processVariable;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	ed93 7a06 	vldr	s14, [r3, #24]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	edd3 7a08 	vldr	s15, [r3, #32]
 8006b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	edc3 7a03 	vstr	s15, [r3, #12]
	pidController->sumOfErrors += pidController->currentError;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	ed93 7a05 	vldr	s14, [r3, #20]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	edd3 7a03 	vldr	s15, [r3, #12]
 8006bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	edc3 7a05 	vstr	s15, [r3, #20]
	pidController->differenceOfErrors = pidController->currentError - pidController->previousError;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	ed93 7a03 	vldr	s14, [r3, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	edd3 7a04 	vldr	s15, [r3, #16]
 8006bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	if (pidController->sumOfErrors > pidController->maxSumOfErrors)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	ed93 7a05 	vldr	s14, [r3, #20]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	ee07 3a90 	vmov	s15, r3
 8006bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be8:	dd09      	ble.n	8006bfe <pidCompute+0x7a>
	{
		pidController->sumOfErrors = pidController->maxSumOfErrors;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	edc3 7a05 	vstr	s15, [r3, #20]
 8006bfc:	e016      	b.n	8006c2c <pidCompute+0xa8>
	}
	else if (pidController->sumOfErrors < pidController->minSumOfErrors)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	ed93 7a05 	vldr	s14, [r3, #20]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c08:	ee07 3a90 	vmov	s15, r3
 8006c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c18:	d508      	bpl.n	8006c2c <pidCompute+0xa8>
	{
		pidController->sumOfErrors = pidController->minSumOfErrors;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	if (pidController->controllerTopology == P_CONTROLLER)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d114      	bne.n	8006c60 <pidCompute+0xdc>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	ed93 7a00 	vldr	s14, [r3]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c46:	edc7 7a02 	vstr	s15, [r7, #8]
		pidController->controlledVariable = proportionalTerm + pidController->bias;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8006c50:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	edc3 7a07 	vstr	s15, [r3, #28]
 8006c5e:	e061      	b.n	8006d24 <pidCompute+0x1a0>
	}
	else if (pidController->controllerTopology == PI_CONTROLLER)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d122      	bne.n	8006cb0 <pidCompute+0x12c>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	ed93 7a00 	vldr	s14, [r3]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	edd3 7a03 	vldr	s15, [r3, #12]
 8006c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7a:	edc7 7a04 	vstr	s15, [r7, #16]
		float integralTerm = pidController->ki * pidController->sumOfErrors;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	ed93 7a01 	vldr	s14, [r3, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	edd3 7a05 	vldr	s15, [r3, #20]
 8006c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8e:	edc7 7a03 	vstr	s15, [r7, #12]
		pidController->controlledVariable = proportionalTerm + integralTerm + pidController->bias;
 8006c92:	ed97 7a04 	vldr	s14, [r7, #16]
 8006c96:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	edc3 7a07 	vstr	s15, [r3, #28]
 8006cae:	e039      	b.n	8006d24 <pidCompute+0x1a0>
	}
	else if (pidController->controllerTopology == PID_CONTROLLER)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d130      	bne.n	8006d1c <pidCompute+0x198>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	ed93 7a00 	vldr	s14, [r3]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8006cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cca:	edc7 7a07 	vstr	s15, [r7, #28]
		float integralTerm = pidController->ki * pidController->sumOfErrors;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	ed93 7a01 	vldr	s14, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	edd3 7a05 	vldr	s15, [r3, #20]
 8006cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cde:	edc7 7a06 	vstr	s15, [r7, #24]
		float derivativeTerm = pidController->kd * pidController->differenceOfErrors;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	ed93 7a02 	vldr	s14, [r3, #8]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf2:	edc7 7a05 	vstr	s15, [r7, #20]
		pidController->controlledVariable = proportionalTerm + integralTerm + derivativeTerm + pidController->bias;
 8006cf6:	ed97 7a07 	vldr	s14, [r7, #28]
 8006cfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8006cfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d02:	edd7 7a05 	vldr	s15, [r7, #20]
 8006d06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	edc3 7a07 	vstr	s15, [r3, #28]
 8006d1a:	e003      	b.n	8006d24 <pidCompute+0x1a0>
	}
	else
	{
		pidController->controlledVariable = 0;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	61da      	str	r2, [r3, #28]
	}

	if (pidController->controlledVariable > pidController->maxControlledVariable)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	ed93 7a07 	vldr	s14, [r3, #28]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d3e:	dd09      	ble.n	8006d54 <pidCompute+0x1d0>
	{
		pidController->controlledVariable = pidController->maxControlledVariable;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	ee07 3a90 	vmov	s15, r3
 8006d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	edc3 7a07 	vstr	s15, [r3, #28]
 8006d52:	e016      	b.n	8006d82 <pidCompute+0x1fe>
	}
	else if (pidController->controlledVariable < pidController->minControlledVariable)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	ed93 7a07 	vldr	s14, [r3, #28]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6e:	d508      	bpl.n	8006d82 <pidCompute+0x1fe>
	{
		pidController->controlledVariable = pidController->minControlledVariable;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d74:	ee07 3a90 	vmov	s15, r3
 8006d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	pidController->previousError = pidController->currentError;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	611a      	str	r2, [r3, #16]
}
 8006d8a:	bf00      	nop
 8006d8c:	3724      	adds	r7, #36	; 0x24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <pidClearParameters>:

void pidClearParameters(PidController *pidController)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
	pidController->controlledVariable = 0;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f04f 0200 	mov.w	r2, #0
 8006da4:	61da      	str	r2, [r3, #28]
	pidController->currentError = 0;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f04f 0200 	mov.w	r2, #0
 8006dac:	60da      	str	r2, [r3, #12]
	pidController->differenceOfErrors = 0;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	625a      	str	r2, [r3, #36]	; 0x24
	pidController->previousError = 0;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	611a      	str	r2, [r3, #16]
	pidController->processVariable = 0;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f04f 0200 	mov.w	r2, #0
 8006dc4:	621a      	str	r2, [r3, #32]
	pidController->sumOfErrors = 0;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	615a      	str	r2, [r3, #20]
}
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <pidGetKp>:

float pidGetKp(PidController *pidController)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
	return pidController->kp;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	ee07 3a90 	vmov	s15, r3
}
 8006dea:	eeb0 0a67 	vmov.f32	s0, s15
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <pidSetKp>:

void pidSetKp(PidController *pidController, float kp)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	ed87 0a00 	vstr	s0, [r7]
	pidController->kp = kp;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	601a      	str	r2, [r3, #0]
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <pidGetKi>:

float pidGetKi(PidController *pidController)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b083      	sub	sp, #12
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
	return pidController->ki;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	ee07 3a90 	vmov	s15, r3
}
 8006e26:	eeb0 0a67 	vmov.f32	s0, s15
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <pidSetKi>:

void pidSetKi(PidController *pidController, float ki)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	ed87 0a00 	vstr	s0, [r7]
	pidController->ki = ki;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	605a      	str	r2, [r3, #4]
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <pidGetKd>:

float pidGetKd(PidController *pidController)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
	return pidController->kd;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	ee07 3a90 	vmov	s15, r3
}
 8006e62:	eeb0 0a67 	vmov.f32	s0, s15
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <pidSetKd>:

void pidSetKd(PidController *pidController, float kd)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	ed87 0a00 	vstr	s0, [r7]
	pidController->kd = kd;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	609a      	str	r2, [r3, #8]
}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <pidGetInterval>:

float pidGetInterval(PidController *pidController)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
	return pidController->interval;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	ee07 3a90 	vmov	s15, r3
}
 8006e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <pidSetInterval>:

void pidSetInterval(PidController *pidController, float interval)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	ed87 0a00 	vstr	s0, [r7]
	pidController->interval = interval;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <pidGetSetpoint>:

float pidGetSetpoint(PidController *pidController)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
	return pidController->setpoint;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	ee07 3a90 	vmov	s15, r3
}
 8006eda:	eeb0 0a67 	vmov.f32	s0, s15
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <pidSetSetpoint>:

void pidSetSetpoint(PidController *pidController, float setpoint)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	ed87 0a00 	vstr	s0, [r7]
	pidController->setpoint = setpoint;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	619a      	str	r2, [r3, #24]
}
 8006efa:	bf00      	nop
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <pidGetProcessVariable>:

float pidGetProcessVariable(PidController *pidController)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
	return pidController->processVariable;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	ee07 3a90 	vmov	s15, r3
}
 8006f16:	eeb0 0a67 	vmov.f32	s0, s15
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <pidSetProcessVariable>:

void pidSetProcessVariable(PidController *pidController, float processVariable)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	ed87 0a00 	vstr	s0, [r7]
	pidController->processVariable = processVariable + pidController->offset;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006f36:	edd7 7a00 	vldr	s15, [r7]
 8006f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <pidGetControlledVariable>:

float pidGetControlledVariable(PidController *pidController)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
	return pidController->controlledVariable;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	ee07 3a90 	vmov	s15, r3
}
 8006f60:	eeb0 0a67 	vmov.f32	s0, s15
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <pidGetOffset>:

float pidGetOffset(PidController *pidController)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
	return pidController->offset;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	ee07 3a90 	vmov	s15, r3
}
 8006f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <pidSetOffset>:

void pidSetOffset(PidController *pidController, float offset)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	ed87 0a00 	vstr	s0, [r7]
	pidController->offset = offset;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <pidGetBias>:

float pidGetBias(PidController *pidController)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
	return pidController->bias;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb6:	ee07 3a90 	vmov	s15, r3
}
 8006fba:	eeb0 0a67 	vmov.f32	s0, s15
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <pidSetBias>:

void pidSetBias(PidController *pidController, float bias)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	ed87 0a00 	vstr	s0, [r7]
	pidController->bias = bias;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <pidGetMinSumOfErrors>:

int32_t pidGetMinSumOfErrors(PidController *pidController)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
	return pidController->minSumOfErrors;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
	...

08007000 <pidSetMinSumOfErrors>:

void pidSetMinSumOfErrors(PidController *pidController, int32_t minSumOfErrors)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
	if (minSumOfErrors < MIN_SUM_OF_ERRORS_ALLOWED)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	4a0a      	ldr	r2, [pc, #40]	; (8007038 <pidSetMinSumOfErrors+0x38>)
 800700e:	4293      	cmp	r3, r2
 8007010:	da02      	bge.n	8007018 <pidSetMinSumOfErrors+0x18>
	{
		minSumOfErrors = MIN_SUM_OF_ERRORS_ALLOWED;
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <pidSetMinSumOfErrors+0x38>)
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	e005      	b.n	8007024 <pidSetMinSumOfErrors+0x24>
	}
	else if (minSumOfErrors > MAX_SUM_OF_ERRORS_ALLOWED)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	4a08      	ldr	r2, [pc, #32]	; (800703c <pidSetMinSumOfErrors+0x3c>)
 800701c:	4293      	cmp	r3, r2
 800701e:	dd01      	ble.n	8007024 <pidSetMinSumOfErrors+0x24>
	{
		minSumOfErrors = MAX_SUM_OF_ERRORS_ALLOWED;
 8007020:	4b06      	ldr	r3, [pc, #24]	; (800703c <pidSetMinSumOfErrors+0x3c>)
 8007022:	603b      	str	r3, [r7, #0]
	}
	pidController->minSumOfErrors = minSumOfErrors;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	635a      	str	r2, [r3, #52]	; 0x34
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	c4653600 	.word	0xc4653600
 800703c:	3b9aca00 	.word	0x3b9aca00

08007040 <pidGetMaxSumOfErrors>:

int32_t pidGetMaxSumOfErrors(PidController *pidController)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
	return pidController->maxSumOfErrors;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <pidSetMaxSumOfErrors>:

void pidSetMaxSumOfErrors(PidController *pidController, int32_t maxSumOfErrors)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
	if (maxSumOfErrors < MIN_SUM_OF_ERRORS_ALLOWED)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	4a0a      	ldr	r2, [pc, #40]	; (8007090 <pidSetMaxSumOfErrors+0x38>)
 8007066:	4293      	cmp	r3, r2
 8007068:	da02      	bge.n	8007070 <pidSetMaxSumOfErrors+0x18>
	{
		maxSumOfErrors = MIN_SUM_OF_ERRORS_ALLOWED;
 800706a:	4b09      	ldr	r3, [pc, #36]	; (8007090 <pidSetMaxSumOfErrors+0x38>)
 800706c:	603b      	str	r3, [r7, #0]
 800706e:	e005      	b.n	800707c <pidSetMaxSumOfErrors+0x24>
	}
	else if (maxSumOfErrors > MAX_SUM_OF_ERRORS_ALLOWED)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	4a08      	ldr	r2, [pc, #32]	; (8007094 <pidSetMaxSumOfErrors+0x3c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	dd01      	ble.n	800707c <pidSetMaxSumOfErrors+0x24>
	{
		maxSumOfErrors = MAX_SUM_OF_ERRORS_ALLOWED;
 8007078:	4b06      	ldr	r3, [pc, #24]	; (8007094 <pidSetMaxSumOfErrors+0x3c>)
 800707a:	603b      	str	r3, [r7, #0]
	}
	pidController->maxSumOfErrors = maxSumOfErrors;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007082:	bf00      	nop
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	c4653600 	.word	0xc4653600
 8007094:	3b9aca00 	.word	0x3b9aca00

08007098 <pidGetMinControlledVariable>:

int32_t pidGetMinControlledVariable(PidController *pidController)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
	return pidController->minControlledVariable;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <pidSetMinControlledVariable>:

void pidSetMinControlledVariable(PidController *pidController, int32_t minControlledVariable)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
	if (minControlledVariable < MIN_CONTROLLED_VARIABLE_ALLOWED)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	da02      	bge.n	80070c6 <pidSetMinControlledVariable+0x16>
	{
		minControlledVariable = MIN_CONTROLLED_VARIABLE_ALLOWED;
 80070c0:	2300      	movs	r3, #0
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	e006      	b.n	80070d4 <pidSetMinControlledVariable+0x24>
	}
	else if (minControlledVariable > MAX_CONTROLLED_VARIABLE_ALLOWED)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070cc:	db02      	blt.n	80070d4 <pidSetMinControlledVariable+0x24>
	{
		minControlledVariable = MAX_CONTROLLED_VARIABLE_ALLOWED;
 80070ce:	f640 73ff 	movw	r3, #4095	; 0xfff
 80070d2:	603b      	str	r3, [r7, #0]
	}
	pidController->minControlledVariable = minControlledVariable;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80070da:	bf00      	nop
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <pidGetMaxControlledVariable>:

int32_t pidGetMaxControlledVariable(PidController *pidController)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
	return pidController->maxControlledVariable;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <pidSetMaxControlledVariable>:

void pidSetMaxControlledVariable(PidController *pidController, int32_t maxControlledVariable)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	6039      	str	r1, [r7, #0]
	if (maxControlledVariable < MIN_CONTROLLED_VARIABLE_ALLOWED)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	da02      	bge.n	8007114 <pidSetMaxControlledVariable+0x16>
	{
		maxControlledVariable = MIN_CONTROLLED_VARIABLE_ALLOWED;
 800710e:	2300      	movs	r3, #0
 8007110:	603b      	str	r3, [r7, #0]
 8007112:	e006      	b.n	8007122 <pidSetMaxControlledVariable+0x24>
	}
	else if (maxControlledVariable > MAX_CONTROLLED_VARIABLE_ALLOWED)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800711a:	db02      	blt.n	8007122 <pidSetMaxControlledVariable+0x24>
	{
		maxControlledVariable = MAX_CONTROLLED_VARIABLE_ALLOWED;
 800711c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8007120:	603b      	str	r3, [r7, #0]
	}
	pidController->maxControlledVariable = maxControlledVariable;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <__libc_init_array>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	4d0d      	ldr	r5, [pc, #52]	; (800716c <__libc_init_array+0x38>)
 8007138:	4c0d      	ldr	r4, [pc, #52]	; (8007170 <__libc_init_array+0x3c>)
 800713a:	1b64      	subs	r4, r4, r5
 800713c:	10a4      	asrs	r4, r4, #2
 800713e:	2600      	movs	r6, #0
 8007140:	42a6      	cmp	r6, r4
 8007142:	d109      	bne.n	8007158 <__libc_init_array+0x24>
 8007144:	4d0b      	ldr	r5, [pc, #44]	; (8007174 <__libc_init_array+0x40>)
 8007146:	4c0c      	ldr	r4, [pc, #48]	; (8007178 <__libc_init_array+0x44>)
 8007148:	f000 f82e 	bl	80071a8 <_init>
 800714c:	1b64      	subs	r4, r4, r5
 800714e:	10a4      	asrs	r4, r4, #2
 8007150:	2600      	movs	r6, #0
 8007152:	42a6      	cmp	r6, r4
 8007154:	d105      	bne.n	8007162 <__libc_init_array+0x2e>
 8007156:	bd70      	pop	{r4, r5, r6, pc}
 8007158:	f855 3b04 	ldr.w	r3, [r5], #4
 800715c:	4798      	blx	r3
 800715e:	3601      	adds	r6, #1
 8007160:	e7ee      	b.n	8007140 <__libc_init_array+0xc>
 8007162:	f855 3b04 	ldr.w	r3, [r5], #4
 8007166:	4798      	blx	r3
 8007168:	3601      	adds	r6, #1
 800716a:	e7f2      	b.n	8007152 <__libc_init_array+0x1e>
 800716c:	080072e0 	.word	0x080072e0
 8007170:	080072e0 	.word	0x080072e0
 8007174:	080072e0 	.word	0x080072e0
 8007178:	080072e4 	.word	0x080072e4

0800717c <memcpy>:
 800717c:	440a      	add	r2, r1
 800717e:	4291      	cmp	r1, r2
 8007180:	f100 33ff 	add.w	r3, r0, #4294967295
 8007184:	d100      	bne.n	8007188 <memcpy+0xc>
 8007186:	4770      	bx	lr
 8007188:	b510      	push	{r4, lr}
 800718a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007192:	4291      	cmp	r1, r2
 8007194:	d1f9      	bne.n	800718a <memcpy+0xe>
 8007196:	bd10      	pop	{r4, pc}

08007198 <memset>:
 8007198:	4402      	add	r2, r0
 800719a:	4603      	mov	r3, r0
 800719c:	4293      	cmp	r3, r2
 800719e:	d100      	bne.n	80071a2 <memset+0xa>
 80071a0:	4770      	bx	lr
 80071a2:	f803 1b01 	strb.w	r1, [r3], #1
 80071a6:	e7f9      	b.n	800719c <memset+0x4>

080071a8 <_init>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	bf00      	nop
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr

080071b4 <_fini>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	bf00      	nop
 80071b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ba:	bc08      	pop	{r3}
 80071bc:	469e      	mov	lr, r3
 80071be:	4770      	bx	lr
