
CurrentController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006138  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006300  08006300  00016300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006418  08006418  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006420  08006420  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006420  08006420  00016420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006424  08006424  00016424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  2000000c  08006434  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  08006434  00020774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fc3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cfd  00000000  00000000  00033fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00036d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00037eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024266  00000000  00000000  00038f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001541f  00000000  00000000  0005d18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000defcf  00000000  00000000  000725ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015157c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba8  00000000  00000000  001515cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080062e8 	.word	0x080062e8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080062e8 	.word	0x080062e8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b974 	b.w	8000d44 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468e      	mov	lr, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14d      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	d969      	bls.n	8000b5c <__udivmoddi4+0xe8>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b152      	cbz	r2, 8000aa4 <__udivmoddi4+0x30>
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	f1c2 0120 	rsb	r1, r2, #32
 8000a96:	fa20 f101 	lsr.w	r1, r0, r1
 8000a9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa8:	0c21      	lsrs	r1, r4, #16
 8000aaa:	fbbe f6f8 	udiv	r6, lr, r8
 8000aae:	fa1f f78c 	uxth.w	r7, ip
 8000ab2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ab6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aba:	fb06 f107 	mul.w	r1, r6, r7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aca:	f080 811f 	bcs.w	8000d0c <__udivmoddi4+0x298>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 811c 	bls.w	8000d0c <__udivmoddi4+0x298>
 8000ad4:	3e02      	subs	r6, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae8:	fb00 f707 	mul.w	r7, r0, r7
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	d90a      	bls.n	8000b06 <__udivmoddi4+0x92>
 8000af0:	eb1c 0404 	adds.w	r4, ip, r4
 8000af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af8:	f080 810a 	bcs.w	8000d10 <__udivmoddi4+0x29c>
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	f240 8107 	bls.w	8000d10 <__udivmoddi4+0x29c>
 8000b02:	4464      	add	r4, ip
 8000b04:	3802      	subs	r0, #2
 8000b06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0a:	1be4      	subs	r4, r4, r7
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	b11d      	cbz	r5, 8000b18 <__udivmoddi4+0xa4>
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	2300      	movs	r3, #0
 8000b14:	e9c5 4300 	strd	r4, r3, [r5]
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d909      	bls.n	8000b36 <__udivmoddi4+0xc2>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	f000 80ef 	beq.w	8000d06 <__udivmoddi4+0x292>
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2e:	4630      	mov	r0, r6
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	fab3 f683 	clz	r6, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d14a      	bne.n	8000bd4 <__udivmoddi4+0x160>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xd4>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80f9 	bhi.w	8000d3a <__udivmoddi4+0x2c6>
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	469e      	mov	lr, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d0e0      	beq.n	8000b18 <__udivmoddi4+0xa4>
 8000b56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b5a:	e7dd      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000b5c:	b902      	cbnz	r2, 8000b60 <__udivmoddi4+0xec>
 8000b5e:	deff      	udf	#255	; 0xff
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	f040 8092 	bne.w	8000c8e <__udivmoddi4+0x21a>
 8000b6a:	eba1 010c 	sub.w	r1, r1, ip
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2601      	movs	r6, #1
 8000b78:	0c20      	lsrs	r0, r4, #16
 8000b7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b86:	fb0e f003 	mul.w	r0, lr, r3
 8000b8a:	4288      	cmp	r0, r1
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x12c>
 8000b8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x12a>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2c0>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x156>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x154>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bd2:	e79c      	b.n	8000b0e <__udivmoddi4+0x9a>
 8000bd4:	f1c6 0720 	rsb	r7, r6, #32
 8000bd8:	40b3      	lsls	r3, r6
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa20 f407 	lsr.w	r4, r0, r7
 8000be6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bea:	431c      	orrs	r4, r3
 8000bec:	40f9      	lsrs	r1, r7
 8000bee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bfa:	0c20      	lsrs	r0, r4, #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fb09 1118 	mls	r1, r9, r8, r1
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	fb08 f00e 	mul.w	r0, r8, lr
 8000c0c:	4288      	cmp	r0, r1
 8000c0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b8>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2bc>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2bc>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1a09      	subs	r1, r1, r0
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c34:	fb09 1110 	mls	r1, r9, r0, r1
 8000c38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	458e      	cmp	lr, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1e2>
 8000c44:	eb1c 0101 	adds.w	r1, ip, r1
 8000c48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2b4>
 8000c4e:	458e      	cmp	lr, r1
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2b4>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4461      	add	r1, ip
 8000c56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c5e:	eba1 010e 	sub.w	r1, r1, lr
 8000c62:	42a1      	cmp	r1, r4
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46a6      	mov	lr, r4
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x2a4>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x2a0>
 8000c6c:	b15d      	cbz	r5, 8000c86 <__udivmoddi4+0x212>
 8000c6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c72:	eb61 010e 	sbc.w	r1, r1, lr
 8000c76:	fa01 f707 	lsl.w	r7, r1, r7
 8000c7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c7e:	40f1      	lsrs	r1, r6
 8000c80:	431f      	orrs	r7, r3
 8000c82:	e9c5 7100 	strd	r7, r1, [r5]
 8000c86:	2600      	movs	r6, #0
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	f1c2 0320 	rsb	r3, r2, #32
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c98:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4301      	orrs	r1, r0
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cac:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb0:	0c0b      	lsrs	r3, r1, #16
 8000cb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x260>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b8>
 8000ccc:	429e      	cmp	r6, r3
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b8>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	b289      	uxth	r1, r1
 8000cd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x28a>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cfa:	3e02      	subs	r6, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0x104>
 8000d06:	462e      	mov	r6, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e705      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	e6e3      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000d10:	4618      	mov	r0, r3
 8000d12:	e6f8      	b.n	8000b06 <__udivmoddi4+0x92>
 8000d14:	454b      	cmp	r3, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f8>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d20:	3801      	subs	r0, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f8>
 8000d24:	4646      	mov	r6, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x28a>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1e2>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b8>
 8000d34:	3b02      	subs	r3, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x12c>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e709      	b.n	8000b52 <__udivmoddi4+0xde>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x156>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <appInit>:

#include "app.h"

// ======== Init =========== //
void appInit(App *app, GPIO_TypeDef* ledPort, uint16_t ledPin, UART_HandleTypeDef huart, DAC_HandleTypeDef hdac)
{
 8000d48:	b082      	sub	sp, #8
 8000d4a:	b5b0      	push	{r4, r5, r7, lr}
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
 8000d56:	4613      	mov	r3, r2
 8000d58:	80fb      	strh	r3, [r7, #6]
	// ======== LED =========== //
	app->blinkDelay = DELAY_100_MILISECONDS;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d60:	601a      	str	r2, [r3, #0]
	app->ledPort = ledPort;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	605a      	str	r2, [r3, #4]
	app->ledPin = ledPin;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	88fa      	ldrh	r2, [r7, #6]
 8000d6c:	811a      	strh	r2, [r3, #8]

	// ======== UART =========== //
	app->huart = huart;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	330c      	adds	r3, #12
 8000d72:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000d76:	2244      	movs	r2, #68	; 0x44
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f005 fa9f 	bl	80062bc <memcpy>

	// ======== DAC ============ //
	app->hdac = hdac;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8000d84:	f107 0568 	add.w	r5, r7, #104	; 0x68
 8000d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8c:	682b      	ldr	r3, [r5, #0]
 8000d8e:	6023      	str	r3, [r4, #0]

	// ======== Controller =========== //
	pidInit(&app->pid, 0, 0, 0, PID_CONTROLLER);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3364      	adds	r3, #100	; 0x64
 8000d94:	2102      	movs	r1, #2
 8000d96:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8000e60 <appInit+0x118>
 8000d9a:	eddf 0a31 	vldr	s1, [pc, #196]	; 8000e60 <appInit+0x118>
 8000d9e:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8000e60 <appInit+0x118>
 8000da2:	4618      	mov	r0, r3
 8000da4:	f005 f8fc 	bl	8005fa0 <pidInit>
	pidSetSetpoint(&app->pid, 0);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3364      	adds	r3, #100	; 0x64
 8000dac:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8000e60 <appInit+0x118>
 8000db0:	4618      	mov	r0, r3
 8000db2:	f005 fa23 	bl	80061fc <pidSetSetpoint>
	app->samplingDelay = DELAY_10_MILISECONDS;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2264      	movs	r2, #100	; 0x64
 8000dba:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	app->pidComputeDelay = DELAY_10_MILISECONDS;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2264      	movs	r2, #100	; 0x64
 8000dc2:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	app->runPidController = FALSE;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	HAL_DAC_SetValue(&app->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	f002 fb78 	bl	80034ce <HAL_DAC_SetValue>

	// ======== Filter =========== //
	movingAverageInit(&app->movingAverageFilter, 64);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	33a8      	adds	r3, #168	; 0xa8
 8000de2:	2140      	movs	r1, #64	; 0x40
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 f871 	bl	8005ecc <movingAverageInit>

	// ======== Data Packet Tx =========== //
	dataPacketTxInit(&app->dataPacketTx, 0xAA, 0x55);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8000df0:	2255      	movs	r2, #85	; 0x55
 8000df2:	21aa      	movs	r1, #170	; 0xaa
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fc60 	bl	80026ba <dataPacketTxInit>
	app->processVariableReadyToSend = FALSE;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 25a4 	strb.w	r2, [r3, #1444]	; 0x5a4
	app->enableSendProcessVariable = FALSE;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 25a5 	strb.w	r2, [r3, #1445]	; 0x5a5
	app->enableSendPidKsParameterValues = FALSE;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 25a6 	strb.w	r2, [r3, #1446]	; 0x5a6
	app->enableSendPidControllerParameterValues = FALSE;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 25a7 	strb.w	r2, [r3, #1447]	; 0x5a7

	// ======== Data Packet Rx =========== //
	dataPacketRxInit(&app->dataPacketRx, 0xAA, 0x55);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 8000e20:	2255      	movs	r2, #85	; 0x55
 8000e22:	21aa      	movs	r1, #170	; 0xaa
 8000e24:	4618      	mov	r0, r3
 8000e26:	f001 fa99 	bl	800235c <dataPacketRxInit>
	app->decodeCommandStatus = FALSE;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 25ee 	strb.w	r2, [r3, #1518]	; 0x5ee
	app->command = 0;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 25ef 	strb.w	r2, [r3, #1519]	; 0x5ef
	memset(app->data, 0x00, QTY_DATA_BYTES);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 8000e40:	2219      	movs	r2, #25
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f005 fa47 	bl	80062d8 <memset>
	app->dataLenght = 0;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000e5c:	b002      	add	sp, #8
 8000e5e:	4770      	bx	lr
 8000e60:	00000000 	.word	0x00000000

08000e64 <appExecuteBlinkLed>:

// ======== LED =========== //
void appExecuteBlinkLed(App *app)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(app->ledPort, app->ledPin);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	891b      	ldrh	r3, [r3, #8]
 8000e74:	4619      	mov	r1, r3
 8000e76:	4610      	mov	r0, r2
 8000e78:	f002 fddd 	bl	8003a36 <HAL_GPIO_TogglePin>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <appGetBlinkDelay>:

uint32_t appGetBlinkDelay(App *app)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	return app->blinkDelay;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <appRunController>:

// ======== Controller =========== //
void appRunController(App *app)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	pidCompute(&app->pid);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3364      	adds	r3, #100	; 0x64
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f005 f8c5 	bl	8006038 <pidCompute>
	uint32_t controlledVariable = pidGetControlledVariable(&app->pid);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3364      	adds	r3, #100	; 0x64
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f005 f9cf 	bl	8006256 <pidGetControlledVariable>
 8000eb8:	eef0 7a40 	vmov.f32	s15, s0
 8000ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ec0:	ee17 3a90 	vmov	r3, s15
 8000ec4:	60fb      	str	r3, [r7, #12]
	HAL_DAC_SetValue(&app->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, controlledVariable);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f002 fafc 	bl	80034ce <HAL_DAC_SetValue>
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <appSetProcessVariable>:

void appSetProcessVariable(App *app, uint32_t value)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
	pidSetProcessVariable(&app->pid, value);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3364      	adds	r3, #100	; 0x64
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	ee07 2a90 	vmov	s15, r2
 8000ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8000efa:	4618      	mov	r0, r3
 8000efc:	f005 f98d 	bl	800621a <pidSetProcessVariable>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <appGetProcessVariable>:

uint32_t appGetProcessVariable(App *app)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	return pidGetProcessVariable(&app->pid);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3364      	adds	r3, #100	; 0x64
 8000f14:	4618      	mov	r0, r3
 8000f16:	f005 f98f 	bl	8006238 <pidGetProcessVariable>
 8000f1a:	eef0 7a40 	vmov.f32	s15, s0
 8000f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f22:	ee17 3a90 	vmov	r3, s15
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <appGetCurrentInMiliAmps>:

uint32_t appGetCurrentInMiliAmps(uint16_t adcValue)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
	uint32_t electronicCircuitGain = 10;
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t shuntResistorInOhms = 1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
  	float measuredSignalInVolts = ((3.3 * adcValue) / 4095);
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fab1 	bl	80004ac <__aeabi_i2d>
 8000f4a:	a322      	add	r3, pc, #136	; (adr r3, 8000fd4 <appGetCurrentInMiliAmps+0xa4>)
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	f7ff fb16 	bl	8000580 <__aeabi_dmul>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	a31f      	add	r3, pc, #124	; (adr r3, 8000fdc <appGetCurrentInMiliAmps+0xac>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff fc37 	bl	80007d4 <__aeabi_ddiv>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fd19 	bl	80009a4 <__aeabi_d2f>
 8000f72:	4603      	mov	r3, r0
 8000f74:	61fb      	str	r3, [r7, #28]
  	float conditionedSignalInVolts = measuredSignalInVolts / electronicCircuitGain;
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	ee07 3a90 	vmov	s15, r3
 8000f7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f80:	edd7 6a07 	vldr	s13, [r7, #28]
 8000f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f88:	edc7 7a06 	vstr	s15, [r7, #24]
  	float calculatedCurrentInAmps = conditionedSignalInVolts / shuntResistorInOhms;
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f96:	edd7 6a06 	vldr	s13, [r7, #24]
 8000f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f9e:	edc7 7a05 	vstr	s15, [r7, #20]
  	float calculatedCurrentInMiliAmpsAux = 1000 * calculatedCurrentInAmps;
 8000fa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fa6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000fd0 <appGetCurrentInMiliAmps+0xa0>
 8000faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fae:	edc7 7a04 	vstr	s15, [r7, #16]
  	uint32_t calculatedCurrentInMiliAmps = (uint32_t) calculatedCurrentInMiliAmpsAux;
 8000fb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fba:	ee17 3a90 	vmov	r3, s15
 8000fbe:	60fb      	str	r3, [r7, #12]
  	return calculatedCurrentInMiliAmps;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	447a0000 	.word	0x447a0000
 8000fd4:	66666666 	.word	0x66666666
 8000fd8:	400a6666 	.word	0x400a6666
 8000fdc:	00000000 	.word	0x00000000
 8000fe0:	40affe00 	.word	0x40affe00

08000fe4 <appAddNewValueToFilter>:

// ======== Filter =========== //
void appAddNewValueToFilter(App *app, uint32_t newValue)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	movingAverageAddValue(&app->movingAverageFilter, newValue);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	33a8      	adds	r3, #168	; 0xa8
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f004 ff88 	bl	8005f0c <movingAverageAddValue>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <appGetFilterResult>:

uint32_t appGetFilterResult(App *app)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	return movingAverageGetMean(&app->movingAverageFilter);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	33a8      	adds	r3, #168	; 0xa8
 8001010:	4618      	mov	r0, r3
 8001012:	f004 ffb8 	bl	8005f86 <movingAverageGetMean>
 8001016:	4603      	mov	r3, r0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <appAppendReceivedByte>:

// ======== Data Packet Rx =========== //
void appAppendReceivedByte(App *app, uint8_t receivedByte)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
	dataPacketRxAppend(&app->dataPacketRx, receivedByte);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 8001032:	78fa      	ldrb	r2, [r7, #3]
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f001 f9cb 	bl	80023d2 <dataPacketRxAppend>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <appTryDecodeReceivedDataPacket>:

void appTryDecodeReceivedDataPacket(App *app)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	dataPacketRxDecode(&app->dataPacketRx);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 8001052:	4618      	mov	r0, r3
 8001054:	f001 f9e7 	bl	8002426 <dataPacketRxDecode>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <appTryExtractCommandAndPayloadFromDecodedDataPacket>:

void appTryExtractCommandAndPayloadFromDecodedDataPacket(App *app)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	if (dataPacketRxGetDataPacketStatus(&app->dataPacketRx) == VALID_RX_DATA_PACKET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fb16 	bl	80026a0 <dataPacketRxGetDataPacketStatus>
 8001074:	4603      	mov	r3, r0
 8001076:	2b01      	cmp	r3, #1
 8001078:	d12e      	bne.n	80010d8 <appTryExtractCommandAndPayloadFromDecodedDataPacket+0x78>
	{
		uint8_t receivedCmd = dataPacketRxGetCommand(&app->dataPacketRx);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fad0 	bl	8002626 <dataPacketRxGetCommand>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
		uint8_t receivedPayloadDataLength = dataPacketRxGetPayloadDataLength(&app->dataPacketRx);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 8001090:	4618      	mov	r0, r3
 8001092:	f001 faf9 	bl	8002688 <dataPacketRxGetPayloadDataLength>
 8001096:	4603      	mov	r3, r0
 8001098:	73bb      	strb	r3, [r7, #14]

		if (receivedPayloadDataLength > 0)
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00c      	beq.n	80010ba <appTryExtractCommandAndPayloadFromDecodedDataPacket+0x5a>
		{
			uint8_t *receivedPayloadData = dataPacketRxGetPayloadData(&app->dataPacketRx);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 fae2 	bl	8002670 <dataPacketRxGetPayloadData>
 80010ac:	60b8      	str	r0, [r7, #8]
			appSetData(app, receivedPayloadData, receivedPayloadDataLength);
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	461a      	mov	r2, r3
 80010b2:	68b9      	ldr	r1, [r7, #8]
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f964 	bl	8001382 <appSetData>
		}

		appSetCommand(app, receivedCmd);
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f932 	bl	8001328 <appSetCommand>
		appSetDecodeStatus(app, TRUE);
 80010c4:	2101      	movs	r1, #1
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f93e 	bl	8001348 <appSetDecodeStatus>
		dataPacketRxClear(&app->dataPacketRx);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fa5c 	bl	8002590 <dataPacketRxClear>
	}
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <appTryDecodeExtractedCommand>:

void appTryDecodeExtractedCommand(App *app)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	if (appGetDecodeStatus(app) == TRUE)
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f93d 	bl	8001368 <appGetDecodeStatus>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d106      	bne.n	8001102 <appTryDecodeExtractedCommand+0x22>
	{
		appDecodeReceivedCommand(app);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 f809 	bl	800110c <appDecodeReceivedCommand>
		appSetDecodeStatus(app, FALSE);
 80010fa:	2100      	movs	r1, #0
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f923 	bl	8001348 <appSetDecodeStatus>
	}
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <appDecodeReceivedCommand>:

void appDecodeReceivedCommand(App *app)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	uint16_t receivedSamplingDelay = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	81fb      	strh	r3, [r7, #14]
	uint16_t receivedPidComputeDelay = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	81bb      	strh	r3, [r7, #12]
	uint32_t receivedPidSetpoint = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]

	switch (app->command)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 35ef 	ldrb.w	r3, [r3, #1519]	; 0x5ef
 8001126:	3b10      	subs	r3, #16
 8001128:	2b12      	cmp	r3, #18
 800112a:	f200 80ec 	bhi.w	8001306 <appDecodeReceivedCommand+0x1fa>
 800112e:	a201      	add	r2, pc, #4	; (adr r2, 8001134 <appDecodeReceivedCommand+0x28>)
 8001130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001134:	080011bf 	.word	0x080011bf
 8001138:	080011d5 	.word	0x080011d5
 800113c:	080011eb 	.word	0x080011eb
 8001140:	080011ab 	.word	0x080011ab
 8001144:	08001307 	.word	0x08001307
 8001148:	08001299 	.word	0x08001299
 800114c:	080011b5 	.word	0x080011b5
 8001150:	08001307 	.word	0x08001307
 8001154:	08001201 	.word	0x08001201
 8001158:	0800122d 	.word	0x0800122d
 800115c:	08001307 	.word	0x08001307
 8001160:	08001307 	.word	0x08001307
 8001164:	08001307 	.word	0x08001307
 8001168:	08001307 	.word	0x08001307
 800116c:	08001307 	.word	0x08001307
 8001170:	08001307 	.word	0x08001307
 8001174:	08001259 	.word	0x08001259
 8001178:	08001307 	.word	0x08001307
 800117c:	08001181 	.word	0x08001181
	{
		case CMD_RX_ASK_FOR_SEND_PROCESS_VARIABLE:
			if (app->data[0] == 0x00)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d104      	bne.n	8001194 <appDecodeReceivedCommand+0x88>
			{
				app->enableSendProcessVariable = FALSE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 25a5 	strb.w	r2, [r3, #1445]	; 0x5a5
			}
			else if (app->data[0] == 0x01)
			{
				app->enableSendProcessVariable = TRUE;
			}
			break;
 8001192:	e0ba      	b.n	800130a <appDecodeReceivedCommand+0x1fe>
			else if (app->data[0] == 0x01)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 800119a:	2b01      	cmp	r3, #1
 800119c:	f040 80b5 	bne.w	800130a <appDecodeReceivedCommand+0x1fe>
				app->enableSendProcessVariable = TRUE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 25a5 	strb.w	r2, [r3, #1445]	; 0x5a5
			break;
 80011a8:	e0af      	b.n	800130a <appDecodeReceivedCommand+0x1fe>

		case CMD_RX_ASK_FOR_PID_KS_PARAMETERS:
			app->enableSendPidKsParameterValues = TRUE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	f883 25a6 	strb.w	r2, [r3, #1446]	; 0x5a6
			break;
 80011b2:	e0b3      	b.n	800131c <appDecodeReceivedCommand+0x210>

		case CMD_RX_ASK_FOR_PID_CONTROLLER_PARAMETERS:
			app->enableSendPidControllerParameterValues = TRUE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 25a7 	strb.w	r2, [r3, #1447]	; 0x5a7
			break;
 80011bc:	e0ae      	b.n	800131c <appDecodeReceivedCommand+0x210>

		case CMD_RX_SET_PID_KP_PARAMETER:
			app->pid.kp = app->data[0];
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			break;
 80011d2:	e0a3      	b.n	800131c <appDecodeReceivedCommand+0x210>

		case CMD_RX_SET_PID_KI_PARAMETER:
			app->pid.ki = app->data[0];
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			break;
 80011e8:	e098      	b.n	800131c <appDecodeReceivedCommand+0x210>

		case CMD_RX_SET_PID_KD_PARAMETER:
			app->pid.kd = app->data[0];
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			break;
 80011fe:	e08d      	b.n	800131c <appDecodeReceivedCommand+0x210>

		case CMD_RX_SET_SAMPLING_DELAY:
			receivedSamplingDelay = (app->data[0] << 8) + app->data[1];
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 8001206:	b29b      	uxth	r3, r3
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b29a      	uxth	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 35f1 	ldrb.w	r3, [r3, #1521]	; 0x5f1
 8001212:	b29b      	uxth	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	81fb      	strh	r3, [r7, #14]
			if ((receivedSamplingDelay >= 0) && (receivedSamplingDelay <= 50000))
 8001218:	89fb      	ldrh	r3, [r7, #14]
 800121a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800121e:	4293      	cmp	r3, r2
 8001220:	d875      	bhi.n	800130e <appDecodeReceivedCommand+0x202>
			{
				app->samplingDelay = receivedSamplingDelay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	89fa      	ldrh	r2, [r7, #14]
 8001226:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
			}
			break;
 800122a:	e070      	b.n	800130e <appDecodeReceivedCommand+0x202>

		case CMD_RX_SET_PID_DELAY:
			receivedPidComputeDelay = (app->data[0] << 8) + app->data[1];
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 8001232:	b29b      	uxth	r3, r3
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	b29a      	uxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 35f1 	ldrb.w	r3, [r3, #1521]	; 0x5f1
 800123e:	b29b      	uxth	r3, r3
 8001240:	4413      	add	r3, r2
 8001242:	81bb      	strh	r3, [r7, #12]
			if ((receivedPidComputeDelay >= 0) && (receivedPidComputeDelay <= 50000))
 8001244:	89bb      	ldrh	r3, [r7, #12]
 8001246:	f24c 3250 	movw	r2, #50000	; 0xc350
 800124a:	4293      	cmp	r3, r2
 800124c:	d861      	bhi.n	8001312 <appDecodeReceivedCommand+0x206>
			{
				app->pidComputeDelay = receivedPidComputeDelay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	89ba      	ldrh	r2, [r7, #12]
 8001252:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
			}
			break;
 8001256:	e05c      	b.n	8001312 <appDecodeReceivedCommand+0x206>

		case CMD_RX_SET_PID_SETPOINT:
			receivedPidSetpoint = (app->data[0] << 24) + (app->data[1] << 16) + (app->data[2] << 8) + app->data[3];
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 800125e:	061a      	lsls	r2, r3, #24
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 35f1 	ldrb.w	r3, [r3, #1521]	; 0x5f1
 8001266:	041b      	lsls	r3, r3, #16
 8001268:	441a      	add	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 35f2 	ldrb.w	r3, [r3, #1522]	; 0x5f2
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	4413      	add	r3, r2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	f892 25f3 	ldrb.w	r2, [r2, #1523]	; 0x5f3
 800127a:	4413      	add	r3, r2
 800127c:	60bb      	str	r3, [r7, #8]
			if ((receivedPidSetpoint >= 0) && (receivedPidSetpoint <= 300000))
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	4a28      	ldr	r2, [pc, #160]	; (8001324 <appDecodeReceivedCommand+0x218>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d847      	bhi.n	8001316 <appDecodeReceivedCommand+0x20a>
			{
				app->pid.setpoint = receivedPidSetpoint;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
			}
			break;
 8001296:	e03e      	b.n	8001316 <appDecodeReceivedCommand+0x20a>

		case CMD_RX_ASK_FOR_RUN_PID_CONTROLLER:
			if (app->data[0] == 0x00)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d127      	bne.n	80012f2 <appDecodeReceivedCommand+0x1e6>
			{
				app->runPidController = FALSE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				app->pid.controlledVariable = 0;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				app->pid.currentError = 0;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	671a      	str	r2, [r3, #112]	; 0x70
				app->pid.differenceOfErrors = 0;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				app->pid.previousError = 0;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	675a      	str	r2, [r3, #116]	; 0x74
				app->pid.processVariable = 0;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				app->pid.sumOfErrors = 0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	679a      	str	r2, [r3, #120]	; 0x78
				HAL_DAC_SetValue(&app->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80012e6:	2300      	movs	r3, #0
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	f002 f8ef 	bl	80034ce <HAL_DAC_SetValue>
			}
			else if (app->data[0] == 0x01)
			{
				app->runPidController = TRUE;
			}
			break;
 80012f0:	e013      	b.n	800131a <appDecodeReceivedCommand+0x20e>
			else if (app->data[0] == 0x01)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 35f0 	ldrb.w	r3, [r3, #1520]	; 0x5f0
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d10e      	bne.n	800131a <appDecodeReceivedCommand+0x20e>
				app->runPidController = TRUE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			break;
 8001304:	e009      	b.n	800131a <appDecodeReceivedCommand+0x20e>

		default:
			break;
 8001306:	bf00      	nop
 8001308:	e008      	b.n	800131c <appDecodeReceivedCommand+0x210>
			break;
 800130a:	bf00      	nop
 800130c:	e006      	b.n	800131c <appDecodeReceivedCommand+0x210>
			break;
 800130e:	bf00      	nop
 8001310:	e004      	b.n	800131c <appDecodeReceivedCommand+0x210>
			break;
 8001312:	bf00      	nop
 8001314:	e002      	b.n	800131c <appDecodeReceivedCommand+0x210>
			break;
 8001316:	bf00      	nop
 8001318:	e000      	b.n	800131c <appDecodeReceivedCommand+0x210>
			break;
 800131a:	bf00      	nop
	}
}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	000493e0 	.word	0x000493e0

08001328 <appSetCommand>:

void appSetCommand(App *app, uint8_t command)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
	app->command = command;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	78fa      	ldrb	r2, [r7, #3]
 8001338:	f883 25ef 	strb.w	r2, [r3, #1519]	; 0x5ef
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <appSetDecodeStatus>:

void appSetDecodeStatus(App *app, Bool status)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	70fb      	strb	r3, [r7, #3]
	app->decodeCommandStatus = status;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	78fa      	ldrb	r2, [r7, #3]
 8001358:	f883 25ee 	strb.w	r2, [r3, #1518]	; 0x5ee
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <appGetDecodeStatus>:

Bool appGetDecodeStatus(App *app)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	return app->decodeCommandStatus;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 35ee 	ldrb.w	r3, [r3, #1518]	; 0x5ee
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <appSetData>:

void appSetData(App *app, uint8_t *data, uint8_t dataLength)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	4613      	mov	r3, r2
 800138e:	71fb      	strb	r3, [r7, #7]
	if (dataLength <= QTY_DATA_BYTES)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2b19      	cmp	r3, #25
 8001394:	d80b      	bhi.n	80013ae <appSetData+0x2c>
	{
		app->dataLenght = dataLength;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	79fa      	ldrb	r2, [r7, #7]
 800139a:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
		memcpy(app->data, data, dataLength);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 80013a4:	79fa      	ldrb	r2, [r7, #7]
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f004 ff87 	bl	80062bc <memcpy>
	}
}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <appSendProcessVariable>:

// ======== Data Packet Tx =========== //
void appSendProcessVariable(App *app)
{
 80013b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013ba:	b094      	sub	sp, #80	; 0x50
 80013bc:	af0e      	add	r7, sp, #56	; 0x38
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	466b      	mov	r3, sp
 80013c2:	469a      	mov	sl, r3
	uint32_t processVariableValue = appGetProcessVariable(app);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fd9f 	bl	8000f08 <appGetProcessVariable>
 80013ca:	6178      	str	r0, [r7, #20]
	uint8_t qtyOfBytes = 4;
 80013cc:	2304      	movs	r3, #4
 80013ce:	74fb      	strb	r3, [r7, #19]
	uint8_t bytes[qtyOfBytes];
 80013d0:	7cf9      	ldrb	r1, [r7, #19]
 80013d2:	460b      	mov	r3, r1
 80013d4:	3b01      	subs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	b2cb      	uxtb	r3, r1
 80013da:	2200      	movs	r2, #0
 80013dc:	4698      	mov	r8, r3
 80013de:	4691      	mov	r9, r2
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013f4:	b2cb      	uxtb	r3, r1
 80013f6:	2200      	movs	r2, #0
 80013f8:	461c      	mov	r4, r3
 80013fa:	4615      	mov	r5, r2
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	00eb      	lsls	r3, r5, #3
 8001406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800140a:	00e2      	lsls	r2, r4, #3
 800140c:	460b      	mov	r3, r1
 800140e:	3307      	adds	r3, #7
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	ebad 0d03 	sub.w	sp, sp, r3
 8001418:	ab0e      	add	r3, sp, #56	; 0x38
 800141a:	3300      	adds	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
	bytes[0] = ((processVariableValue >> 24) & 0x000000FF);
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	0e1b      	lsrs	r3, r3, #24
 8001422:	b2da      	uxtb	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((processVariableValue >> 16) & 0x000000FF);
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	0c1b      	lsrs	r3, r3, #16
 800142c:	b2da      	uxtb	r2, r3
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((processVariableValue >> 8) & 0x000000FF);
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	b2da      	uxtb	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	709a      	strb	r2, [r3, #2]
	bytes[3] = (processVariableValue & 0x000000FF);
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	70da      	strb	r2, [r3, #3]

	dataPacketTxSetCommand(&app->dataPacketTx, CMD_TX_PROCESS_VARIABLE_VALUE);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f203 5364 	addw	r3, r3, #1380	; 0x564
 800144a:	2121      	movs	r1, #33	; 0x21
 800144c:	4618      	mov	r0, r3
 800144e:	f001 fa03 	bl	8002858 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&app->dataPacketTx, bytes, qtyOfBytes);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8001458:	7cfa      	ldrb	r2, [r7, #19]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	4618      	mov	r0, r3
 800145e:	f001 fa15 	bl	800288c <dataPacketTxSetPayloadData>
	dataPacketTxMount(&app->dataPacketTx);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8001468:	4618      	mov	r0, r3
 800146a:	f001 f956 	bl	800271a <dataPacketTxMount>
	dataPacketTxUartSend(&app->dataPacketTx, app->huart);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f203 5c64 	addw	ip, r3, #1380	; 0x564
 8001474:	687e      	ldr	r6, [r7, #4]
 8001476:	466d      	mov	r5, sp
 8001478:	f106 0418 	add.w	r4, r6, #24
 800147c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001488:	e894 0003 	ldmia.w	r4, {r0, r1}
 800148c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001490:	f106 030c 	add.w	r3, r6, #12
 8001494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001496:	4660      	mov	r0, ip
 8001498:	f001 f986 	bl	80027a8 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&app->dataPacketTx);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f203 5364 	addw	r3, r3, #1380	; 0x564
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 f9bc 	bl	8002820 <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&app->dataPacketTx);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f203 5364 	addw	r3, r3, #1380	; 0x564
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 f99a 	bl	80027e8 <dataPacketTxClear>
 80014b4:	46d5      	mov	sp, sl
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080014c0 <appSendPidKsParameterValues>:

void appSendPidKsParameterValues(App *app)
{
 80014c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014c4:	b096      	sub	sp, #88	; 0x58
 80014c6:	af0e      	add	r7, sp, #56	; 0x38
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	466b      	mov	r3, sp
 80014cc:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 12;
 80014ce:	230c      	movs	r3, #12
 80014d0:	77fb      	strb	r3, [r7, #31]
	uint8_t bytes[qtyOfBytes];
 80014d2:	7ff9      	ldrb	r1, [r7, #31]
 80014d4:	460b      	mov	r3, r1
 80014d6:	3b01      	subs	r3, #1
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	b2cb      	uxtb	r3, r1
 80014dc:	2200      	movs	r2, #0
 80014de:	4698      	mov	r8, r3
 80014e0:	4691      	mov	r9, r2
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014f6:	b2cb      	uxtb	r3, r1
 80014f8:	2200      	movs	r2, #0
 80014fa:	461c      	mov	r4, r3
 80014fc:	4615      	mov	r5, r2
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	00eb      	lsls	r3, r5, #3
 8001508:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800150c:	00e2      	lsls	r2, r4, #3
 800150e:	460b      	mov	r3, r1
 8001510:	3307      	adds	r3, #7
 8001512:	08db      	lsrs	r3, r3, #3
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	ebad 0d03 	sub.w	sp, sp, r3
 800151a:	ab0e      	add	r3, sp, #56	; 0x38
 800151c:	3300      	adds	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
	uint32_t kpTimes1000 = (uint32_t)(1000 * app->pid.kp);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001526:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001658 <appSendPidKsParameterValues+0x198>
 800152a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001532:	ee17 3a90 	vmov	r3, s15
 8001536:	613b      	str	r3, [r7, #16]
	uint32_t kiTimes1000 = (uint32_t)(1000 * app->pid.ki);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800153e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001658 <appSendPidKsParameterValues+0x198>
 8001542:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800154a:	ee17 3a90 	vmov	r3, s15
 800154e:	60fb      	str	r3, [r7, #12]
	uint32_t kdTimes1000 = (uint32_t)(1000 * app->pid.kd);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001556:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001658 <appSendPidKsParameterValues+0x198>
 800155a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001562:	ee17 3a90 	vmov	r3, s15
 8001566:	60bb      	str	r3, [r7, #8]

	bytes[0] = ((kpTimes1000 >> 24) & 0x000000FF);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	0e1b      	lsrs	r3, r3, #24
 800156c:	b2da      	uxtb	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((kpTimes1000 >> 16) & 0x000000FF);
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	0c1b      	lsrs	r3, r3, #16
 8001576:	b2da      	uxtb	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((kpTimes1000 >> 8) & 0x000000FF);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	b2da      	uxtb	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	709a      	strb	r2, [r3, #2]
	bytes[3] = (kpTimes1000 & 0x000000FF);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	70da      	strb	r2, [r3, #3]

	bytes[4] = ((kiTimes1000 >> 24) & 0x000000FF);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	0e1b      	lsrs	r3, r3, #24
 8001592:	b2da      	uxtb	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	711a      	strb	r2, [r3, #4]
	bytes[5] = ((kiTimes1000 >> 16) & 0x000000FF);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	b2da      	uxtb	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	715a      	strb	r2, [r3, #5]
	bytes[6] = ((kiTimes1000 >> 8) & 0x000000FF);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	719a      	strb	r2, [r3, #6]
	bytes[7] = (kiTimes1000 & 0x000000FF);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	71da      	strb	r2, [r3, #7]

	bytes[8] = ((kdTimes1000 >> 24) & 0x000000FF);
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	0e1b      	lsrs	r3, r3, #24
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	721a      	strb	r2, [r3, #8]
	bytes[9] = ((kdTimes1000 >> 16) & 0x000000FF);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	0c1b      	lsrs	r3, r3, #16
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	725a      	strb	r2, [r3, #9]
	bytes[10] = ((kdTimes1000 >> 8) & 0x000000FF);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	729a      	strb	r2, [r3, #10]
	bytes[11] = (kdTimes1000 & 0x000000FF);
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	72da      	strb	r2, [r3, #11]

	dataPacketTxSetCommand(&app->dataPacketTx, CMD_TX_PID_KS_PARAMETER_VALUES);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f203 5364 	addw	r3, r3, #1380	; 0x564
 80015e0:	2114      	movs	r1, #20
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 f938 	bl	8002858 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&app->dataPacketTx, bytes, qtyOfBytes);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f203 5364 	addw	r3, r3, #1380	; 0x564
 80015ee:	7ffa      	ldrb	r2, [r7, #31]
 80015f0:	6979      	ldr	r1, [r7, #20]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 f94a 	bl	800288c <dataPacketTxSetPayloadData>
	dataPacketTxMount(&app->dataPacketTx);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f203 5364 	addw	r3, r3, #1380	; 0x564
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 f88b 	bl	800271a <dataPacketTxMount>
	dataPacketTxUartSend(&app->dataPacketTx, app->huart);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f203 5c64 	addw	ip, r3, #1380	; 0x564
 800160a:	687e      	ldr	r6, [r7, #4]
 800160c:	466d      	mov	r5, sp
 800160e:	f106 0418 	add.w	r4, r6, #24
 8001612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001622:	e885 0003 	stmia.w	r5, {r0, r1}
 8001626:	f106 030c 	add.w	r3, r6, #12
 800162a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162c:	4660      	mov	r0, ip
 800162e:	f001 f8bb 	bl	80027a8 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&app->dataPacketTx);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8001638:	4618      	mov	r0, r3
 800163a:	f001 f8f1 	bl	8002820 <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&app->dataPacketTx);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8001644:	4618      	mov	r0, r3
 8001646:	f001 f8cf 	bl	80027e8 <dataPacketTxClear>
 800164a:	46d5      	mov	sp, sl
}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001656:	bf00      	nop
 8001658:	447a0000 	.word	0x447a0000

0800165c <appSendPidControllerParameterValues>:

void appSendPidControllerParameterValues(App *app)
{
 800165c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001660:	b094      	sub	sp, #80	; 0x50
 8001662:	af0e      	add	r7, sp, #56	; 0x38
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	466b      	mov	r3, sp
 8001668:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 9;
 800166a:	2309      	movs	r3, #9
 800166c:	75fb      	strb	r3, [r7, #23]
	uint8_t bytes[qtyOfBytes];
 800166e:	7df9      	ldrb	r1, [r7, #23]
 8001670:	460b      	mov	r3, r1
 8001672:	3b01      	subs	r3, #1
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	b2cb      	uxtb	r3, r1
 8001678:	2200      	movs	r2, #0
 800167a:	4698      	mov	r8, r3
 800167c:	4691      	mov	r9, r2
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800168a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800168e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001692:	b2cb      	uxtb	r3, r1
 8001694:	2200      	movs	r2, #0
 8001696:	461c      	mov	r4, r3
 8001698:	4615      	mov	r5, r2
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	00eb      	lsls	r3, r5, #3
 80016a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016a8:	00e2      	lsls	r2, r4, #3
 80016aa:	460b      	mov	r3, r1
 80016ac:	3307      	adds	r3, #7
 80016ae:	08db      	lsrs	r3, r3, #3
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	ebad 0d03 	sub.w	sp, sp, r3
 80016b6:	ab0e      	add	r3, sp, #56	; 0x38
 80016b8:	3300      	adds	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
	uint32_t setpointTimes1000 = (uint32_t)(1000 * app->pid.setpoint);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80016c2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80017bc <appSendPidControllerParameterValues+0x160>
 80016c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ce:	ee17 3a90 	vmov	r3, s15
 80016d2:	60bb      	str	r3, [r7, #8]

	bytes[0] = ((app->samplingDelay >> 8) & 0x00FF);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80016da:	0a1b      	lsrs	r3, r3, #8
 80016dc:	b29b      	uxth	r3, r3
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	701a      	strb	r2, [r3, #0]
	bytes[1] = (app->samplingDelay & 0x00FF);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((app->pidComputeDelay >> 8) & 0x00FF);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	709a      	strb	r2, [r3, #2]
	bytes[3] = (app->pidComputeDelay & 0x00FF);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8001706:	b2da      	uxtb	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	70da      	strb	r2, [r3, #3]
	bytes[4] = ((setpointTimes1000 >> 24) & 0x000000FF);
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	0e1b      	lsrs	r3, r3, #24
 8001710:	b2da      	uxtb	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	711a      	strb	r2, [r3, #4]
	bytes[5] = ((setpointTimes1000 >> 16) & 0x000000FF);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	0c1b      	lsrs	r3, r3, #16
 800171a:	b2da      	uxtb	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	715a      	strb	r2, [r3, #5]
	bytes[6] = ((setpointTimes1000 >> 8) & 0x000000FF);
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	0a1b      	lsrs	r3, r3, #8
 8001724:	b2da      	uxtb	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	719a      	strb	r2, [r3, #6]
	bytes[7] = (setpointTimes1000 & 0x000000FF);
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	71da      	strb	r2, [r3, #7]
	bytes[8] = (uint8_t) app->movingAverageFilter.window;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	; 0xaa
 8001738:	b2da      	uxtb	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	721a      	strb	r2, [r3, #8]

	dataPacketTxSetCommand(&app->dataPacketTx, CMD_TX_PID_CONTROLLER_PARAMETER_VALUES);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8001744:	2117      	movs	r1, #23
 8001746:	4618      	mov	r0, r3
 8001748:	f001 f886 	bl	8002858 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&app->dataPacketTx, bytes, qtyOfBytes);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8001752:	7dfa      	ldrb	r2, [r7, #23]
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	4618      	mov	r0, r3
 8001758:	f001 f898 	bl	800288c <dataPacketTxSetPayloadData>
	dataPacketTxMount(&app->dataPacketTx);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f203 5364 	addw	r3, r3, #1380	; 0x564
 8001762:	4618      	mov	r0, r3
 8001764:	f000 ffd9 	bl	800271a <dataPacketTxMount>
	dataPacketTxUartSend(&app->dataPacketTx, app->huart);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f203 5c64 	addw	ip, r3, #1380	; 0x564
 800176e:	687e      	ldr	r6, [r7, #4]
 8001770:	466d      	mov	r5, sp
 8001772:	f106 0418 	add.w	r4, r6, #24
 8001776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001782:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001786:	e885 0003 	stmia.w	r5, {r0, r1}
 800178a:	f106 030c 	add.w	r3, r6, #12
 800178e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001790:	4660      	mov	r0, ip
 8001792:	f001 f809 	bl	80027a8 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&app->dataPacketTx);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f203 5364 	addw	r3, r3, #1380	; 0x564
 800179c:	4618      	mov	r0, r3
 800179e:	f001 f83f 	bl	8002820 <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&app->dataPacketTx);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f203 5364 	addw	r3, r3, #1380	; 0x564
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 f81d 	bl	80027e8 <dataPacketTxClear>
 80017ae:	46d5      	mov	sp, sl
}
 80017b0:	bf00      	nop
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017ba:	bf00      	nop
 80017bc:	447a0000 	.word	0x447a0000

080017c0 <appTrySendData>:

void appTrySendData(App *app)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	if (appGetEnableSendPidKsParameterValues(app) == TRUE)
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f833 	bl	8001834 <appGetEnableSendPidKsParameterValues>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d107      	bne.n	80017e4 <appTrySendData+0x24>
	{
		appSendPidKsParameterValues(app);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fe73 	bl	80014c0 <appSendPidKsParameterValues>
		appSetEnableSendPidKsParameterValues(app, FALSE);
 80017da:	2100      	movs	r1, #0
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f836 	bl	800184e <appSetEnableSendPidKsParameterValues>
	}
	else if (appGetEnableSendProcessVariable(app) == TRUE)
	{
		appSendProcessVariable(app);
	}
}
 80017e2:	e016      	b.n	8001812 <appTrySendData+0x52>
	else if (appGetEnableSendPidControllerParameterValues(app) == TRUE)
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f85c 	bl	80018a2 <appGetEnableSendPidControllerParameterValues>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d107      	bne.n	8001800 <appTrySendData+0x40>
		appSendPidControllerParameterValues(app);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ff33 	bl	800165c <appSendPidControllerParameterValues>
		appSetEnableSendPidControllerParameterValues(app, FALSE);
 80017f6:	2100      	movs	r1, #0
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f85f 	bl	80018bc <appSetEnableSendPidControllerParameterValues>
}
 80017fe:	e008      	b.n	8001812 <appTrySendData+0x52>
	else if (appGetEnableSendProcessVariable(app) == TRUE)
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f80a 	bl	800181a <appGetEnableSendProcessVariable>
 8001806:	4603      	mov	r3, r0
 8001808:	2b01      	cmp	r3, #1
 800180a:	d102      	bne.n	8001812 <appTrySendData+0x52>
		appSendProcessVariable(app);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff fdd2 	bl	80013b6 <appSendProcessVariable>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <appGetEnableSendProcessVariable>:
{
	return app->processVariableReadyToSend;
}

Bool appGetEnableSendProcessVariable(App *app)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
	return app->enableSendProcessVariable;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 35a5 	ldrb.w	r3, [r3, #1445]	; 0x5a5
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <appGetEnableSendPidKsParameterValues>:
{
	app->enableSendProcessVariable = status;
}

Bool appGetEnableSendPidKsParameterValues(App *app)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	return app->enableSendPidKsParameterValues;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 35a6 	ldrb.w	r3, [r3, #1446]	; 0x5a6
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <appSetEnableSendPidKsParameterValues>:

void appSetEnableSendPidKsParameterValues(App *app, Bool status)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	70fb      	strb	r3, [r7, #3]
	app->enableSendPidKsParameterValues = status;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	f883 25a6 	strb.w	r2, [r3, #1446]	; 0x5a6
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <appGetSamplingDelay>:
{
	app->samplingDelay = samplingDelay;
}

uint16_t appGetSamplingDelay(App *app)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
	return app->samplingDelay;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <appGetPidComputeDelay>:
{
	app->pidComputeDelay = pidComputeDelay;
}

uint16_t appGetPidComputeDelay(App *app)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	return app->pidComputeDelay;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <appGetEnableSendPidControllerParameterValues>:

Bool appGetEnableSendPidControllerParameterValues(App *app)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
	return app->enableSendPidControllerParameterValues;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 35a7 	ldrb.w	r3, [r3, #1447]	; 0x5a7
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <appSetEnableSendPidControllerParameterValues>:

void appSetEnableSendPidControllerParameterValues(App *app, Bool status)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
	app->enableSendPidControllerParameterValues = status;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	f883 25a7 	strb.w	r2, [r3, #1447]	; 0x5a7
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <appGetRunPidControllerStatus>:

Bool appGetRunPidControllerStatus(App *app)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	return app->runPidController;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a13      	ldr	r2, [pc, #76]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d11d      	bne.n	8001944 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		decodeDataPacketDelay++;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	4b10      	ldr	r3, [pc, #64]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001912:	801a      	strh	r2, [r3, #0]
		blinkLedDelay++;
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800191e:	801a      	strh	r2, [r3, #0]
		sendDataDelay1++;
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800192a:	801a      	strh	r2, [r3, #0]
		samplingDelay++;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001936:	801a      	strh	r2, [r3, #0]
		controllerDelay++;
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	b29a      	uxth	r2, r3
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001942:	801a      	strh	r2, [r3, #0]
	}
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	20000084 	.word	0x20000084
 8001954:	20000156 	.word	0x20000156
 8001958:	20000158 	.word	0x20000158
 800195c:	2000015a 	.word	0x2000015a
 8001960:	2000015c 	.word	0x2000015c
 8001964:	2000015e 	.word	0x2000015e

08001968 <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_UART_RxCpltCallback+0x34>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d10d      	bne.n	8001994 <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8001978:	2201      	movs	r2, #1
 800197a:	4909      	ldr	r1, [pc, #36]	; (80019a0 <HAL_UART_RxCpltCallback+0x38>)
 800197c:	4807      	ldr	r0, [pc, #28]	; (800199c <HAL_UART_RxCpltCallback+0x34>)
 800197e:	f003 fb0c 	bl	8004f9a <HAL_UART_Receive_IT>
		appAppendReceivedByte(&app, receivedByte);
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <HAL_UART_RxCpltCallback+0x38>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	4806      	ldr	r0, [pc, #24]	; (80019a4 <HAL_UART_RxCpltCallback+0x3c>)
 800198a:	f7ff fb49 	bl	8001020 <appAppendReceivedByte>
		receivedByte = 0x00;
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <HAL_UART_RxCpltCallback+0x38>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
	}
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200000cc 	.word	0x200000cc
 80019a0:	20000154 	.word	0x20000154
 80019a4:	20000160 	.word	0x20000160

080019a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b09b      	sub	sp, #108	; 0x6c
 80019ac:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ae:	f000 ff87 	bl	80028c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b2:	f000 f8e3 	bl	8001b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b6:	f000 fa5d 	bl	8001e74 <MX_GPIO_Init>
  MX_ADC1_Init();
 80019ba:	f000 f951 	bl	8001c60 <MX_ADC1_Init>
  MX_TIM9_Init();
 80019be:	f000 f9cb 	bl	8001d58 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 80019c2:	f000 fa03 	bl	8001dcc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80019c6:	f000 fa2b 	bl	8001e20 <MX_USART3_UART_Init>
  MX_DAC_Init();
 80019ca:	f000 f99b 	bl	8001d04 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 80019ce:	485e      	ldr	r0, [pc, #376]	; (8001b48 <main+0x1a0>)
 80019d0:	f002 fe4e 	bl	8004670 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80019d4:	2100      	movs	r1, #0
 80019d6:	485d      	ldr	r0, [pc, #372]	; (8001b4c <main+0x1a4>)
 80019d8:	f001 fd27 	bl	800342a <HAL_DAC_Start>
  appInit(&app, LED_GPIO_Port, LED_Pin, huart2, hdac);
 80019dc:	4e5c      	ldr	r6, [pc, #368]	; (8001b50 <main+0x1a8>)
 80019de:	4b5b      	ldr	r3, [pc, #364]	; (8001b4c <main+0x1a4>)
 80019e0:	ac10      	add	r4, sp, #64	; 0x40
 80019e2:	461d      	mov	r5, r3
 80019e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e8:	682b      	ldr	r3, [r5, #0]
 80019ea:	6023      	str	r3, [r4, #0]
 80019ec:	466d      	mov	r5, sp
 80019ee:	1d34      	adds	r4, r6, #4
 80019f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a00:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a04:	6833      	ldr	r3, [r6, #0]
 8001a06:	2220      	movs	r2, #32
 8001a08:	4952      	ldr	r1, [pc, #328]	; (8001b54 <main+0x1ac>)
 8001a0a:	4853      	ldr	r0, [pc, #332]	; (8001b58 <main+0x1b0>)
 8001a0c:	f7ff f99c 	bl	8000d48 <appInit>
  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8001a10:	2201      	movs	r2, #1
 8001a12:	4952      	ldr	r1, [pc, #328]	; (8001b5c <main+0x1b4>)
 8001a14:	484e      	ldr	r0, [pc, #312]	; (8001b50 <main+0x1a8>)
 8001a16:	f003 fac0 	bl	8004f9a <HAL_UART_Receive_IT>

	  /********************************* TOP SLOT START ********************************/

	  /* Put here the code to be executed in all cycles before the state machine */

	  if (samplingDelay >= appGetSamplingDelay(&app))
 8001a1a:	484f      	ldr	r0, [pc, #316]	; (8001b58 <main+0x1b0>)
 8001a1c:	f7ff ff27 	bl	800186e <appGetSamplingDelay>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b4e      	ldr	r3, [pc, #312]	; (8001b60 <main+0x1b8>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d823      	bhi.n	8001a74 <main+0xcc>
	  {
		  HAL_ADC_Start(&hadc1);
 8001a2c:	484d      	ldr	r0, [pc, #308]	; (8001b64 <main+0x1bc>)
 8001a2e:	f000 fffd 	bl	8002a2c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a32:	f04f 31ff 	mov.w	r1, #4294967295
 8001a36:	484b      	ldr	r0, [pc, #300]	; (8001b64 <main+0x1bc>)
 8001a38:	f001 f8fd 	bl	8002c36 <HAL_ADC_PollForConversion>
		  uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 8001a3c:	4849      	ldr	r0, [pc, #292]	; (8001b64 <main+0x1bc>)
 8001a3e:	f001 f985 	bl	8002d4c <HAL_ADC_GetValue>
 8001a42:	4603      	mov	r3, r0
 8001a44:	81fb      	strh	r3, [r7, #14]
		  HAL_ADC_Stop(&hadc1);
 8001a46:	4847      	ldr	r0, [pc, #284]	; (8001b64 <main+0x1bc>)
 8001a48:	f001 f8c2 	bl	8002bd0 <HAL_ADC_Stop>

		  uint32_t calculatedCurrentInMiliAmps = appGetCurrentInMiliAmps(adcValue);
 8001a4c:	89fb      	ldrh	r3, [r7, #14]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fa6e 	bl	8000f30 <appGetCurrentInMiliAmps>
 8001a54:	60b8      	str	r0, [r7, #8]
		  appAddNewValueToFilter(&app, calculatedCurrentInMiliAmps);
 8001a56:	68b9      	ldr	r1, [r7, #8]
 8001a58:	483f      	ldr	r0, [pc, #252]	; (8001b58 <main+0x1b0>)
 8001a5a:	f7ff fac3 	bl	8000fe4 <appAddNewValueToFilter>
		  uint32_t filteredCurrentInMiliAmps = appGetFilterResult(&app);
 8001a5e:	483e      	ldr	r0, [pc, #248]	; (8001b58 <main+0x1b0>)
 8001a60:	f7ff fad0 	bl	8001004 <appGetFilterResult>
 8001a64:	6078      	str	r0, [r7, #4]
		  appSetProcessVariable(&app, filteredCurrentInMiliAmps);
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	483b      	ldr	r0, [pc, #236]	; (8001b58 <main+0x1b0>)
 8001a6a:	f7ff fa38 	bl	8000ede <appSetProcessVariable>

		  samplingDelay = 0;
 8001a6e:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <main+0x1b8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	801a      	strh	r2, [r3, #0]
	  }

	  if (controllerDelay >= appGetPidComputeDelay(&app))
 8001a74:	4838      	ldr	r0, [pc, #224]	; (8001b58 <main+0x1b0>)
 8001a76:	f7ff ff07 	bl	8001888 <appGetPidComputeDelay>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <main+0x1c0>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d80b      	bhi.n	8001a9e <main+0xf6>
	  {
		  if (appGetRunPidControllerStatus(&app) == TRUE)
 8001a86:	4834      	ldr	r0, [pc, #208]	; (8001b58 <main+0x1b0>)
 8001a88:	f7ff ff28 	bl	80018dc <appGetRunPidControllerStatus>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d102      	bne.n	8001a98 <main+0xf0>
		  {
			  appRunController(&app);
 8001a92:	4831      	ldr	r0, [pc, #196]	; (8001b58 <main+0x1b0>)
 8001a94:	f7ff fa02 	bl	8000e9c <appRunController>
		  }
		  controllerDelay = 0;
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <main+0x1c0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	801a      	strh	r2, [r3, #0]

	  /* ============================================================================= */

	  /****************************** STATE MACHINE START ******************************/

	  switch (stateMachine)
 8001a9e:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <main+0x1c4>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d84a      	bhi.n	8001b3c <main+0x194>
 8001aa6:	a201      	add	r2, pc, #4	; (adr r2, 8001aac <main+0x104>)
 8001aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aac:	08001ac1 	.word	0x08001ac1
 8001ab0:	08001add 	.word	0x08001add
 8001ab4:	08001aeb 	.word	0x08001aeb
 8001ab8:	08001af9 	.word	0x08001af9
 8001abc:	08001b1f 	.word	0x08001b1f
	  {
	  	  case 0:
	  		  if (decodeDataPacketDelay >= DELAY_10_MILISECONDS)
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <main+0x1c8>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	2b63      	cmp	r3, #99	; 0x63
 8001ac6:	d905      	bls.n	8001ad4 <main+0x12c>
	  		  {
	  			appTryDecodeReceivedDataPacket(&app);
 8001ac8:	4823      	ldr	r0, [pc, #140]	; (8001b58 <main+0x1b0>)
 8001aca:	f7ff fabb 	bl	8001044 <appTryDecodeReceivedDataPacket>
	  			decodeDataPacketDelay = 0;
 8001ace:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <main+0x1c8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  stateMachine = 1;
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <main+0x1c4>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001ada:	e033      	b.n	8001b44 <main+0x19c>

		  case 1:
			  appTryExtractCommandAndPayloadFromDecodedDataPacket(&app);
 8001adc:	481e      	ldr	r0, [pc, #120]	; (8001b58 <main+0x1b0>)
 8001ade:	f7ff fabf 	bl	8001060 <appTryExtractCommandAndPayloadFromDecodedDataPacket>
			  stateMachine = 2;
 8001ae2:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <main+0x1c4>)
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	701a      	strb	r2, [r3, #0]
			  break;
 8001ae8:	e02c      	b.n	8001b44 <main+0x19c>

		  case 2:
			  appTryDecodeExtractedCommand(&app);
 8001aea:	481b      	ldr	r0, [pc, #108]	; (8001b58 <main+0x1b0>)
 8001aec:	f7ff faf8 	bl	80010e0 <appTryDecodeExtractedCommand>
			  stateMachine = 3;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <main+0x1c4>)
 8001af2:	2203      	movs	r2, #3
 8001af4:	701a      	strb	r2, [r3, #0]
			  break;
 8001af6:	e025      	b.n	8001b44 <main+0x19c>

		  case 3:
			  if (blinkLedDelay >= appGetBlinkDelay(&app))
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <main+0x1cc>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	461c      	mov	r4, r3
 8001afe:	4816      	ldr	r0, [pc, #88]	; (8001b58 <main+0x1b0>)
 8001b00:	f7ff f9c0 	bl	8000e84 <appGetBlinkDelay>
 8001b04:	4603      	mov	r3, r0
 8001b06:	429c      	cmp	r4, r3
 8001b08:	d305      	bcc.n	8001b16 <main+0x16e>
			  {
				  appExecuteBlinkLed(&app);
 8001b0a:	4813      	ldr	r0, [pc, #76]	; (8001b58 <main+0x1b0>)
 8001b0c:	f7ff f9aa 	bl	8000e64 <appExecuteBlinkLed>
				  blinkLedDelay = 0;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <main+0x1cc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 4;
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <main+0x1c4>)
 8001b18:	2204      	movs	r2, #4
 8001b1a:	701a      	strb	r2, [r3, #0]
			  break;
 8001b1c:	e012      	b.n	8001b44 <main+0x19c>

		  case 4:
			  if (sendDataDelay1 >= DELAY_100_MILISECONDS)
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <main+0x1d0>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b26:	d305      	bcc.n	8001b34 <main+0x18c>
			  {
				  appTrySendData(&app);
 8001b28:	480b      	ldr	r0, [pc, #44]	; (8001b58 <main+0x1b0>)
 8001b2a:	f7ff fe49 	bl	80017c0 <appTrySendData>
				  sendDataDelay1 = 0;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <main+0x1d0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 0;
 8001b34:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <main+0x1c4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
			  break;
 8001b3a:	e003      	b.n	8001b44 <main+0x19c>

		  default:
			  stateMachine = 0;
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <main+0x1c4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
			  break;
 8001b42:	bf00      	nop
	  if (samplingDelay >= appGetSamplingDelay(&app))
 8001b44:	e769      	b.n	8001a1a <main+0x72>
 8001b46:	bf00      	nop
 8001b48:	20000084 	.word	0x20000084
 8001b4c:	20000070 	.word	0x20000070
 8001b50:	200000cc 	.word	0x200000cc
 8001b54:	40020000 	.word	0x40020000
 8001b58:	20000160 	.word	0x20000160
 8001b5c:	20000154 	.word	0x20000154
 8001b60:	2000015c 	.word	0x2000015c
 8001b64:	20000028 	.word	0x20000028
 8001b68:	2000015e 	.word	0x2000015e
 8001b6c:	2000076c 	.word	0x2000076c
 8001b70:	20000156 	.word	0x20000156
 8001b74:	20000158 	.word	0x20000158
 8001b78:	2000015a 	.word	0x2000015a

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b094      	sub	sp, #80	; 0x50
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	2234      	movs	r2, #52	; 0x34
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 fba4 	bl	80062d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <SystemClock_Config+0xdc>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	; (8001c58 <SystemClock_Config+0xdc>)
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bae:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb0:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <SystemClock_Config+0xdc>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <SystemClock_Config+0xe0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a25      	ldr	r2, [pc, #148]	; (8001c5c <SystemClock_Config+0xe0>)
 8001bc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <SystemClock_Config+0xe0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be0:	2310      	movs	r3, #16
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be4:	2302      	movs	r3, #2
 8001be6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001be8:	2300      	movs	r3, #0
 8001bea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bec:	2308      	movs	r3, #8
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001bf0:	23b4      	movs	r3, #180	; 0xb4
 8001bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 fa45 	bl	8004094 <HAL_RCC_OscConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c10:	f000 f982 	bl	8001f18 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c14:	f001 ff2a 	bl	8003a6c <HAL_PWREx_EnableOverDrive>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c1e:	f000 f97b 	bl	8001f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c22:	230f      	movs	r3, #15
 8001c24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c26:	2302      	movs	r3, #2
 8001c28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c38:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	2105      	movs	r1, #5
 8001c40:	4618      	mov	r0, r3
 8001c42:	f001 ff63 	bl	8003b0c <HAL_RCC_ClockConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c4c:	f000 f964 	bl	8001f18 <Error_Handler>
  }
}
 8001c50:	bf00      	nop
 8001c52:	3750      	adds	r7, #80	; 0x50
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40007000 	.word	0x40007000

08001c60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c66:	463b      	mov	r3, r7
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c72:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001c74:	4a21      	ldr	r2, [pc, #132]	; (8001cfc <MX_ADC1_Init+0x9c>)
 8001c76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001c7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001ca2:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <MX_ADC1_Init+0xa0>)
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cc0:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001cc2:	f000 fe6f 	bl	80029a4 <HAL_ADC_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ccc:	f000 f924 	bl	8001f18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_ADC1_Init+0x98>)
 8001ce2:	f001 f841 	bl	8002d68 <HAL_ADC_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001cec:	f000 f914 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000028 	.word	0x20000028
 8001cfc:	40012000 	.word	0x40012000
 8001d00:	0f000001 	.word	0x0f000001

08001d04 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_DAC_Init+0x4c>)
 8001d14:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <MX_DAC_Init+0x50>)
 8001d16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <MX_DAC_Init+0x4c>)
 8001d1a:	f001 fb64 	bl	80033e6 <HAL_DAC_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001d24:	f000 f8f8 	bl	8001f18 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d30:	463b      	mov	r3, r7
 8001d32:	2200      	movs	r2, #0
 8001d34:	4619      	mov	r1, r3
 8001d36:	4806      	ldr	r0, [pc, #24]	; (8001d50 <MX_DAC_Init+0x4c>)
 8001d38:	f001 fbee 	bl	8003518 <HAL_DAC_ConfigChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001d42:	f000 f8e9 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000070 	.word	0x20000070
 8001d54:	40007400 	.word	0x40007400

08001d58 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <MX_TIM9_Init+0x6c>)
 8001d6c:	4a16      	ldr	r2, [pc, #88]	; (8001dc8 <MX_TIM9_Init+0x70>)
 8001d6e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <MX_TIM9_Init+0x6c>)
 8001d72:	2204      	movs	r2, #4
 8001d74:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <MX_TIM9_Init+0x6c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3665;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_TIM9_Init+0x6c>)
 8001d7e:	f640 6251 	movw	r2, #3665	; 0xe51
 8001d82:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_TIM9_Init+0x6c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <MX_TIM9_Init+0x6c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001d90:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <MX_TIM9_Init+0x6c>)
 8001d92:	f002 fc1d 	bl	80045d0 <HAL_TIM_Base_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001d9c:	f000 f8bc 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001da6:	463b      	mov	r3, r7
 8001da8:	4619      	mov	r1, r3
 8001daa:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <MX_TIM9_Init+0x6c>)
 8001dac:	f002 fdd8 	bl	8004960 <HAL_TIM_ConfigClockSource>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001db6:	f000 f8af 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000084 	.word	0x20000084
 8001dc8:	40014000 	.word	0x40014000

08001dcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <MX_USART2_UART_Init+0x50>)
 8001dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001df2:	220c      	movs	r2, #12
 8001df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_USART2_UART_Init+0x4c>)
 8001e04:	f002 ffea 	bl	8004ddc <HAL_UART_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e0e:	f000 f883 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200000cc 	.word	0x200000cc
 8001e1c:	40004400 	.word	0x40004400

08001e20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <MX_USART3_UART_Init+0x4c>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <MX_USART3_UART_Init+0x50>)
 8001e28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <MX_USART3_UART_Init+0x4c>)
 8001e2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <MX_USART3_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_USART3_UART_Init+0x4c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <MX_USART3_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_USART3_UART_Init+0x4c>)
 8001e46:	220c      	movs	r2, #12
 8001e48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <MX_USART3_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <MX_USART3_UART_Init+0x4c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e56:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_USART3_UART_Init+0x4c>)
 8001e58:	f002 ffc0 	bl	8004ddc <HAL_UART_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e62:	f000 f859 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000110 	.word	0x20000110
 8001e70:	40004800 	.word	0x40004800

08001e74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <MX_GPIO_Init+0x98>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <MX_GPIO_Init+0x98>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <MX_GPIO_Init+0x98>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <MX_GPIO_Init+0x98>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <MX_GPIO_Init+0x98>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <MX_GPIO_Init+0x98>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2120      	movs	r1, #32
 8001ec6:	4812      	ldr	r0, [pc, #72]	; (8001f10 <MX_GPIO_Init+0x9c>)
 8001ec8:	f001 fd9c 	bl	8003a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480c      	ldr	r0, [pc, #48]	; (8001f14 <MX_GPIO_Init+0xa0>)
 8001ee2:	f001 fbfb 	bl	80036dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	4619      	mov	r1, r3
 8001efc:	4804      	ldr	r0, [pc, #16]	; (8001f10 <MX_GPIO_Init+0x9c>)
 8001efe:	f001 fbed 	bl	80036dc <HAL_GPIO_Init>

}
 8001f02:	bf00      	nop
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000
 8001f14:	40020800 	.word	0x40020800

08001f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1c:	b672      	cpsid	i
}
 8001f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <Error_Handler+0x8>
	...

08001f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_ADC_MspInit+0x7c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d127      	bne.n	8001fe6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_ADC_MspInit+0x80>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <HAL_ADC_MspInit+0x80>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_ADC_MspInit+0x80>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_ADC_MspInit+0x80>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <HAL_ADC_MspInit+0x80>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_ADC_MspInit+0x80>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CURRENT_SENSE_Pin;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	; (8001ff8 <HAL_ADC_MspInit+0x84>)
 8001fe2:	f001 fb7b 	bl	80036dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fe6:	bf00      	nop
 8001fe8:	3728      	adds	r7, #40	; 0x28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40012000 	.word	0x40012000
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020000 	.word	0x40020000

08001ffc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_DAC_MspInit+0x7c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d127      	bne.n	800206e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_DAC_MspInit+0x80>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <HAL_DAC_MspInit+0x80>)
 8002028:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <HAL_DAC_MspInit+0x80>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_DAC_MspInit+0x80>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_DAC_MspInit+0x80>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_DAC_MspInit+0x80>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = CURRENT_CTRL_Pin;
 8002056:	2310      	movs	r3, #16
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205a:	2303      	movs	r3, #3
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	4805      	ldr	r0, [pc, #20]	; (8002080 <HAL_DAC_MspInit+0x84>)
 800206a:	f001 fb37 	bl	80036dc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800206e:	bf00      	nop
 8002070:	3728      	adds	r7, #40	; 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40007400 	.word	0x40007400
 800207c:	40023800 	.word	0x40023800
 8002080:	40020000 	.word	0x40020000

08002084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <HAL_TIM_Base_MspInit+0x48>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d115      	bne.n	80020c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_TIM_Base_MspInit+0x4c>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_TIM_Base_MspInit+0x4c>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6453      	str	r3, [r2, #68]	; 0x44
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_TIM_Base_MspInit+0x4c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	2018      	movs	r0, #24
 80020b8:	f001 f95f 	bl	800337a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80020bc:	2018      	movs	r0, #24
 80020be:	f001 f978 	bl	80033b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40014000 	.word	0x40014000
 80020d0:	40023800 	.word	0x40023800

080020d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08c      	sub	sp, #48	; 0x30
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a36      	ldr	r2, [pc, #216]	; (80021cc <HAL_UART_MspInit+0xf8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d134      	bne.n	8002160 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <HAL_UART_MspInit+0xfc>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a34      	ldr	r2, [pc, #208]	; (80021d0 <HAL_UART_MspInit+0xfc>)
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_UART_MspInit+0xfc>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <HAL_UART_MspInit+0xfc>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a2d      	ldr	r2, [pc, #180]	; (80021d0 <HAL_UART_MspInit+0xfc>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_UART_MspInit+0xfc>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800212e:	230c      	movs	r3, #12
 8002130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213e:	2307      	movs	r3, #7
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	4619      	mov	r1, r3
 8002148:	4822      	ldr	r0, [pc, #136]	; (80021d4 <HAL_UART_MspInit+0x100>)
 800214a:	f001 fac7 	bl	80036dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	2026      	movs	r0, #38	; 0x26
 8002154:	f001 f911 	bl	800337a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002158:	2026      	movs	r0, #38	; 0x26
 800215a:	f001 f92a 	bl	80033b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800215e:	e031      	b.n	80021c4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1c      	ldr	r2, [pc, #112]	; (80021d8 <HAL_UART_MspInit+0x104>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d12c      	bne.n	80021c4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <HAL_UART_MspInit+0xfc>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <HAL_UART_MspInit+0xfc>)
 8002174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_UART_MspInit+0xfc>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_UART_MspInit+0xfc>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a10      	ldr	r2, [pc, #64]	; (80021d0 <HAL_UART_MspInit+0xfc>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_UART_MspInit+0xfc>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021b4:	2307      	movs	r3, #7
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	4807      	ldr	r0, [pc, #28]	; (80021dc <HAL_UART_MspInit+0x108>)
 80021c0:	f001 fa8c 	bl	80036dc <HAL_GPIO_Init>
}
 80021c4:	bf00      	nop
 80021c6:	3730      	adds	r7, #48	; 0x30
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40004400 	.word	0x40004400
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020000 	.word	0x40020000
 80021d8:	40004800 	.word	0x40004800
 80021dc:	40020800 	.word	0x40020800

080021e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <NMI_Handler+0x4>

080021e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ea:	e7fe      	b.n	80021ea <HardFault_Handler+0x4>

080021ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <MemManage_Handler+0x4>

080021f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f6:	e7fe      	b.n	80021f6 <BusFault_Handler+0x4>

080021f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021fc:	e7fe      	b.n	80021fc <UsageFault_Handler+0x4>

080021fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800222c:	f000 fb9a 	bl	8002964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}

08002234 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800223a:	f002 fa89 	bl	8004750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000084 	.word	0x20000084

08002248 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <USART2_IRQHandler+0x10>)
 800224e:	f002 fed5 	bl	8004ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200000cc 	.word	0x200000cc

0800225c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <SystemInit+0x20>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <SystemInit+0x20>)
 8002268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800226c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002284:	480d      	ldr	r0, [pc, #52]	; (80022bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002286:	490e      	ldr	r1, [pc, #56]	; (80022c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002288:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800228c:	e002      	b.n	8002294 <LoopCopyDataInit>

0800228e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002292:	3304      	adds	r3, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002298:	d3f9      	bcc.n	800228e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229a:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800229c:	4c0b      	ldr	r4, [pc, #44]	; (80022cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a0:	e001      	b.n	80022a6 <LoopFillZerobss>

080022a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a4:	3204      	adds	r2, #4

080022a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a8:	d3fb      	bcc.n	80022a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022aa:	f7ff ffd7 	bl	800225c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ae:	f003 ffe1 	bl	8006274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022b2:	f7ff fb79 	bl	80019a8 <main>
  bx  lr    
 80022b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022c4:	08006428 	.word	0x08006428
  ldr r2, =_sbss
 80022c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022cc:	20000774 	.word	0x20000774

080022d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d0:	e7fe      	b.n	80022d0 <ADC_IRQHandler>

080022d2 <genCrc>:

/**
  * Calcula o crc8 entre o range passado como parametro.
  */
uint8_t genCrc(uint8_t buffer[], uint16_t qtd_de_bytes_no_pacote)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	73bb      	strb	r3, [r7, #14]
 80022ea:	e00d      	b.n	8002308 <genCrc+0x36>
    {
      crc = calcCrc8(crc, buffer[i]);
 80022ec:	7bbb      	ldrb	r3, [r7, #14]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 f80f 	bl	800231c <calcCrc8>
 80022fe:	4603      	mov	r3, r0
 8002300:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 8002302:	7bbb      	ldrb	r3, [r7, #14]
 8002304:	3301      	adds	r3, #1
 8002306:	73bb      	strb	r3, [r7, #14]
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	b29b      	uxth	r3, r3
 800230c:	887a      	ldrh	r2, [r7, #2]
 800230e:	429a      	cmp	r2, r3
 8002310:	d8ec      	bhi.n	80022ec <genCrc+0x1a>
    }

  return crc;
 8002312:	7bfb      	ldrb	r3, [r7, #15]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <calcCrc8>:

/**
  * Funcao que calcula o CRC8
  */
static uint8_t calcCrc8(uint8_t crc3, uint8_t b)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	460a      	mov	r2, r1
 8002326:	71fb      	strb	r3, [r7, #7]
 8002328:	4613      	mov	r3, r2
 800232a:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
    pos = (((crc3 & 0xff) ^ b) & 0xff);
 8002330:	79fa      	ldrb	r2, [r7, #7]
 8002332:	79bb      	ldrb	r3, [r7, #6]
 8002334:	4053      	eors	r3, r2
 8002336:	73fb      	strb	r3, [r7, #15]

    return ((crc3) >> 8) ^ table[pos];
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	121b      	asrs	r3, r3, #8
 800233c:	b25a      	sxtb	r2, r3
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	4905      	ldr	r1, [pc, #20]	; (8002358 <calcCrc8+0x3c>)
 8002342:	5ccb      	ldrb	r3, [r1, r3]
 8002344:	b25b      	sxtb	r3, r3
 8002346:	4053      	eors	r3, r2
 8002348:	b25b      	sxtb	r3, r3
 800234a:	b2db      	uxtb	r3, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	08006318 	.word	0x08006318

0800235c <dataPacketRxInit>:
 */

#include "dataPacketRx.h"

void dataPacketRxInit(DataPacketRx *dataPacketRx, uint8_t start_1, uint8_t start_2)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
 8002368:	4613      	mov	r3, r2
 800236a:	70bb      	strb	r3, [r7, #2]
	dataPacketRx->start_1 = start_1;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	701a      	strb	r2, [r3, #0]
	dataPacketRx->start_2 = start_2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	78ba      	ldrb	r2, [r7, #2]
 8002376:	705a      	strb	r2, [r3, #1]
	dataPacketRx->command = 0x00;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	709a      	strb	r2, [r3, #2]
	dataPacketRx->payloadDataLength = 0x00;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	70da      	strb	r2, [r3, #3]
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3304      	adds	r3, #4
 8002388:	2219      	movs	r2, #25
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f003 ffa3 	bl	80062d8 <memset>
	dataPacketRx->crc8 = 0x00;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	775a      	strb	r2, [r3, #29]
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	331e      	adds	r3, #30
 800239c:	221e      	movs	r2, #30
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f003 ff99 	bl	80062d8 <memset>
	dataPacketRx->dataPacketLength = 0x00;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketRx->currentRxByteIndex = 0;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	87da      	strh	r2, [r3, #62]	; 0x3e
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	dataPacketRx->containsStarterBytes = FALSE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dataPacketRx->starterByteIndex = 0;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <dataPacketRxAppend>:

void dataPacketRxAppend(DataPacketRx *dataPacketRx, uint8_t newByte)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacket[dataPacketRx->currentRxByteIndex] = newByte;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e2:	461a      	mov	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4413      	add	r3, r2
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	779a      	strb	r2, [r3, #30]
	dataPacketRx->currentRxByteIndex++;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f0:	3301      	adds	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	87da      	strh	r2, [r3, #62]	; 0x3e
	dataPacketRx->dataPacketLength++;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80023fc:	3301      	adds	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	879a      	strh	r2, [r3, #60]	; 0x3c

	if (dataPacketRx->currentRxByteIndex > QTY_PACKET_RX_BYTES)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002408:	2b1e      	cmp	r3, #30
 800240a:	d908      	bls.n	800241e <dataPacketRxAppend+0x4c>
	{
		dataPacketRxClear(dataPacketRx);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f8bf 	bl	8002590 <dataPacketRxClear>
		dataPacketRx->currentRxByteIndex = 0;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	87da      	strh	r2, [r3, #62]	; 0x3e
		dataPacketRx->dataPacketLength = 0;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	879a      	strh	r2, [r3, #60]	; 0x3c
	}
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <dataPacketRxDecode>:

void dataPacketRxDecode(DataPacketRx *dataPacketRx)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
	if (dataPacketRx->containsStarterBytes == TRUE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002434:	2b01      	cmp	r3, #1
 8002436:	d174      	bne.n	8002522 <dataPacketRxDecode+0xfc>
	{
		dataPacketRxSetCommand(dataPacketRx, dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 2]);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800243e:	3302      	adds	r3, #2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	7f9b      	ldrb	r3, [r3, #30]
 8002446:	4619      	mov	r1, r3
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f8d2 	bl	80025f2 <dataPacketRxSetCommand>
		dataPacketRx->payloadDataLength = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 3];
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002454:	3303      	adds	r3, #3
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	7f9a      	ldrb	r2, [r3, #30]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	70da      	strb	r2, [r3, #3]

		if (dataPacketRx->payloadDataLength == 0)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	78db      	ldrb	r3, [r3, #3]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d122      	bne.n	80024ae <dataPacketRxDecode+0x88>
		{
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 4];
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800246e:	3304      	adds	r3, #4
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	7f9b      	ldrb	r3, [r3, #30]
 8002476:	733b      	strb	r3, [r7, #12]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, 4);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	331e      	adds	r3, #30
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8002482:	4413      	add	r3, r2
 8002484:	2104      	movs	r1, #4
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff23 	bl	80022d2 <genCrc>
 800248c:	4603      	mov	r3, r0
 800248e:	461a      	mov	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	775a      	strb	r2, [r3, #29]

			if (dataPacketRx->crc8 == receivedCrc8)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7f5b      	ldrb	r3, [r3, #29]
 8002498:	7b3a      	ldrb	r2, [r7, #12]
 800249a:	429a      	cmp	r2, r3
 800249c:	d174      	bne.n	8002588 <dataPacketRxDecode+0x162>
			{
				dataPacketRx->currentRxByteIndex = 0;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	87da      	strh	r2, [r3, #62]	; 0x3e
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			{
				dataPacketRxClear(dataPacketRx);
			}
		}
	}
}
 80024ac:	e06c      	b.n	8002588 <dataPacketRxDecode+0x162>
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + dataPacketRx->payloadDataLength + 4];
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80024b4:	461a      	mov	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	78db      	ldrb	r3, [r3, #3]
 80024ba:	4413      	add	r3, r2
 80024bc:	3304      	adds	r3, #4
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	7f9b      	ldrb	r3, [r3, #30]
 80024c4:	737b      	strb	r3, [r7, #13]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, dataPacketRx->payloadDataLength + 4);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	331e      	adds	r3, #30
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80024d0:	441a      	add	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	78db      	ldrb	r3, [r3, #3]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3304      	adds	r3, #4
 80024da:	b29b      	uxth	r3, r3
 80024dc:	4619      	mov	r1, r3
 80024de:	4610      	mov	r0, r2
 80024e0:	f7ff fef7 	bl	80022d2 <genCrc>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	775a      	strb	r2, [r3, #29]
			if (dataPacketRx->crc8 == receivedCrc8)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7f5b      	ldrb	r3, [r3, #29]
 80024f0:	7b7a      	ldrb	r2, [r7, #13]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d148      	bne.n	8002588 <dataPacketRxDecode+0x162>
				dataPacketRxSetPayloadData(dataPacketRx, dataPacketRx->dataPacket + dataPacketRx->starterByteIndex + 4, dataPacketRx->payloadDataLength);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f103 021e 	add.w	r2, r3, #30
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002502:	3304      	adds	r3, #4
 8002504:	18d1      	adds	r1, r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	78db      	ldrb	r3, [r3, #3]
 800250a:	461a      	mov	r2, r3
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f896 	bl	800263e <dataPacketRxSetPayloadData>
				dataPacketRx->currentRxByteIndex = 0;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	87da      	strh	r2, [r3, #62]	; 0x3e
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8002520:	e032      	b.n	8002588 <dataPacketRxDecode+0x162>
		if (dataPacketRx->dataPacketLength >= MIN_PACKET_RX_BYTES)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002526:	2b04      	cmp	r3, #4
 8002528:	d92e      	bls.n	8002588 <dataPacketRxDecode+0x162>
			uint16_t index = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	81fb      	strh	r3, [r7, #14]
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 800252e:	2300      	movs	r3, #0
 8002530:	81fb      	strh	r3, [r7, #14]
 8002532:	e01c      	b.n	800256e <dataPacketRxDecode+0x148>
				if ((dataPacketRx->dataPacket[index] == dataPacketRx->start_1) && (dataPacketRx->dataPacket[index+1] == dataPacketRx->start_2))
 8002534:	89fb      	ldrh	r3, [r7, #14]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	7f9a      	ldrb	r2, [r3, #30]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d111      	bne.n	8002568 <dataPacketRxDecode+0x142>
 8002544:	89fb      	ldrh	r3, [r7, #14]
 8002546:	3301      	adds	r3, #1
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4413      	add	r3, r2
 800254c:	7f9a      	ldrb	r2, [r3, #30]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	785b      	ldrb	r3, [r3, #1]
 8002552:	429a      	cmp	r2, r3
 8002554:	d108      	bne.n	8002568 <dataPacketRxDecode+0x142>
					dataPacketRx->containsStarterBytes = TRUE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
					dataPacketRx->starterByteIndex = index;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	89fa      	ldrh	r2, [r7, #14]
 8002562:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
					break;
 8002566:	e007      	b.n	8002578 <dataPacketRxDecode+0x152>
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 8002568:	89fb      	ldrh	r3, [r7, #14]
 800256a:	3301      	adds	r3, #1
 800256c:	81fb      	strh	r3, [r7, #14]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002572:	89fa      	ldrh	r2, [r7, #14]
 8002574:	429a      	cmp	r2, r3
 8002576:	d3dd      	bcc.n	8002534 <dataPacketRxDecode+0x10e>
			if (dataPacketRx->containsStarterBytes == FALSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d102      	bne.n	8002588 <dataPacketRxDecode+0x162>
				dataPacketRxClear(dataPacketRx);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f804 	bl	8002590 <dataPacketRxClear>
}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <dataPacketRxClear>:

void dataPacketRxClear(DataPacketRx *dataPacketRx)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	dataPacketRx->containsStarterBytes = FALSE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	dataPacketRx->currentRxByteIndex = 0;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	87da      	strh	r2, [r3, #62]	; 0x3e
	dataPacketRx->dataPacketLength = 0;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketRx->payloadDataLength = 0;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	70da      	strb	r2, [r3, #3]
	dataPacketRx->command = 0x00;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	709a      	strb	r2, [r3, #2]
	dataPacketRx->crc8 = 0x00;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	775a      	strb	r2, [r3, #29]
	dataPacketRx->starterByteIndex = 0;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2219      	movs	r2, #25
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 fe7e 	bl	80062d8 <memset>
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	331e      	adds	r3, #30
 80025e0:	221e      	movs	r2, #30
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 fe77 	bl	80062d8 <memset>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <dataPacketRxSetCommand>:
	dataPacketRx->crc8 = 0x00;
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
}

void dataPacketRxSetCommand(DataPacketRx *dataPacketRx, uint8_t command)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	if ((command < 0x01) || (command > 0xFE))
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <dataPacketRxSetCommand+0x28>
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	2bff      	cmp	r3, #255	; 0xff
 8002610:	d003      	beq.n	800261a <dataPacketRxSetCommand+0x28>
	{
		return;
	}

	dataPacketRx->command = command;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	709a      	strb	r2, [r3, #2]
 8002618:	e000      	b.n	800261c <dataPacketRxSetCommand+0x2a>
		return;
 800261a:	bf00      	nop
}
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <dataPacketRxGetCommand>:

uint8_t dataPacketRxGetCommand(DataPacketRx *dataPacketRx)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
	return dataPacketRx->command;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	789b      	ldrb	r3, [r3, #2]
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <dataPacketRxSetPayloadData>:

void dataPacketRxSetPayloadData(DataPacketRx *dataPacketRx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	4613      	mov	r3, r2
 800264a:	71fb      	strb	r3, [r7, #7]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	memcpy(dataPacketRx->payloadData, payloadData, payloadDataLength);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3304      	adds	r3, #4
 8002658:	79fa      	ldrb	r2, [r7, #7]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fe2d 	bl	80062bc <memcpy>
	dataPacketRx->payloadDataLength = payloadDataLength;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	79fa      	ldrb	r2, [r7, #7]
 8002666:	70da      	strb	r2, [r3, #3]
}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <dataPacketRxGetPayloadData>:

uint8_t *dataPacketRxGetPayloadData(DataPacketRx *dataPacketRx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadData;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <dataPacketRxGetPayloadDataLength>:

uint8_t dataPacketRxGetPayloadDataLength(DataPacketRx *dataPacketRx)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadDataLength;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	78db      	ldrb	r3, [r3, #3]
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <dataPacketRxGetDataPacketStatus>:
{
	return dataPacketRx->dataPacketLength;
}

DataPacketRxStatus dataPacketRxGetDataPacketStatus(DataPacketRx *dataPacketRx)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	return dataPacketRx->dataPacketRxStatus;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <dataPacketTxInit>:
 */

#include "dataPacketTx.h"

void dataPacketTxInit(DataPacketTx *dataPacketTx, uint8_t start_1, uint8_t start_2)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	70fb      	strb	r3, [r7, #3]
 80026c6:	4613      	mov	r3, r2
 80026c8:	70bb      	strb	r3, [r7, #2]
	dataPacketTx->start_1 = start_1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	701a      	strb	r2, [r3, #0]
	dataPacketTx->start_2 = start_2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	78ba      	ldrb	r2, [r7, #2]
 80026d4:	705a      	strb	r2, [r3, #1]
	dataPacketTx->command = 0x00;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	709a      	strb	r2, [r3, #2]
	dataPacketTx->payloadDataLength = 0x00;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	70da      	strb	r2, [r3, #3]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2219      	movs	r2, #25
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 fdf4 	bl	80062d8 <memset>
	dataPacketTx->crc8 = 0x00;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	775a      	strb	r2, [r3, #29]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	331e      	adds	r3, #30
 80026fa:	221e      	movs	r2, #30
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f003 fdea 	bl	80062d8 <memset>
	dataPacketTx->dataPacketLength = 0x00;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <dataPacketTxMount>:

void dataPacketTxMount(DataPacketTx *dataPacketTx)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacket[0] = dataPacketTx->start_1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	779a      	strb	r2, [r3, #30]
	dataPacketTx->dataPacket[1] = dataPacketTx->start_2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	785a      	ldrb	r2, [r3, #1]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	77da      	strb	r2, [r3, #31]
	dataPacketTx->dataPacket[2] = dataPacketTx->command;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	789a      	ldrb	r2, [r3, #2]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f883 2020 	strb.w	r2, [r3, #32]
	dataPacketTx->dataPacket[3] = dataPacketTx->payloadDataLength;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	78da      	ldrb	r2, [r3, #3]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	memcpy(dataPacketTx->dataPacket + 4, dataPacketTx->payloadData, dataPacketTx->payloadDataLength);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	331e      	adds	r3, #30
 800274a:	1d18      	adds	r0, r3, #4
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	1d19      	adds	r1, r3, #4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	78db      	ldrb	r3, [r3, #3]
 8002754:	461a      	mov	r2, r3
 8002756:	f003 fdb1 	bl	80062bc <memcpy>
	dataPacketTx->dataPacketLength = dataPacketTx->payloadDataLength + 4 + 1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	78db      	ldrb	r3, [r3, #3]
 800275e:	b29b      	uxth	r3, r3
 8002760:	3305      	adds	r3, #5
 8002762:	b29a      	uxth	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->crc8 = genCrc(dataPacketTx->dataPacket, dataPacketTx->dataPacketLength - 1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f103 021e 	add.w	r2, r3, #30
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002772:	3b01      	subs	r3, #1
 8002774:	b29b      	uxth	r3, r3
 8002776:	4619      	mov	r1, r3
 8002778:	4610      	mov	r0, r2
 800277a:	f7ff fdaa 	bl	80022d2 <genCrc>
 800277e:	4603      	mov	r3, r0
 8002780:	461a      	mov	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	775a      	strb	r2, [r3, #29]
	dataPacketTx->dataPacket[dataPacketTx->payloadDataLength + 4] = dataPacketTx->crc8;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	78db      	ldrb	r3, [r3, #3]
 800278a:	3304      	adds	r3, #4
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	7f51      	ldrb	r1, [r2, #29]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	460a      	mov	r2, r1
 8002796:	779a      	strb	r2, [r3, #30]
	dataPacketTx->dataPacketTxStatus = VALID_TX_DATA_PACKET;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <dataPacketTxUartSend>:

void dataPacketTxUartSend(DataPacketTx *dataPacketTx, UART_HandleTypeDef huart)
{
 80027a8:	b084      	sub	sp, #16
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	f107 0014 	add.w	r0, r7, #20
 80027b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (dataPacketTx->dataPacketTxStatus == VALID_TX_DATA_PACKET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d10a      	bne.n	80027da <dataPacketTxUartSend+0x32>
	{
		HAL_UART_Transmit(&huart, dataPacketTx->dataPacket, dataPacketTx->dataPacketLength, HAL_MAX_DELAY);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f103 011e 	add.w	r1, r3, #30
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80027ce:	f107 0014 	add.w	r0, r7, #20
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
 80027d6:	f002 fb4e 	bl	8004e76 <HAL_UART_Transmit>
	}
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027e4:	b004      	add	sp, #16
 80027e6:	4770      	bx	lr

080027e8 <dataPacketTxClear>:

void dataPacketTxClear(DataPacketTx *dataPacketTx)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	dataPacketTx->dataPacketLength = 0;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->crc8 = 0x00;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	775a      	strb	r2, [r3, #29]
	dataPacketTx->command = 0x00;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	331e      	adds	r3, #30
 800280e:	221e      	movs	r2, #30
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f003 fd60 	bl	80062d8 <memset>
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <dataPacketTxPayloadDataClear>:

void dataPacketTxPayloadDataClear(DataPacketTx *dataPacketTx)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	dataPacketTx->dataPacketLength = 0;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	879a      	strh	r2, [r3, #60]	; 0x3c
	dataPacketTx->crc8 = 0x00;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	775a      	strb	r2, [r3, #29]
	dataPacketTx->command = 0x00;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	2219      	movs	r2, #25
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f003 fd44 	bl	80062d8 <memset>
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <dataPacketTxSetCommand>:

void dataPacketTxSetCommand(DataPacketTx *dataPacketTx, uint8_t command)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	70fb      	strb	r3, [r7, #3]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	if ((command < 0x01) || (command > 0xFE))
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d006      	beq.n	8002880 <dataPacketTxSetCommand+0x28>
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	2bff      	cmp	r3, #255	; 0xff
 8002876:	d003      	beq.n	8002880 <dataPacketTxSetCommand+0x28>
	{
		return;
	}

	dataPacketTx->command = command;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	709a      	strb	r2, [r3, #2]
 800287e:	e000      	b.n	8002882 <dataPacketTxSetCommand+0x2a>
		return;
 8002880:	bf00      	nop
}
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <dataPacketTxSetPayloadData>:
{
	return dataPacketTx->command;
}

void dataPacketTxSetPayloadData(DataPacketTx *dataPacketTx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	71fb      	strb	r3, [r7, #7]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	memcpy(dataPacketTx->payloadData, payloadData, payloadDataLength);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3304      	adds	r3, #4
 80028a6:	79fa      	ldrb	r2, [r7, #7]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fd06 	bl	80062bc <memcpy>
	dataPacketTx->payloadDataLength = payloadDataLength;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	79fa      	ldrb	r2, [r7, #7]
 80028b4:	70da      	strb	r2, [r3, #3]
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <HAL_Init+0x40>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <HAL_Init+0x40>)
 80028ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_Init+0x40>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <HAL_Init+0x40>)
 80028d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_Init+0x40>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a07      	ldr	r2, [pc, #28]	; (8002900 <HAL_Init+0x40>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e8:	2003      	movs	r0, #3
 80028ea:	f000 fd3b 	bl	8003364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ee:	200f      	movs	r0, #15
 80028f0:	f000 f808 	bl	8002904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028f4:	f7ff fb16 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023c00 	.word	0x40023c00

08002904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <HAL_InitTick+0x54>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_InitTick+0x58>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800291a:	fbb3 f3f1 	udiv	r3, r3, r1
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fd53 	bl	80033ce <HAL_SYSTICK_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e00e      	b.n	8002950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b0f      	cmp	r3, #15
 8002936:	d80a      	bhi.n	800294e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002938:	2200      	movs	r2, #0
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	f04f 30ff 	mov.w	r0, #4294967295
 8002940:	f000 fd1b 	bl	800337a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002944:	4a06      	ldr	r2, [pc, #24]	; (8002960 <HAL_InitTick+0x5c>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e000      	b.n	8002950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000000 	.word	0x20000000
 800295c:	20000008 	.word	0x20000008
 8002960:	20000004 	.word	0x20000004

08002964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_IncTick+0x20>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_IncTick+0x24>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4413      	add	r3, r2
 8002974:	4a04      	ldr	r2, [pc, #16]	; (8002988 <HAL_IncTick+0x24>)
 8002976:	6013      	str	r3, [r2, #0]
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	20000008 	.word	0x20000008
 8002988:	20000770 	.word	0x20000770

0800298c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return uwTick;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <HAL_GetTick+0x14>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000770 	.word	0x20000770

080029a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e033      	b.n	8002a22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff fad6 	bl	8001f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d118      	bne.n	8002a14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029ea:	f023 0302 	bic.w	r3, r3, #2
 80029ee:	f043 0202 	orr.w	r2, r3, #2
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fae8 	bl	8002fcc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f023 0303 	bic.w	r3, r3, #3
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
 8002a12:	e001      	b.n	8002a18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_Start+0x1a>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e0b2      	b.n	8002bac <HAL_ADC_Start+0x180>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d018      	beq.n	8002a8e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a6c:	4b52      	ldr	r3, [pc, #328]	; (8002bb8 <HAL_ADC_Start+0x18c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <HAL_ADC_Start+0x190>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0c9a      	lsrs	r2, r3, #18
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a80:	e002      	b.n	8002a88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f9      	bne.n	8002a82 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d17a      	bne.n	8002b92 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ac6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ada:	d106      	bne.n	8002aea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	f023 0206 	bic.w	r2, r3, #6
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	645a      	str	r2, [r3, #68]	; 0x44
 8002ae8:	e002      	b.n	8002af0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002af8:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <HAL_ADC_Start+0x194>)
 8002afa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b04:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d12a      	bne.n	8002b68 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a2b      	ldr	r2, [pc, #172]	; (8002bc4 <HAL_ADC_Start+0x198>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d015      	beq.n	8002b48 <HAL_ADC_Start+0x11c>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a29      	ldr	r2, [pc, #164]	; (8002bc8 <HAL_ADC_Start+0x19c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d105      	bne.n	8002b32 <HAL_ADC_Start+0x106>
 8002b26:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <HAL_ADC_Start+0x194>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a25      	ldr	r2, [pc, #148]	; (8002bcc <HAL_ADC_Start+0x1a0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d136      	bne.n	8002baa <HAL_ADC_Start+0x17e>
 8002b3c:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_ADC_Start+0x194>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d130      	bne.n	8002baa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d129      	bne.n	8002baa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	e020      	b.n	8002baa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a15      	ldr	r2, [pc, #84]	; (8002bc4 <HAL_ADC_Start+0x198>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d11b      	bne.n	8002baa <HAL_ADC_Start+0x17e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d114      	bne.n	8002baa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	e00b      	b.n	8002baa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f043 0210 	orr.w	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	431bde83 	.word	0x431bde83
 8002bc0:	40012300 	.word	0x40012300
 8002bc4:	40012000 	.word	0x40012000
 8002bc8:	40012100 	.word	0x40012100
 8002bcc:	40012200 	.word	0x40012200

08002bd0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_Stop+0x16>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e021      	b.n	8002c2a <HAL_ADC_Stop+0x5a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0201 	bic.w	r2, r2, #1
 8002bfc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d109      	bne.n	8002c20 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c52:	d113      	bne.n	8002c7c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c62:	d10b      	bne.n	8002c7c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e063      	b.n	8002d44 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c7c:	f7ff fe86 	bl	800298c <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c82:	e021      	b.n	8002cc8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8a:	d01d      	beq.n	8002cc8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <HAL_ADC_PollForConversion+0x6c>
 8002c92:	f7ff fe7b 	bl	800298c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d212      	bcs.n	8002cc8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d00b      	beq.n	8002cc8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f043 0204 	orr.w	r2, r3, #4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e03d      	b.n	8002d44 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d1d6      	bne.n	8002c84 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0212 	mvn.w	r2, #18
 8002cde:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d123      	bne.n	8002d42 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d11f      	bne.n	8002d42 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d006      	beq.n	8002d1e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d111      	bne.n	8002d42 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d105      	bne.n	8002d42 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x1c>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e113      	b.n	8002fac <HAL_ADC_ConfigChannel+0x244>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b09      	cmp	r3, #9
 8002d92:	d925      	bls.n	8002de0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68d9      	ldr	r1, [r3, #12]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	3b1e      	subs	r3, #30
 8002daa:	2207      	movs	r2, #7
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43da      	mvns	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	400a      	ands	r2, r1
 8002db8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68d9      	ldr	r1, [r3, #12]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	4603      	mov	r3, r0
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4403      	add	r3, r0
 8002dd2:	3b1e      	subs	r3, #30
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	e022      	b.n	8002e26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6919      	ldr	r1, [r3, #16]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	2207      	movs	r2, #7
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	400a      	ands	r2, r1
 8002e02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6919      	ldr	r1, [r3, #16]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4618      	mov	r0, r3
 8002e16:	4603      	mov	r3, r0
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4403      	add	r3, r0
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d824      	bhi.n	8002e78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3b05      	subs	r3, #5
 8002e40:	221f      	movs	r2, #31
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	3b05      	subs	r3, #5
 8002e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	635a      	str	r2, [r3, #52]	; 0x34
 8002e76:	e04c      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	d824      	bhi.n	8002eca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	3b23      	subs	r3, #35	; 0x23
 8002e92:	221f      	movs	r2, #31
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	3b23      	subs	r3, #35	; 0x23
 8002ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ec8:	e023      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	3b41      	subs	r3, #65	; 0x41
 8002edc:	221f      	movs	r2, #31
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	400a      	ands	r2, r1
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	4618      	mov	r0, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	3b41      	subs	r3, #65	; 0x41
 8002f06:	fa00 f203 	lsl.w	r2, r0, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f12:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <HAL_ADC_ConfigChannel+0x250>)
 8002f14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a28      	ldr	r2, [pc, #160]	; (8002fbc <HAL_ADC_ConfigChannel+0x254>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d10f      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x1d8>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b12      	cmp	r3, #18
 8002f26:	d10b      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <HAL_ADC_ConfigChannel+0x254>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d12b      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x23a>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <HAL_ADC_ConfigChannel+0x258>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <HAL_ADC_ConfigChannel+0x1f4>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b11      	cmp	r3, #17
 8002f5a:	d122      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a11      	ldr	r2, [pc, #68]	; (8002fc0 <HAL_ADC_ConfigChannel+0x258>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d111      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_ADC_ConfigChannel+0x25c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a11      	ldr	r2, [pc, #68]	; (8002fc8 <HAL_ADC_ConfigChannel+0x260>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	0c9a      	lsrs	r2, r3, #18
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f94:	e002      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f9      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	40012300 	.word	0x40012300
 8002fbc:	40012000 	.word	0x40012000
 8002fc0:	10000012 	.word	0x10000012
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	431bde83 	.word	0x431bde83

08002fcc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd4:	4b79      	ldr	r3, [pc, #484]	; (80031bc <ADC_Init+0x1f0>)
 8002fd6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003000:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	021a      	lsls	r2, r3, #8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003024:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003046:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	4a58      	ldr	r2, [pc, #352]	; (80031c0 <ADC_Init+0x1f4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d022      	beq.n	80030aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003072:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6899      	ldr	r1, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6899      	ldr	r1, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	e00f      	b.n	80030ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0202 	bic.w	r2, r2, #2
 80030d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	7e1b      	ldrb	r3, [r3, #24]
 80030e4:	005a      	lsls	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01b      	beq.n	8003130 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003106:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003116:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	3b01      	subs	r3, #1
 8003124:	035a      	lsls	r2, r3, #13
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	e007      	b.n	8003140 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800313e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	3b01      	subs	r3, #1
 800315c:	051a      	lsls	r2, r3, #20
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6899      	ldr	r1, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003182:	025a      	lsls	r2, r3, #9
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6899      	ldr	r1, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	029a      	lsls	r2, r3, #10
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40012300 	.word	0x40012300
 80031c0:	0f000001 	.word	0x0f000001

080031c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f6:	4a04      	ldr	r2, [pc, #16]	; (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	60d3      	str	r3, [r2, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <__NVIC_GetPriorityGrouping+0x18>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 0307 	and.w	r3, r3, #7
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	2b00      	cmp	r3, #0
 8003238:	db0b      	blt.n	8003252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4907      	ldr	r1, [pc, #28]	; (8003260 <__NVIC_EnableIRQ+0x38>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2001      	movs	r0, #1
 800324a:	fa00 f202 	lsl.w	r2, r0, r2
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000e100 	.word	0xe000e100

08003264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	2b00      	cmp	r3, #0
 8003276:	db0a      	blt.n	800328e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	490c      	ldr	r1, [pc, #48]	; (80032b0 <__NVIC_SetPriority+0x4c>)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	0112      	lsls	r2, r2, #4
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	440b      	add	r3, r1
 8003288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800328c:	e00a      	b.n	80032a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4908      	ldr	r1, [pc, #32]	; (80032b4 <__NVIC_SetPriority+0x50>)
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	3b04      	subs	r3, #4
 800329c:	0112      	lsls	r2, r2, #4
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	440b      	add	r3, r1
 80032a2:	761a      	strb	r2, [r3, #24]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000e100 	.word	0xe000e100
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	; 0x24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f1c3 0307 	rsb	r3, r3, #7
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	bf28      	it	cs
 80032d6:	2304      	movcs	r3, #4
 80032d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3304      	adds	r3, #4
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d902      	bls.n	80032e8 <NVIC_EncodePriority+0x30>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3b03      	subs	r3, #3
 80032e6:	e000      	b.n	80032ea <NVIC_EncodePriority+0x32>
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	401a      	ands	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003300:	f04f 31ff 	mov.w	r1, #4294967295
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	43d9      	mvns	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	4313      	orrs	r3, r2
         );
}
 8003312:	4618      	mov	r0, r3
 8003314:	3724      	adds	r7, #36	; 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3b01      	subs	r3, #1
 800332c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003330:	d301      	bcc.n	8003336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003332:	2301      	movs	r3, #1
 8003334:	e00f      	b.n	8003356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <SysTick_Config+0x40>)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800333e:	210f      	movs	r1, #15
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
 8003344:	f7ff ff8e 	bl	8003264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <SysTick_Config+0x40>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <SysTick_Config+0x40>)
 8003350:	2207      	movs	r2, #7
 8003352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	e000e010 	.word	0xe000e010

08003364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff29 	bl	80031c4 <__NVIC_SetPriorityGrouping>
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800338c:	f7ff ff3e 	bl	800320c <__NVIC_GetPriorityGrouping>
 8003390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	6978      	ldr	r0, [r7, #20]
 8003398:	f7ff ff8e 	bl	80032b8 <NVIC_EncodePriority>
 800339c:	4602      	mov	r2, r0
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff5d 	bl	8003264 <__NVIC_SetPriority>
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff31 	bl	8003228 <__NVIC_EnableIRQ>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ffa2 	bl	8003320 <SysTick_Config>
 80033dc:	4603      	mov	r3, r0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e014      	b.n	8003422 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	791b      	ldrb	r3, [r3, #4]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d105      	bne.n	800340e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7fe fdf7 	bl	8001ffc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2202      	movs	r2, #2
 8003412:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	795b      	ldrb	r3, [r3, #5]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_DAC_Start+0x16>
 800343c:	2302      	movs	r3, #2
 800343e:	e040      	b.n	80034c2 <HAL_DAC_Start+0x98>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2201      	movs	r2, #1
 800345a:	409a      	lsls	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10f      	bne.n	800348a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003474:	2b3c      	cmp	r3, #60	; 0x3c
 8003476:	d11d      	bne.n	80034b4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	e014      	b.n	80034b4 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	213c      	movs	r1, #60	; 0x3c
 800349c:	fa01 f303 	lsl.w	r3, r1, r3
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d107      	bne.n	80034b4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0202 	orr.w	r2, r2, #2
 80034b2:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b087      	sub	sp, #28
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	3308      	adds	r3, #8
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e004      	b.n	8003502 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	3314      	adds	r3, #20
 8003500:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	461a      	mov	r2, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	795b      	ldrb	r3, [r3, #5]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_DAC_ConfigChannel+0x18>
 800352c:	2302      	movs	r3, #2
 800352e:	e03c      	b.n	80035aa <HAL_DAC_ConfigChannel+0x92>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2202      	movs	r2, #2
 800353a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43db      	mvns	r3, r3
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4013      	ands	r3, r2
 8003558:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6819      	ldr	r1, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	22c0      	movs	r2, #192	; 0xc0
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	400a      	ands	r2, r1
 800359a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035c4:	f7ff f9e2 	bl	800298c <HAL_GetTick>
 80035c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d008      	beq.n	80035e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e052      	b.n	800368e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0216 	bic.w	r2, r2, #22
 80035f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003606:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <HAL_DMA_Abort+0x62>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0208 	bic.w	r2, r2, #8
 8003626:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0201 	bic.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003638:	e013      	b.n	8003662 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800363a:	f7ff f9a7 	bl	800298c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b05      	cmp	r3, #5
 8003646:	d90c      	bls.n	8003662 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2203      	movs	r2, #3
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e015      	b.n	800368e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e4      	bne.n	800363a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	223f      	movs	r2, #63	; 0x3f
 8003676:	409a      	lsls	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d004      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2280      	movs	r2, #128	; 0x80
 80036ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e00c      	b.n	80036ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2205      	movs	r2, #5
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	e165      	b.n	80039c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f8:	2201      	movs	r2, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	429a      	cmp	r2, r3
 8003712:	f040 8154 	bne.w	80039be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d005      	beq.n	800372e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800372a:	2b02      	cmp	r3, #2
 800372c:	d130      	bne.n	8003790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	2203      	movs	r2, #3
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003764:	2201      	movs	r2, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 0201 	and.w	r2, r3, #1
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b03      	cmp	r3, #3
 800379a:	d017      	beq.n	80037cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d123      	bne.n	8003820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	08da      	lsrs	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3208      	adds	r2, #8
 80037e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	220f      	movs	r2, #15
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	08da      	lsrs	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3208      	adds	r2, #8
 800381a:	69b9      	ldr	r1, [r7, #24]
 800381c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0203 	and.w	r2, r3, #3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80ae 	beq.w	80039be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	4b5d      	ldr	r3, [pc, #372]	; (80039dc <HAL_GPIO_Init+0x300>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	4a5c      	ldr	r2, [pc, #368]	; (80039dc <HAL_GPIO_Init+0x300>)
 800386c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003870:	6453      	str	r3, [r2, #68]	; 0x44
 8003872:	4b5a      	ldr	r3, [pc, #360]	; (80039dc <HAL_GPIO_Init+0x300>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800387e:	4a58      	ldr	r2, [pc, #352]	; (80039e0 <HAL_GPIO_Init+0x304>)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	089b      	lsrs	r3, r3, #2
 8003884:	3302      	adds	r3, #2
 8003886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	220f      	movs	r2, #15
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a4f      	ldr	r2, [pc, #316]	; (80039e4 <HAL_GPIO_Init+0x308>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d025      	beq.n	80038f6 <HAL_GPIO_Init+0x21a>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a4e      	ldr	r2, [pc, #312]	; (80039e8 <HAL_GPIO_Init+0x30c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01f      	beq.n	80038f2 <HAL_GPIO_Init+0x216>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a4d      	ldr	r2, [pc, #308]	; (80039ec <HAL_GPIO_Init+0x310>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d019      	beq.n	80038ee <HAL_GPIO_Init+0x212>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a4c      	ldr	r2, [pc, #304]	; (80039f0 <HAL_GPIO_Init+0x314>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <HAL_GPIO_Init+0x20e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4b      	ldr	r2, [pc, #300]	; (80039f4 <HAL_GPIO_Init+0x318>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00d      	beq.n	80038e6 <HAL_GPIO_Init+0x20a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a4a      	ldr	r2, [pc, #296]	; (80039f8 <HAL_GPIO_Init+0x31c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <HAL_GPIO_Init+0x206>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a49      	ldr	r2, [pc, #292]	; (80039fc <HAL_GPIO_Init+0x320>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <HAL_GPIO_Init+0x202>
 80038da:	2306      	movs	r3, #6
 80038dc:	e00c      	b.n	80038f8 <HAL_GPIO_Init+0x21c>
 80038de:	2307      	movs	r3, #7
 80038e0:	e00a      	b.n	80038f8 <HAL_GPIO_Init+0x21c>
 80038e2:	2305      	movs	r3, #5
 80038e4:	e008      	b.n	80038f8 <HAL_GPIO_Init+0x21c>
 80038e6:	2304      	movs	r3, #4
 80038e8:	e006      	b.n	80038f8 <HAL_GPIO_Init+0x21c>
 80038ea:	2303      	movs	r3, #3
 80038ec:	e004      	b.n	80038f8 <HAL_GPIO_Init+0x21c>
 80038ee:	2302      	movs	r3, #2
 80038f0:	e002      	b.n	80038f8 <HAL_GPIO_Init+0x21c>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <HAL_GPIO_Init+0x21c>
 80038f6:	2300      	movs	r3, #0
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	f002 0203 	and.w	r2, r2, #3
 80038fe:	0092      	lsls	r2, r2, #2
 8003900:	4093      	lsls	r3, r2
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003908:	4935      	ldr	r1, [pc, #212]	; (80039e0 <HAL_GPIO_Init+0x304>)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	089b      	lsrs	r3, r3, #2
 800390e:	3302      	adds	r3, #2
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003916:	4b3a      	ldr	r3, [pc, #232]	; (8003a00 <HAL_GPIO_Init+0x324>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	43db      	mvns	r3, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4013      	ands	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800393a:	4a31      	ldr	r2, [pc, #196]	; (8003a00 <HAL_GPIO_Init+0x324>)
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003940:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <HAL_GPIO_Init+0x324>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003964:	4a26      	ldr	r2, [pc, #152]	; (8003a00 <HAL_GPIO_Init+0x324>)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800396a:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <HAL_GPIO_Init+0x324>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800398e:	4a1c      	ldr	r2, [pc, #112]	; (8003a00 <HAL_GPIO_Init+0x324>)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003994:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <HAL_GPIO_Init+0x324>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	43db      	mvns	r3, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039b8:	4a11      	ldr	r2, [pc, #68]	; (8003a00 <HAL_GPIO_Init+0x324>)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3301      	adds	r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b0f      	cmp	r3, #15
 80039c8:	f67f ae96 	bls.w	80036f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3724      	adds	r7, #36	; 0x24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40013800 	.word	0x40013800
 80039e4:	40020000 	.word	0x40020000
 80039e8:	40020400 	.word	0x40020400
 80039ec:	40020800 	.word	0x40020800
 80039f0:	40020c00 	.word	0x40020c00
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40021400 	.word	0x40021400
 80039fc:	40021800 	.word	0x40021800
 8003a00:	40013c00 	.word	0x40013c00

08003a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
 8003a10:	4613      	mov	r3, r2
 8003a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a14:	787b      	ldrb	r3, [r7, #1]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a20:	e003      	b.n	8003a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	041a      	lsls	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	619a      	str	r2, [r3, #24]
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a48:	887a      	ldrh	r2, [r7, #2]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	041a      	lsls	r2, r3, #16
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	43d9      	mvns	r1, r3
 8003a54:	887b      	ldrh	r3, [r7, #2]
 8003a56:	400b      	ands	r3, r1
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	619a      	str	r2, [r3, #24]
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4b20      	ldr	r3, [pc, #128]	; (8003afc <HAL_PWREx_EnableOverDrive+0x90>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	4a1f      	ldr	r2, [pc, #124]	; (8003afc <HAL_PWREx_EnableOverDrive+0x90>)
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a84:	6413      	str	r3, [r2, #64]	; 0x40
 8003a86:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_PWREx_EnableOverDrive+0x90>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_PWREx_EnableOverDrive+0x94>)
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a98:	f7fe ff78 	bl	800298c <HAL_GetTick>
 8003a9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a9e:	e009      	b.n	8003ab4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003aa0:	f7fe ff74 	bl	800298c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aae:	d901      	bls.n	8003ab4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e01f      	b.n	8003af4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ab4:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac0:	d1ee      	bne.n	8003aa0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ac2:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ac8:	f7fe ff60 	bl	800298c <HAL_GetTick>
 8003acc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ace:	e009      	b.n	8003ae4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ad0:	f7fe ff5c 	bl	800298c <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ade:	d901      	bls.n	8003ae4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e007      	b.n	8003af4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ae4:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003af0:	d1ee      	bne.n	8003ad0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40023800 	.word	0x40023800
 8003b00:	420e0040 	.word	0x420e0040
 8003b04:	40007000 	.word	0x40007000
 8003b08:	420e0044 	.word	0x420e0044

08003b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0cc      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b20:	4b68      	ldr	r3, [pc, #416]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d90c      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d044      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d119      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d003      	beq.n	8003bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e06f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e067      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bea:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4934      	ldr	r1, [pc, #208]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bfc:	f7fe fec6 	bl	800298c <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c04:	f7fe fec2 	bl	800298c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e04f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 020c 	and.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1eb      	bne.n	8003c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d20c      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f855 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490a      	ldr	r1, [pc, #40]	; (8003ccc <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe fe26 	bl	8002904 <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023c00 	.word	0x40023c00
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	08006300 	.word	0x08006300
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	20000004 	.word	0x20000004

08003cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000000 	.word	0x20000000

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cf4:	f7ff fff0 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0a9b      	lsrs	r3, r3, #10
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	08006310 	.word	0x08006310

08003d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d1c:	f7ff ffdc 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0b5b      	lsrs	r3, r3, #13
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4903      	ldr	r1, [pc, #12]	; (8003d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	08006310 	.word	0x08006310

08003d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d44:	b0a6      	sub	sp, #152	; 0x98
 8003d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d66:	4bc8      	ldr	r3, [pc, #800]	; (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b0c      	cmp	r3, #12
 8003d70:	f200 817e 	bhi.w	8004070 <HAL_RCC_GetSysClockFreq+0x330>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003db1 	.word	0x08003db1
 8003d80:	08004071 	.word	0x08004071
 8003d84:	08004071 	.word	0x08004071
 8003d88:	08004071 	.word	0x08004071
 8003d8c:	08003db9 	.word	0x08003db9
 8003d90:	08004071 	.word	0x08004071
 8003d94:	08004071 	.word	0x08004071
 8003d98:	08004071 	.word	0x08004071
 8003d9c:	08003dc1 	.word	0x08003dc1
 8003da0:	08004071 	.word	0x08004071
 8003da4:	08004071 	.word	0x08004071
 8003da8:	08004071 	.word	0x08004071
 8003dac:	08003f2b 	.word	0x08003f2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003db0:	4bb6      	ldr	r3, [pc, #728]	; (800408c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003db6:	e15f      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003db8:	4bb5      	ldr	r3, [pc, #724]	; (8004090 <HAL_RCC_GetSysClockFreq+0x350>)
 8003dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003dbe:	e15b      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc0:	4bb1      	ldr	r3, [pc, #708]	; (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dcc:	4bae      	ldr	r3, [pc, #696]	; (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d031      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd8:	4bab      	ldr	r3, [pc, #684]	; (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	2200      	movs	r2, #0
 8003de0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003de2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003de4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dea:	663b      	str	r3, [r7, #96]	; 0x60
 8003dec:	2300      	movs	r3, #0
 8003dee:	667b      	str	r3, [r7, #100]	; 0x64
 8003df0:	4ba7      	ldr	r3, [pc, #668]	; (8004090 <HAL_RCC_GetSysClockFreq+0x350>)
 8003df2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003df6:	462a      	mov	r2, r5
 8003df8:	fb03 f202 	mul.w	r2, r3, r2
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	4621      	mov	r1, r4
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	4aa2      	ldr	r2, [pc, #648]	; (8004090 <HAL_RCC_GetSysClockFreq+0x350>)
 8003e08:	4621      	mov	r1, r4
 8003e0a:	fba1 1202 	umull	r1, r2, r1, r2
 8003e0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e10:	460a      	mov	r2, r1
 8003e12:	67ba      	str	r2, [r7, #120]	; 0x78
 8003e14:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003e16:	4413      	add	r3, r2
 8003e18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e1e:	2200      	movs	r2, #0
 8003e20:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e28:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003e2c:	f7fc fe0a 	bl	8000a44 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4613      	mov	r3, r2
 8003e36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e3a:	e064      	b.n	8003f06 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3c:	4b92      	ldr	r3, [pc, #584]	; (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	099b      	lsrs	r3, r3, #6
 8003e42:	2200      	movs	r2, #0
 8003e44:	653b      	str	r3, [r7, #80]	; 0x50
 8003e46:	657a      	str	r2, [r7, #84]	; 0x54
 8003e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e50:	2300      	movs	r3, #0
 8003e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e54:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003e58:	4622      	mov	r2, r4
 8003e5a:	462b      	mov	r3, r5
 8003e5c:	f04f 0000 	mov.w	r0, #0
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	0159      	lsls	r1, r3, #5
 8003e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e6a:	0150      	lsls	r0, r2, #5
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4621      	mov	r1, r4
 8003e72:	1a51      	subs	r1, r2, r1
 8003e74:	6139      	str	r1, [r7, #16]
 8003e76:	4629      	mov	r1, r5
 8003e78:	eb63 0301 	sbc.w	r3, r3, r1
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e8a:	4659      	mov	r1, fp
 8003e8c:	018b      	lsls	r3, r1, #6
 8003e8e:	4651      	mov	r1, sl
 8003e90:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e94:	4651      	mov	r1, sl
 8003e96:	018a      	lsls	r2, r1, #6
 8003e98:	4651      	mov	r1, sl
 8003e9a:	ebb2 0801 	subs.w	r8, r2, r1
 8003e9e:	4659      	mov	r1, fp
 8003ea0:	eb63 0901 	sbc.w	r9, r3, r1
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eb0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eb4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eb8:	4690      	mov	r8, r2
 8003eba:	4699      	mov	r9, r3
 8003ebc:	4623      	mov	r3, r4
 8003ebe:	eb18 0303 	adds.w	r3, r8, r3
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	462b      	mov	r3, r5
 8003ec6:	eb49 0303 	adc.w	r3, r9, r3
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ed8:	4629      	mov	r1, r5
 8003eda:	028b      	lsls	r3, r1, #10
 8003edc:	4621      	mov	r1, r4
 8003ede:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	028a      	lsls	r2, r1, #10
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eee:	2200      	movs	r2, #0
 8003ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ef2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ef4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ef8:	f7fc fda4 	bl	8000a44 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4613      	mov	r3, r2
 8003f02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f06:	4b60      	ldr	r3, [pc, #384]	; (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	0c1b      	lsrs	r3, r3, #16
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	3301      	adds	r3, #1
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003f18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003f28:	e0a6      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f2a:	4b57      	ldr	r3, [pc, #348]	; (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f36:	4b54      	ldr	r3, [pc, #336]	; (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d02a      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f42:	4b51      	ldr	r3, [pc, #324]	; (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	2200      	movs	r2, #0
 8003f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f54:	2100      	movs	r1, #0
 8003f56:	4b4e      	ldr	r3, [pc, #312]	; (8004090 <HAL_RCC_GetSysClockFreq+0x350>)
 8003f58:	fb03 f201 	mul.w	r2, r3, r1
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	fb00 f303 	mul.w	r3, r0, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	4a4a      	ldr	r2, [pc, #296]	; (8004090 <HAL_RCC_GetSysClockFreq+0x350>)
 8003f66:	fba0 1202 	umull	r1, r2, r0, r2
 8003f6a:	677a      	str	r2, [r7, #116]	; 0x74
 8003f6c:	460a      	mov	r2, r1
 8003f6e:	673a      	str	r2, [r7, #112]	; 0x70
 8003f70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f72:	4413      	add	r3, r2
 8003f74:	677b      	str	r3, [r7, #116]	; 0x74
 8003f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f7e:	637a      	str	r2, [r7, #52]	; 0x34
 8003f80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f84:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003f88:	f7fc fd5c 	bl	8000a44 <__aeabi_uldivmod>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4613      	mov	r3, r2
 8003f92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f96:	e05b      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f98:	4b3b      	ldr	r3, [pc, #236]	; (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	099b      	lsrs	r3, r3, #6
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003faa:	623b      	str	r3, [r7, #32]
 8003fac:	2300      	movs	r3, #0
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	f04f 0000 	mov.w	r0, #0
 8003fbc:	f04f 0100 	mov.w	r1, #0
 8003fc0:	0159      	lsls	r1, r3, #5
 8003fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc6:	0150      	lsls	r0, r2, #5
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4641      	mov	r1, r8
 8003fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fec:	ebb2 040a 	subs.w	r4, r2, sl
 8003ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	00eb      	lsls	r3, r5, #3
 8003ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004002:	00e2      	lsls	r2, r4, #3
 8004004:	4614      	mov	r4, r2
 8004006:	461d      	mov	r5, r3
 8004008:	4643      	mov	r3, r8
 800400a:	18e3      	adds	r3, r4, r3
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	464b      	mov	r3, r9
 8004010:	eb45 0303 	adc.w	r3, r5, r3
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004022:	4629      	mov	r1, r5
 8004024:	028b      	lsls	r3, r1, #10
 8004026:	4621      	mov	r1, r4
 8004028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800402c:	4621      	mov	r1, r4
 800402e:	028a      	lsls	r2, r1, #10
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004038:	2200      	movs	r2, #0
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	61fa      	str	r2, [r7, #28]
 800403e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004042:	f7fc fcff 	bl	8000a44 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4613      	mov	r3, r2
 800404c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004050:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <HAL_RCC_GetSysClockFreq+0x348>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	0f1b      	lsrs	r3, r3, #28
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800405e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004062:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004066:	fbb2 f3f3 	udiv	r3, r2, r3
 800406a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800406e:	e003      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_RCC_GetSysClockFreq+0x34c>)
 8004072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004076:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004078:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800407c:	4618      	mov	r0, r3
 800407e:	3798      	adds	r7, #152	; 0x98
 8004080:	46bd      	mov	sp, r7
 8004082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004086:	bf00      	nop
 8004088:	40023800 	.word	0x40023800
 800408c:	00f42400 	.word	0x00f42400
 8004090:	017d7840 	.word	0x017d7840

08004094 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e28d      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 8083 	beq.w	80041ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040b4:	4b94      	ldr	r3, [pc, #592]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d019      	beq.n	80040f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040c0:	4b91      	ldr	r3, [pc, #580]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d106      	bne.n	80040da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040cc:	4b8e      	ldr	r3, [pc, #568]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d8:	d00c      	beq.n	80040f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040da:	4b8b      	ldr	r3, [pc, #556]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d112      	bne.n	800410c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040e6:	4b88      	ldr	r3, [pc, #544]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040f2:	d10b      	bne.n	800410c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	4b84      	ldr	r3, [pc, #528]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d05b      	beq.n	80041b8 <HAL_RCC_OscConfig+0x124>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d157      	bne.n	80041b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e25a      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004114:	d106      	bne.n	8004124 <HAL_RCC_OscConfig+0x90>
 8004116:	4b7c      	ldr	r3, [pc, #496]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a7b      	ldr	r2, [pc, #492]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	e01d      	b.n	8004160 <HAL_RCC_OscConfig+0xcc>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800412c:	d10c      	bne.n	8004148 <HAL_RCC_OscConfig+0xb4>
 800412e:	4b76      	ldr	r3, [pc, #472]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a75      	ldr	r2, [pc, #468]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 8004134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4b73      	ldr	r3, [pc, #460]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a72      	ldr	r2, [pc, #456]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	e00b      	b.n	8004160 <HAL_RCC_OscConfig+0xcc>
 8004148:	4b6f      	ldr	r3, [pc, #444]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a6e      	ldr	r2, [pc, #440]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 800414e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	4b6c      	ldr	r3, [pc, #432]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a6b      	ldr	r2, [pc, #428]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 800415a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800415e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d013      	beq.n	8004190 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fe fc10 	bl	800298c <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004170:	f7fe fc0c 	bl	800298c <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	; 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e21f      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b61      	ldr	r3, [pc, #388]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0xdc>
 800418e:	e014      	b.n	80041ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fe fbfc 	bl	800298c <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004198:	f7fe fbf8 	bl	800298c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e20b      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041aa:	4b57      	ldr	r3, [pc, #348]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x104>
 80041b6:	e000      	b.n	80041ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d06f      	beq.n	80042a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041c6:	4b50      	ldr	r3, [pc, #320]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d017      	beq.n	8004202 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041d2:	4b4d      	ldr	r3, [pc, #308]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d105      	bne.n	80041ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041de:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ea:	4b47      	ldr	r3, [pc, #284]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041f2:	2b0c      	cmp	r3, #12
 80041f4:	d11c      	bne.n	8004230 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f6:	4b44      	ldr	r3, [pc, #272]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d116      	bne.n	8004230 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_RCC_OscConfig+0x186>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e1d3      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421a:	4b3b      	ldr	r3, [pc, #236]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4937      	ldr	r1, [pc, #220]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	e03a      	b.n	80042a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d020      	beq.n	800427a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004238:	4b34      	ldr	r3, [pc, #208]	; (800430c <HAL_RCC_OscConfig+0x278>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fe fba5 	bl	800298c <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004246:	f7fe fba1 	bl	800298c <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e1b4      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b28      	ldr	r3, [pc, #160]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4925      	ldr	r1, [pc, #148]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]
 8004278:	e015      	b.n	80042a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <HAL_RCC_OscConfig+0x278>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fe fb84 	bl	800298c <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004288:	f7fe fb80 	bl	800298c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e193      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d036      	beq.n	8004320 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <HAL_RCC_OscConfig+0x27c>)
 80042bc:	2201      	movs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fe fb64 	bl	800298c <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c8:	f7fe fb60 	bl	800298c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e173      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_OscConfig+0x274>)
 80042dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x234>
 80042e6:	e01b      	b.n	8004320 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <HAL_RCC_OscConfig+0x27c>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ee:	f7fe fb4d 	bl	800298c <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	e00e      	b.n	8004314 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f6:	f7fe fb49 	bl	800298c <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d907      	bls.n	8004314 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e15c      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
 8004308:	40023800 	.word	0x40023800
 800430c:	42470000 	.word	0x42470000
 8004310:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004314:	4b8a      	ldr	r3, [pc, #552]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1ea      	bne.n	80042f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8097 	beq.w	800445c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800432e:	2300      	movs	r3, #0
 8004330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004332:	4b83      	ldr	r3, [pc, #524]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10f      	bne.n	800435e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	4b7f      	ldr	r3, [pc, #508]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	4a7e      	ldr	r2, [pc, #504]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434c:	6413      	str	r3, [r2, #64]	; 0x40
 800434e:	4b7c      	ldr	r3, [pc, #496]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435a:	2301      	movs	r3, #1
 800435c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435e:	4b79      	ldr	r3, [pc, #484]	; (8004544 <HAL_RCC_OscConfig+0x4b0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d118      	bne.n	800439c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436a:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCC_OscConfig+0x4b0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a75      	ldr	r2, [pc, #468]	; (8004544 <HAL_RCC_OscConfig+0x4b0>)
 8004370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004376:	f7fe fb09 	bl	800298c <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437e:	f7fe fb05 	bl	800298c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e118      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004390:	4b6c      	ldr	r3, [pc, #432]	; (8004544 <HAL_RCC_OscConfig+0x4b0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d106      	bne.n	80043b2 <HAL_RCC_OscConfig+0x31e>
 80043a4:	4b66      	ldr	r3, [pc, #408]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	4a65      	ldr	r2, [pc, #404]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	6713      	str	r3, [r2, #112]	; 0x70
 80043b0:	e01c      	b.n	80043ec <HAL_RCC_OscConfig+0x358>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x340>
 80043ba:	4b61      	ldr	r3, [pc, #388]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	4a60      	ldr	r2, [pc, #384]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043c0:	f043 0304 	orr.w	r3, r3, #4
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70
 80043c6:	4b5e      	ldr	r3, [pc, #376]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a5d      	ldr	r2, [pc, #372]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
 80043d2:	e00b      	b.n	80043ec <HAL_RCC_OscConfig+0x358>
 80043d4:	4b5a      	ldr	r3, [pc, #360]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a59      	ldr	r2, [pc, #356]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
 80043e0:	4b57      	ldr	r3, [pc, #348]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	4a56      	ldr	r2, [pc, #344]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80043e6:	f023 0304 	bic.w	r3, r3, #4
 80043ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d015      	beq.n	8004420 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fe faca 	bl	800298c <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fc:	f7fe fac6 	bl	800298c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	; 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e0d7      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004412:	4b4b      	ldr	r3, [pc, #300]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0ee      	beq.n	80043fc <HAL_RCC_OscConfig+0x368>
 800441e:	e014      	b.n	800444a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fe fab4 	bl	800298c <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004426:	e00a      	b.n	800443e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004428:	f7fe fab0 	bl	800298c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	; 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e0c1      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443e:	4b40      	ldr	r3, [pc, #256]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1ee      	bne.n	8004428 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d105      	bne.n	800445c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004450:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	4a3a      	ldr	r2, [pc, #232]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800445a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80ad 	beq.w	80045c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004466:	4b36      	ldr	r3, [pc, #216]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	2b08      	cmp	r3, #8
 8004470:	d060      	beq.n	8004534 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d145      	bne.n	8004506 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447a:	4b33      	ldr	r3, [pc, #204]	; (8004548 <HAL_RCC_OscConfig+0x4b4>)
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fe fa84 	bl	800298c <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004488:	f7fe fa80 	bl	800298c <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e093      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449a:	4b29      	ldr	r3, [pc, #164]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	019b      	lsls	r3, r3, #6
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	085b      	lsrs	r3, r3, #1
 80044be:	3b01      	subs	r3, #1
 80044c0:	041b      	lsls	r3, r3, #16
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	071b      	lsls	r3, r3, #28
 80044d2:	491b      	ldr	r1, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x4b4>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fe fa55 	bl	800298c <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e6:	f7fe fa51 	bl	800298c <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e064      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x452>
 8004504:	e05c      	b.n	80045c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <HAL_RCC_OscConfig+0x4b4>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fe fa3e 	bl	800298c <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004514:	f7fe fa3a 	bl	800298c <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e04d      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <HAL_RCC_OscConfig+0x4ac>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x480>
 8004532:	e045      	b.n	80045c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e040      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
 8004540:	40023800 	.word	0x40023800
 8004544:	40007000 	.word	0x40007000
 8004548:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800454c:	4b1f      	ldr	r3, [pc, #124]	; (80045cc <HAL_RCC_OscConfig+0x538>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d030      	beq.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d129      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d122      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800457c:	4013      	ands	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004582:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004584:	4293      	cmp	r3, r2
 8004586:	d119      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	3b01      	subs	r3, #1
 8004596:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004598:	429a      	cmp	r2, r3
 800459a:	d10f      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800

080045d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e041      	b.n	8004666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fd fd44 	bl	8002084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f000 fa96 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	d001      	beq.n	8004688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e04e      	b.n	8004726 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a23      	ldr	r2, [pc, #140]	; (8004734 <HAL_TIM_Base_Start_IT+0xc4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d022      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x80>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b2:	d01d      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x80>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <HAL_TIM_Base_Start_IT+0xc8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d018      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x80>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1e      	ldr	r2, [pc, #120]	; (800473c <HAL_TIM_Base_Start_IT+0xcc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d013      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x80>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1c      	ldr	r2, [pc, #112]	; (8004740 <HAL_TIM_Base_Start_IT+0xd0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00e      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x80>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1b      	ldr	r2, [pc, #108]	; (8004744 <HAL_TIM_Base_Start_IT+0xd4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d009      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x80>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a19      	ldr	r2, [pc, #100]	; (8004748 <HAL_TIM_Base_Start_IT+0xd8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <HAL_TIM_Base_Start_IT+0x80>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a18      	ldr	r2, [pc, #96]	; (800474c <HAL_TIM_Base_Start_IT+0xdc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d111      	bne.n	8004714 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b06      	cmp	r3, #6
 8004700:	d010      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0201 	orr.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	e007      	b.n	8004724 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40010000 	.word	0x40010000
 8004738:	40000400 	.word	0x40000400
 800473c:	40000800 	.word	0x40000800
 8004740:	40000c00 	.word	0x40000c00
 8004744:	40010400 	.word	0x40010400
 8004748:	40014000 	.word	0x40014000
 800474c:	40001800 	.word	0x40001800

08004750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d122      	bne.n	80047ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b02      	cmp	r3, #2
 8004772:	d11b      	bne.n	80047ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0202 	mvn.w	r2, #2
 800477c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f9b5 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 8004798:	e005      	b.n	80047a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f9a7 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f9b8 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d122      	bne.n	8004800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d11b      	bne.n	8004800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0204 	mvn.w	r2, #4
 80047d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2202      	movs	r2, #2
 80047d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f98b 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 80047ec:	e005      	b.n	80047fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f97d 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f98e 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b08      	cmp	r3, #8
 800480c:	d122      	bne.n	8004854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b08      	cmp	r3, #8
 800481a:	d11b      	bne.n	8004854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0208 	mvn.w	r2, #8
 8004824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2204      	movs	r2, #4
 800482a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f961 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 8004840:	e005      	b.n	800484e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f953 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f964 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b10      	cmp	r3, #16
 8004860:	d122      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b10      	cmp	r3, #16
 800486e:	d11b      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0210 	mvn.w	r2, #16
 8004878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2208      	movs	r2, #8
 800487e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f937 	bl	8004b02 <HAL_TIM_IC_CaptureCallback>
 8004894:	e005      	b.n	80048a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f929 	bl	8004aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f93a 	bl	8004b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d10e      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d107      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0201 	mvn.w	r2, #1
 80048cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fd f812 	bl	80018f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048de:	2b80      	cmp	r3, #128	; 0x80
 80048e0:	d10e      	bne.n	8004900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ec:	2b80      	cmp	r3, #128	; 0x80
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa64 	bl	8004dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490a:	2b40      	cmp	r3, #64	; 0x40
 800490c:	d10e      	bne.n	800492c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004918:	2b40      	cmp	r3, #64	; 0x40
 800491a:	d107      	bne.n	800492c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8ff 	bl	8004b2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b20      	cmp	r3, #32
 8004938:	d10e      	bne.n	8004958 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b20      	cmp	r3, #32
 8004946:	d107      	bne.n	8004958 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0220 	mvn.w	r2, #32
 8004950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa2e 	bl	8004db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_TIM_ConfigClockSource+0x1c>
 8004978:	2302      	movs	r3, #2
 800497a:	e0b4      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x186>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800499a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b4:	d03e      	beq.n	8004a34 <HAL_TIM_ConfigClockSource+0xd4>
 80049b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ba:	f200 8087 	bhi.w	8004acc <HAL_TIM_ConfigClockSource+0x16c>
 80049be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c2:	f000 8086 	beq.w	8004ad2 <HAL_TIM_ConfigClockSource+0x172>
 80049c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ca:	d87f      	bhi.n	8004acc <HAL_TIM_ConfigClockSource+0x16c>
 80049cc:	2b70      	cmp	r3, #112	; 0x70
 80049ce:	d01a      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0xa6>
 80049d0:	2b70      	cmp	r3, #112	; 0x70
 80049d2:	d87b      	bhi.n	8004acc <HAL_TIM_ConfigClockSource+0x16c>
 80049d4:	2b60      	cmp	r3, #96	; 0x60
 80049d6:	d050      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0x11a>
 80049d8:	2b60      	cmp	r3, #96	; 0x60
 80049da:	d877      	bhi.n	8004acc <HAL_TIM_ConfigClockSource+0x16c>
 80049dc:	2b50      	cmp	r3, #80	; 0x50
 80049de:	d03c      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0xfa>
 80049e0:	2b50      	cmp	r3, #80	; 0x50
 80049e2:	d873      	bhi.n	8004acc <HAL_TIM_ConfigClockSource+0x16c>
 80049e4:	2b40      	cmp	r3, #64	; 0x40
 80049e6:	d058      	beq.n	8004a9a <HAL_TIM_ConfigClockSource+0x13a>
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d86f      	bhi.n	8004acc <HAL_TIM_ConfigClockSource+0x16c>
 80049ec:	2b30      	cmp	r3, #48	; 0x30
 80049ee:	d064      	beq.n	8004aba <HAL_TIM_ConfigClockSource+0x15a>
 80049f0:	2b30      	cmp	r3, #48	; 0x30
 80049f2:	d86b      	bhi.n	8004acc <HAL_TIM_ConfigClockSource+0x16c>
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d060      	beq.n	8004aba <HAL_TIM_ConfigClockSource+0x15a>
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d867      	bhi.n	8004acc <HAL_TIM_ConfigClockSource+0x16c>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d05c      	beq.n	8004aba <HAL_TIM_ConfigClockSource+0x15a>
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d05a      	beq.n	8004aba <HAL_TIM_ConfigClockSource+0x15a>
 8004a04:	e062      	b.n	8004acc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6899      	ldr	r1, [r3, #8]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f000 f9ad 	bl	8004d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	609a      	str	r2, [r3, #8]
      break;
 8004a32:	e04f      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	6899      	ldr	r1, [r3, #8]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f000 f996 	bl	8004d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a56:	609a      	str	r2, [r3, #8]
      break;
 8004a58:	e03c      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	6859      	ldr	r1, [r3, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	461a      	mov	r2, r3
 8004a68:	f000 f90a 	bl	8004c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2150      	movs	r1, #80	; 0x50
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f963 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004a78:	e02c      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6859      	ldr	r1, [r3, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	461a      	mov	r2, r3
 8004a88:	f000 f929 	bl	8004cde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2160      	movs	r1, #96	; 0x60
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f953 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004a98:	e01c      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6859      	ldr	r1, [r3, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f000 f8ea 	bl	8004c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2140      	movs	r1, #64	; 0x40
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f943 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004ab8:	e00c      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	f000 f93a 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004aca:	e003      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
      break;
 8004ad0:	e000      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ad2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a40      	ldr	r2, [pc, #256]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d00f      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a3d      	ldr	r2, [pc, #244]	; (8004c58 <TIM_Base_SetConfig+0x118>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3c      	ldr	r2, [pc, #240]	; (8004c5c <TIM_Base_SetConfig+0x11c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3b      	ldr	r2, [pc, #236]	; (8004c60 <TIM_Base_SetConfig+0x120>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3a      	ldr	r2, [pc, #232]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d108      	bne.n	8004b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a2f      	ldr	r2, [pc, #188]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d02b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba0:	d027      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2c      	ldr	r2, [pc, #176]	; (8004c58 <TIM_Base_SetConfig+0x118>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d023      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <TIM_Base_SetConfig+0x11c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01f      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2a      	ldr	r2, [pc, #168]	; (8004c60 <TIM_Base_SetConfig+0x120>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a29      	ldr	r2, [pc, #164]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d017      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a28      	ldr	r2, [pc, #160]	; (8004c68 <TIM_Base_SetConfig+0x128>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a27      	ldr	r2, [pc, #156]	; (8004c6c <TIM_Base_SetConfig+0x12c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00f      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a26      	ldr	r2, [pc, #152]	; (8004c70 <TIM_Base_SetConfig+0x130>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a25      	ldr	r2, [pc, #148]	; (8004c74 <TIM_Base_SetConfig+0x134>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a24      	ldr	r2, [pc, #144]	; (8004c78 <TIM_Base_SetConfig+0x138>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a23      	ldr	r2, [pc, #140]	; (8004c7c <TIM_Base_SetConfig+0x13c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d108      	bne.n	8004c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d003      	beq.n	8004c38 <TIM_Base_SetConfig+0xf8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a0c      	ldr	r2, [pc, #48]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d103      	bne.n	8004c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	615a      	str	r2, [r3, #20]
}
 8004c46:	bf00      	nop
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40010000 	.word	0x40010000
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40000c00 	.word	0x40000c00
 8004c64:	40010400 	.word	0x40010400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800
 8004c74:	40001800 	.word	0x40001800
 8004c78:	40001c00 	.word	0x40001c00
 8004c7c:	40002000 	.word	0x40002000

08004c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0201 	bic.w	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f023 030a 	bic.w	r3, r3, #10
 8004cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	621a      	str	r2, [r3, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b087      	sub	sp, #28
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f023 0210 	bic.w	r2, r3, #16
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	031b      	lsls	r3, r3, #12
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f043 0307 	orr.w	r3, r3, #7
 8004d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	609a      	str	r2, [r3, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	021a      	lsls	r2, r3, #8
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e03f      	b.n	8004e6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fd f966 	bl	80020d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2224      	movs	r2, #36	; 0x24
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fddf 	bl	80059e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b08a      	sub	sp, #40	; 0x28
 8004e7a:	af02      	add	r7, sp, #8
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d17c      	bne.n	8004f90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <HAL_UART_Transmit+0x2c>
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e075      	b.n	8004f92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_UART_Transmit+0x3e>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e06e      	b.n	8004f92 <HAL_UART_Transmit+0x11c>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2221      	movs	r2, #33	; 0x21
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eca:	f7fd fd5f 	bl	800298c <HAL_GetTick>
 8004ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	88fa      	ldrh	r2, [r7, #6]
 8004eda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee4:	d108      	bne.n	8004ef8 <HAL_UART_Transmit+0x82>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d104      	bne.n	8004ef8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	61bb      	str	r3, [r7, #24]
 8004ef6:	e003      	b.n	8004f00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f08:	e02a      	b.n	8004f60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2200      	movs	r2, #0
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 fb1f 	bl	8005558 <UART_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e036      	b.n	8004f92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	3302      	adds	r3, #2
 8004f3e:	61bb      	str	r3, [r7, #24]
 8004f40:	e007      	b.n	8004f52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	781a      	ldrb	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1cf      	bne.n	8004f0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2200      	movs	r2, #0
 8004f72:	2140      	movs	r1, #64	; 0x40
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 faef 	bl	8005558 <UART_WaitOnFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e006      	b.n	8004f92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	e000      	b.n	8004f92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f90:	2302      	movs	r3, #2
  }
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3720      	adds	r7, #32
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d11d      	bne.n	8004ff0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <HAL_UART_Receive_IT+0x26>
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e016      	b.n	8004ff2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_UART_Receive_IT+0x38>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e00f      	b.n	8004ff2 <HAL_UART_Receive_IT+0x58>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fe0:	88fb      	ldrh	r3, [r7, #6]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fb24 	bl	8005634 <UART_Start_Receive_IT>
 8004fec:	4603      	mov	r3, r0
 8004fee:	e000      	b.n	8004ff2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
  }
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b0ba      	sub	sp, #232	; 0xe8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005022:	2300      	movs	r3, #0
 8005024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005028:	2300      	movs	r3, #0
 800502a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800502e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800503a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10f      	bne.n	8005062 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b00      	cmp	r3, #0
 800504c:	d009      	beq.n	8005062 <HAL_UART_IRQHandler+0x66>
 800504e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fc07 	bl	800586e <UART_Receive_IT>
      return;
 8005060:	e256      	b.n	8005510 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80de 	beq.w	8005228 <HAL_UART_IRQHandler+0x22c>
 800506c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d106      	bne.n	8005086 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800507c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80d1 	beq.w	8005228 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00b      	beq.n	80050aa <HAL_UART_IRQHandler+0xae>
 8005092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f043 0201 	orr.w	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <HAL_UART_IRQHandler+0xd2>
 80050b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f043 0202 	orr.w	r2, r3, #2
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00b      	beq.n	80050f2 <HAL_UART_IRQHandler+0xf6>
 80050da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f043 0204 	orr.w	r2, r3, #4
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d011      	beq.n	8005122 <HAL_UART_IRQHandler+0x126>
 80050fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b00      	cmp	r3, #0
 8005108:	d105      	bne.n	8005116 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800510a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f043 0208 	orr.w	r2, r3, #8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 81ed 	beq.w	8005506 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800512c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <HAL_UART_IRQHandler+0x14e>
 8005138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fb92 	bl	800586e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <HAL_UART_IRQHandler+0x17a>
 800516e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d04f      	beq.n	8005216 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fa9a 	bl	80056b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	d141      	bne.n	800520e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3314      	adds	r3, #20
 8005190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3314      	adds	r3, #20
 80051b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1d9      	bne.n	800518a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d013      	beq.n	8005206 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	4a7d      	ldr	r2, [pc, #500]	; (80053d8 <HAL_UART_IRQHandler+0x3dc>)
 80051e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe fa53 	bl	8003696 <HAL_DMA_Abort_IT>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d016      	beq.n	8005224 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005200:	4610      	mov	r0, r2
 8005202:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005204:	e00e      	b.n	8005224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f990 	bl	800552c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520c:	e00a      	b.n	8005224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f98c 	bl	800552c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005214:	e006      	b.n	8005224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f988 	bl	800552c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005222:	e170      	b.n	8005506 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005224:	bf00      	nop
    return;
 8005226:	e16e      	b.n	8005506 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522c:	2b01      	cmp	r3, #1
 800522e:	f040 814a 	bne.w	80054c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 8143 	beq.w	80054c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 813c 	beq.w	80054c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800524e:	2300      	movs	r3, #0
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60bb      	str	r3, [r7, #8]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	60bb      	str	r3, [r7, #8]
 8005262:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526e:	2b40      	cmp	r3, #64	; 0x40
 8005270:	f040 80b4 	bne.w	80053dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005280:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 8140 	beq.w	800550a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800528e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005292:	429a      	cmp	r2, r3
 8005294:	f080 8139 	bcs.w	800550a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800529e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052aa:	f000 8088 	beq.w	80053be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	330c      	adds	r3, #12
 80052b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	330c      	adds	r3, #12
 80052d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1d9      	bne.n	80052ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3314      	adds	r3, #20
 8005300:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800530a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3314      	adds	r3, #20
 800531a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800531e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005322:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005326:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e1      	bne.n	80052fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3314      	adds	r3, #20
 800533c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800534c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3314      	adds	r3, #20
 8005356:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800535a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800535c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005360:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e3      	bne.n	8005336 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800538c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800538e:	f023 0310 	bic.w	r3, r3, #16
 8005392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	330c      	adds	r3, #12
 800539c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80053a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e3      	bne.n	800537c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fe f8fc 	bl	80035b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f8b6 	bl	8005540 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053d4:	e099      	b.n	800550a <HAL_UART_IRQHandler+0x50e>
 80053d6:	bf00      	nop
 80053d8:	08005777 	.word	0x08005777
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 808b 	beq.w	800550e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80053f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8086 	beq.w	800550e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	330c      	adds	r3, #12
 8005408:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005414:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005418:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005426:	647a      	str	r2, [r7, #68]	; 0x44
 8005428:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800542c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e3      	bne.n	8005402 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3314      	adds	r3, #20
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	623b      	str	r3, [r7, #32]
   return(result);
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	f023 0301 	bic.w	r3, r3, #1
 8005450:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3314      	adds	r3, #20
 800545a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800545e:	633a      	str	r2, [r7, #48]	; 0x30
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e3      	bne.n	800543a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0310 	bic.w	r3, r3, #16
 8005496:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	330c      	adds	r3, #12
 80054a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054a4:	61fa      	str	r2, [r7, #28]
 80054a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	69b9      	ldr	r1, [r7, #24]
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	617b      	str	r3, [r7, #20]
   return(result);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e3      	bne.n	8005480 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f83e 	bl	8005540 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054c4:	e023      	b.n	800550e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <HAL_UART_IRQHandler+0x4ea>
 80054d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f95d 	bl	800579e <UART_Transmit_IT>
    return;
 80054e4:	e014      	b.n	8005510 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00e      	beq.n	8005510 <HAL_UART_IRQHandler+0x514>
 80054f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d008      	beq.n	8005510 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f99d 	bl	800583e <UART_EndTransmit_IT>
    return;
 8005504:	e004      	b.n	8005510 <HAL_UART_IRQHandler+0x514>
    return;
 8005506:	bf00      	nop
 8005508:	e002      	b.n	8005510 <HAL_UART_IRQHandler+0x514>
      return;
 800550a:	bf00      	nop
 800550c:	e000      	b.n	8005510 <HAL_UART_IRQHandler+0x514>
      return;
 800550e:	bf00      	nop
  }
}
 8005510:	37e8      	adds	r7, #232	; 0xe8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop

08005518 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b090      	sub	sp, #64	; 0x40
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005568:	e050      	b.n	800560c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005570:	d04c      	beq.n	800560c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <UART_WaitOnFlagUntilTimeout+0x30>
 8005578:	f7fd fa08 	bl	800298c <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005584:	429a      	cmp	r2, r3
 8005586:	d241      	bcs.n	800560c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330c      	adds	r3, #12
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	330c      	adds	r3, #12
 80055a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055a8:	637a      	str	r2, [r7, #52]	; 0x34
 80055aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e5      	bne.n	8005588 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3314      	adds	r3, #20
 80055c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	613b      	str	r3, [r7, #16]
   return(result);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055dc:	623a      	str	r2, [r7, #32]
 80055de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	69f9      	ldr	r1, [r7, #28]
 80055e2:	6a3a      	ldr	r2, [r7, #32]
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e5      	bne.n	80055bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e00f      	b.n	800562c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	4013      	ands	r3, r2
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	429a      	cmp	r2, r3
 800561a:	bf0c      	ite	eq
 800561c:	2301      	moveq	r3, #1
 800561e:	2300      	movne	r3, #0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	461a      	mov	r2, r3
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	429a      	cmp	r2, r3
 8005628:	d09f      	beq.n	800556a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3740      	adds	r7, #64	; 0x40
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	88fa      	ldrh	r2, [r7, #6]
 800564c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	88fa      	ldrh	r2, [r7, #6]
 8005652:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2222      	movs	r2, #34	; 0x22
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005680:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695a      	ldr	r2, [r3, #20]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f042 0220 	orr.w	r2, r2, #32
 80056a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b095      	sub	sp, #84	; 0x54
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	330c      	adds	r3, #12
 80056be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c2:	e853 3f00 	ldrex	r3, [r3]
 80056c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	330c      	adds	r3, #12
 80056d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056d8:	643a      	str	r2, [r7, #64]	; 0x40
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056e0:	e841 2300 	strex	r3, r2, [r1]
 80056e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1e5      	bne.n	80056b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3314      	adds	r3, #20
 80056f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f023 0301 	bic.w	r3, r3, #1
 8005702:	64bb      	str	r3, [r7, #72]	; 0x48
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3314      	adds	r3, #20
 800570a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800570c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800570e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e5      	bne.n	80056ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	2b01      	cmp	r3, #1
 8005726:	d119      	bne.n	800575c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330c      	adds	r3, #12
 800572e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	60bb      	str	r3, [r7, #8]
   return(result);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f023 0310 	bic.w	r3, r3, #16
 800573e:	647b      	str	r3, [r7, #68]	; 0x44
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005748:	61ba      	str	r2, [r7, #24]
 800574a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6979      	ldr	r1, [r7, #20]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	613b      	str	r3, [r7, #16]
   return(result);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e5      	bne.n	8005728 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	631a      	str	r2, [r3, #48]	; 0x30
}
 800576a:	bf00      	nop
 800576c:	3754      	adds	r7, #84	; 0x54
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff fecb 	bl	800552c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b21      	cmp	r3, #33	; 0x21
 80057b0:	d13e      	bne.n	8005830 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ba:	d114      	bne.n	80057e6 <UART_Transmit_IT+0x48>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d110      	bne.n	80057e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	1c9a      	adds	r2, r3, #2
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	621a      	str	r2, [r3, #32]
 80057e4:	e008      	b.n	80057f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	1c59      	adds	r1, r3, #1
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6211      	str	r1, [r2, #32]
 80057f0:	781a      	ldrb	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29b      	uxth	r3, r3
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	4619      	mov	r1, r3
 8005806:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10f      	bne.n	800582c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800581a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800582a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800582c:	2300      	movs	r3, #0
 800582e:	e000      	b.n	8005832 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005830:	2302      	movs	r3, #2
  }
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005854:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff fe5a 	bl	8005518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b08c      	sub	sp, #48	; 0x30
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b22      	cmp	r3, #34	; 0x22
 8005880:	f040 80ab 	bne.w	80059da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588c:	d117      	bne.n	80058be <UART_Receive_IT+0x50>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d113      	bne.n	80058be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005896:	2300      	movs	r3, #0
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	1c9a      	adds	r2, r3, #2
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	629a      	str	r2, [r3, #40]	; 0x28
 80058bc:	e026      	b.n	800590c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d0:	d007      	beq.n	80058e2 <UART_Receive_IT+0x74>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <UART_Receive_IT+0x82>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	e008      	b.n	8005902 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005900:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29b      	uxth	r3, r3
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	4619      	mov	r1, r3
 800591a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800591c:	2b00      	cmp	r3, #0
 800591e:	d15a      	bne.n	80059d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0220 	bic.w	r2, r2, #32
 800592e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800593e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695a      	ldr	r2, [r3, #20]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0201 	bic.w	r2, r2, #1
 800594e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	2b01      	cmp	r3, #1
 800595e:	d135      	bne.n	80059cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	330c      	adds	r3, #12
 800596c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	613b      	str	r3, [r7, #16]
   return(result);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f023 0310 	bic.w	r3, r3, #16
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330c      	adds	r3, #12
 8005984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005986:	623a      	str	r2, [r7, #32]
 8005988:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	69f9      	ldr	r1, [r7, #28]
 800598c:	6a3a      	ldr	r2, [r7, #32]
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	61bb      	str	r3, [r7, #24]
   return(result);
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e5      	bne.n	8005966 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d10a      	bne.n	80059be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059a8:	2300      	movs	r3, #0
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff fdbb 	bl	8005540 <HAL_UARTEx_RxEventCallback>
 80059ca:	e002      	b.n	80059d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fb ffcb 	bl	8001968 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e002      	b.n	80059dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e000      	b.n	80059dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80059da:	2302      	movs	r3, #2
  }
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3730      	adds	r7, #48	; 0x30
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e8:	b0c0      	sub	sp, #256	; 0x100
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a00:	68d9      	ldr	r1, [r3, #12]
 8005a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	ea40 0301 	orr.w	r3, r0, r1
 8005a0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a3c:	f021 010c 	bic.w	r1, r1, #12
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5e:	6999      	ldr	r1, [r3, #24]
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	ea40 0301 	orr.w	r3, r0, r1
 8005a6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b8f      	ldr	r3, [pc, #572]	; (8005cb0 <UART_SetConfig+0x2cc>)
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d005      	beq.n	8005a84 <UART_SetConfig+0xa0>
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b8d      	ldr	r3, [pc, #564]	; (8005cb4 <UART_SetConfig+0x2d0>)
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d104      	bne.n	8005a8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a84:	f7fe f948 	bl	8003d18 <HAL_RCC_GetPCLK2Freq>
 8005a88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a8c:	e003      	b.n	8005a96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a8e:	f7fe f92f 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8005a92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa0:	f040 810c 	bne.w	8005cbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ab2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	462b      	mov	r3, r5
 8005aba:	1891      	adds	r1, r2, r2
 8005abc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005abe:	415b      	adcs	r3, r3
 8005ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ac2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	eb12 0801 	adds.w	r8, r2, r1
 8005acc:	4629      	mov	r1, r5
 8005ace:	eb43 0901 	adc.w	r9, r3, r1
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ae6:	4690      	mov	r8, r2
 8005ae8:	4699      	mov	r9, r3
 8005aea:	4623      	mov	r3, r4
 8005aec:	eb18 0303 	adds.w	r3, r8, r3
 8005af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005af4:	462b      	mov	r3, r5
 8005af6:	eb49 0303 	adc.w	r3, r9, r3
 8005afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b12:	460b      	mov	r3, r1
 8005b14:	18db      	adds	r3, r3, r3
 8005b16:	653b      	str	r3, [r7, #80]	; 0x50
 8005b18:	4613      	mov	r3, r2
 8005b1a:	eb42 0303 	adc.w	r3, r2, r3
 8005b1e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b28:	f7fa ff8c 	bl	8000a44 <__aeabi_uldivmod>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4b61      	ldr	r3, [pc, #388]	; (8005cb8 <UART_SetConfig+0x2d4>)
 8005b32:	fba3 2302 	umull	r2, r3, r3, r2
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	011c      	lsls	r4, r3, #4
 8005b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	464b      	mov	r3, r9
 8005b50:	1891      	adds	r1, r2, r2
 8005b52:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b54:	415b      	adcs	r3, r3
 8005b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b5c:	4641      	mov	r1, r8
 8005b5e:	eb12 0a01 	adds.w	sl, r2, r1
 8005b62:	4649      	mov	r1, r9
 8005b64:	eb43 0b01 	adc.w	fp, r3, r1
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b7c:	4692      	mov	sl, r2
 8005b7e:	469b      	mov	fp, r3
 8005b80:	4643      	mov	r3, r8
 8005b82:	eb1a 0303 	adds.w	r3, sl, r3
 8005b86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ba0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ba4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	18db      	adds	r3, r3, r3
 8005bac:	643b      	str	r3, [r7, #64]	; 0x40
 8005bae:	4613      	mov	r3, r2
 8005bb0:	eb42 0303 	adc.w	r3, r2, r3
 8005bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bbe:	f7fa ff41 	bl	8000a44 <__aeabi_uldivmod>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	4b3b      	ldr	r3, [pc, #236]	; (8005cb8 <UART_SetConfig+0x2d4>)
 8005bca:	fba3 2301 	umull	r2, r3, r3, r1
 8005bce:	095b      	lsrs	r3, r3, #5
 8005bd0:	2264      	movs	r2, #100	; 0x64
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	1acb      	subs	r3, r1, r3
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bde:	4b36      	ldr	r3, [pc, #216]	; (8005cb8 <UART_SetConfig+0x2d4>)
 8005be0:	fba3 2302 	umull	r2, r3, r3, r2
 8005be4:	095b      	lsrs	r3, r3, #5
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005bec:	441c      	add	r4, r3
 8005bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bf8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c00:	4642      	mov	r2, r8
 8005c02:	464b      	mov	r3, r9
 8005c04:	1891      	adds	r1, r2, r2
 8005c06:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c08:	415b      	adcs	r3, r3
 8005c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c10:	4641      	mov	r1, r8
 8005c12:	1851      	adds	r1, r2, r1
 8005c14:	6339      	str	r1, [r7, #48]	; 0x30
 8005c16:	4649      	mov	r1, r9
 8005c18:	414b      	adcs	r3, r1
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c28:	4659      	mov	r1, fp
 8005c2a:	00cb      	lsls	r3, r1, #3
 8005c2c:	4651      	mov	r1, sl
 8005c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c32:	4651      	mov	r1, sl
 8005c34:	00ca      	lsls	r2, r1, #3
 8005c36:	4610      	mov	r0, r2
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	189b      	adds	r3, r3, r2
 8005c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c44:	464b      	mov	r3, r9
 8005c46:	460a      	mov	r2, r1
 8005c48:	eb42 0303 	adc.w	r3, r2, r3
 8005c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c64:	460b      	mov	r3, r1
 8005c66:	18db      	adds	r3, r3, r3
 8005c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	eb42 0303 	adc.w	r3, r2, r3
 8005c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c7a:	f7fa fee3 	bl	8000a44 <__aeabi_uldivmod>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4b0d      	ldr	r3, [pc, #52]	; (8005cb8 <UART_SetConfig+0x2d4>)
 8005c84:	fba3 1302 	umull	r1, r3, r3, r2
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	2164      	movs	r1, #100	; 0x64
 8005c8c:	fb01 f303 	mul.w	r3, r1, r3
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	3332      	adds	r3, #50	; 0x32
 8005c96:	4a08      	ldr	r2, [pc, #32]	; (8005cb8 <UART_SetConfig+0x2d4>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	f003 0207 	and.w	r2, r3, #7
 8005ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4422      	add	r2, r4
 8005caa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cac:	e105      	b.n	8005eba <UART_SetConfig+0x4d6>
 8005cae:	bf00      	nop
 8005cb0:	40011000 	.word	0x40011000
 8005cb4:	40011400 	.word	0x40011400
 8005cb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005cce:	4642      	mov	r2, r8
 8005cd0:	464b      	mov	r3, r9
 8005cd2:	1891      	adds	r1, r2, r2
 8005cd4:	6239      	str	r1, [r7, #32]
 8005cd6:	415b      	adcs	r3, r3
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cde:	4641      	mov	r1, r8
 8005ce0:	1854      	adds	r4, r2, r1
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	eb43 0501 	adc.w	r5, r3, r1
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	f04f 0300 	mov.w	r3, #0
 8005cf0:	00eb      	lsls	r3, r5, #3
 8005cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cf6:	00e2      	lsls	r2, r4, #3
 8005cf8:	4614      	mov	r4, r2
 8005cfa:	461d      	mov	r5, r3
 8005cfc:	4643      	mov	r3, r8
 8005cfe:	18e3      	adds	r3, r4, r3
 8005d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d04:	464b      	mov	r3, r9
 8005d06:	eb45 0303 	adc.w	r3, r5, r3
 8005d0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	008b      	lsls	r3, r1, #2
 8005d2e:	4621      	mov	r1, r4
 8005d30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d34:	4621      	mov	r1, r4
 8005d36:	008a      	lsls	r2, r1, #2
 8005d38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d3c:	f7fa fe82 	bl	8000a44 <__aeabi_uldivmod>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4b60      	ldr	r3, [pc, #384]	; (8005ec8 <UART_SetConfig+0x4e4>)
 8005d46:	fba3 2302 	umull	r2, r3, r3, r2
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	011c      	lsls	r4, r3, #4
 8005d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d60:	4642      	mov	r2, r8
 8005d62:	464b      	mov	r3, r9
 8005d64:	1891      	adds	r1, r2, r2
 8005d66:	61b9      	str	r1, [r7, #24]
 8005d68:	415b      	adcs	r3, r3
 8005d6a:	61fb      	str	r3, [r7, #28]
 8005d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d70:	4641      	mov	r1, r8
 8005d72:	1851      	adds	r1, r2, r1
 8005d74:	6139      	str	r1, [r7, #16]
 8005d76:	4649      	mov	r1, r9
 8005d78:	414b      	adcs	r3, r1
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d88:	4659      	mov	r1, fp
 8005d8a:	00cb      	lsls	r3, r1, #3
 8005d8c:	4651      	mov	r1, sl
 8005d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d92:	4651      	mov	r1, sl
 8005d94:	00ca      	lsls	r2, r1, #3
 8005d96:	4610      	mov	r0, r2
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	189b      	adds	r3, r3, r2
 8005da0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005da4:	464b      	mov	r3, r9
 8005da6:	460a      	mov	r2, r1
 8005da8:	eb42 0303 	adc.w	r3, r2, r3
 8005dac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005dbc:	f04f 0200 	mov.w	r2, #0
 8005dc0:	f04f 0300 	mov.w	r3, #0
 8005dc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005dc8:	4649      	mov	r1, r9
 8005dca:	008b      	lsls	r3, r1, #2
 8005dcc:	4641      	mov	r1, r8
 8005dce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dd2:	4641      	mov	r1, r8
 8005dd4:	008a      	lsls	r2, r1, #2
 8005dd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005dda:	f7fa fe33 	bl	8000a44 <__aeabi_uldivmod>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4b39      	ldr	r3, [pc, #228]	; (8005ec8 <UART_SetConfig+0x4e4>)
 8005de4:	fba3 1302 	umull	r1, r3, r3, r2
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	2164      	movs	r1, #100	; 0x64
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	3332      	adds	r3, #50	; 0x32
 8005df6:	4a34      	ldr	r2, [pc, #208]	; (8005ec8 <UART_SetConfig+0x4e4>)
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e02:	441c      	add	r4, r3
 8005e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e08:	2200      	movs	r2, #0
 8005e0a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e0c:	677a      	str	r2, [r7, #116]	; 0x74
 8005e0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e12:	4642      	mov	r2, r8
 8005e14:	464b      	mov	r3, r9
 8005e16:	1891      	adds	r1, r2, r2
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	415b      	adcs	r3, r3
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e22:	4641      	mov	r1, r8
 8005e24:	1851      	adds	r1, r2, r1
 8005e26:	6039      	str	r1, [r7, #0]
 8005e28:	4649      	mov	r1, r9
 8005e2a:	414b      	adcs	r3, r1
 8005e2c:	607b      	str	r3, [r7, #4]
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e3a:	4659      	mov	r1, fp
 8005e3c:	00cb      	lsls	r3, r1, #3
 8005e3e:	4651      	mov	r1, sl
 8005e40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e44:	4651      	mov	r1, sl
 8005e46:	00ca      	lsls	r2, r1, #3
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	4642      	mov	r2, r8
 8005e50:	189b      	adds	r3, r3, r2
 8005e52:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e54:	464b      	mov	r3, r9
 8005e56:	460a      	mov	r2, r1
 8005e58:	eb42 0303 	adc.w	r3, r2, r3
 8005e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	663b      	str	r3, [r7, #96]	; 0x60
 8005e68:	667a      	str	r2, [r7, #100]	; 0x64
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	f04f 0300 	mov.w	r3, #0
 8005e72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e76:	4649      	mov	r1, r9
 8005e78:	008b      	lsls	r3, r1, #2
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e80:	4641      	mov	r1, r8
 8005e82:	008a      	lsls	r2, r1, #2
 8005e84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e88:	f7fa fddc 	bl	8000a44 <__aeabi_uldivmod>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4b0d      	ldr	r3, [pc, #52]	; (8005ec8 <UART_SetConfig+0x4e4>)
 8005e92:	fba3 1302 	umull	r1, r3, r3, r2
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	2164      	movs	r1, #100	; 0x64
 8005e9a:	fb01 f303 	mul.w	r3, r1, r3
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	3332      	adds	r3, #50	; 0x32
 8005ea4:	4a08      	ldr	r2, [pc, #32]	; (8005ec8 <UART_SetConfig+0x4e4>)
 8005ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	f003 020f 	and.w	r2, r3, #15
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4422      	add	r2, r4
 8005eb8:	609a      	str	r2, [r3, #8]
}
 8005eba:	bf00      	nop
 8005ebc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ec6:	bf00      	nop
 8005ec8:	51eb851f 	.word	0x51eb851f

08005ecc <movingAverageInit>:
 */

#include "movingAverage.h"

void movingAverageInit(MovingAverage *movingAverage, int16_t window)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	807b      	strh	r3, [r7, #2]
	movingAverage->index = 0;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	801a      	strh	r2, [r3, #0]
	movingAverage->window = window;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	887a      	ldrh	r2, [r7, #2]
 8005ee2:	805a      	strh	r2, [r3, #2]
	memset(movingAverage->buffer, 0x00, MAX_QTY_OF_ELEMENTS * sizeof(int32_t));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8005eec:	2100      	movs	r1, #0
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f9f2 	bl	80062d8 <memset>
	movingAverage->sum = 0;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
	movingAverage->movingAverage = 0;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
}
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <movingAverageAddValue>:

void movingAverageAddValue(MovingAverage *movingAverage, int32_t newValue)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
	movingAverage->sum = movingAverage->sum - movingAverage->buffer[movingAverage->index] + newValue;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	; 0x4b4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	440b      	add	r3, r1
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	441a      	add	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
	movingAverage->buffer[movingAverage->index] = newValue;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	605a      	str	r2, [r3, #4]
	movingAverage->movingAverage = movingAverage->sum / movingAverage->window;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8005f52:	fb93 f2f2 	sdiv	r2, r3, r2
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
	movingAverage->index = (movingAverage->index + 1) % movingAverage->window;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f62:	3301      	adds	r3, #1
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8005f6a:	fb93 f1f2 	sdiv	r1, r3, r2
 8005f6e:	fb01 f202 	mul.w	r2, r1, r2
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	b21a      	sxth	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	801a      	strh	r2, [r3, #0]
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <movingAverageGetMean>:

int32_t movingAverageGetMean(MovingAverage *movingAverage)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
	return movingAverage->movingAverage;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 34b8 	ldr.w	r3, [r3, #1208]	; 0x4b8
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <pidInit>:
 */

#include "pid.h"

void pidInit(PidController *pidController, float kp, float ki, float kd, ControllerTopology controllerTopology)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6178      	str	r0, [r7, #20]
 8005fa8:	ed87 0a04 	vstr	s0, [r7, #16]
 8005fac:	edc7 0a03 	vstr	s1, [r7, #12]
 8005fb0:	ed87 1a02 	vstr	s2, [r7, #8]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	71fb      	strb	r3, [r7, #7]
	pidController->kp = kp;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	601a      	str	r2, [r3, #0]
	pidController->ki = ki;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	605a      	str	r2, [r3, #4]
	pidController->kd = kd;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	609a      	str	r2, [r3, #8]
	pidController->controllerTopology = controllerTopology;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	79fa      	ldrb	r2, [r7, #7]
 8005fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	pidController->currentError = 0;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	60da      	str	r2, [r3, #12]
	pidController->previousError = 0;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	611a      	str	r2, [r3, #16]
	pidController->sumOfErrors = 0;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	615a      	str	r2, [r3, #20]
	pidController->setpoint = 0;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f04f 0200 	mov.w	r2, #0
 8005ff0:	619a      	str	r2, [r3, #24]
	pidController->controlledVariable = 0;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	61da      	str	r2, [r3, #28]
	pidController->processVariable = 0;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f04f 0200 	mov.w	r2, #0
 8006000:	621a      	str	r2, [r3, #32]
	pidController->differenceOfErrors = 0;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	625a      	str	r2, [r3, #36]	; 0x24
	pidController->minSumOfErrors = -10000;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4a09      	ldr	r2, [pc, #36]	; (8006034 <pidInit+0x94>)
 800600e:	629a      	str	r2, [r3, #40]	; 0x28
	pidController->maxSumOfErrors = 10000;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f242 7210 	movw	r2, #10000	; 0x2710
 8006016:	62da      	str	r2, [r3, #44]	; 0x2c
	pidController->minControlledVariable = 0;
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2200      	movs	r2, #0
 800601c:	631a      	str	r2, [r3, #48]	; 0x30
	pidController->maxControlledVariable = 4095;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006024:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	ffffd8f0 	.word	0xffffd8f0

08006038 <pidCompute>:

void pidCompute(PidController *pidController)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	pidController->currentError = pidController->setpoint - pidController->processVariable;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	ed93 7a06 	vldr	s14, [r3, #24]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	edd3 7a08 	vldr	s15, [r3, #32]
 800604c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	edc3 7a03 	vstr	s15, [r3, #12]
	pidController->sumOfErrors += pidController->currentError;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	ed93 7a05 	vldr	s14, [r3, #20]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	edc3 7a05 	vstr	s15, [r3, #20]
	pidController->differenceOfErrors = pidController->currentError - pidController->previousError;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	ed93 7a03 	vldr	s14, [r3, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	edd3 7a04 	vldr	s15, [r3, #16]
 8006078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	if (pidController->sumOfErrors > pidController->maxSumOfErrors)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	ed93 7a05 	vldr	s14, [r3, #20]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	ee07 3a90 	vmov	s15, r3
 8006090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006094:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609c:	dd09      	ble.n	80060b2 <pidCompute+0x7a>
	{
		pidController->sumOfErrors = pidController->maxSumOfErrors;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	edc3 7a05 	vstr	s15, [r3, #20]
 80060b0:	e016      	b.n	80060e0 <pidCompute+0xa8>
	}
	else if (pidController->sumOfErrors < pidController->minSumOfErrors)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	ed93 7a05 	vldr	s14, [r3, #20]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	ee07 3a90 	vmov	s15, r3
 80060c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060cc:	d508      	bpl.n	80060e0 <pidCompute+0xa8>
	{
		pidController->sumOfErrors = pidController->minSumOfErrors;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	if (pidController->controllerTopology == P_CONTROLLER)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10b      	bne.n	8006102 <pidCompute+0xca>
	{
		pidController->controlledVariable = (pidController->kp * pidController->currentError);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	ed93 7a00 	vldr	s14, [r3]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80060f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	edc3 7a07 	vstr	s15, [r3, #28]
 8006100:	e043      	b.n	800618a <pidCompute+0x152>
	}
	else if (pidController->controllerTopology == PI_CONTROLLER)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006108:	2b01      	cmp	r3, #1
 800610a:	d115      	bne.n	8006138 <pidCompute+0x100>
	{
		pidController->controlledVariable = (pidController->kp * pidController->currentError) + (pidController->ki * pidController->sumOfErrors);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	ed93 7a00 	vldr	s14, [r3]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	edd3 7a03 	vldr	s15, [r3, #12]
 8006118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	edd3 6a01 	vldr	s13, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	edd3 7a05 	vldr	s15, [r3, #20]
 8006128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800612c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	edc3 7a07 	vstr	s15, [r3, #28]
 8006136:	e028      	b.n	800618a <pidCompute+0x152>
	}
	else if (pidController->controllerTopology == PID_CONTROLLER)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800613e:	2b02      	cmp	r3, #2
 8006140:	d11f      	bne.n	8006182 <pidCompute+0x14a>
	{
		pidController->controlledVariable = (pidController->kp * pidController->currentError) + (pidController->ki * pidController->sumOfErrors) + (pidController->kd * pidController->differenceOfErrors);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	ed93 7a00 	vldr	s14, [r3]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	edd3 7a03 	vldr	s15, [r3, #12]
 800614e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	edd3 6a01 	vldr	s13, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	edd3 7a05 	vldr	s15, [r3, #20]
 800615e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	edd3 6a02 	vldr	s13, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	edc3 7a07 	vstr	s15, [r3, #28]
 8006180:	e003      	b.n	800618a <pidCompute+0x152>
	}
	else
	{
		pidController->controlledVariable = 0;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	61da      	str	r2, [r3, #28]
	}

	if (pidController->controlledVariable > pidController->maxControlledVariable)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	ed93 7a07 	vldr	s14, [r3, #28]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006194:	ee07 3a90 	vmov	s15, r3
 8006198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800619c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a4:	dd09      	ble.n	80061ba <pidCompute+0x182>
	{
		pidController->controlledVariable = pidController->maxControlledVariable;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	edc3 7a07 	vstr	s15, [r3, #28]
 80061b8:	e016      	b.n	80061e8 <pidCompute+0x1b0>
	}
	else if (pidController->controlledVariable < pidController->minControlledVariable)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	ed93 7a07 	vldr	s14, [r3, #28]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	ee07 3a90 	vmov	s15, r3
 80061c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d4:	d508      	bpl.n	80061e8 <pidCompute+0x1b0>
	{
		pidController->controlledVariable = pidController->minControlledVariable;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	pidController->previousError = pidController->currentError;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	611a      	str	r2, [r3, #16]
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <pidSetSetpoint>:

void pidSetSetpoint(PidController *pidController, float setpoint)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	ed87 0a00 	vstr	s0, [r7]
	pidController->setpoint = setpoint;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	619a      	str	r2, [r3, #24]
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <pidSetProcessVariable>:
{
	return pidController->setpoint;
}

void pidSetProcessVariable(PidController *pidController, float processVariable)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	ed87 0a00 	vstr	s0, [r7]
	pidController->processVariable = processVariable;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	621a      	str	r2, [r3, #32]
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <pidGetProcessVariable>:

float pidGetProcessVariable(PidController *pidController)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	return pidController->processVariable;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	ee07 3a90 	vmov	s15, r3
}
 8006248:	eeb0 0a67 	vmov.f32	s0, s15
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <pidGetControlledVariable>:

float pidGetControlledVariable(PidController *pidController)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
	return pidController->controlledVariable;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	ee07 3a90 	vmov	s15, r3
}
 8006266:	eeb0 0a67 	vmov.f32	s0, s15
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <__libc_init_array>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	4d0d      	ldr	r5, [pc, #52]	; (80062ac <__libc_init_array+0x38>)
 8006278:	4c0d      	ldr	r4, [pc, #52]	; (80062b0 <__libc_init_array+0x3c>)
 800627a:	1b64      	subs	r4, r4, r5
 800627c:	10a4      	asrs	r4, r4, #2
 800627e:	2600      	movs	r6, #0
 8006280:	42a6      	cmp	r6, r4
 8006282:	d109      	bne.n	8006298 <__libc_init_array+0x24>
 8006284:	4d0b      	ldr	r5, [pc, #44]	; (80062b4 <__libc_init_array+0x40>)
 8006286:	4c0c      	ldr	r4, [pc, #48]	; (80062b8 <__libc_init_array+0x44>)
 8006288:	f000 f82e 	bl	80062e8 <_init>
 800628c:	1b64      	subs	r4, r4, r5
 800628e:	10a4      	asrs	r4, r4, #2
 8006290:	2600      	movs	r6, #0
 8006292:	42a6      	cmp	r6, r4
 8006294:	d105      	bne.n	80062a2 <__libc_init_array+0x2e>
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	f855 3b04 	ldr.w	r3, [r5], #4
 800629c:	4798      	blx	r3
 800629e:	3601      	adds	r6, #1
 80062a0:	e7ee      	b.n	8006280 <__libc_init_array+0xc>
 80062a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a6:	4798      	blx	r3
 80062a8:	3601      	adds	r6, #1
 80062aa:	e7f2      	b.n	8006292 <__libc_init_array+0x1e>
 80062ac:	08006420 	.word	0x08006420
 80062b0:	08006420 	.word	0x08006420
 80062b4:	08006420 	.word	0x08006420
 80062b8:	08006424 	.word	0x08006424

080062bc <memcpy>:
 80062bc:	440a      	add	r2, r1
 80062be:	4291      	cmp	r1, r2
 80062c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80062c4:	d100      	bne.n	80062c8 <memcpy+0xc>
 80062c6:	4770      	bx	lr
 80062c8:	b510      	push	{r4, lr}
 80062ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062d2:	4291      	cmp	r1, r2
 80062d4:	d1f9      	bne.n	80062ca <memcpy+0xe>
 80062d6:	bd10      	pop	{r4, pc}

080062d8 <memset>:
 80062d8:	4402      	add	r2, r0
 80062da:	4603      	mov	r3, r0
 80062dc:	4293      	cmp	r3, r2
 80062de:	d100      	bne.n	80062e2 <memset+0xa>
 80062e0:	4770      	bx	lr
 80062e2:	f803 1b01 	strb.w	r1, [r3], #1
 80062e6:	e7f9      	b.n	80062dc <memset+0x4>

080062e8 <_init>:
 80062e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ea:	bf00      	nop
 80062ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ee:	bc08      	pop	{r3}
 80062f0:	469e      	mov	lr, r3
 80062f2:	4770      	bx	lr

080062f4 <_fini>:
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	bf00      	nop
 80062f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fa:	bc08      	pop	{r3}
 80062fc:	469e      	mov	lr, r3
 80062fe:	4770      	bx	lr
