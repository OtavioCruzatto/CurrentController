
CurrentController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006754  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a34  08006a34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a3c  08006a3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a3c  08006a3c  00016a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a40  08006a40  00016a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  2000000c  08006a50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  08006a50  0002083c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001441c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d3d  00000000  00000000  00034458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00037198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00038378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002458b  00000000  00000000  00039420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d81  00000000  00000000  0005d9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df208  00000000  00000000  0007372c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152934  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c90  00000000  00000000  00152984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006904 	.word	0x08006904

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006904 	.word	0x08006904

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b974 	b.w	8000d44 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468e      	mov	lr, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14d      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	d969      	bls.n	8000b5c <__udivmoddi4+0xe8>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b152      	cbz	r2, 8000aa4 <__udivmoddi4+0x30>
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	f1c2 0120 	rsb	r1, r2, #32
 8000a96:	fa20 f101 	lsr.w	r1, r0, r1
 8000a9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa8:	0c21      	lsrs	r1, r4, #16
 8000aaa:	fbbe f6f8 	udiv	r6, lr, r8
 8000aae:	fa1f f78c 	uxth.w	r7, ip
 8000ab2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ab6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aba:	fb06 f107 	mul.w	r1, r6, r7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aca:	f080 811f 	bcs.w	8000d0c <__udivmoddi4+0x298>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 811c 	bls.w	8000d0c <__udivmoddi4+0x298>
 8000ad4:	3e02      	subs	r6, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae8:	fb00 f707 	mul.w	r7, r0, r7
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	d90a      	bls.n	8000b06 <__udivmoddi4+0x92>
 8000af0:	eb1c 0404 	adds.w	r4, ip, r4
 8000af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af8:	f080 810a 	bcs.w	8000d10 <__udivmoddi4+0x29c>
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	f240 8107 	bls.w	8000d10 <__udivmoddi4+0x29c>
 8000b02:	4464      	add	r4, ip
 8000b04:	3802      	subs	r0, #2
 8000b06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0a:	1be4      	subs	r4, r4, r7
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	b11d      	cbz	r5, 8000b18 <__udivmoddi4+0xa4>
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	2300      	movs	r3, #0
 8000b14:	e9c5 4300 	strd	r4, r3, [r5]
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d909      	bls.n	8000b36 <__udivmoddi4+0xc2>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	f000 80ef 	beq.w	8000d06 <__udivmoddi4+0x292>
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2e:	4630      	mov	r0, r6
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	fab3 f683 	clz	r6, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d14a      	bne.n	8000bd4 <__udivmoddi4+0x160>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xd4>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80f9 	bhi.w	8000d3a <__udivmoddi4+0x2c6>
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	469e      	mov	lr, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d0e0      	beq.n	8000b18 <__udivmoddi4+0xa4>
 8000b56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b5a:	e7dd      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000b5c:	b902      	cbnz	r2, 8000b60 <__udivmoddi4+0xec>
 8000b5e:	deff      	udf	#255	; 0xff
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	f040 8092 	bne.w	8000c8e <__udivmoddi4+0x21a>
 8000b6a:	eba1 010c 	sub.w	r1, r1, ip
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2601      	movs	r6, #1
 8000b78:	0c20      	lsrs	r0, r4, #16
 8000b7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b86:	fb0e f003 	mul.w	r0, lr, r3
 8000b8a:	4288      	cmp	r0, r1
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x12c>
 8000b8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x12a>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2c0>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x156>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x154>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bd2:	e79c      	b.n	8000b0e <__udivmoddi4+0x9a>
 8000bd4:	f1c6 0720 	rsb	r7, r6, #32
 8000bd8:	40b3      	lsls	r3, r6
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa20 f407 	lsr.w	r4, r0, r7
 8000be6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bea:	431c      	orrs	r4, r3
 8000bec:	40f9      	lsrs	r1, r7
 8000bee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bfa:	0c20      	lsrs	r0, r4, #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fb09 1118 	mls	r1, r9, r8, r1
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	fb08 f00e 	mul.w	r0, r8, lr
 8000c0c:	4288      	cmp	r0, r1
 8000c0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b8>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2bc>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2bc>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1a09      	subs	r1, r1, r0
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c34:	fb09 1110 	mls	r1, r9, r0, r1
 8000c38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	458e      	cmp	lr, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1e2>
 8000c44:	eb1c 0101 	adds.w	r1, ip, r1
 8000c48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2b4>
 8000c4e:	458e      	cmp	lr, r1
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2b4>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4461      	add	r1, ip
 8000c56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c5e:	eba1 010e 	sub.w	r1, r1, lr
 8000c62:	42a1      	cmp	r1, r4
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46a6      	mov	lr, r4
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x2a4>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x2a0>
 8000c6c:	b15d      	cbz	r5, 8000c86 <__udivmoddi4+0x212>
 8000c6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c72:	eb61 010e 	sbc.w	r1, r1, lr
 8000c76:	fa01 f707 	lsl.w	r7, r1, r7
 8000c7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c7e:	40f1      	lsrs	r1, r6
 8000c80:	431f      	orrs	r7, r3
 8000c82:	e9c5 7100 	strd	r7, r1, [r5]
 8000c86:	2600      	movs	r6, #0
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	f1c2 0320 	rsb	r3, r2, #32
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c98:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4301      	orrs	r1, r0
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cac:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb0:	0c0b      	lsrs	r3, r1, #16
 8000cb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x260>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b8>
 8000ccc:	429e      	cmp	r6, r3
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b8>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	b289      	uxth	r1, r1
 8000cd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x28a>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cfa:	3e02      	subs	r6, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0x104>
 8000d06:	462e      	mov	r6, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e705      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	e6e3      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000d10:	4618      	mov	r0, r3
 8000d12:	e6f8      	b.n	8000b06 <__udivmoddi4+0x92>
 8000d14:	454b      	cmp	r3, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f8>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d20:	3801      	subs	r0, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f8>
 8000d24:	4646      	mov	r6, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x28a>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1e2>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b8>
 8000d34:	3b02      	subs	r3, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x12c>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e709      	b.n	8000b52 <__udivmoddi4+0xde>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x156>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <appInit>:

#include "app.h"

// ======== Init =========== //
void appInit(App *app, GPIO_TypeDef* ledPort, uint16_t ledPin, UART_HandleTypeDef huart, DAC_HandleTypeDef hdac, UART_HandleTypeDef huartDebug)
{
 8000d48:	b082      	sub	sp, #8
 8000d4a:	b5b0      	push	{r4, r5, r7, lr}
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
 8000d56:	4613      	mov	r3, r2
 8000d58:	80fb      	strh	r3, [r7, #6]
	// ======== LED =========== //
	app->blinkDelay = DELAY_100_MILISECONDS;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d60:	601a      	str	r2, [r3, #0]
	app->ledPort = ledPort;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	605a      	str	r2, [r3, #4]
	app->ledPin = ledPin;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	88fa      	ldrh	r2, [r7, #6]
 8000d6c:	811a      	strh	r2, [r3, #8]

	// ======== UART =========== //
	app->huart = huart;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	330c      	adds	r3, #12
 8000d72:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000d76:	2244      	movs	r2, #68	; 0x44
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f005 fdad 	bl	80068d8 <memcpy>
	app->huartDebug = huartDebug;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3350      	adds	r3, #80	; 0x50
 8000d82:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000d86:	2244      	movs	r2, #68	; 0x44
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f005 fda5 	bl	80068d8 <memcpy>

	// ======== DAC ============ //
	app->hdac = hdac;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f103 0494 	add.w	r4, r3, #148	; 0x94
 8000d94:	f107 0568 	add.w	r5, r7, #104	; 0x68
 8000d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9c:	682b      	ldr	r3, [r5, #0]
 8000d9e:	6023      	str	r3, [r4, #0]

	// ======== Controller =========== //
	pidInit(&app->pid, 50, 2, 100, 2, 0, PID_CONTROLLER);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	33a8      	adds	r3, #168	; 0xa8
 8000da4:	2102      	movs	r1, #2
 8000da6:	ed9f 2a30 	vldr	s4, [pc, #192]	; 8000e68 <appInit+0x120>
 8000daa:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8000dae:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8000e6c <appInit+0x124>
 8000db2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000db6:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8000e70 <appInit+0x128>
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f005 fba4 	bl	8006508 <pidInit>
	pidSetSetpoint(&app->pid, 0);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	33a8      	adds	r3, #168	; 0xa8
 8000dc4:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8000e68 <appInit+0x120>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f005 fd00 	bl	80067ce <pidSetSetpoint>
	app->samplingInterval = DELAY_5_MILISECONDS;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2232      	movs	r2, #50	; 0x32
 8000dd2:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
	app->runPidController = FALSE;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
	HAL_DAC_SetValue(&app->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8000de4:	2300      	movs	r3, #0
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	f002 fe26 	bl	8003a3a <HAL_DAC_SetValue>

	// ======== Filter =========== //
	movingAverageInit(&app->movingAverageFilter, 128);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	33f4      	adds	r3, #244	; 0xf4
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	4618      	mov	r0, r3
 8000df6:	f005 fb1f 	bl	8006438 <movingAverageInit>

	// ======== Data Packet Tx =========== //
	dataPacketTxInit(&app->dataPacketTx, 0xAA, 0x55);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8000e00:	2255      	movs	r2, #85	; 0x55
 8000e02:	21aa      	movs	r1, #170	; 0xaa
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 ff01 	bl	8002c0c <dataPacketTxInit>
	app->processVariableReadyToSend = FALSE;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
	app->enableSendProcessVariable = FALSE;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2623 	strb.w	r2, [r3, #1571]	; 0x623
	app->enableSendCurrentConfigDataValues = FALSE;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

	// ======== Data Packet Rx =========== //
	dataPacketRxInit(&app->dataPacketRx, 0xAA, 0x55);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f203 6326 	addw	r3, r3, #1574	; 0x626
 8000e28:	2255      	movs	r2, #85	; 0x55
 8000e2a:	21aa      	movs	r1, #170	; 0xaa
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fd21 	bl	8002874 <dataPacketRxInit>
	app->decodeCommandStatus = FALSE;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
	app->command = 0;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 269f 	strb.w	r2, [r3, #1695]	; 0x69f
	memset(app->data, 0x00, QTY_DATA_BYTES);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8000e48:	2232      	movs	r2, #50	; 0x32
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f005 fd51 	bl	80068f4 <memset>
	app->dataLenght = 0;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000e64:	b002      	add	sp, #8
 8000e66:	4770      	bx	lr
 8000e68:	00000000 	.word	0x00000000
 8000e6c:	42c80000 	.word	0x42c80000
 8000e70:	42480000 	.word	0x42480000

08000e74 <appExecuteBlinkLed>:

// ======== LED =========== //
void appExecuteBlinkLed(App *app)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(app->ledPort, app->ledPin);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	891b      	ldrh	r3, [r3, #8]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4610      	mov	r0, r2
 8000e88:	f003 f88b 	bl	8003fa2 <HAL_GPIO_TogglePin>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <appGetBlinkDelay>:

uint32_t appGetBlinkDelay(App *app)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	return app->blinkDelay;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <appRunController>:

// ======== Controller =========== //
void appRunController(App *app)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	pidCompute(&app->pid);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	33a8      	adds	r3, #168	; 0xa8
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f005 fb7f 	bl	80065bc <pidCompute>
	uint32_t controlledVariable = (uint32_t) pidGetControlledVariable(&app->pid);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	33a8      	adds	r3, #168	; 0xa8
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f005 fcb7 	bl	8006836 <pidGetControlledVariable>
 8000ec8:	eef0 7a40 	vmov.f32	s15, s0
 8000ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ed0:	ee17 3a90 	vmov	r3, s15
 8000ed4:	60fb      	str	r3, [r7, #12]
	HAL_DAC_SetValue(&app->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, controlledVariable);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	f002 fdaa 	bl	8003a3a <HAL_DAC_SetValue>
}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <appSetProcessVariable>:

void appSetProcessVariable(App *app, uint32_t value)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
	pidSetProcessVariable(&app->pid, (float) value);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	33a8      	adds	r3, #168	; 0xa8
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	ee07 2a90 	vmov	s15, r2
 8000f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f06:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 fc6e 	bl	80067ec <pidSetProcessVariable>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <appGetProcessVariable>:

float appGetProcessVariable(App *app)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	return pidGetProcessVariable(&app->pid);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	33a8      	adds	r3, #168	; 0xa8
 8000f24:	4618      	mov	r0, r3
 8000f26:	f005 fc77 	bl	8006818 <pidGetProcessVariable>
 8000f2a:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <appGetCurrentInMiliAmps>:

uint32_t appGetCurrentInMiliAmps(uint16_t adcValue)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
	uint32_t electronicCircuitGain = 10;
 8000f42:	230a      	movs	r3, #10
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t shuntResistorInOhms = 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	623b      	str	r3, [r7, #32]
  	float measuredSignalInVolts = ((3.3 * adcValue) / 4095);
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff faad 	bl	80004ac <__aeabi_i2d>
 8000f52:	a322      	add	r3, pc, #136	; (adr r3, 8000fdc <appGetCurrentInMiliAmps+0xa4>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	f7ff fb12 	bl	8000580 <__aeabi_dmul>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	a31f      	add	r3, pc, #124	; (adr r3, 8000fe4 <appGetCurrentInMiliAmps+0xac>)
 8000f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6a:	f7ff fc33 	bl	80007d4 <__aeabi_ddiv>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	f7ff fd15 	bl	80009a4 <__aeabi_d2f>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	61fb      	str	r3, [r7, #28]
  	float conditionedSignalInVolts = measuredSignalInVolts / electronicCircuitGain;
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8000f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f90:	edc7 7a06 	vstr	s15, [r7, #24]
  	float calculatedCurrentInAmps = conditionedSignalInVolts / shuntResistorInOhms;
 8000f94:	6a3b      	ldr	r3, [r7, #32]
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f9e:	edd7 6a06 	vldr	s13, [r7, #24]
 8000fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa6:	edc7 7a05 	vstr	s15, [r7, #20]
  	float calculatedCurrentInMiliAmpsAux = 1000 * calculatedCurrentInAmps;
 8000faa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fae:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000fd8 <appGetCurrentInMiliAmps+0xa0>
 8000fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb6:	edc7 7a04 	vstr	s15, [r7, #16]
  	uint32_t calculatedCurrentInMiliAmps = (uint32_t) calculatedCurrentInMiliAmpsAux;
 8000fba:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fc2:	ee17 3a90 	vmov	r3, s15
 8000fc6:	60fb      	str	r3, [r7, #12]
  	return calculatedCurrentInMiliAmps;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	447a0000 	.word	0x447a0000
 8000fdc:	66666666 	.word	0x66666666
 8000fe0:	400a6666 	.word	0x400a6666
 8000fe4:	00000000 	.word	0x00000000
 8000fe8:	40affe00 	.word	0x40affe00

08000fec <appAddNewValueToFilter>:

// ======== Filter =========== //
void appAddNewValueToFilter(App *app, uint32_t newValue)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	movingAverageAddValue(&app->movingAverageFilter, newValue);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	33f4      	adds	r3, #244	; 0xf4
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f005 fa3a 	bl	8006478 <movingAverageAddValue>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <appGetFilterResult>:

uint32_t appGetFilterResult(App *app)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	return movingAverageGetMean(&app->movingAverageFilter);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	33f4      	adds	r3, #244	; 0xf4
 8001018:	4618      	mov	r0, r3
 800101a:	f005 fa68 	bl	80064ee <movingAverageGetMean>
 800101e:	4603      	mov	r3, r0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <appAppendReceivedByte>:

// ======== Data Packet Rx =========== //
void appAppendReceivedByte(App *app, uint8_t receivedByte)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
	dataPacketRxAppend(&app->dataPacketRx, receivedByte);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f203 6326 	addw	r3, r3, #1574	; 0x626
 800103a:	78fa      	ldrb	r2, [r7, #3]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fc56 	bl	80028f0 <dataPacketRxAppend>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <appTryDecodeReceivedDataPacket>:

void appTryDecodeReceivedDataPacket(App *app)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	dataPacketRxDecode(&app->dataPacketRx);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f203 6326 	addw	r3, r3, #1574	; 0x626
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fc7b 	bl	8002956 <dataPacketRxDecode>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <appTryExtractCommandAndPayloadFromDecodedDataPacket>:

void appTryExtractCommandAndPayloadFromDecodedDataPacket(App *app)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	if (dataPacketRxGetDataPacketStatus(&app->dataPacketRx) == VALID_RX_DATA_PACKET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f203 6326 	addw	r3, r3, #1574	; 0x626
 8001076:	4618      	mov	r0, r3
 8001078:	f001 fdbb 	bl	8002bf2 <dataPacketRxGetDataPacketStatus>
 800107c:	4603      	mov	r3, r0
 800107e:	2b01      	cmp	r3, #1
 8001080:	d12e      	bne.n	80010e0 <appTryExtractCommandAndPayloadFromDecodedDataPacket+0x78>
	{
		uint8_t receivedCmd = dataPacketRxGetCommand(&app->dataPacketRx);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f203 6326 	addw	r3, r3, #1574	; 0x626
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fd75 	bl	8002b78 <dataPacketRxGetCommand>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
		uint8_t receivedPayloadDataLength = dataPacketRxGetPayloadDataLength(&app->dataPacketRx);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f203 6326 	addw	r3, r3, #1574	; 0x626
 8001098:	4618      	mov	r0, r3
 800109a:	f001 fd9e 	bl	8002bda <dataPacketRxGetPayloadDataLength>
 800109e:	4603      	mov	r3, r0
 80010a0:	73bb      	strb	r3, [r7, #14]

		if (receivedPayloadDataLength > 0)
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00c      	beq.n	80010c2 <appTryExtractCommandAndPayloadFromDecodedDataPacket+0x5a>
		{
			uint8_t *receivedPayloadData = dataPacketRxGetPayloadData(&app->dataPacketRx);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f203 6326 	addw	r3, r3, #1574	; 0x626
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fd87 	bl	8002bc2 <dataPacketRxGetPayloadData>
 80010b4:	60b8      	str	r0, [r7, #8]
			appSetData(app, receivedPayloadData, receivedPayloadDataLength);
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	461a      	mov	r2, r3
 80010ba:	68b9      	ldr	r1, [r7, #8]
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 fae0 	bl	8001682 <appSetData>
		}

		appSetCommand(app, receivedCmd);
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	4619      	mov	r1, r3
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 faae 	bl	8001628 <appSetCommand>
		appSetDecodeStatus(app, TRUE);
 80010cc:	2101      	movs	r1, #1
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 faba 	bl	8001648 <appSetDecodeStatus>
		dataPacketRxClear(&app->dataPacketRx);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f203 6326 	addw	r3, r3, #1574	; 0x626
 80010da:	4618      	mov	r0, r3
 80010dc:	f001 fcfe 	bl	8002adc <dataPacketRxClear>
	}
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <appTryDecodeExtractedCommand>:

void appTryDecodeExtractedCommand(App *app)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	if (appGetDecodeStatus(app) == TRUE)
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 fab9 	bl	8001668 <appGetDecodeStatus>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d106      	bne.n	800110a <appTryDecodeExtractedCommand+0x22>
	{
		appDecodeReceivedCommand(app);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f809 	bl	8001114 <appDecodeReceivedCommand>
		appSetDecodeStatus(app, FALSE);
 8001102:	2100      	movs	r1, #0
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 fa9f 	bl	8001648 <appSetDecodeStatus>
	}
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <appDecodeReceivedCommand>:

void appDecodeReceivedCommand(App *app)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b094      	sub	sp, #80	; 0x50
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	uint16_t receivedSamplingInterval = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t receivedPidInterval = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t receivedMovingAverageWindow = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int32_t receivedPidMinSumOfErrors = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t receivedPidMaxSumOfErrors = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t receivedPidMinControlledVariable = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t receivedPidMaxControlledVariable = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t receivedPidSetpointTimes1000 = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	637b      	str	r3, [r7, #52]	; 0x34
	float receivedPidSetpoint = 0;
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	633b      	str	r3, [r7, #48]	; 0x30

	uint32_t pidKpTimes1000 = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
	float pidKp = 0;
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pidKiTimes1000 = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
	float pidKi = 0;
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	623b      	str	r3, [r7, #32]

	uint32_t pidKdTimes1000 = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
	float pidKd = 0;
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]

	uint32_t receiveidPidOffset = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
	float pidOffset = 0;
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	613b      	str	r3, [r7, #16]

	uint32_t receiveidPidBias = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
	float pidBias = 0;
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]

	switch (app->command)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 369f 	ldrb.w	r3, [r3, #1695]	; 0x69f
 800117c:	3b01      	subs	r3, #1
 800117e:	2b05      	cmp	r3, #5
 8001180:	f200 8249 	bhi.w	8001616 <appDecodeReceivedCommand+0x502>
 8001184:	a201      	add	r2, pc, #4	; (adr r2, 800118c <appDecodeReceivedCommand+0x78>)
 8001186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118a:	bf00      	nop
 800118c:	080011a5 	.word	0x080011a5
 8001190:	080014f5 	.word	0x080014f5
 8001194:	080014ff 	.word	0x080014ff
 8001198:	08001571 	.word	0x08001571
 800119c:	080015e5 	.word	0x080015e5
 80011a0:	0800160d 	.word	0x0800160d
	{
		case CMD_RX_SET_CONFIG_DATA_VALUES:

			/************* Kp *************/
			pidKpTimes1000 = (app->data[0] << 24) + (app->data[1] << 16) + (app->data[2] << 8) + app->data[3];
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 36a0 	ldrb.w	r3, [r3, #1696]	; 0x6a0
 80011aa:	061a      	lsls	r2, r3, #24
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 36a1 	ldrb.w	r3, [r3, #1697]	; 0x6a1
 80011b2:	041b      	lsls	r3, r3, #16
 80011b4:	441a      	add	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 36a2 	ldrb.w	r3, [r3, #1698]	; 0x6a2
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	4413      	add	r3, r2
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	f892 26a3 	ldrb.w	r2, [r2, #1699]	; 0x6a3
 80011c6:	4413      	add	r3, r2
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
			pidKp = ((float) pidKpTimes1000) / 1000;
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011d4:	eddf 6a97 	vldr	s13, [pc, #604]	; 8001434 <appDecodeReceivedCommand+0x320>
 80011d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011dc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			app->pid.kp = pidKp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

			/************* Ki *************/
			pidKiTimes1000 = (app->data[4] << 24) + (app->data[5] << 16) + (app->data[6] << 8) + app->data[7];
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 36a4 	ldrb.w	r3, [r3, #1700]	; 0x6a4
 80011ee:	061a      	lsls	r2, r3, #24
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 36a5 	ldrb.w	r3, [r3, #1701]	; 0x6a5
 80011f6:	041b      	lsls	r3, r3, #16
 80011f8:	441a      	add	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 36a6 	ldrb.w	r3, [r3, #1702]	; 0x6a6
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	4413      	add	r3, r2
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	f892 26a7 	ldrb.w	r2, [r2, #1703]	; 0x6a7
 800120a:	4413      	add	r3, r2
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
			pidKi = ((float) pidKiTimes1000) / 1000;
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001218:	eddf 6a86 	vldr	s13, [pc, #536]	; 8001434 <appDecodeReceivedCommand+0x320>
 800121c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001220:	edc7 7a08 	vstr	s15, [r7, #32]
			app->pid.ki = pidKi;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a3a      	ldr	r2, [r7, #32]
 8001228:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

			/************* Kd *************/
			pidKdTimes1000 = (app->data[8] << 24) + (app->data[9] << 16) + (app->data[10] << 8) + app->data[11];
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 36a8 	ldrb.w	r3, [r3, #1704]	; 0x6a8
 8001232:	061a      	lsls	r2, r3, #24
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 36a9 	ldrb.w	r3, [r3, #1705]	; 0x6a9
 800123a:	041b      	lsls	r3, r3, #16
 800123c:	441a      	add	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 36aa 	ldrb.w	r3, [r3, #1706]	; 0x6aa
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	4413      	add	r3, r2
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	f892 26ab 	ldrb.w	r2, [r2, #1707]	; 0x6ab
 800124e:	4413      	add	r3, r2
 8001250:	61fb      	str	r3, [r7, #28]
			pidKd = ((float) pidKdTimes1000) / 1000;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800125c:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001434 <appDecodeReceivedCommand+0x320>
 8001260:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001264:	edc7 7a06 	vstr	s15, [r7, #24]
			app->pid.kd = pidKd;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

			/************* Pid Interval *************/
			receivedPidInterval = (app->data[12] << 8) + app->data[13];
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 36ac 	ldrb.w	r3, [r3, #1708]	; 0x6ac
 8001276:	b29b      	uxth	r3, r3
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b29a      	uxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 36ad 	ldrb.w	r3, [r3, #1709]	; 0x6ad
 8001282:	b29b      	uxth	r3, r3
 8001284:	4413      	add	r3, r2
 8001286:	873b      	strh	r3, [r7, #56]	; 0x38
			if ((receivedPidInterval >= 0) && (receivedPidInterval <= 50000))
 8001288:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800128a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800128e:	4293      	cmp	r3, r2
 8001290:	d804      	bhi.n	800129c <appDecodeReceivedCommand+0x188>
			{
				appSetPidInterval(app, receivedPidInterval);
 8001292:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001294:	4619      	mov	r1, r3
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 fd50 	bl	8001d3c <appSetPidInterval>
			}

			/************* Sampling Interval *************/
			receivedSamplingInterval = (app->data[14] << 8) + app->data[15];
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 36ae 	ldrb.w	r3, [r3, #1710]	; 0x6ae
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 36af 	ldrb.w	r3, [r3, #1711]	; 0x6af
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	877b      	strh	r3, [r7, #58]	; 0x3a
			if ((receivedSamplingInterval >= 0) && (receivedSamplingInterval <= 50000))
 80012b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80012b6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d803      	bhi.n	80012c6 <appDecodeReceivedCommand+0x1b2>
			{
				app->samplingInterval = receivedSamplingInterval;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80012c2:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
			}

			/************* Moving Average Window *************/
			receivedMovingAverageWindow = (app->data[16] << 8) + app->data[17];
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 36b0 	ldrb.w	r3, [r3, #1712]	; 0x6b0
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 36b1 	ldrb.w	r3, [r3, #1713]	; 0x6b1
 80012d8:	b29b      	uxth	r3, r3
 80012da:	4413      	add	r3, r2
 80012dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			if (receivedMovingAverageWindow > MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS)
 80012e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80012e8:	d903      	bls.n	80012f2 <appDecodeReceivedCommand+0x1de>
			{
				receivedMovingAverageWindow = MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS;
 80012ea:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			}
			app->movingAverageFilter.window = receivedMovingAverageWindow;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80012f8:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6

			/************* Min Sum Of Errors *************/
			receivedPidMinSumOfErrors = (app->data[18] << 24) + (app->data[19] << 16) + (app->data[20] << 8) + app->data[21];
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 36b2 	ldrb.w	r3, [r3, #1714]	; 0x6b2
 8001302:	061a      	lsls	r2, r3, #24
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 36b3 	ldrb.w	r3, [r3, #1715]	; 0x6b3
 800130a:	041b      	lsls	r3, r3, #16
 800130c:	441a      	add	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 36b4 	ldrb.w	r3, [r3, #1716]	; 0x6b4
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	4413      	add	r3, r2
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	f892 26b5 	ldrb.w	r2, [r2, #1717]	; 0x6b5
 800131e:	4413      	add	r3, r2
 8001320:	64bb      	str	r3, [r7, #72]	; 0x48
			receivedPidMinSumOfErrors -= 1000000000;
 8001322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <appDecodeReceivedCommand+0x314>)
 8001326:	4413      	add	r3, r2
 8001328:	64bb      	str	r3, [r7, #72]	; 0x48
			if (receivedPidMinSumOfErrors < MIN_SUM_OF_ERRORS_ALLOWED)
 800132a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800132c:	4a3e      	ldr	r2, [pc, #248]	; (8001428 <appDecodeReceivedCommand+0x314>)
 800132e:	4293      	cmp	r3, r2
 8001330:	da02      	bge.n	8001338 <appDecodeReceivedCommand+0x224>
			{
				receivedPidMinSumOfErrors = MIN_SUM_OF_ERRORS_ALLOWED;
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <appDecodeReceivedCommand+0x314>)
 8001334:	64bb      	str	r3, [r7, #72]	; 0x48
 8001336:	e005      	b.n	8001344 <appDecodeReceivedCommand+0x230>
			}
			else if (receivedPidMinSumOfErrors > MAX_SUM_OF_ERRORS_ALLOWED)
 8001338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800133a:	4a3c      	ldr	r2, [pc, #240]	; (800142c <appDecodeReceivedCommand+0x318>)
 800133c:	4293      	cmp	r3, r2
 800133e:	dd01      	ble.n	8001344 <appDecodeReceivedCommand+0x230>
			{
				receivedPidMinSumOfErrors = MAX_SUM_OF_ERRORS_ALLOWED;
 8001340:	4b3a      	ldr	r3, [pc, #232]	; (800142c <appDecodeReceivedCommand+0x318>)
 8001342:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			app->pid.minSumOfErrors = receivedPidMinSumOfErrors;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001348:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

			/************* Max Sum Of Errors *************/
			receivedPidMaxSumOfErrors = (app->data[22] << 24) + (app->data[23] << 16) + (app->data[24] << 8) + app->data[25];
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 36b6 	ldrb.w	r3, [r3, #1718]	; 0x6b6
 8001352:	061a      	lsls	r2, r3, #24
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 36b7 	ldrb.w	r3, [r3, #1719]	; 0x6b7
 800135a:	041b      	lsls	r3, r3, #16
 800135c:	441a      	add	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 36b8 	ldrb.w	r3, [r3, #1720]	; 0x6b8
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	4413      	add	r3, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	f892 26b9 	ldrb.w	r2, [r2, #1721]	; 0x6b9
 800136e:	4413      	add	r3, r2
 8001370:	647b      	str	r3, [r7, #68]	; 0x44
			receivedPidMaxSumOfErrors -= 1000000000;
 8001372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <appDecodeReceivedCommand+0x314>)
 8001376:	4413      	add	r3, r2
 8001378:	647b      	str	r3, [r7, #68]	; 0x44
			if (receivedPidMaxSumOfErrors < MIN_SUM_OF_ERRORS_ALLOWED)
 800137a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800137c:	4a2a      	ldr	r2, [pc, #168]	; (8001428 <appDecodeReceivedCommand+0x314>)
 800137e:	4293      	cmp	r3, r2
 8001380:	da02      	bge.n	8001388 <appDecodeReceivedCommand+0x274>
			{
				receivedPidMaxSumOfErrors = MIN_SUM_OF_ERRORS_ALLOWED;
 8001382:	4b29      	ldr	r3, [pc, #164]	; (8001428 <appDecodeReceivedCommand+0x314>)
 8001384:	647b      	str	r3, [r7, #68]	; 0x44
 8001386:	e005      	b.n	8001394 <appDecodeReceivedCommand+0x280>
			}
			else if (receivedPidMaxSumOfErrors > MAX_SUM_OF_ERRORS_ALLOWED)
 8001388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800138a:	4a28      	ldr	r2, [pc, #160]	; (800142c <appDecodeReceivedCommand+0x318>)
 800138c:	4293      	cmp	r3, r2
 800138e:	dd01      	ble.n	8001394 <appDecodeReceivedCommand+0x280>
			{
				receivedPidMaxSumOfErrors = MAX_SUM_OF_ERRORS_ALLOWED;
 8001390:	4b26      	ldr	r3, [pc, #152]	; (800142c <appDecodeReceivedCommand+0x318>)
 8001392:	647b      	str	r3, [r7, #68]	; 0x44
			}
			app->pid.maxSumOfErrors = receivedPidMaxSumOfErrors;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001398:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

			/************* Min Controlled Variable *************/
			receivedPidMinControlledVariable = (app->data[26] << 24) + (app->data[27] << 16) + (app->data[28] << 8) + app->data[29];
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 36ba 	ldrb.w	r3, [r3, #1722]	; 0x6ba
 80013a2:	061a      	lsls	r2, r3, #24
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 36bb 	ldrb.w	r3, [r3, #1723]	; 0x6bb
 80013aa:	041b      	lsls	r3, r3, #16
 80013ac:	441a      	add	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 36bc 	ldrb.w	r3, [r3, #1724]	; 0x6bc
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	4413      	add	r3, r2
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	f892 26bd 	ldrb.w	r2, [r2, #1725]	; 0x6bd
 80013be:	4413      	add	r3, r2
 80013c0:	643b      	str	r3, [r7, #64]	; 0x40
			receivedPidMinControlledVariable -= 1000000000;
 80013c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <appDecodeReceivedCommand+0x314>)
 80013c6:	4413      	add	r3, r2
 80013c8:	643b      	str	r3, [r7, #64]	; 0x40
			if (receivedPidMinControlledVariable < MIN_CONTROLLED_VARIABLE_ALLOWED)
 80013ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	da02      	bge.n	80013d6 <appDecodeReceivedCommand+0x2c2>
			{
				receivedPidMinControlledVariable = MIN_CONTROLLED_VARIABLE_ALLOWED;
 80013d0:	2300      	movs	r3, #0
 80013d2:	643b      	str	r3, [r7, #64]	; 0x40
 80013d4:	e006      	b.n	80013e4 <appDecodeReceivedCommand+0x2d0>
			}
			else if (receivedPidMinControlledVariable > MAX_CONTROLLED_VARIABLE_ALLOWED)
 80013d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013dc:	db02      	blt.n	80013e4 <appDecodeReceivedCommand+0x2d0>
			{
				receivedPidMinControlledVariable = MAX_CONTROLLED_VARIABLE_ALLOWED;
 80013de:	f640 73ff 	movw	r3, #4095	; 0xfff
 80013e2:	643b      	str	r3, [r7, #64]	; 0x40
			}
			app->pid.minControlledVariable = receivedPidMinControlledVariable;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013e8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

			/************* Max Controlled Variable *************/
			receivedPidMaxControlledVariable = (app->data[30] << 24) + (app->data[31] << 16) + (app->data[32] << 8) + app->data[33];
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 36be 	ldrb.w	r3, [r3, #1726]	; 0x6be
 80013f2:	061a      	lsls	r2, r3, #24
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 36bf 	ldrb.w	r3, [r3, #1727]	; 0x6bf
 80013fa:	041b      	lsls	r3, r3, #16
 80013fc:	441a      	add	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 36c0 	ldrb.w	r3, [r3, #1728]	; 0x6c0
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	4413      	add	r3, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	f892 26c1 	ldrb.w	r2, [r2, #1729]	; 0x6c1
 800140e:	4413      	add	r3, r2
 8001410:	63fb      	str	r3, [r7, #60]	; 0x3c
			receivedPidMaxControlledVariable -= 1000000000;
 8001412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <appDecodeReceivedCommand+0x314>)
 8001416:	4413      	add	r3, r2
 8001418:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (receivedPidMaxControlledVariable < MIN_CONTROLLED_VARIABLE_ALLOWED)
 800141a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800141c:	2b00      	cmp	r3, #0
 800141e:	da0d      	bge.n	800143c <appDecodeReceivedCommand+0x328>
			{
				receivedPidMaxControlledVariable = MIN_CONTROLLED_VARIABLE_ALLOWED;
 8001420:	2300      	movs	r3, #0
 8001422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001424:	e011      	b.n	800144a <appDecodeReceivedCommand+0x336>
 8001426:	bf00      	nop
 8001428:	c4653600 	.word	0xc4653600
 800142c:	3b9aca00 	.word	0x3b9aca00
 8001430:	49742400 	.word	0x49742400
 8001434:	447a0000 	.word	0x447a0000
 8001438:	48927c00 	.word	0x48927c00
			}
			else if (receivedPidMaxControlledVariable > MAX_CONTROLLED_VARIABLE_ALLOWED)
 800143c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800143e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001442:	db02      	blt.n	800144a <appDecodeReceivedCommand+0x336>
			{
				receivedPidMaxControlledVariable = MAX_CONTROLLED_VARIABLE_ALLOWED;
 8001444:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001448:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			app->pid.maxControlledVariable = receivedPidMaxControlledVariable;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800144e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

			/************* Pid Offset *************/
			receiveidPidOffset = (app->data[34] << 24) + (app->data[35] << 16) + (app->data[36] << 8) + app->data[37];
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 36c2 	ldrb.w	r3, [r3, #1730]	; 0x6c2
 8001458:	061a      	lsls	r2, r3, #24
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 36c3 	ldrb.w	r3, [r3, #1731]	; 0x6c3
 8001460:	041b      	lsls	r3, r3, #16
 8001462:	441a      	add	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 36c4 	ldrb.w	r3, [r3, #1732]	; 0x6c4
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	4413      	add	r3, r2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	f892 26c5 	ldrb.w	r2, [r2, #1733]	; 0x6c5
 8001474:	4413      	add	r3, r2
 8001476:	617b      	str	r3, [r7, #20]
			pidOffset = (((float) receiveidPidOffset) - 1000000) / 1000;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001482:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 8001430 <appDecodeReceivedCommand+0x31c>
 8001486:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800148a:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 8001434 <appDecodeReceivedCommand+0x320>
 800148e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001492:	edc7 7a04 	vstr	s15, [r7, #16]
			app->pid.offset = pidOffset;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

			/************* Pid Bias *************/
			receiveidPidBias = (app->data[38] << 24) + (app->data[39] << 16) + (app->data[40] << 8) + app->data[41];
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 36c6 	ldrb.w	r3, [r3, #1734]	; 0x6c6
 80014a4:	061a      	lsls	r2, r3, #24
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 36c7 	ldrb.w	r3, [r3, #1735]	; 0x6c7
 80014ac:	041b      	lsls	r3, r3, #16
 80014ae:	441a      	add	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 36c8 	ldrb.w	r3, [r3, #1736]	; 0x6c8
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	4413      	add	r3, r2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	f892 26c9 	ldrb.w	r2, [r2, #1737]	; 0x6c9
 80014c0:	4413      	add	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
			pidBias = (((float) receiveidPidBias) - 1000000) / 1000;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ce:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 8001430 <appDecodeReceivedCommand+0x31c>
 80014d2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80014d6:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 8001434 <appDecodeReceivedCommand+0x320>
 80014da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014de:	edc7 7a02 	vstr	s15, [r7, #8]
			app->pid.bias = pidBias;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

			/************* Send The New Config Data Values *************/
			app->enableSendCurrentConfigDataValues = TRUE;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
			break;
 80014f2:	e095      	b.n	8001620 <appDecodeReceivedCommand+0x50c>

		case CMD_RX_ASK_FOR_CURRENT_CONFIG_DATA_VALUES:
			app->enableSendCurrentConfigDataValues = TRUE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
			break;
 80014fc:	e090      	b.n	8001620 <appDecodeReceivedCommand+0x50c>

		case CMD_RX_SET_PID_SETPOINT:
			receivedPidSetpointTimes1000 = (app->data[0] << 24) + (app->data[1] << 16) + (app->data[2] << 8) + app->data[3];
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 36a0 	ldrb.w	r3, [r3, #1696]	; 0x6a0
 8001504:	061a      	lsls	r2, r3, #24
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 36a1 	ldrb.w	r3, [r3, #1697]	; 0x6a1
 800150c:	041b      	lsls	r3, r3, #16
 800150e:	441a      	add	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 36a2 	ldrb.w	r3, [r3, #1698]	; 0x6a2
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	4413      	add	r3, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	f892 26a3 	ldrb.w	r2, [r2, #1699]	; 0x6a3
 8001520:	4413      	add	r3, r2
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
			receivedPidSetpoint = ((float) receivedPidSetpointTimes1000) / 1000;
 8001524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800152e:	ed5f 6a3f 	vldr	s13, [pc, #-252]	; 8001434 <appDecodeReceivedCommand+0x320>
 8001532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001536:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			if ((receivedPidSetpoint >= 0) && (receivedPidSetpoint <= 300000))
 800153a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800153e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	da00      	bge.n	800154a <appDecodeReceivedCommand+0x436>
			{
				app->pid.setpoint = receivedPidSetpoint;
				appSetEnableSendCurrentPidSetpointValue(app, TRUE);
			}
			break;
 8001548:	e06a      	b.n	8001620 <appDecodeReceivedCommand+0x50c>
			if ((receivedPidSetpoint >= 0) && (receivedPidSetpoint <= 300000))
 800154a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800154e:	ed1f 7a46 	vldr	s14, [pc, #-280]	; 8001438 <appDecodeReceivedCommand+0x324>
 8001552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155a:	d900      	bls.n	800155e <appDecodeReceivedCommand+0x44a>
			break;
 800155c:	e060      	b.n	8001620 <appDecodeReceivedCommand+0x50c>
				app->pid.setpoint = receivedPidSetpoint;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001562:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
				appSetEnableSendCurrentPidSetpointValue(app, TRUE);
 8001566:	2101      	movs	r1, #1
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fc37 	bl	8001ddc <appSetEnableSendCurrentPidSetpointValue>
			break;
 800156e:	e057      	b.n	8001620 <appDecodeReceivedCommand+0x50c>

		case CMD_RX_SET_RUN_PID_CONTROLLER_STATUS:
			if (app->data[0] == 0x00)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 36a0 	ldrb.w	r3, [r3, #1696]	; 0x6a0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d12a      	bne.n	80015d0 <appDecodeReceivedCommand+0x4bc>
			{
				app->runPidController = FALSE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
				app->pid.controlledVariable = 0;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				app->pid.currentError = 0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				app->pid.differenceOfErrors = 0;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
				app->pid.previousError = 0;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				app->pid.processVariable = 0;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
				app->pid.sumOfErrors = 0;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				HAL_DAC_SetValue(&app->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f103 0094 	add.w	r0, r3, #148	; 0x94
 80015c4:	2300      	movs	r3, #0
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	f002 fa36 	bl	8003a3a <HAL_DAC_SetValue>
			}
			else if (app->data[0] == 0x01)
			{
				app->runPidController = TRUE;
			}
			break;
 80015ce:	e024      	b.n	800161a <appDecodeReceivedCommand+0x506>
			else if (app->data[0] == 0x01)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 36a0 	ldrb.w	r3, [r3, #1696]	; 0x6a0
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d11f      	bne.n	800161a <appDecodeReceivedCommand+0x506>
				app->runPidController = TRUE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
			break;
 80015e2:	e01a      	b.n	800161a <appDecodeReceivedCommand+0x506>

		case CMD_RX_SET_SEND_PROCESS_VARIABLE_STATUS:
			if (app->data[0] == 0x00)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 36a0 	ldrb.w	r3, [r3, #1696]	; 0x6a0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d104      	bne.n	80015f8 <appDecodeReceivedCommand+0x4e4>
			{
				app->enableSendProcessVariable = FALSE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2623 	strb.w	r2, [r3, #1571]	; 0x623
			}
			else if (app->data[0] == 0x01)
			{
				app->enableSendProcessVariable = TRUE;
			}
			break;
 80015f6:	e012      	b.n	800161e <appDecodeReceivedCommand+0x50a>
			else if (app->data[0] == 0x01)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 36a0 	ldrb.w	r3, [r3, #1696]	; 0x6a0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d10d      	bne.n	800161e <appDecodeReceivedCommand+0x50a>
				app->enableSendProcessVariable = TRUE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2623 	strb.w	r2, [r3, #1571]	; 0x623
			break;
 800160a:	e008      	b.n	800161e <appDecodeReceivedCommand+0x50a>

		case CMD_RX_ASK_FOR_CURRENT_PID_SETPOINT_VALUE:
			appSetEnableSendCurrentPidSetpointValue(app, TRUE);
 800160c:	2101      	movs	r1, #1
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fbe4 	bl	8001ddc <appSetEnableSendCurrentPidSetpointValue>
			break;
 8001614:	e004      	b.n	8001620 <appDecodeReceivedCommand+0x50c>

		default:
			break;
 8001616:	bf00      	nop
 8001618:	e002      	b.n	8001620 <appDecodeReceivedCommand+0x50c>
			break;
 800161a:	bf00      	nop
 800161c:	e000      	b.n	8001620 <appDecodeReceivedCommand+0x50c>
			break;
 800161e:	bf00      	nop
	}
}
 8001620:	bf00      	nop
 8001622:	3750      	adds	r7, #80	; 0x50
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <appSetCommand>:

void appSetCommand(App *app, uint8_t command)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	70fb      	strb	r3, [r7, #3]
	app->command = command;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	78fa      	ldrb	r2, [r7, #3]
 8001638:	f883 269f 	strb.w	r2, [r3, #1695]	; 0x69f
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <appSetDecodeStatus>:

void appSetDecodeStatus(App *app, Bool status)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
	app->decodeCommandStatus = status;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <appGetDecodeStatus>:

Bool appGetDecodeStatus(App *app)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	return app->decodeCommandStatus;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 369e 	ldrb.w	r3, [r3, #1694]	; 0x69e
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <appSetData>:

void appSetData(App *app, uint8_t *data, uint8_t dataLength)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	4613      	mov	r3, r2
 800168e:	71fb      	strb	r3, [r7, #7]
	if (dataLength <= QTY_DATA_BYTES)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2b32      	cmp	r3, #50	; 0x32
 8001694:	d80b      	bhi.n	80016ae <appSetData+0x2c>
	{
		app->dataLenght = dataLength;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	79fa      	ldrb	r2, [r7, #7]
 800169a:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2
		memcpy(app->data, data, dataLength);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80016a4:	79fa      	ldrb	r2, [r7, #7]
 80016a6:	68b9      	ldr	r1, [r7, #8]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f005 f915 	bl	80068d8 <memcpy>
	}
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <appSendCurrentConfigDataValues>:

// ======== Data Packet Tx =========== //
void appSendCurrentConfigDataValues(App *app)
{
 80016b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016bc:	b09e      	sub	sp, #120	; 0x78
 80016be:	af0e      	add	r7, sp, #56	; 0x38
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	466b      	mov	r3, sp
 80016c4:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 42;
 80016c6:	232a      	movs	r3, #42	; 0x2a
 80016c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t bytes[qtyOfBytes];
 80016cc:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80016d0:	460b      	mov	r3, r1
 80016d2:	3b01      	subs	r3, #1
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80016d6:	b2cb      	uxtb	r3, r1
 80016d8:	2200      	movs	r2, #0
 80016da:	4698      	mov	r8, r3
 80016dc:	4691      	mov	r9, r2
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016f2:	b2cb      	uxtb	r3, r1
 80016f4:	2200      	movs	r2, #0
 80016f6:	461c      	mov	r4, r3
 80016f8:	4615      	mov	r5, r2
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	00eb      	lsls	r3, r5, #3
 8001704:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001708:	00e2      	lsls	r2, r4, #3
 800170a:	460b      	mov	r3, r1
 800170c:	3307      	adds	r3, #7
 800170e:	08db      	lsrs	r3, r3, #3
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	ebad 0d03 	sub.w	sp, sp, r3
 8001716:	ab0e      	add	r3, sp, #56	; 0x38
 8001718:	3300      	adds	r3, #0
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t kpTimes1000 = (uint32_t)(1000 * app->pid.kp);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8001722:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 80019e0 <appSendCurrentConfigDataValues+0x328>
 8001726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800172e:	ee17 3a90 	vmov	r3, s15
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t kiTimes1000 = (uint32_t)(1000 * app->pid.ki);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800173a:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80019e0 <appSendCurrentConfigDataValues+0x328>
 800173e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001746:	ee17 3a90 	vmov	r3, s15
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t kdTimes1000 = (uint32_t)(1000 * app->pid.kd);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8001752:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80019e0 <appSendCurrentConfigDataValues+0x328>
 8001756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800175e:	ee17 3a90 	vmov	r3, s15
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t pidInterval = (uint16_t) (10000 * pidGetInterval(&app->pid));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	33a8      	adds	r3, #168	; 0xa8
 8001768:	4618      	mov	r0, r3
 800176a:	f005 f873 	bl	8006854 <pidGetInterval>
 800176e:	eef0 7a40 	vmov.f32	s15, s0
 8001772:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80019e4 <appSendCurrentConfigDataValues+0x32c>
 8001776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800177e:	ee17 3a90 	vmov	r3, s15
 8001782:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t movingAverageWindow = app->movingAverageFilter.window;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 800178a:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t minSumOfErrors = (uint32_t) (app->pid.minSumOfErrors + 1000000000);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8001792:	4b95      	ldr	r3, [pc, #596]	; (80019e8 <appSendCurrentConfigDataValues+0x330>)
 8001794:	4413      	add	r3, r2
 8001796:	623b      	str	r3, [r7, #32]
	uint32_t maxSumOfErrors = (uint32_t) (app->pid.maxSumOfErrors + 1000000000);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800179e:	4b92      	ldr	r3, [pc, #584]	; (80019e8 <appSendCurrentConfigDataValues+0x330>)
 80017a0:	4413      	add	r3, r2
 80017a2:	61fb      	str	r3, [r7, #28]
	uint32_t minControlledVariable = (uint32_t) (app->pid.minControlledVariable + 1000000000);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80017aa:	4b8f      	ldr	r3, [pc, #572]	; (80019e8 <appSendCurrentConfigDataValues+0x330>)
 80017ac:	4413      	add	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
	uint32_t maxControlledVariable = (uint32_t) (app->pid.maxControlledVariable + 1000000000);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80017b6:	4b8c      	ldr	r3, [pc, #560]	; (80019e8 <appSendCurrentConfigDataValues+0x330>)
 80017b8:	4413      	add	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
	uint32_t offset = (uint32_t) ((app->pid.offset * 1000) + 1000000);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80017c2:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80019e0 <appSendCurrentConfigDataValues+0x328>
 80017c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ca:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80019ec <appSendCurrentConfigDataValues+0x334>
 80017ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d6:	ee17 3a90 	vmov	r3, s15
 80017da:	613b      	str	r3, [r7, #16]
	uint32_t bias = (uint32_t) ((app->pid.bias * 1000) + 1000000);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80017e2:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80019e0 <appSendCurrentConfigDataValues+0x328>
 80017e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ea:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80019ec <appSendCurrentConfigDataValues+0x334>
 80017ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f6:	ee17 3a90 	vmov	r3, s15
 80017fa:	60fb      	str	r3, [r7, #12]

	/************* Kp *************/
	bytes[0] = ((kpTimes1000 >> 24) & 0x000000FF);
 80017fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fe:	0e1b      	lsrs	r3, r3, #24
 8001800:	b2da      	uxtb	r2, r3
 8001802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001804:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((kpTimes1000 >> 16) & 0x000000FF);
 8001806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	b2da      	uxtb	r2, r3
 800180c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180e:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((kpTimes1000 >> 8) & 0x000000FF);
 8001810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	b2da      	uxtb	r2, r3
 8001816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001818:	709a      	strb	r2, [r3, #2]
	bytes[3] = (kpTimes1000 & 0x000000FF);
 800181a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181c:	b2da      	uxtb	r2, r3
 800181e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001820:	70da      	strb	r2, [r3, #3]

	/************* Ki *************/
	bytes[4] = ((kiTimes1000 >> 24) & 0x000000FF);
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	0e1b      	lsrs	r3, r3, #24
 8001826:	b2da      	uxtb	r2, r3
 8001828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182a:	711a      	strb	r2, [r3, #4]
	bytes[5] = ((kiTimes1000 >> 16) & 0x000000FF);
 800182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182e:	0c1b      	lsrs	r3, r3, #16
 8001830:	b2da      	uxtb	r2, r3
 8001832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001834:	715a      	strb	r2, [r3, #5]
	bytes[6] = ((kiTimes1000 >> 8) & 0x000000FF);
 8001836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	b2da      	uxtb	r2, r3
 800183c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183e:	719a      	strb	r2, [r3, #6]
	bytes[7] = (kiTimes1000 & 0x000000FF);
 8001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001842:	b2da      	uxtb	r2, r3
 8001844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001846:	71da      	strb	r2, [r3, #7]

	/************* Kd *************/
	bytes[8] = ((kdTimes1000 >> 24) & 0x000000FF);
 8001848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184a:	0e1b      	lsrs	r3, r3, #24
 800184c:	b2da      	uxtb	r2, r3
 800184e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001850:	721a      	strb	r2, [r3, #8]
	bytes[9] = ((kdTimes1000 >> 16) & 0x000000FF);
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	b2da      	uxtb	r2, r3
 8001858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185a:	725a      	strb	r2, [r3, #9]
	bytes[10] = ((kdTimes1000 >> 8) & 0x000000FF);
 800185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	b2da      	uxtb	r2, r3
 8001862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001864:	729a      	strb	r2, [r3, #10]
	bytes[11] = (kdTimes1000 & 0x000000FF);
 8001866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001868:	b2da      	uxtb	r2, r3
 800186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186c:	72da      	strb	r2, [r3, #11]

	/************* Pid Interval *************/
	bytes[12] = ((pidInterval >> 8) & 0x00FF);
 800186e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	b29b      	uxth	r3, r3
 8001874:	b2da      	uxtb	r2, r3
 8001876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001878:	731a      	strb	r2, [r3, #12]
	bytes[13] = (pidInterval & 0x00FF);
 800187a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800187c:	b2da      	uxtb	r2, r3
 800187e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001880:	735a      	strb	r2, [r3, #13]

	/************* Sampling Interval *************/
	bytes[14] = ((app->samplingInterval >> 8) & 0x00FF);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	b29b      	uxth	r3, r3
 800188c:	b2da      	uxtb	r2, r3
 800188e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001890:	739a      	strb	r2, [r3, #14]
	bytes[15] = (app->samplingInterval & 0x00FF);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8001898:	b2da      	uxtb	r2, r3
 800189a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189c:	73da      	strb	r2, [r3, #15]

	/************* Moving Average Window *************/
	bytes[16] = ((movingAverageWindow >> 8) & 0x00FF);
 800189e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a8:	741a      	strb	r2, [r3, #16]
	bytes[17] = (movingAverageWindow & 0x00FF);
 80018aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b0:	745a      	strb	r2, [r3, #17]

	/************* Min Sum Of Errors *************/
	bytes[18] = ((minSumOfErrors >> 24) & 0x000000FF);
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	0e1b      	lsrs	r3, r3, #24
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ba:	749a      	strb	r2, [r3, #18]
	bytes[19] = ((minSumOfErrors >> 16) & 0x000000FF);
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	0c1b      	lsrs	r3, r3, #16
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c4:	74da      	strb	r2, [r3, #19]
	bytes[20] = ((minSumOfErrors >> 8) & 0x000000FF);
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ce:	751a      	strb	r2, [r3, #20]
	bytes[21] = (minSumOfErrors & 0x000000FF);
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d6:	755a      	strb	r2, [r3, #21]

	/************* Max Sum Of Errors *************/
	bytes[22] = ((maxSumOfErrors >> 24) & 0x000000FF);
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	0e1b      	lsrs	r3, r3, #24
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e0:	759a      	strb	r2, [r3, #22]
	bytes[23] = ((maxSumOfErrors >> 16) & 0x000000FF);
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ea:	75da      	strb	r2, [r3, #23]
	bytes[24] = ((maxSumOfErrors >> 8) & 0x000000FF);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	0a1b      	lsrs	r3, r3, #8
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f4:	761a      	strb	r2, [r3, #24]
	bytes[25] = (maxSumOfErrors & 0x000000FF);
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fc:	765a      	strb	r2, [r3, #25]

	/************* Min Controlled Variable *************/
	bytes[26] = ((minControlledVariable >> 24) & 0x000000FF);
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	0e1b      	lsrs	r3, r3, #24
 8001902:	b2da      	uxtb	r2, r3
 8001904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001906:	769a      	strb	r2, [r3, #26]
	bytes[27] = ((minControlledVariable >> 16) & 0x000000FF);
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	0c1b      	lsrs	r3, r3, #16
 800190c:	b2da      	uxtb	r2, r3
 800190e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001910:	76da      	strb	r2, [r3, #27]
	bytes[28] = ((minControlledVariable >> 8) & 0x000000FF);
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	b2da      	uxtb	r2, r3
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	771a      	strb	r2, [r3, #28]
	bytes[29] = (minControlledVariable & 0x000000FF);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001922:	775a      	strb	r2, [r3, #29]

	/************* Max Controlled Variable *************/
	bytes[30] = ((maxControlledVariable >> 24) & 0x000000FF);
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	0e1b      	lsrs	r3, r3, #24
 8001928:	b2da      	uxtb	r2, r3
 800192a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192c:	779a      	strb	r2, [r3, #30]
	bytes[31] = ((maxControlledVariable >> 16) & 0x000000FF);
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	0c1b      	lsrs	r3, r3, #16
 8001932:	b2da      	uxtb	r2, r3
 8001934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001936:	77da      	strb	r2, [r3, #31]
	bytes[32] = ((maxControlledVariable >> 8) & 0x000000FF);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	b2da      	uxtb	r2, r3
 800193e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001940:	f883 2020 	strb.w	r2, [r3, #32]
	bytes[33] = (maxControlledVariable & 0x000000FF);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/************* Offset *************/
	bytes[34] = ((offset >> 24) & 0x000000FF);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	0e1b      	lsrs	r3, r3, #24
 8001952:	b2da      	uxtb	r2, r3
 8001954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001956:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	bytes[35] = ((offset >> 16) & 0x000000FF);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	0c1b      	lsrs	r3, r3, #16
 800195e:	b2da      	uxtb	r2, r3
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001962:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	bytes[36] = ((offset >> 8) & 0x000000FF);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	b2da      	uxtb	r2, r3
 800196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	bytes[37] = (offset & 0x000000FF);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001978:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	/************* Bias *************/
	bytes[38] = ((bias >> 24) & 0x000000FF);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	0e1b      	lsrs	r3, r3, #24
 8001980:	b2da      	uxtb	r2, r3
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	bytes[39] = ((bias >> 16) & 0x000000FF);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	0c1b      	lsrs	r3, r3, #16
 800198c:	b2da      	uxtb	r2, r3
 800198e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001990:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	bytes[40] = ((bias >> 8) & 0x000000FF);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	b2da      	uxtb	r2, r3
 800199a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	bytes[41] = (bias & 0x000000FF);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	dataPacketTxSetCommand(&app->dataPacketTx, CMD_TX_CURRENT_CONFIG_DATA_VALUES);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 80019b0:	2180      	movs	r1, #128	; 0x80
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 fa07 	bl	8002dc6 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&app->dataPacketTx, bytes, qtyOfBytes);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 80019be:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80019c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019c4:	4618      	mov	r0, r3
 80019c6:	f001 fa18 	bl	8002dfa <dataPacketTxSetPayloadData>
	dataPacketTxMount(&app->dataPacketTx);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 f94d 	bl	8002c70 <dataPacketTxMount>
	dataPacketTxUartSend(&app->dataPacketTx, app->huart);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f503 6cb6 	add.w	ip, r3, #1456	; 0x5b0
 80019dc:	e008      	b.n	80019f0 <appSendCurrentConfigDataValues+0x338>
 80019de:	bf00      	nop
 80019e0:	447a0000 	.word	0x447a0000
 80019e4:	461c4000 	.word	0x461c4000
 80019e8:	3b9aca00 	.word	0x3b9aca00
 80019ec:	49742400 	.word	0x49742400
 80019f0:	687e      	ldr	r6, [r7, #4]
 80019f2:	466d      	mov	r5, sp
 80019f4:	f106 0418 	add.w	r4, r6, #24
 80019f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a08:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a0c:	f106 030c 	add.w	r3, r6, #12
 8001a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a12:	4660      	mov	r0, ip
 8001a14:	f001 f97a 	bl	8002d0c <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&app->dataPacketTx);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 f9b3 	bl	8002d8a <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&app->dataPacketTx);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 f98f 	bl	8002d4e <dataPacketTxClear>
 8001a30:	46d5      	mov	sp, sl
}
 8001a32:	bf00      	nop
 8001a34:	3740      	adds	r7, #64	; 0x40
 8001a36:	46bd      	mov	sp, r7
 8001a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001a3c <appSendCurrentPidSetpointValue>:

void appSendCurrentPidSetpointValue(App *app)
{
 8001a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a40:	b094      	sub	sp, #80	; 0x50
 8001a42:	af0e      	add	r7, sp, #56	; 0x38
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	466b      	mov	r3, sp
 8001a48:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 4;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	75fb      	strb	r3, [r7, #23]
	uint8_t bytes[qtyOfBytes];
 8001a4e:	7df9      	ldrb	r1, [r7, #23]
 8001a50:	460b      	mov	r3, r1
 8001a52:	3b01      	subs	r3, #1
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	b2cb      	uxtb	r3, r1
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4698      	mov	r8, r3
 8001a5c:	4691      	mov	r9, r2
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a72:	b2cb      	uxtb	r3, r1
 8001a74:	2200      	movs	r2, #0
 8001a76:	461c      	mov	r4, r3
 8001a78:	4615      	mov	r5, r2
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	00eb      	lsls	r3, r5, #3
 8001a84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a88:	00e2      	lsls	r2, r4, #3
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	3307      	adds	r3, #7
 8001a8e:	08db      	lsrs	r3, r3, #3
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	ebad 0d03 	sub.w	sp, sp, r3
 8001a96:	ab0e      	add	r3, sp, #56	; 0x38
 8001a98:	3300      	adds	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
	uint32_t setpointTimes1000 = (uint32_t)(1000 * app->pid.setpoint);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8001aa2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001b58 <appSendCurrentPidSetpointValue+0x11c>
 8001aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aae:	ee17 3a90 	vmov	r3, s15
 8001ab2:	60bb      	str	r3, [r7, #8]

	bytes[0] = ((setpointTimes1000 >> 24) & 0x000000FF);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	0e1b      	lsrs	r3, r3, #24
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((setpointTimes1000 >> 16) & 0x000000FF);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((setpointTimes1000 >> 8) & 0x000000FF);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	709a      	strb	r2, [r3, #2]
	bytes[3] = (setpointTimes1000 & 0x000000FF);
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	70da      	strb	r2, [r3, #3]

	dataPacketTxSetCommand(&app->dataPacketTx, CMD_TX_CURRENT_PID_SETPOINT);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001ae0:	2181      	movs	r1, #129	; 0x81
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 f96f 	bl	8002dc6 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&app->dataPacketTx, bytes, qtyOfBytes);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001aee:	7dfa      	ldrb	r2, [r7, #23]
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f001 f981 	bl	8002dfa <dataPacketTxSetPayloadData>
	dataPacketTxMount(&app->dataPacketTx);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f001 f8b6 	bl	8002c70 <dataPacketTxMount>
	dataPacketTxUartSend(&app->dataPacketTx, app->huart);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f503 6cb6 	add.w	ip, r3, #1456	; 0x5b0
 8001b0a:	687e      	ldr	r6, [r7, #4]
 8001b0c:	466d      	mov	r5, sp
 8001b0e:	f106 0418 	add.w	r4, r6, #24
 8001b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b22:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b26:	f106 030c 	add.w	r3, r6, #12
 8001b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b2c:	4660      	mov	r0, ip
 8001b2e:	f001 f8ed 	bl	8002d0c <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&app->dataPacketTx);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f001 f926 	bl	8002d8a <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&app->dataPacketTx);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 f902 	bl	8002d4e <dataPacketTxClear>
 8001b4a:	46d5      	mov	sp, sl
}
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b56:	bf00      	nop
 8001b58:	447a0000 	.word	0x447a0000

08001b5c <appSendProcessVariable>:

void appSendProcessVariable(App *app)
{
 8001b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b60:	b094      	sub	sp, #80	; 0x50
 8001b62:	af0e      	add	r7, sp, #56	; 0x38
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	466b      	mov	r3, sp
 8001b68:	469a      	mov	sl, r3
	uint32_t processVariableValue = (uint32_t) appGetProcessVariable(app);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff f9d4 	bl	8000f18 <appGetProcessVariable>
 8001b70:	eef0 7a40 	vmov.f32	s15, s0
 8001b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b78:	ee17 3a90 	vmov	r3, s15
 8001b7c:	617b      	str	r3, [r7, #20]
	uint8_t qtyOfBytes = 4;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	74fb      	strb	r3, [r7, #19]
	uint8_t bytes[qtyOfBytes];
 8001b82:	7cf9      	ldrb	r1, [r7, #19]
 8001b84:	460b      	mov	r3, r1
 8001b86:	3b01      	subs	r3, #1
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	b2cb      	uxtb	r3, r1
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	4698      	mov	r8, r3
 8001b90:	4691      	mov	r9, r2
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ba6:	b2cb      	uxtb	r3, r1
 8001ba8:	2200      	movs	r2, #0
 8001baa:	461c      	mov	r4, r3
 8001bac:	4615      	mov	r5, r2
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	00eb      	lsls	r3, r5, #3
 8001bb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bbc:	00e2      	lsls	r2, r4, #3
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	3307      	adds	r3, #7
 8001bc2:	08db      	lsrs	r3, r3, #3
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	ebad 0d03 	sub.w	sp, sp, r3
 8001bca:	ab0e      	add	r3, sp, #56	; 0x38
 8001bcc:	3300      	adds	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
	bytes[0] = ((processVariableValue >> 24) & 0x000000FF);
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	0e1b      	lsrs	r3, r3, #24
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((processVariableValue >> 16) & 0x000000FF);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	0c1b      	lsrs	r3, r3, #16
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((processVariableValue >> 8) & 0x000000FF);
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	709a      	strb	r2, [r3, #2]
	bytes[3] = (processVariableValue & 0x000000FF);
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	70da      	strb	r2, [r3, #3]

	dataPacketTxSetCommand(&app->dataPacketTx, CMD_TX_CURRENT_PROCESS_VARIABLE_VALUE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001bfc:	2182      	movs	r1, #130	; 0x82
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 f8e1 	bl	8002dc6 <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&app->dataPacketTx, bytes, qtyOfBytes);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001c0a:	7cfa      	ldrb	r2, [r7, #19]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 f8f3 	bl	8002dfa <dataPacketTxSetPayloadData>
	dataPacketTxMount(&app->dataPacketTx);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f001 f828 	bl	8002c70 <dataPacketTxMount>
	dataPacketTxUartSend(&app->dataPacketTx, app->huart);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f503 6cb6 	add.w	ip, r3, #1456	; 0x5b0
 8001c26:	687e      	ldr	r6, [r7, #4]
 8001c28:	466d      	mov	r5, sp
 8001c2a:	f106 0418 	add.w	r4, r6, #24
 8001c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c42:	f106 030c 	add.w	r3, r6, #12
 8001c46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c48:	4660      	mov	r0, ip
 8001c4a:	f001 f85f 	bl	8002d0c <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&app->dataPacketTx);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 f898 	bl	8002d8a <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&app->dataPacketTx);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 f874 	bl	8002d4e <dataPacketTxClear>
 8001c66:	46d5      	mov	sp, sl
}
 8001c68:	bf00      	nop
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001c72 <appTrySendData>:

void appTrySendData(App *app)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
	if (appGetEnableSendCurrentConfigDataValues(app) == TRUE)
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f833 	bl	8001ce6 <appGetEnableSendCurrentConfigDataValues>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d107      	bne.n	8001c96 <appTrySendData+0x24>
	{
		appSendCurrentConfigDataValues(app);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fd16 	bl	80016b8 <appSendCurrentConfigDataValues>
		appSetEnableSendCurrentConfigDataValues(app, FALSE);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f836 	bl	8001d00 <appSetEnableSendCurrentConfigDataValues>
	}
	else if (appGetEnableSendProcessVariable(app) == TRUE)
	{
		appSendProcessVariable(app);
	}
}
 8001c94:	e016      	b.n	8001cc4 <appTrySendData+0x52>
	else if (appGetEnableSendCurrentPidSetpointValue(app) == TRUE)
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f893 	bl	8001dc2 <appGetEnableSendCurrentPidSetpointValue>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <appTrySendData+0x40>
		appSendCurrentPidSetpointValue(app);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff feca 	bl	8001a3c <appSendCurrentPidSetpointValue>
		appSetEnableSendCurrentPidSetpointValue(app, FALSE);
 8001ca8:	2100      	movs	r1, #0
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f896 	bl	8001ddc <appSetEnableSendCurrentPidSetpointValue>
}
 8001cb0:	e008      	b.n	8001cc4 <appTrySendData+0x52>
	else if (appGetEnableSendProcessVariable(app) == TRUE)
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f80a 	bl	8001ccc <appGetEnableSendProcessVariable>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <appTrySendData+0x52>
		appSendProcessVariable(app);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ff4c 	bl	8001b5c <appSendProcessVariable>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <appGetEnableSendProcessVariable>:
{
	return app->processVariableReadyToSend;
}

Bool appGetEnableSendProcessVariable(App *app)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	return app->enableSendProcessVariable;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3623 	ldrb.w	r3, [r3, #1571]	; 0x623
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <appGetEnableSendCurrentConfigDataValues>:
{
	app->enableSendProcessVariable = status;
}

Bool appGetEnableSendCurrentConfigDataValues(App *app)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
	return app->enableSendCurrentConfigDataValues;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3624 	ldrb.w	r3, [r3, #1572]	; 0x624
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <appSetEnableSendCurrentConfigDataValues>:

void appSetEnableSendCurrentConfigDataValues(App *app, Bool status)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	70fb      	strb	r3, [r7, #3]
	app->enableSendCurrentConfigDataValues = status;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	78fa      	ldrb	r2, [r7, #3]
 8001d10:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <appGetSamplingInterval>:
{
	app->samplingInterval = samplingInterval;
}

uint16_t appGetSamplingInterval(App *app)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	return app->samplingInterval;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <appSetPidInterval>:

void appSetPidInterval(App *app, uint16_t pidInterval)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
	pidSetInterval(&app->pid, ((float) pidInterval) / 10000);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	33a8      	adds	r3, #168	; 0xa8
 8001d4c:	887a      	ldrh	r2, [r7, #2]
 8001d4e:	ee07 2a90 	vmov	s15, r2
 8001d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d56:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001d70 <appSetPidInterval+0x34>
 8001d5a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d62:	4618      	mov	r0, r3
 8001d64:	f004 fd85 	bl	8006872 <pidSetInterval>
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	461c4000 	.word	0x461c4000

08001d74 <appGetPidInterval>:

uint16_t appGetPidInterval(App *app)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	return (uint16_t) (10000 * pidGetInterval(&app->pid));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	33a8      	adds	r3, #168	; 0xa8
 8001d80:	4618      	mov	r0, r3
 8001d82:	f004 fd67 	bl	8006854 <pidGetInterval>
 8001d86:	eef0 7a40 	vmov.f32	s15, s0
 8001d8a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001da4 <appGetPidInterval+0x30>
 8001d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d96:	ee17 3a90 	vmov	r3, s15
 8001d9a:	b29b      	uxth	r3, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	461c4000 	.word	0x461c4000

08001da8 <appGetRunPidControllerStatus>:

Bool appGetRunPidControllerStatus(App *app)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	return app->runPidController;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <appGetEnableSendCurrentPidSetpointValue>:
{
	app->runPidController = status;
}

Bool appGetEnableSendCurrentPidSetpointValue(App *app)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
	return app->enableSendCurrentPidSetpointValue;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3625 	ldrb.w	r3, [r3, #1573]	; 0x625
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <appSetEnableSendCurrentPidSetpointValue>:

void appSetEnableSendCurrentPidSetpointValue(App *app, Bool status)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
	app->enableSendCurrentPidSetpointValue = status;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	78fa      	ldrb	r2, [r7, #3]
 8001dec:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a13      	ldr	r2, [pc, #76]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d11d      	bne.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		decodeDataPacketDelay++;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001e16:	801a      	strh	r2, [r3, #0]
		blinkLedDelay++;
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e22:	801a      	strh	r2, [r3, #0]
		sendDataDelay1++;
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001e2e:	801a      	strh	r2, [r3, #0]
		samplingInterval++;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001e3a:	801a      	strh	r2, [r3, #0]
		controllerInterval++;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e46:	801a      	strh	r2, [r3, #0]
	}
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	20000084 	.word	0x20000084
 8001e58:	20000156 	.word	0x20000156
 8001e5c:	20000158 	.word	0x20000158
 8001e60:	2000015a 	.word	0x2000015a
 8001e64:	2000015c 	.word	0x2000015c
 8001e68:	2000015e 	.word	0x2000015e

08001e6c <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <HAL_UART_RxCpltCallback+0x34>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d10d      	bne.n	8001e98 <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4909      	ldr	r1, [pc, #36]	; (8001ea4 <HAL_UART_RxCpltCallback+0x38>)
 8001e80:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <HAL_UART_RxCpltCallback+0x34>)
 8001e82:	f003 fb40 	bl	8005506 <HAL_UART_Receive_IT>
		appAppendReceivedByte(&app, receivedByte);
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_UART_RxCpltCallback+0x38>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4806      	ldr	r0, [pc, #24]	; (8001ea8 <HAL_UART_RxCpltCallback+0x3c>)
 8001e8e:	f7ff f8cb 	bl	8001028 <appAppendReceivedByte>
		receivedByte = 0x00;
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <HAL_UART_RxCpltCallback+0x38>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
	}
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200000cc 	.word	0x200000cc
 8001ea4:	20000154 	.word	0x20000154
 8001ea8:	20000160 	.word	0x20000160

08001eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eae:	b0ab      	sub	sp, #172	; 0xac
 8001eb0:	af26      	add	r7, sp, #152	; 0x98
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eb2:	f000 ffbb 	bl	8002e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eb6:	f000 f8ed 	bl	8002094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eba:	f000 fa67 	bl	800238c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ebe:	f000 f95b 	bl	8002178 <MX_ADC1_Init>
  MX_TIM9_Init();
 8001ec2:	f000 f9d5 	bl	8002270 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8001ec6:	f000 fa0d 	bl	80022e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001eca:	f000 fa35 	bl	8002338 <MX_USART3_UART_Init>
  MX_DAC_Init();
 8001ece:	f000 f9a5 	bl	800221c <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 8001ed2:	4862      	ldr	r0, [pc, #392]	; (800205c <main+0x1b0>)
 8001ed4:	f002 fe82 	bl	8004bdc <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4861      	ldr	r0, [pc, #388]	; (8002060 <main+0x1b4>)
 8001edc:	f001 fd5b 	bl	8003996 <HAL_DAC_Start>
  appInit(&app, LED_GPIO_Port, LED_Pin, huart2, hdac, huart3);
 8001ee0:	4e60      	ldr	r6, [pc, #384]	; (8002064 <main+0x1b8>)
 8001ee2:	4a61      	ldr	r2, [pc, #388]	; (8002068 <main+0x1bc>)
 8001ee4:	ab15      	add	r3, sp, #84	; 0x54
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	2244      	movs	r2, #68	; 0x44
 8001eea:	4618      	mov	r0, r3
 8001eec:	f004 fcf4 	bl	80068d8 <memcpy>
 8001ef0:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <main+0x1b4>)
 8001ef2:	ac10      	add	r4, sp, #64	; 0x40
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001efa:	682b      	ldr	r3, [r5, #0]
 8001efc:	6023      	str	r3, [r4, #0]
 8001efe:	466d      	mov	r5, sp
 8001f00:	1d34      	adds	r4, r6, #4
 8001f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f12:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001f16:	6833      	ldr	r3, [r6, #0]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	4954      	ldr	r1, [pc, #336]	; (800206c <main+0x1c0>)
 8001f1c:	4854      	ldr	r0, [pc, #336]	; (8002070 <main+0x1c4>)
 8001f1e:	f7fe ff13 	bl	8000d48 <appInit>
  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8001f22:	2201      	movs	r2, #1
 8001f24:	4953      	ldr	r1, [pc, #332]	; (8002074 <main+0x1c8>)
 8001f26:	484f      	ldr	r0, [pc, #316]	; (8002064 <main+0x1b8>)
 8001f28:	f003 faed 	bl	8005506 <HAL_UART_Receive_IT>

	  /********************************* TOP SLOT START ********************************/

	  /* Put here the code to be executed in all cycles before the state machine */

	  if (samplingInterval >= appGetSamplingInterval(&app))
 8001f2c:	4850      	ldr	r0, [pc, #320]	; (8002070 <main+0x1c4>)
 8001f2e:	f7ff fef7 	bl	8001d20 <appGetSamplingInterval>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b50      	ldr	r3, [pc, #320]	; (8002078 <main+0x1cc>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d823      	bhi.n	8001f86 <main+0xda>
	  {
		  HAL_ADC_Start(&hadc1);
 8001f3e:	484f      	ldr	r0, [pc, #316]	; (800207c <main+0x1d0>)
 8001f40:	f001 f82a 	bl	8002f98 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	484c      	ldr	r0, [pc, #304]	; (800207c <main+0x1d0>)
 8001f4a:	f001 f92a 	bl	80031a2 <HAL_ADC_PollForConversion>
		  uint16_t adcValue = HAL_ADC_GetValue(&hadc1);
 8001f4e:	484b      	ldr	r0, [pc, #300]	; (800207c <main+0x1d0>)
 8001f50:	f001 f9b2 	bl	80032b8 <HAL_ADC_GetValue>
 8001f54:	4603      	mov	r3, r0
 8001f56:	81fb      	strh	r3, [r7, #14]
		  HAL_ADC_Stop(&hadc1);
 8001f58:	4848      	ldr	r0, [pc, #288]	; (800207c <main+0x1d0>)
 8001f5a:	f001 f8ef 	bl	800313c <HAL_ADC_Stop>

		  uint32_t calculatedCurrentInMiliAmps = appGetCurrentInMiliAmps(adcValue);
 8001f5e:	89fb      	ldrh	r3, [r7, #14]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe ffe9 	bl	8000f38 <appGetCurrentInMiliAmps>
 8001f66:	60b8      	str	r0, [r7, #8]
		  appAddNewValueToFilter(&app, calculatedCurrentInMiliAmps);
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	4841      	ldr	r0, [pc, #260]	; (8002070 <main+0x1c4>)
 8001f6c:	f7ff f83e 	bl	8000fec <appAddNewValueToFilter>
		  uint32_t filteredCurrentInMiliAmps = appGetFilterResult(&app);
 8001f70:	483f      	ldr	r0, [pc, #252]	; (8002070 <main+0x1c4>)
 8001f72:	f7ff f84b 	bl	800100c <appGetFilterResult>
 8001f76:	6078      	str	r0, [r7, #4]
		  appSetProcessVariable(&app, filteredCurrentInMiliAmps);
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	483d      	ldr	r0, [pc, #244]	; (8002070 <main+0x1c4>)
 8001f7c:	f7fe ffb7 	bl	8000eee <appSetProcessVariable>

		  samplingInterval = 0;
 8001f80:	4b3d      	ldr	r3, [pc, #244]	; (8002078 <main+0x1cc>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	801a      	strh	r2, [r3, #0]
	  }

	  if (controllerInterval >= appGetPidInterval(&app))
 8001f86:	483a      	ldr	r0, [pc, #232]	; (8002070 <main+0x1c4>)
 8001f88:	f7ff fef4 	bl	8001d74 <appGetPidInterval>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <main+0x1d4>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d80b      	bhi.n	8001fb0 <main+0x104>
	  {
		  if (appGetRunPidControllerStatus(&app) == TRUE)
 8001f98:	4835      	ldr	r0, [pc, #212]	; (8002070 <main+0x1c4>)
 8001f9a:	f7ff ff05 	bl	8001da8 <appGetRunPidControllerStatus>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d102      	bne.n	8001faa <main+0xfe>
		  {
			  appRunController(&app);
 8001fa4:	4832      	ldr	r0, [pc, #200]	; (8002070 <main+0x1c4>)
 8001fa6:	f7fe ff81 	bl	8000eac <appRunController>
		  }
		  controllerInterval = 0;
 8001faa:	4b35      	ldr	r3, [pc, #212]	; (8002080 <main+0x1d4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	801a      	strh	r2, [r3, #0]

	  /* ============================================================================= */

	  /****************************** STATE MACHINE START ******************************/

	  switch (stateMachine)
 8001fb0:	4b34      	ldr	r3, [pc, #208]	; (8002084 <main+0x1d8>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d84b      	bhi.n	8002050 <main+0x1a4>
 8001fb8:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <main+0x114>)
 8001fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08001fd5 	.word	0x08001fd5
 8001fc4:	08001ff1 	.word	0x08001ff1
 8001fc8:	08001fff 	.word	0x08001fff
 8001fcc:	0800200d 	.word	0x0800200d
 8001fd0:	08002033 	.word	0x08002033
	  {
	  	  case 0:
	  		  if (decodeDataPacketDelay >= DELAY_10_MILISECONDS)
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <main+0x1dc>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	2b63      	cmp	r3, #99	; 0x63
 8001fda:	d905      	bls.n	8001fe8 <main+0x13c>
	  		  {
	  			appTryDecodeReceivedDataPacket(&app);
 8001fdc:	4824      	ldr	r0, [pc, #144]	; (8002070 <main+0x1c4>)
 8001fde:	f7ff f835 	bl	800104c <appTryDecodeReceivedDataPacket>
	  			decodeDataPacketDelay = 0;
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <main+0x1dc>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  stateMachine = 1;
 8001fe8:	4b26      	ldr	r3, [pc, #152]	; (8002084 <main+0x1d8>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
	  		  break;
 8001fee:	e033      	b.n	8002058 <main+0x1ac>

		  case 1:
			  appTryExtractCommandAndPayloadFromDecodedDataPacket(&app);
 8001ff0:	481f      	ldr	r0, [pc, #124]	; (8002070 <main+0x1c4>)
 8001ff2:	f7ff f839 	bl	8001068 <appTryExtractCommandAndPayloadFromDecodedDataPacket>
			  stateMachine = 2;
 8001ff6:	4b23      	ldr	r3, [pc, #140]	; (8002084 <main+0x1d8>)
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	701a      	strb	r2, [r3, #0]
			  break;
 8001ffc:	e02c      	b.n	8002058 <main+0x1ac>

		  case 2:
			  appTryDecodeExtractedCommand(&app);
 8001ffe:	481c      	ldr	r0, [pc, #112]	; (8002070 <main+0x1c4>)
 8002000:	f7ff f872 	bl	80010e8 <appTryDecodeExtractedCommand>
			  stateMachine = 3;
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <main+0x1d8>)
 8002006:	2203      	movs	r2, #3
 8002008:	701a      	strb	r2, [r3, #0]
			  break;
 800200a:	e025      	b.n	8002058 <main+0x1ac>

		  case 3:
			  if (blinkLedDelay >= appGetBlinkDelay(&app))
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <main+0x1e0>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	461c      	mov	r4, r3
 8002012:	4817      	ldr	r0, [pc, #92]	; (8002070 <main+0x1c4>)
 8002014:	f7fe ff3e 	bl	8000e94 <appGetBlinkDelay>
 8002018:	4603      	mov	r3, r0
 800201a:	429c      	cmp	r4, r3
 800201c:	d305      	bcc.n	800202a <main+0x17e>
			  {
				  appExecuteBlinkLed(&app);
 800201e:	4814      	ldr	r0, [pc, #80]	; (8002070 <main+0x1c4>)
 8002020:	f7fe ff28 	bl	8000e74 <appExecuteBlinkLed>
				  blinkLedDelay = 0;
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <main+0x1e0>)
 8002026:	2200      	movs	r2, #0
 8002028:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 4;
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <main+0x1d8>)
 800202c:	2204      	movs	r2, #4
 800202e:	701a      	strb	r2, [r3, #0]
			  break;
 8002030:	e012      	b.n	8002058 <main+0x1ac>

		  case 4:
			  if (sendDataDelay1 >= DELAY_100_MILISECONDS)
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <main+0x1e4>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800203a:	d305      	bcc.n	8002048 <main+0x19c>
			  {
				  appTrySendData(&app);
 800203c:	480c      	ldr	r0, [pc, #48]	; (8002070 <main+0x1c4>)
 800203e:	f7ff fe18 	bl	8001c72 <appTrySendData>
				  sendDataDelay1 = 0;
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <main+0x1e4>)
 8002044:	2200      	movs	r2, #0
 8002046:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 0;
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <main+0x1d8>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
			  break;
 800204e:	e003      	b.n	8002058 <main+0x1ac>

		  default:
			  stateMachine = 0;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <main+0x1d8>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
			  break;
 8002056:	bf00      	nop
	  if (samplingInterval >= appGetSamplingInterval(&app))
 8002058:	e768      	b.n	8001f2c <main+0x80>
 800205a:	bf00      	nop
 800205c:	20000084 	.word	0x20000084
 8002060:	20000070 	.word	0x20000070
 8002064:	200000cc 	.word	0x200000cc
 8002068:	20000110 	.word	0x20000110
 800206c:	40020000 	.word	0x40020000
 8002070:	20000160 	.word	0x20000160
 8002074:	20000154 	.word	0x20000154
 8002078:	2000015c 	.word	0x2000015c
 800207c:	20000028 	.word	0x20000028
 8002080:	2000015e 	.word	0x2000015e
 8002084:	20000834 	.word	0x20000834
 8002088:	20000156 	.word	0x20000156
 800208c:	20000158 	.word	0x20000158
 8002090:	2000015a 	.word	0x2000015a

08002094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b094      	sub	sp, #80	; 0x50
 8002098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	2234      	movs	r2, #52	; 0x34
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 fc26 	bl	80068f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	2300      	movs	r3, #0
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <SystemClock_Config+0xdc>)
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <SystemClock_Config+0xdc>)
 80020c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c6:	6413      	str	r3, [r2, #64]	; 0x40
 80020c8:	4b29      	ldr	r3, [pc, #164]	; (8002170 <SystemClock_Config+0xdc>)
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d4:	2300      	movs	r3, #0
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	4b26      	ldr	r3, [pc, #152]	; (8002174 <SystemClock_Config+0xe0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a25      	ldr	r2, [pc, #148]	; (8002174 <SystemClock_Config+0xe0>)
 80020de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <SystemClock_Config+0xe0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020f4:	2301      	movs	r3, #1
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020f8:	2310      	movs	r3, #16
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020fc:	2302      	movs	r3, #2
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002100:	2300      	movs	r3, #0
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002104:	2308      	movs	r3, #8
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002108:	23b4      	movs	r3, #180	; 0xb4
 800210a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800210c:	2302      	movs	r3, #2
 800210e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002110:	2302      	movs	r3, #2
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002114:	2302      	movs	r3, #2
 8002116:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	4618      	mov	r0, r3
 800211e:	f002 fa6f 	bl	8004600 <HAL_RCC_OscConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002128:	f000 f982 	bl	8002430 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800212c:	f001 ff54 	bl	8003fd8 <HAL_PWREx_EnableOverDrive>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002136:	f000 f97b 	bl	8002430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800213a:	230f      	movs	r3, #15
 800213c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800213e:	2302      	movs	r3, #2
 8002140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002146:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800214a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800214c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002150:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002152:	f107 0308 	add.w	r3, r7, #8
 8002156:	2105      	movs	r1, #5
 8002158:	4618      	mov	r0, r3
 800215a:	f001 ff8d 	bl	8004078 <HAL_RCC_ClockConfig>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002164:	f000 f964 	bl	8002430 <Error_Handler>
  }
}
 8002168:	bf00      	nop
 800216a:	3750      	adds	r7, #80	; 0x50
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800
 8002174:	40007000 	.word	0x40007000

08002178 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800217e:	463b      	mov	r3, r7
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <MX_ADC1_Init+0x98>)
 800218c:	4a21      	ldr	r2, [pc, #132]	; (8002214 <MX_ADC1_Init+0x9c>)
 800218e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002190:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <MX_ADC1_Init+0x98>)
 8002192:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002196:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <MX_ADC1_Init+0x98>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <MX_ADC1_Init+0x98>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <MX_ADC1_Init+0x98>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <MX_ADC1_Init+0x98>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021b2:	4b17      	ldr	r3, [pc, #92]	; (8002210 <MX_ADC1_Init+0x98>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021b8:	4b15      	ldr	r3, [pc, #84]	; (8002210 <MX_ADC1_Init+0x98>)
 80021ba:	4a17      	ldr	r2, [pc, #92]	; (8002218 <MX_ADC1_Init+0xa0>)
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <MX_ADC1_Init+0x98>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <MX_ADC1_Init+0x98>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <MX_ADC1_Init+0x98>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <MX_ADC1_Init+0x98>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021d8:	480d      	ldr	r0, [pc, #52]	; (8002210 <MX_ADC1_Init+0x98>)
 80021da:	f000 fe99 	bl	8002f10 <HAL_ADC_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80021e4:	f000 f924 	bl	8002430 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80021e8:	2301      	movs	r3, #1
 80021ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80021ec:	2301      	movs	r3, #1
 80021ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021f4:	463b      	mov	r3, r7
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_ADC1_Init+0x98>)
 80021fa:	f001 f86b 	bl	80032d4 <HAL_ADC_ConfigChannel>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002204:	f000 f914 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000028 	.word	0x20000028
 8002214:	40012000 	.word	0x40012000
 8002218:	0f000001 	.word	0x0f000001

0800221c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002222:	463b      	mov	r3, r7
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <MX_DAC_Init+0x4c>)
 800222c:	4a0f      	ldr	r2, [pc, #60]	; (800226c <MX_DAC_Init+0x50>)
 800222e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002230:	480d      	ldr	r0, [pc, #52]	; (8002268 <MX_DAC_Init+0x4c>)
 8002232:	f001 fb8e 	bl	8003952 <HAL_DAC_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800223c:	f000 f8f8 	bl	8002430 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002240:	2300      	movs	r3, #0
 8002242:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8002244:	2302      	movs	r3, #2
 8002246:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002248:	463b      	mov	r3, r7
 800224a:	2200      	movs	r2, #0
 800224c:	4619      	mov	r1, r3
 800224e:	4806      	ldr	r0, [pc, #24]	; (8002268 <MX_DAC_Init+0x4c>)
 8002250:	f001 fc18 	bl	8003a84 <HAL_DAC_ConfigChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800225a:	f000 f8e9 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000070 	.word	0x20000070
 800226c:	40007400 	.word	0x40007400

08002270 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002276:	463b      	mov	r3, r7
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <MX_TIM9_Init+0x6c>)
 8002284:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <MX_TIM9_Init+0x70>)
 8002286:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_TIM9_Init+0x6c>)
 800228a:	2204      	movs	r2, #4
 800228c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <MX_TIM9_Init+0x6c>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3665;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_TIM9_Init+0x6c>)
 8002296:	f640 6251 	movw	r2, #3665	; 0xe51
 800229a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_TIM9_Init+0x6c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_TIM9_Init+0x6c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80022a8:	480c      	ldr	r0, [pc, #48]	; (80022dc <MX_TIM9_Init+0x6c>)
 80022aa:	f002 fc47 	bl	8004b3c <HAL_TIM_Base_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80022b4:	f000 f8bc 	bl	8002430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022bc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80022be:	463b      	mov	r3, r7
 80022c0:	4619      	mov	r1, r3
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <MX_TIM9_Init+0x6c>)
 80022c4:	f002 fe02 	bl	8004ecc <HAL_TIM_ConfigClockSource>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80022ce:	f000 f8af 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000084 	.word	0x20000084
 80022e0:	40014000 	.word	0x40014000

080022e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <MX_USART2_UART_Init+0x4c>)
 80022ea:	4a12      	ldr	r2, [pc, #72]	; (8002334 <MX_USART2_UART_Init+0x50>)
 80022ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <MX_USART2_UART_Init+0x4c>)
 80022f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <MX_USART2_UART_Init+0x4c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <MX_USART2_UART_Init+0x4c>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <MX_USART2_UART_Init+0x4c>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <MX_USART2_UART_Init+0x4c>)
 800230a:	220c      	movs	r2, #12
 800230c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <MX_USART2_UART_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <MX_USART2_UART_Init+0x4c>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800231a:	4805      	ldr	r0, [pc, #20]	; (8002330 <MX_USART2_UART_Init+0x4c>)
 800231c:	f003 f814 	bl	8005348 <HAL_UART_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002326:	f000 f883 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200000cc 	.word	0x200000cc
 8002334:	40004400 	.word	0x40004400

08002338 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <MX_USART3_UART_Init+0x50>)
 8002340:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 8002344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002348:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 800235e:	220c      	movs	r2, #12
 8002360:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_USART3_UART_Init+0x4c>)
 8002370:	f002 ffea 	bl	8005348 <HAL_UART_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800237a:	f000 f859 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000110 	.word	0x20000110
 8002388:	40004800 	.word	0x40004800

0800238c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002392:	f107 030c 	add.w	r3, r7, #12
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <MX_GPIO_Init+0x98>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <MX_GPIO_Init+0x98>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <MX_GPIO_Init+0x98>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <MX_GPIO_Init+0x98>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a17      	ldr	r2, [pc, #92]	; (8002424 <MX_GPIO_Init+0x98>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <MX_GPIO_Init+0x98>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	2120      	movs	r1, #32
 80023de:	4812      	ldr	r0, [pc, #72]	; (8002428 <MX_GPIO_Init+0x9c>)
 80023e0:	f001 fdc6 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80023e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	4619      	mov	r1, r3
 80023f8:	480c      	ldr	r0, [pc, #48]	; (800242c <MX_GPIO_Init+0xa0>)
 80023fa:	f001 fc25 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80023fe:	2320      	movs	r3, #32
 8002400:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002402:	2301      	movs	r3, #1
 8002404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	4619      	mov	r1, r3
 8002414:	4804      	ldr	r0, [pc, #16]	; (8002428 <MX_GPIO_Init+0x9c>)
 8002416:	f001 fc17 	bl	8003c48 <HAL_GPIO_Init>

}
 800241a:	bf00      	nop
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	40020000 	.word	0x40020000
 800242c:	40020800 	.word	0x40020800

08002430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002434:	b672      	cpsid	i
}
 8002436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002438:	e7fe      	b.n	8002438 <Error_Handler+0x8>
	...

0800243c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_MspInit+0x4c>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_MspInit+0x4c>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002450:	6453      	str	r3, [r2, #68]	; 0x44
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_MspInit+0x4c>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_MspInit+0x4c>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	4a08      	ldr	r2, [pc, #32]	; (8002488 <HAL_MspInit+0x4c>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246c:	6413      	str	r3, [r2, #64]	; 0x40
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_MspInit+0x4c>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800

0800248c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_ADC_MspInit+0x7c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d127      	bne.n	80024fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_ADC_MspInit+0x80>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	4a15      	ldr	r2, [pc, #84]	; (800250c <HAL_ADC_MspInit+0x80>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	6453      	str	r3, [r2, #68]	; 0x44
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <HAL_ADC_MspInit+0x80>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_ADC_MspInit+0x80>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a0e      	ldr	r2, [pc, #56]	; (800250c <HAL_ADC_MspInit+0x80>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <HAL_ADC_MspInit+0x80>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CURRENT_SENSE_Pin;
 80024e6:	2302      	movs	r3, #2
 80024e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ea:	2303      	movs	r3, #3
 80024ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_SENSE_GPIO_Port, &GPIO_InitStruct);
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4619      	mov	r1, r3
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <HAL_ADC_MspInit+0x84>)
 80024fa:	f001 fba5 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024fe:	bf00      	nop
 8002500:	3728      	adds	r7, #40	; 0x28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40012000 	.word	0x40012000
 800250c:	40023800 	.word	0x40023800
 8002510:	40020000 	.word	0x40020000

08002514 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a17      	ldr	r2, [pc, #92]	; (8002590 <HAL_DAC_MspInit+0x7c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d127      	bne.n	8002586 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <HAL_DAC_MspInit+0x80>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a15      	ldr	r2, [pc, #84]	; (8002594 <HAL_DAC_MspInit+0x80>)
 8002540:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_DAC_MspInit+0x80>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_DAC_MspInit+0x80>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_DAC_MspInit+0x80>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_DAC_MspInit+0x80>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = CURRENT_CTRL_Pin;
 800256e:	2310      	movs	r3, #16
 8002570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002572:	2303      	movs	r3, #3
 8002574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_CTRL_GPIO_Port, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	4805      	ldr	r0, [pc, #20]	; (8002598 <HAL_DAC_MspInit+0x84>)
 8002582:	f001 fb61 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002586:	bf00      	nop
 8002588:	3728      	adds	r7, #40	; 0x28
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40007400 	.word	0x40007400
 8002594:	40023800 	.word	0x40023800
 8002598:	40020000 	.word	0x40020000

0800259c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_TIM_Base_MspInit+0x48>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d115      	bne.n	80025da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_TIM_Base_MspInit+0x4c>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <HAL_TIM_Base_MspInit+0x4c>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	6453      	str	r3, [r2, #68]	; 0x44
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_TIM_Base_MspInit+0x4c>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	2018      	movs	r0, #24
 80025d0:	f001 f989 	bl	80038e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80025d4:	2018      	movs	r0, #24
 80025d6:	f001 f9a2 	bl	800391e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40014000 	.word	0x40014000
 80025e8:	40023800 	.word	0x40023800

080025ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	; 0x30
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a36      	ldr	r2, [pc, #216]	; (80026e4 <HAL_UART_MspInit+0xf8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d134      	bne.n	8002678 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <HAL_UART_MspInit+0xfc>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a34      	ldr	r2, [pc, #208]	; (80026e8 <HAL_UART_MspInit+0xfc>)
 8002618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b32      	ldr	r3, [pc, #200]	; (80026e8 <HAL_UART_MspInit+0xfc>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	4b2e      	ldr	r3, [pc, #184]	; (80026e8 <HAL_UART_MspInit+0xfc>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a2d      	ldr	r2, [pc, #180]	; (80026e8 <HAL_UART_MspInit+0xfc>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <HAL_UART_MspInit+0xfc>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002646:	230c      	movs	r3, #12
 8002648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002652:	2303      	movs	r3, #3
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002656:	2307      	movs	r3, #7
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265a:	f107 031c 	add.w	r3, r7, #28
 800265e:	4619      	mov	r1, r3
 8002660:	4822      	ldr	r0, [pc, #136]	; (80026ec <HAL_UART_MspInit+0x100>)
 8002662:	f001 faf1 	bl	8003c48 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	2026      	movs	r0, #38	; 0x26
 800266c:	f001 f93b 	bl	80038e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002670:	2026      	movs	r0, #38	; 0x26
 8002672:	f001 f954 	bl	800391e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002676:	e031      	b.n	80026dc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <HAL_UART_MspInit+0x104>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d12c      	bne.n	80026dc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_UART_MspInit+0xfc>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_UART_MspInit+0xfc>)
 800268c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_UART_MspInit+0xfc>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_UART_MspInit+0xfc>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <HAL_UART_MspInit+0xfc>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_UART_MspInit+0xfc>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c8:	2303      	movs	r3, #3
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026cc:	2307      	movs	r3, #7
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d0:	f107 031c 	add.w	r3, r7, #28
 80026d4:	4619      	mov	r1, r3
 80026d6:	4807      	ldr	r0, [pc, #28]	; (80026f4 <HAL_UART_MspInit+0x108>)
 80026d8:	f001 fab6 	bl	8003c48 <HAL_GPIO_Init>
}
 80026dc:	bf00      	nop
 80026de:	3730      	adds	r7, #48	; 0x30
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40004400 	.word	0x40004400
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020000 	.word	0x40020000
 80026f0:	40004800 	.word	0x40004800
 80026f4:	40020800 	.word	0x40020800

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <NMI_Handler+0x4>

080026fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002702:	e7fe      	b.n	8002702 <HardFault_Handler+0x4>

08002704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <MemManage_Handler+0x4>

0800270a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <BusFault_Handler+0x4>

08002710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <UsageFault_Handler+0x4>

08002716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002744:	f000 fbc4 	bl	8002ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}

0800274c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002752:	f002 fab3 	bl	8004cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000084 	.word	0x20000084

08002760 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <USART2_IRQHandler+0x10>)
 8002766:	f002 feff 	bl	8005568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200000cc 	.word	0x200000cc

08002774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <SystemInit+0x20>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <SystemInit+0x20>)
 8002780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800279c:	480d      	ldr	r0, [pc, #52]	; (80027d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800279e:	490e      	ldr	r1, [pc, #56]	; (80027d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027a0:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a4:	e002      	b.n	80027ac <LoopCopyDataInit>

080027a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027aa:	3304      	adds	r3, #4

080027ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b0:	d3f9      	bcc.n	80027a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b2:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027b4:	4c0b      	ldr	r4, [pc, #44]	; (80027e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b8:	e001      	b.n	80027be <LoopFillZerobss>

080027ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027bc:	3204      	adds	r2, #4

080027be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c0:	d3fb      	bcc.n	80027ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027c2:	f7ff ffd7 	bl	8002774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027c6:	f004 f863 	bl	8006890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ca:	f7ff fb6f 	bl	8001eac <main>
  bx  lr    
 80027ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80027dc:	08006a44 	.word	0x08006a44
  ldr r2, =_sbss
 80027e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80027e4:	2000083c 	.word	0x2000083c

080027e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e8:	e7fe      	b.n	80027e8 <ADC_IRQHandler>

080027ea <genCrc>:

/**
  * Calcula o crc8 entre o range passado como parametro.
  */
uint8_t genCrc(uint8_t buffer[], uint16_t qtd_de_bytes_no_pacote)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	73bb      	strb	r3, [r7, #14]
 8002802:	e00d      	b.n	8002820 <genCrc+0x36>
    {
      crc = calcCrc8(crc, buffer[i]);
 8002804:	7bbb      	ldrb	r3, [r7, #14]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	781a      	ldrb	r2, [r3, #0]
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f80f 	bl	8002834 <calcCrc8>
 8002816:	4603      	mov	r3, r0
 8002818:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 800281a:	7bbb      	ldrb	r3, [r7, #14]
 800281c:	3301      	adds	r3, #1
 800281e:	73bb      	strb	r3, [r7, #14]
 8002820:	7bbb      	ldrb	r3, [r7, #14]
 8002822:	b29b      	uxth	r3, r3
 8002824:	887a      	ldrh	r2, [r7, #2]
 8002826:	429a      	cmp	r2, r3
 8002828:	d8ec      	bhi.n	8002804 <genCrc+0x1a>
    }

  return crc;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <calcCrc8>:

/**
  * Funcao que calcula o CRC8
  */
static uint8_t calcCrc8(uint8_t crc3, uint8_t b)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	460a      	mov	r2, r1
 800283e:	71fb      	strb	r3, [r7, #7]
 8002840:	4613      	mov	r3, r2
 8002842:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]
    pos = (((crc3 & 0xff) ^ b) & 0xff);
 8002848:	79fa      	ldrb	r2, [r7, #7]
 800284a:	79bb      	ldrb	r3, [r7, #6]
 800284c:	4053      	eors	r3, r2
 800284e:	73fb      	strb	r3, [r7, #15]

    return ((crc3) >> 8) ^ table[pos];
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	121b      	asrs	r3, r3, #8
 8002854:	b25a      	sxtb	r2, r3
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	4905      	ldr	r1, [pc, #20]	; (8002870 <calcCrc8+0x3c>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	b25b      	sxtb	r3, r3
 800285e:	4053      	eors	r3, r2
 8002860:	b25b      	sxtb	r3, r3
 8002862:	b2db      	uxtb	r3, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	08006934 	.word	0x08006934

08002874 <dataPacketRxInit>:
 */

#include "dataPacketRx.h"

void dataPacketRxInit(DataPacketRx *dataPacketRx, uint8_t start_1, uint8_t start_2)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
 8002880:	4613      	mov	r3, r2
 8002882:	70bb      	strb	r3, [r7, #2]
	dataPacketRx->start_1 = start_1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	701a      	strb	r2, [r3, #0]
	dataPacketRx->start_2 = start_2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	78ba      	ldrb	r2, [r7, #2]
 800288e:	705a      	strb	r2, [r3, #1]
	dataPacketRx->command = 0x00;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	709a      	strb	r2, [r3, #2]
	dataPacketRx->payloadDataLength = 0x00;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	70da      	strb	r2, [r3, #3]
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	2232      	movs	r2, #50	; 0x32
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 f825 	bl	80068f4 <memset>
	dataPacketRx->crc8 = 0x00;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3337      	adds	r3, #55	; 0x37
 80028b6:	2237      	movs	r2, #55	; 0x37
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f004 f81a 	bl	80068f4 <memset>
	dataPacketRx->dataPacketLength = 0x00;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketRx->currentRxByteIndex = 0;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	dataPacketRx->containsStarterBytes = FALSE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	dataPacketRx->starterByteIndex = 0;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <dataPacketRxAppend>:

void dataPacketRxAppend(DataPacketRx *dataPacketRx, uint8_t newByte)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacket[dataPacketRx->currentRxByteIndex] = newByte;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002902:	461a      	mov	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4413      	add	r3, r2
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketRx->currentRxByteIndex++;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002914:	3301      	adds	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketLength++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8002924:	3301      	adds	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	if (dataPacketRx->currentRxByteIndex > QTY_PACKET_RX_BYTES)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002934:	2b37      	cmp	r3, #55	; 0x37
 8002936:	d90a      	bls.n	800294e <dataPacketRxAppend+0x5e>
	{
		dataPacketRxClear(dataPacketRx);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f8cf 	bl	8002adc <dataPacketRxClear>
		dataPacketRx->currentRxByteIndex = 0;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		dataPacketRx->dataPacketLength = 0;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	}
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <dataPacketRxDecode>:

void dataPacketRxDecode(DataPacketRx *dataPacketRx)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
	if (dataPacketRx->containsStarterBytes == TRUE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002964:	2b01      	cmp	r3, #1
 8002966:	d17e      	bne.n	8002a66 <dataPacketRxDecode+0x110>
	{
		dataPacketRxSetCommand(dataPacketRx, dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 2]);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800296e:	3302      	adds	r3, #2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f8e2 	bl	8002b44 <dataPacketRxSetCommand>
		dataPacketRx->payloadDataLength = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 3];
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8002986:	3303      	adds	r3, #3
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	70da      	strb	r2, [r3, #3]

		if (dataPacketRx->payloadDataLength == 0)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	78db      	ldrb	r3, [r3, #3]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d126      	bne.n	80029ea <dataPacketRxDecode+0x94>
		{
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 4];
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80029a2:	3304      	adds	r3, #4
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80029ac:	733b      	strb	r3, [r7, #12]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, 4);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3337      	adds	r3, #55	; 0x37
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	f8b2 2074 	ldrh.w	r2, [r2, #116]	; 0x74
 80029b8:	4413      	add	r3, r2
 80029ba:	2104      	movs	r1, #4
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff14 	bl	80027ea <genCrc>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

			if (dataPacketRx->crc8 == receivedCrc8)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80029d2:	7b3a      	ldrb	r2, [r7, #12]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d17d      	bne.n	8002ad4 <dataPacketRxDecode+0x17e>
			{
				dataPacketRx->currentRxByteIndex = 0;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
			{
				dataPacketRxClear(dataPacketRx);
			}
		}
	}
}
 80029e8:	e074      	b.n	8002ad4 <dataPacketRxDecode+0x17e>
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + dataPacketRx->payloadDataLength + 4];
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80029f0:	461a      	mov	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	78db      	ldrb	r3, [r3, #3]
 80029f6:	4413      	add	r3, r2
 80029f8:	3304      	adds	r3, #4
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002a02:	737b      	strb	r3, [r7, #13]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, dataPacketRx->payloadDataLength + 4);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3337      	adds	r3, #55	; 0x37
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	f8b2 2074 	ldrh.w	r2, [r2, #116]	; 0x74
 8002a0e:	441a      	add	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	78db      	ldrb	r3, [r3, #3]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3304      	adds	r3, #4
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	f7ff fee4 	bl	80027ea <genCrc>
 8002a22:	4603      	mov	r3, r0
 8002a24:	461a      	mov	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			if (dataPacketRx->crc8 == receivedCrc8)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002a32:	7b7a      	ldrb	r2, [r7, #13]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d14d      	bne.n	8002ad4 <dataPacketRxDecode+0x17e>
				dataPacketRxSetPayloadData(dataPacketRx, dataPacketRx->dataPacket + dataPacketRx->starterByteIndex + 4, dataPacketRx->payloadDataLength);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8002a44:	3304      	adds	r3, #4
 8002a46:	18d1      	adds	r1, r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	78db      	ldrb	r3, [r3, #3]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f89e 	bl	8002b90 <dataPacketRxSetPayloadData>
				dataPacketRx->currentRxByteIndex = 0;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
 8002a64:	e036      	b.n	8002ad4 <dataPacketRxDecode+0x17e>
		if (dataPacketRx->dataPacketLength >= MIN_PACKET_RX_BYTES)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d931      	bls.n	8002ad4 <dataPacketRxDecode+0x17e>
			uint16_t index = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	81fb      	strh	r3, [r7, #14]
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 8002a74:	2300      	movs	r3, #0
 8002a76:	81fb      	strh	r3, [r7, #14]
 8002a78:	e01e      	b.n	8002ab8 <dataPacketRxDecode+0x162>
				if ((dataPacketRx->dataPacket[index] == dataPacketRx->start_1) && (dataPacketRx->dataPacket[index+1] == dataPacketRx->start_2))
 8002a7a:	89fb      	ldrh	r3, [r7, #14]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d112      	bne.n	8002ab2 <dataPacketRxDecode+0x15c>
 8002a8c:	89fb      	ldrh	r3, [r7, #14]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	785b      	ldrb	r3, [r3, #1]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d108      	bne.n	8002ab2 <dataPacketRxDecode+0x15c>
					dataPacketRx->containsStarterBytes = TRUE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
					dataPacketRx->starterByteIndex = index;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	89fa      	ldrh	r2, [r7, #14]
 8002aac:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
					break;
 8002ab0:	e008      	b.n	8002ac4 <dataPacketRxDecode+0x16e>
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 8002ab2:	89fb      	ldrh	r3, [r7, #14]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	81fb      	strh	r3, [r7, #14]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8002abe:	89fa      	ldrh	r2, [r7, #14]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3da      	bcc.n	8002a7a <dataPacketRxDecode+0x124>
			if (dataPacketRx->containsStarterBytes == FALSE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d102      	bne.n	8002ad4 <dataPacketRxDecode+0x17e>
				dataPacketRxClear(dataPacketRx);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f804 	bl	8002adc <dataPacketRxClear>
}
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <dataPacketRxClear>:

void dataPacketRxClear(DataPacketRx *dataPacketRx)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	dataPacketRx->containsStarterBytes = FALSE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	dataPacketRx->currentRxByteIndex = 0;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketLength = 0;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketRx->payloadDataLength = 0;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	70da      	strb	r2, [r3, #3]
	dataPacketRx->command = 0x00;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	709a      	strb	r2, [r3, #2]
	dataPacketRx->crc8 = 0x00;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketRx->starterByteIndex = 0;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3304      	adds	r3, #4
 8002b24:	2232      	movs	r2, #50	; 0x32
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f003 fee3 	bl	80068f4 <memset>
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3337      	adds	r3, #55	; 0x37
 8002b32:	2237      	movs	r2, #55	; 0x37
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f003 fedc 	bl	80068f4 <memset>
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <dataPacketRxSetCommand>:
	dataPacketRx->crc8 = 0x00;
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
}

void dataPacketRxSetCommand(DataPacketRx *dataPacketRx, uint8_t command)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	if ((command < 0x01) || (command > 0xFE))
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <dataPacketRxSetCommand+0x28>
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	2bff      	cmp	r3, #255	; 0xff
 8002b62:	d003      	beq.n	8002b6c <dataPacketRxSetCommand+0x28>
	{
		return;
	}

	dataPacketRx->command = command;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	709a      	strb	r2, [r3, #2]
 8002b6a:	e000      	b.n	8002b6e <dataPacketRxSetCommand+0x2a>
		return;
 8002b6c:	bf00      	nop
}
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <dataPacketRxGetCommand>:

uint8_t dataPacketRxGetCommand(DataPacketRx *dataPacketRx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	return dataPacketRx->command;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	789b      	ldrb	r3, [r3, #2]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <dataPacketRxSetPayloadData>:

void dataPacketRxSetPayloadData(DataPacketRx *dataPacketRx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	71fb      	strb	r3, [r7, #7]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	memcpy(dataPacketRx->payloadData, payloadData, payloadDataLength);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	79fa      	ldrb	r2, [r7, #7]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f003 fe92 	bl	80068d8 <memcpy>
	dataPacketRx->payloadDataLength = payloadDataLength;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	79fa      	ldrb	r2, [r7, #7]
 8002bb8:	70da      	strb	r2, [r3, #3]
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <dataPacketRxGetPayloadData>:

uint8_t *dataPacketRxGetPayloadData(DataPacketRx *dataPacketRx)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadData;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3304      	adds	r3, #4
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <dataPacketRxGetPayloadDataLength>:

uint8_t dataPacketRxGetPayloadDataLength(DataPacketRx *dataPacketRx)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadDataLength;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	78db      	ldrb	r3, [r3, #3]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <dataPacketRxGetDataPacketStatus>:
{
	return dataPacketRx->dataPacketLength;
}

DataPacketRxStatus dataPacketRxGetDataPacketStatus(DataPacketRx *dataPacketRx)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
	return dataPacketRx->dataPacketRxStatus;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <dataPacketTxInit>:
 */

#include "dataPacketTx.h"

void dataPacketTxInit(DataPacketTx *dataPacketTx, uint8_t start_1, uint8_t start_2)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	70fb      	strb	r3, [r7, #3]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	70bb      	strb	r3, [r7, #2]
	dataPacketTx->start_1 = start_1;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	701a      	strb	r2, [r3, #0]
	dataPacketTx->start_2 = start_2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	78ba      	ldrb	r2, [r7, #2]
 8002c26:	705a      	strb	r2, [r3, #1]
	dataPacketTx->command = 0x00;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	709a      	strb	r2, [r3, #2]
	dataPacketTx->payloadDataLength = 0x00;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	70da      	strb	r2, [r3, #3]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	2232      	movs	r2, #50	; 0x32
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 fe59 	bl	80068f4 <memset>
	dataPacketTx->crc8 = 0x00;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3337      	adds	r3, #55	; 0x37
 8002c4e:	2237      	movs	r2, #55	; 0x37
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 fe4e 	bl	80068f4 <memset>
	dataPacketTx->dataPacketLength = 0x00;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <dataPacketTxMount>:

void dataPacketTxMount(DataPacketTx *dataPacketTx)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacket[0] = dataPacketTx->start_1;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketTx->dataPacket[1] = dataPacketTx->start_2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	785a      	ldrb	r2, [r3, #1]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dataPacketTx->dataPacket[2] = dataPacketTx->command;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	789a      	ldrb	r2, [r3, #2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dataPacketTx->dataPacket[3] = dataPacketTx->payloadDataLength;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	78da      	ldrb	r2, [r3, #3]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	memcpy(dataPacketTx->dataPacket + 4, dataPacketTx->payloadData, dataPacketTx->payloadDataLength);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3337      	adds	r3, #55	; 0x37
 8002ca4:	1d18      	adds	r0, r3, #4
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	1d19      	adds	r1, r3, #4
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	78db      	ldrb	r3, [r3, #3]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f003 fe12 	bl	80068d8 <memcpy>
	dataPacketTx->dataPacketLength = dataPacketTx->payloadDataLength + 4 + 1;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	78db      	ldrb	r3, [r3, #3]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3305      	adds	r3, #5
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = genCrc(dataPacketTx->dataPacket, dataPacketTx->dataPacketLength - 1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f7ff fd87 	bl	80027ea <genCrc>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	461a      	mov	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->dataPacket[dataPacketTx->payloadDataLength + 4] = dataPacketTx->crc8;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	78db      	ldrb	r3, [r3, #3]
 8002cea:	3304      	adds	r3, #4
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	f892 1036 	ldrb.w	r1, [r2, #54]	; 0x36
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	460a      	mov	r2, r1
 8002cf8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketTx->dataPacketTxStatus = VALID_TX_DATA_PACKET;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <dataPacketTxUartSend>:

void dataPacketTxUartSend(DataPacketTx *dataPacketTx, UART_HandleTypeDef huart)
{
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	f107 0014 	add.w	r0, r7, #20
 8002d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (dataPacketTx->dataPacketTxStatus == VALID_TX_DATA_PACKET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d10b      	bne.n	8002d40 <dataPacketTxUartSend+0x34>
	{
		HAL_UART_Transmit(&huart, dataPacketTx->dataPacket, dataPacketTx->dataPacketLength, HAL_MAX_DELAY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8002d34:	f107 0014 	add.w	r0, r7, #20
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3c:	f002 fb51 	bl	80053e2 <HAL_UART_Transmit>
	}
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d4a:	b004      	add	sp, #16
 8002d4c:	4770      	bx	lr

08002d4e <dataPacketTxClear>:

void dataPacketTxClear(DataPacketTx *dataPacketTx)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	dataPacketTx->dataPacketLength = 0;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = 0x00;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->command = 0x00;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3337      	adds	r3, #55	; 0x37
 8002d78:	2237      	movs	r2, #55	; 0x37
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 fdb9 	bl	80068f4 <memset>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <dataPacketTxPayloadDataClear>:

void dataPacketTxPayloadDataClear(DataPacketTx *dataPacketTx)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	dataPacketTx->dataPacketLength = 0;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = 0x00;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->command = 0x00;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3304      	adds	r3, #4
 8002db4:	2232      	movs	r2, #50	; 0x32
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 fd9b 	bl	80068f4 <memset>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <dataPacketTxSetCommand>:

void dataPacketTxSetCommand(DataPacketTx *dataPacketTx, uint8_t command)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	70fb      	strb	r3, [r7, #3]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	if ((command < 0x01) || (command > 0xFE))
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d006      	beq.n	8002dee <dataPacketTxSetCommand+0x28>
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	2bff      	cmp	r3, #255	; 0xff
 8002de4:	d003      	beq.n	8002dee <dataPacketTxSetCommand+0x28>
	{
		return;
	}

	dataPacketTx->command = command;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	709a      	strb	r2, [r3, #2]
 8002dec:	e000      	b.n	8002df0 <dataPacketTxSetCommand+0x2a>
		return;
 8002dee:	bf00      	nop
}
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <dataPacketTxSetPayloadData>:
{
	return dataPacketTx->command;
}

void dataPacketTxSetPayloadData(DataPacketTx *dataPacketTx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71fb      	strb	r3, [r7, #7]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	memcpy(dataPacketTx->payloadData, payloadData, payloadDataLength);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3304      	adds	r3, #4
 8002e14:	79fa      	ldrb	r2, [r7, #7]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 fd5d 	bl	80068d8 <memcpy>
	dataPacketTx->payloadDataLength = payloadDataLength;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	79fa      	ldrb	r2, [r7, #7]
 8002e22:	70da      	strb	r2, [r3, #3]
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e30:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <HAL_Init+0x40>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0d      	ldr	r2, [pc, #52]	; (8002e6c <HAL_Init+0x40>)
 8002e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_Init+0x40>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <HAL_Init+0x40>)
 8002e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <HAL_Init+0x40>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a07      	ldr	r2, [pc, #28]	; (8002e6c <HAL_Init+0x40>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e54:	2003      	movs	r0, #3
 8002e56:	f000 fd3b 	bl	80038d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e5a:	200f      	movs	r0, #15
 8002e5c:	f000 f808 	bl	8002e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e60:	f7ff faec 	bl	800243c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023c00 	.word	0x40023c00

08002e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_InitTick+0x54>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_InitTick+0x58>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	4619      	mov	r1, r3
 8002e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fd53 	bl	800393a <HAL_SYSTICK_Config>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00e      	b.n	8002ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b0f      	cmp	r3, #15
 8002ea2:	d80a      	bhi.n	8002eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	f000 fd1b 	bl	80038e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eb0:	4a06      	ldr	r2, [pc, #24]	; (8002ecc <HAL_InitTick+0x5c>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	20000008 	.word	0x20000008
 8002ecc:	20000004 	.word	0x20000004

08002ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <HAL_IncTick+0x20>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_IncTick+0x24>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4413      	add	r3, r2
 8002ee0:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <HAL_IncTick+0x24>)
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20000008 	.word	0x20000008
 8002ef4:	20000838 	.word	0x20000838

08002ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return uwTick;
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <HAL_GetTick+0x14>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000838 	.word	0x20000838

08002f10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e033      	b.n	8002f8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff faac 	bl	800248c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f56:	f023 0302 	bic.w	r3, r3, #2
 8002f5a:	f043 0202 	orr.w	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fae8 	bl	8003538 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f7e:	e001      	b.n	8002f84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_ADC_Start+0x1a>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e0b2      	b.n	8003118 <HAL_ADC_Start+0x180>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d018      	beq.n	8002ffa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fd8:	4b52      	ldr	r3, [pc, #328]	; (8003124 <HAL_ADC_Start+0x18c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	; (8003128 <HAL_ADC_Start+0x190>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	0c9a      	lsrs	r2, r3, #18
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fec:	e002      	b.n	8002ff4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f9      	bne.n	8002fee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d17a      	bne.n	80030fe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003032:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003046:	d106      	bne.n	8003056 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304c:	f023 0206 	bic.w	r2, r3, #6
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
 8003054:	e002      	b.n	800305c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003064:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_ADC_Start+0x194>)
 8003066:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003070:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 031f 	and.w	r3, r3, #31
 800307a:	2b00      	cmp	r3, #0
 800307c:	d12a      	bne.n	80030d4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a2b      	ldr	r2, [pc, #172]	; (8003130 <HAL_ADC_Start+0x198>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d015      	beq.n	80030b4 <HAL_ADC_Start+0x11c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a29      	ldr	r2, [pc, #164]	; (8003134 <HAL_ADC_Start+0x19c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d105      	bne.n	800309e <HAL_ADC_Start+0x106>
 8003092:	4b26      	ldr	r3, [pc, #152]	; (800312c <HAL_ADC_Start+0x194>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a25      	ldr	r2, [pc, #148]	; (8003138 <HAL_ADC_Start+0x1a0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d136      	bne.n	8003116 <HAL_ADC_Start+0x17e>
 80030a8:	4b20      	ldr	r3, [pc, #128]	; (800312c <HAL_ADC_Start+0x194>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d130      	bne.n	8003116 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d129      	bne.n	8003116 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	e020      	b.n	8003116 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a15      	ldr	r2, [pc, #84]	; (8003130 <HAL_ADC_Start+0x198>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d11b      	bne.n	8003116 <HAL_ADC_Start+0x17e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d114      	bne.n	8003116 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	e00b      	b.n	8003116 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f043 0210 	orr.w	r2, r3, #16
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	20000000 	.word	0x20000000
 8003128:	431bde83 	.word	0x431bde83
 800312c:	40012300 	.word	0x40012300
 8003130:	40012000 	.word	0x40012000
 8003134:	40012100 	.word	0x40012100
 8003138:	40012200 	.word	0x40012200

0800313c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_ADC_Stop+0x16>
 800314e:	2302      	movs	r3, #2
 8003150:	e021      	b.n	8003196 <HAL_ADC_Stop+0x5a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0201 	bic.w	r2, r2, #1
 8003168:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	f043 0201 	orr.w	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031be:	d113      	bne.n	80031e8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ce:	d10b      	bne.n	80031e8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e063      	b.n	80032b0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80031e8:	f7ff fe86 	bl	8002ef8 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031ee:	e021      	b.n	8003234 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d01d      	beq.n	8003234 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <HAL_ADC_PollForConversion+0x6c>
 80031fe:	f7ff fe7b 	bl	8002ef8 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d212      	bcs.n	8003234 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b02      	cmp	r3, #2
 800321a:	d00b      	beq.n	8003234 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e03d      	b.n	80032b0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d1d6      	bne.n	80031f0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f06f 0212 	mvn.w	r2, #18
 800324a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d123      	bne.n	80032ae <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11f      	bne.n	80032ae <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003278:	2b00      	cmp	r3, #0
 800327a:	d006      	beq.n	800328a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003286:	2b00      	cmp	r3, #0
 8003288:	d111      	bne.n	80032ae <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d101      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x1c>
 80032ec:	2302      	movs	r3, #2
 80032ee:	e113      	b.n	8003518 <HAL_ADC_ConfigChannel+0x244>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b09      	cmp	r3, #9
 80032fe:	d925      	bls.n	800334c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68d9      	ldr	r1, [r3, #12]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	b29b      	uxth	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	3b1e      	subs	r3, #30
 8003316:	2207      	movs	r2, #7
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43da      	mvns	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	400a      	ands	r2, r1
 8003324:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68d9      	ldr	r1, [r3, #12]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	4618      	mov	r0, r3
 8003338:	4603      	mov	r3, r0
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4403      	add	r3, r0
 800333e:	3b1e      	subs	r3, #30
 8003340:	409a      	lsls	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	e022      	b.n	8003392 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6919      	ldr	r1, [r3, #16]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	2207      	movs	r2, #7
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43da      	mvns	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	400a      	ands	r2, r1
 800336e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6919      	ldr	r1, [r3, #16]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	4618      	mov	r0, r3
 8003382:	4603      	mov	r3, r0
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4403      	add	r3, r0
 8003388:	409a      	lsls	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b06      	cmp	r3, #6
 8003398:	d824      	bhi.n	80033e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	3b05      	subs	r3, #5
 80033ac:	221f      	movs	r2, #31
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	400a      	ands	r2, r1
 80033ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	4618      	mov	r0, r3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	3b05      	subs	r3, #5
 80033d6:	fa00 f203 	lsl.w	r2, r0, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	635a      	str	r2, [r3, #52]	; 0x34
 80033e2:	e04c      	b.n	800347e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d824      	bhi.n	8003436 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	3b23      	subs	r3, #35	; 0x23
 80033fe:	221f      	movs	r2, #31
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43da      	mvns	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	400a      	ands	r2, r1
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	4618      	mov	r0, r3
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	3b23      	subs	r3, #35	; 0x23
 8003428:	fa00 f203 	lsl.w	r2, r0, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
 8003434:	e023      	b.n	800347e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	3b41      	subs	r3, #65	; 0x41
 8003448:	221f      	movs	r2, #31
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43da      	mvns	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	400a      	ands	r2, r1
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	3b41      	subs	r3, #65	; 0x41
 8003472:	fa00 f203 	lsl.w	r2, r0, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800347e:	4b29      	ldr	r3, [pc, #164]	; (8003524 <HAL_ADC_ConfigChannel+0x250>)
 8003480:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a28      	ldr	r2, [pc, #160]	; (8003528 <HAL_ADC_ConfigChannel+0x254>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d10f      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x1d8>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b12      	cmp	r3, #18
 8003492:	d10b      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_ADC_ConfigChannel+0x254>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d12b      	bne.n	800350e <HAL_ADC_ConfigChannel+0x23a>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1c      	ldr	r2, [pc, #112]	; (800352c <HAL_ADC_ConfigChannel+0x258>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <HAL_ADC_ConfigChannel+0x1f4>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b11      	cmp	r3, #17
 80034c6:	d122      	bne.n	800350e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a11      	ldr	r2, [pc, #68]	; (800352c <HAL_ADC_ConfigChannel+0x258>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d111      	bne.n	800350e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <HAL_ADC_ConfigChannel+0x25c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a11      	ldr	r2, [pc, #68]	; (8003534 <HAL_ADC_ConfigChannel+0x260>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	0c9a      	lsrs	r2, r3, #18
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003500:	e002      	b.n	8003508 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	3b01      	subs	r3, #1
 8003506:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f9      	bne.n	8003502 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40012300 	.word	0x40012300
 8003528:	40012000 	.word	0x40012000
 800352c:	10000012 	.word	0x10000012
 8003530:	20000000 	.word	0x20000000
 8003534:	431bde83 	.word	0x431bde83

08003538 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003540:	4b79      	ldr	r3, [pc, #484]	; (8003728 <ADC_Init+0x1f0>)
 8003542:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800356c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	021a      	lsls	r2, r3, #8
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6899      	ldr	r1, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	4a58      	ldr	r2, [pc, #352]	; (800372c <ADC_Init+0x1f4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d022      	beq.n	8003616 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6899      	ldr	r1, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6899      	ldr	r1, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	e00f      	b.n	8003636 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003634:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0202 	bic.w	r2, r2, #2
 8003644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6899      	ldr	r1, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7e1b      	ldrb	r3, [r3, #24]
 8003650:	005a      	lsls	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01b      	beq.n	800369c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003672:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003682:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6859      	ldr	r1, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	3b01      	subs	r3, #1
 8003690:	035a      	lsls	r2, r3, #13
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	e007      	b.n	80036ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	051a      	lsls	r2, r3, #20
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6899      	ldr	r1, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ee:	025a      	lsls	r2, r3, #9
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6899      	ldr	r1, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	029a      	lsls	r2, r3, #10
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	609a      	str	r2, [r3, #8]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40012300 	.word	0x40012300
 800372c:	0f000001 	.word	0x0f000001

08003730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003740:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <__NVIC_SetPriorityGrouping+0x44>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800374c:	4013      	ands	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800375c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003762:	4a04      	ldr	r2, [pc, #16]	; (8003774 <__NVIC_SetPriorityGrouping+0x44>)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	60d3      	str	r3, [r2, #12]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800377c:	4b04      	ldr	r3, [pc, #16]	; (8003790 <__NVIC_GetPriorityGrouping+0x18>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	0a1b      	lsrs	r3, r3, #8
 8003782:	f003 0307 	and.w	r3, r3, #7
}
 8003786:	4618      	mov	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	db0b      	blt.n	80037be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	f003 021f 	and.w	r2, r3, #31
 80037ac:	4907      	ldr	r1, [pc, #28]	; (80037cc <__NVIC_EnableIRQ+0x38>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	2001      	movs	r0, #1
 80037b6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000e100 	.word	0xe000e100

080037d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	6039      	str	r1, [r7, #0]
 80037da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	db0a      	blt.n	80037fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	490c      	ldr	r1, [pc, #48]	; (800381c <__NVIC_SetPriority+0x4c>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	0112      	lsls	r2, r2, #4
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	440b      	add	r3, r1
 80037f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037f8:	e00a      	b.n	8003810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4908      	ldr	r1, [pc, #32]	; (8003820 <__NVIC_SetPriority+0x50>)
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	3b04      	subs	r3, #4
 8003808:	0112      	lsls	r2, r2, #4
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	440b      	add	r3, r1
 800380e:	761a      	strb	r2, [r3, #24]
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	e000e100 	.word	0xe000e100
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003824:	b480      	push	{r7}
 8003826:	b089      	sub	sp, #36	; 0x24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f1c3 0307 	rsb	r3, r3, #7
 800383e:	2b04      	cmp	r3, #4
 8003840:	bf28      	it	cs
 8003842:	2304      	movcs	r3, #4
 8003844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3304      	adds	r3, #4
 800384a:	2b06      	cmp	r3, #6
 800384c:	d902      	bls.n	8003854 <NVIC_EncodePriority+0x30>
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3b03      	subs	r3, #3
 8003852:	e000      	b.n	8003856 <NVIC_EncodePriority+0x32>
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003858:	f04f 32ff 	mov.w	r2, #4294967295
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	401a      	ands	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800386c:	f04f 31ff 	mov.w	r1, #4294967295
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	fa01 f303 	lsl.w	r3, r1, r3
 8003876:	43d9      	mvns	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	4313      	orrs	r3, r2
         );
}
 800387e:	4618      	mov	r0, r3
 8003880:	3724      	adds	r7, #36	; 0x24
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800389c:	d301      	bcc.n	80038a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800389e:	2301      	movs	r3, #1
 80038a0:	e00f      	b.n	80038c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038a2:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <SysTick_Config+0x40>)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038aa:	210f      	movs	r1, #15
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	f7ff ff8e 	bl	80037d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <SysTick_Config+0x40>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ba:	4b04      	ldr	r3, [pc, #16]	; (80038cc <SysTick_Config+0x40>)
 80038bc:	2207      	movs	r2, #7
 80038be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	e000e010 	.word	0xe000e010

080038d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ff29 	bl	8003730 <__NVIC_SetPriorityGrouping>
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b086      	sub	sp, #24
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4603      	mov	r3, r0
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038f8:	f7ff ff3e 	bl	8003778 <__NVIC_GetPriorityGrouping>
 80038fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68b9      	ldr	r1, [r7, #8]
 8003902:	6978      	ldr	r0, [r7, #20]
 8003904:	f7ff ff8e 	bl	8003824 <NVIC_EncodePriority>
 8003908:	4602      	mov	r2, r0
 800390a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff5d 	bl	80037d0 <__NVIC_SetPriority>
}
 8003916:	bf00      	nop
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	4603      	mov	r3, r0
 8003926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff31 	bl	8003794 <__NVIC_EnableIRQ>
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ffa2 	bl	800388c <SysTick_Config>
 8003948:	4603      	mov	r3, r0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e014      	b.n	800398e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	791b      	ldrb	r3, [r3, #4]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d105      	bne.n	800397a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fe fdcd 	bl	8002514 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2202      	movs	r2, #2
 800397e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	795b      	ldrb	r3, [r3, #5]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_DAC_Start+0x16>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e040      	b.n	8003a2e <HAL_DAC_Start+0x98>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6819      	ldr	r1, [r3, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2201      	movs	r2, #1
 80039c6:	409a      	lsls	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80039e0:	2b3c      	cmp	r3, #60	; 0x3c
 80039e2:	d11d      	bne.n	8003a20 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	e014      	b.n	8003a20 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	213c      	movs	r1, #60	; 0x3c
 8003a08:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d107      	bne.n	8003a20 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0202 	orr.w	r2, r2, #2
 8003a1e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b087      	sub	sp, #28
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
 8003a42:	60b9      	str	r1, [r7, #8]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d105      	bne.n	8003a64 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3308      	adds	r3, #8
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	e004      	b.n	8003a6e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	3314      	adds	r3, #20
 8003a6c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	461a      	mov	r2, r3
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	795b      	ldrb	r3, [r3, #5]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_DAC_ConfigChannel+0x18>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e03c      	b.n	8003b16 <HAL_DAC_ConfigChannel+0x92>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f003 0310 	and.w	r3, r3, #16
 8003ab6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6819      	ldr	r1, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	22c0      	movs	r2, #192	; 0xc0
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	400a      	ands	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b30:	f7ff f9e2 	bl	8002ef8 <HAL_GetTick>
 8003b34:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d008      	beq.n	8003b54 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2280      	movs	r2, #128	; 0x80
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e052      	b.n	8003bfa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0216 	bic.w	r2, r2, #22
 8003b62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b72:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d103      	bne.n	8003b84 <HAL_DMA_Abort+0x62>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0208 	bic.w	r2, r2, #8
 8003b92:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ba4:	e013      	b.n	8003bce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ba6:	f7ff f9a7 	bl	8002ef8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	d90c      	bls.n	8003bce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e015      	b.n	8003bfa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e4      	bne.n	8003ba6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be0:	223f      	movs	r2, #63	; 0x3f
 8003be2:	409a      	lsls	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d004      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2280      	movs	r2, #128	; 0x80
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e00c      	b.n	8003c3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2205      	movs	r2, #5
 8003c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b089      	sub	sp, #36	; 0x24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	e165      	b.n	8003f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c64:	2201      	movs	r2, #1
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	f040 8154 	bne.w	8003f2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d005      	beq.n	8003c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d130      	bne.n	8003cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f003 0201 	and.w	r2, r3, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d017      	beq.n	8003d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	2203      	movs	r2, #3
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d123      	bne.n	8003d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	08da      	lsrs	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3208      	adds	r2, #8
 8003d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	220f      	movs	r2, #15
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	08da      	lsrs	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3208      	adds	r2, #8
 8003d86:	69b9      	ldr	r1, [r7, #24]
 8003d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0203 	and.w	r2, r3, #3
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80ae 	beq.w	8003f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	4b5d      	ldr	r3, [pc, #372]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	4a5c      	ldr	r2, [pc, #368]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dde:	4b5a      	ldr	r3, [pc, #360]	; (8003f48 <HAL_GPIO_Init+0x300>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dea:	4a58      	ldr	r2, [pc, #352]	; (8003f4c <HAL_GPIO_Init+0x304>)
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	089b      	lsrs	r3, r3, #2
 8003df0:	3302      	adds	r3, #2
 8003df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	220f      	movs	r2, #15
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a4f      	ldr	r2, [pc, #316]	; (8003f50 <HAL_GPIO_Init+0x308>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d025      	beq.n	8003e62 <HAL_GPIO_Init+0x21a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a4e      	ldr	r2, [pc, #312]	; (8003f54 <HAL_GPIO_Init+0x30c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01f      	beq.n	8003e5e <HAL_GPIO_Init+0x216>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a4d      	ldr	r2, [pc, #308]	; (8003f58 <HAL_GPIO_Init+0x310>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d019      	beq.n	8003e5a <HAL_GPIO_Init+0x212>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a4c      	ldr	r2, [pc, #304]	; (8003f5c <HAL_GPIO_Init+0x314>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <HAL_GPIO_Init+0x20e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a4b      	ldr	r2, [pc, #300]	; (8003f60 <HAL_GPIO_Init+0x318>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00d      	beq.n	8003e52 <HAL_GPIO_Init+0x20a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a4a      	ldr	r2, [pc, #296]	; (8003f64 <HAL_GPIO_Init+0x31c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d007      	beq.n	8003e4e <HAL_GPIO_Init+0x206>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a49      	ldr	r2, [pc, #292]	; (8003f68 <HAL_GPIO_Init+0x320>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d101      	bne.n	8003e4a <HAL_GPIO_Init+0x202>
 8003e46:	2306      	movs	r3, #6
 8003e48:	e00c      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e4a:	2307      	movs	r3, #7
 8003e4c:	e00a      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e4e:	2305      	movs	r3, #5
 8003e50:	e008      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e52:	2304      	movs	r3, #4
 8003e54:	e006      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e56:	2303      	movs	r3, #3
 8003e58:	e004      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e002      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <HAL_GPIO_Init+0x21c>
 8003e62:	2300      	movs	r3, #0
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	f002 0203 	and.w	r2, r2, #3
 8003e6a:	0092      	lsls	r2, r2, #2
 8003e6c:	4093      	lsls	r3, r2
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e74:	4935      	ldr	r1, [pc, #212]	; (8003f4c <HAL_GPIO_Init+0x304>)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e82:	4b3a      	ldr	r3, [pc, #232]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ea6:	4a31      	ldr	r2, [pc, #196]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eac:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ed0:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ed6:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003efa:	4a1c      	ldr	r2, [pc, #112]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f00:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f24:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <HAL_GPIO_Init+0x324>)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	2b0f      	cmp	r3, #15
 8003f34:	f67f ae96 	bls.w	8003c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	3724      	adds	r7, #36	; 0x24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	40020000 	.word	0x40020000
 8003f54:	40020400 	.word	0x40020400
 8003f58:	40020800 	.word	0x40020800
 8003f5c:	40020c00 	.word	0x40020c00
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40021400 	.word	0x40021400
 8003f68:	40021800 	.word	0x40021800
 8003f6c:	40013c00 	.word	0x40013c00

08003f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	807b      	strh	r3, [r7, #2]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f80:	787b      	ldrb	r3, [r7, #1]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f86:	887a      	ldrh	r2, [r7, #2]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f8c:	e003      	b.n	8003f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f8e:	887b      	ldrh	r3, [r7, #2]
 8003f90:	041a      	lsls	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	619a      	str	r2, [r3, #24]
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b085      	sub	sp, #20
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	460b      	mov	r3, r1
 8003fac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fb4:	887a      	ldrh	r2, [r7, #2]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	041a      	lsls	r2, r3, #16
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	43d9      	mvns	r1, r3
 8003fc0:	887b      	ldrh	r3, [r7, #2]
 8003fc2:	400b      	ands	r3, r1
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	619a      	str	r2, [r3, #24]
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	4b20      	ldr	r3, [pc, #128]	; (8004068 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	; (800406c <HAL_PWREx_EnableOverDrive+0x94>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004004:	f7fe ff78 	bl	8002ef8 <HAL_GetTick>
 8004008:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800400a:	e009      	b.n	8004020 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800400c:	f7fe ff74 	bl	8002ef8 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800401a:	d901      	bls.n	8004020 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e01f      	b.n	8004060 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004020:	4b13      	ldr	r3, [pc, #76]	; (8004070 <HAL_PWREx_EnableOverDrive+0x98>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402c:	d1ee      	bne.n	800400c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004034:	f7fe ff60 	bl	8002ef8 <HAL_GetTick>
 8004038:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800403a:	e009      	b.n	8004050 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800403c:	f7fe ff5c 	bl	8002ef8 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800404a:	d901      	bls.n	8004050 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e007      	b.n	8004060 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004050:	4b07      	ldr	r3, [pc, #28]	; (8004070 <HAL_PWREx_EnableOverDrive+0x98>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800405c:	d1ee      	bne.n	800403c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40023800 	.word	0x40023800
 800406c:	420e0040 	.word	0x420e0040
 8004070:	40007000 	.word	0x40007000
 8004074:	420e0044 	.word	0x420e0044

08004078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0cc      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800408c:	4b68      	ldr	r3, [pc, #416]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d90c      	bls.n	80040b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b65      	ldr	r3, [pc, #404]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a2:	4b63      	ldr	r3, [pc, #396]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0b8      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040cc:	4b59      	ldr	r3, [pc, #356]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4a58      	ldr	r2, [pc, #352]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e4:	4b53      	ldr	r3, [pc, #332]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4a52      	ldr	r2, [pc, #328]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f0:	4b50      	ldr	r3, [pc, #320]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	494d      	ldr	r1, [pc, #308]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d044      	beq.n	8004198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d107      	bne.n	8004126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004116:	4b47      	ldr	r3, [pc, #284]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d119      	bne.n	8004156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e07f      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d003      	beq.n	8004136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004132:	2b03      	cmp	r3, #3
 8004134:	d107      	bne.n	8004146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	4b3f      	ldr	r3, [pc, #252]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e06f      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004146:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e067      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004156:	4b37      	ldr	r3, [pc, #220]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f023 0203 	bic.w	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	4934      	ldr	r1, [pc, #208]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	4313      	orrs	r3, r2
 8004166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004168:	f7fe fec6 	bl	8002ef8 <HAL_GetTick>
 800416c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416e:	e00a      	b.n	8004186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004170:	f7fe fec2 	bl	8002ef8 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	; 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e04f      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	4b2b      	ldr	r3, [pc, #172]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 020c 	and.w	r2, r3, #12
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	429a      	cmp	r2, r3
 8004196:	d1eb      	bne.n	8004170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004198:	4b25      	ldr	r3, [pc, #148]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d20c      	bcs.n	80041c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e032      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041cc:	4b19      	ldr	r3, [pc, #100]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4916      	ldr	r1, [pc, #88]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	490e      	ldr	r1, [pc, #56]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041fe:	f000 f855 	bl	80042ac <HAL_RCC_GetSysClockFreq>
 8004202:	4602      	mov	r2, r0
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	490a      	ldr	r1, [pc, #40]	; (8004238 <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	5ccb      	ldrb	r3, [r1, r3]
 8004212:	fa22 f303 	lsr.w	r3, r2, r3
 8004216:	4a09      	ldr	r2, [pc, #36]	; (800423c <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <HAL_RCC_ClockConfig+0x1c8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe fe26 	bl	8002e70 <HAL_InitTick>

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40023c00 	.word	0x40023c00
 8004234:	40023800 	.word	0x40023800
 8004238:	0800691c 	.word	0x0800691c
 800423c:	20000000 	.word	0x20000000
 8004240:	20000004 	.word	0x20000004

08004244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004248:	4b03      	ldr	r3, [pc, #12]	; (8004258 <HAL_RCC_GetHCLKFreq+0x14>)
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000000 	.word	0x20000000

0800425c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004260:	f7ff fff0 	bl	8004244 <HAL_RCC_GetHCLKFreq>
 8004264:	4602      	mov	r2, r0
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	0a9b      	lsrs	r3, r3, #10
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	4903      	ldr	r1, [pc, #12]	; (8004280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004272:	5ccb      	ldrb	r3, [r1, r3]
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004278:	4618      	mov	r0, r3
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40023800 	.word	0x40023800
 8004280:	0800692c 	.word	0x0800692c

08004284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004288:	f7ff ffdc 	bl	8004244 <HAL_RCC_GetHCLKFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	0b5b      	lsrs	r3, r3, #13
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	4903      	ldr	r1, [pc, #12]	; (80042a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40023800 	.word	0x40023800
 80042a8:	0800692c 	.word	0x0800692c

080042ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b0:	b0a6      	sub	sp, #152	; 0x98
 80042b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042d2:	4bc8      	ldr	r3, [pc, #800]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b0c      	cmp	r3, #12
 80042dc:	f200 817e 	bhi.w	80045dc <HAL_RCC_GetSysClockFreq+0x330>
 80042e0:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	0800431d 	.word	0x0800431d
 80042ec:	080045dd 	.word	0x080045dd
 80042f0:	080045dd 	.word	0x080045dd
 80042f4:	080045dd 	.word	0x080045dd
 80042f8:	08004325 	.word	0x08004325
 80042fc:	080045dd 	.word	0x080045dd
 8004300:	080045dd 	.word	0x080045dd
 8004304:	080045dd 	.word	0x080045dd
 8004308:	0800432d 	.word	0x0800432d
 800430c:	080045dd 	.word	0x080045dd
 8004310:	080045dd 	.word	0x080045dd
 8004314:	080045dd 	.word	0x080045dd
 8004318:	08004497 	.word	0x08004497
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800431c:	4bb6      	ldr	r3, [pc, #728]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800431e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004322:	e15f      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004324:	4bb5      	ldr	r3, [pc, #724]	; (80045fc <HAL_RCC_GetSysClockFreq+0x350>)
 8004326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800432a:	e15b      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800432c:	4bb1      	ldr	r3, [pc, #708]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x348>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004334:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004338:	4bae      	ldr	r3, [pc, #696]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x348>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d031      	beq.n	80043a8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004344:	4bab      	ldr	r3, [pc, #684]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	099b      	lsrs	r3, r3, #6
 800434a:	2200      	movs	r2, #0
 800434c:	66bb      	str	r3, [r7, #104]	; 0x68
 800434e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004356:	663b      	str	r3, [r7, #96]	; 0x60
 8004358:	2300      	movs	r3, #0
 800435a:	667b      	str	r3, [r7, #100]	; 0x64
 800435c:	4ba7      	ldr	r3, [pc, #668]	; (80045fc <HAL_RCC_GetSysClockFreq+0x350>)
 800435e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004362:	462a      	mov	r2, r5
 8004364:	fb03 f202 	mul.w	r2, r3, r2
 8004368:	2300      	movs	r3, #0
 800436a:	4621      	mov	r1, r4
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	4413      	add	r3, r2
 8004372:	4aa2      	ldr	r2, [pc, #648]	; (80045fc <HAL_RCC_GetSysClockFreq+0x350>)
 8004374:	4621      	mov	r1, r4
 8004376:	fba1 1202 	umull	r1, r2, r1, r2
 800437a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800437c:	460a      	mov	r2, r1
 800437e:	67ba      	str	r2, [r7, #120]	; 0x78
 8004380:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004382:	4413      	add	r3, r2
 8004384:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800438a:	2200      	movs	r2, #0
 800438c:	65bb      	str	r3, [r7, #88]	; 0x58
 800438e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004390:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004394:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004398:	f7fc fb54 	bl	8000a44 <__aeabi_uldivmod>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4613      	mov	r3, r2
 80043a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043a6:	e064      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a8:	4b92      	ldr	r3, [pc, #584]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	099b      	lsrs	r3, r3, #6
 80043ae:	2200      	movs	r2, #0
 80043b0:	653b      	str	r3, [r7, #80]	; 0x50
 80043b2:	657a      	str	r2, [r7, #84]	; 0x54
 80043b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80043bc:	2300      	movs	r3, #0
 80043be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80043c4:	4622      	mov	r2, r4
 80043c6:	462b      	mov	r3, r5
 80043c8:	f04f 0000 	mov.w	r0, #0
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	0159      	lsls	r1, r3, #5
 80043d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043d6:	0150      	lsls	r0, r2, #5
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4621      	mov	r1, r4
 80043de:	1a51      	subs	r1, r2, r1
 80043e0:	6139      	str	r1, [r7, #16]
 80043e2:	4629      	mov	r1, r5
 80043e4:	eb63 0301 	sbc.w	r3, r3, r1
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f6:	4659      	mov	r1, fp
 80043f8:	018b      	lsls	r3, r1, #6
 80043fa:	4651      	mov	r1, sl
 80043fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004400:	4651      	mov	r1, sl
 8004402:	018a      	lsls	r2, r1, #6
 8004404:	4651      	mov	r1, sl
 8004406:	ebb2 0801 	subs.w	r8, r2, r1
 800440a:	4659      	mov	r1, fp
 800440c:	eb63 0901 	sbc.w	r9, r3, r1
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800441c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004420:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004424:	4690      	mov	r8, r2
 8004426:	4699      	mov	r9, r3
 8004428:	4623      	mov	r3, r4
 800442a:	eb18 0303 	adds.w	r3, r8, r3
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	462b      	mov	r3, r5
 8004432:	eb49 0303 	adc.w	r3, r9, r3
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004444:	4629      	mov	r1, r5
 8004446:	028b      	lsls	r3, r1, #10
 8004448:	4621      	mov	r1, r4
 800444a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800444e:	4621      	mov	r1, r4
 8004450:	028a      	lsls	r2, r1, #10
 8004452:	4610      	mov	r0, r2
 8004454:	4619      	mov	r1, r3
 8004456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800445a:	2200      	movs	r2, #0
 800445c:	643b      	str	r3, [r7, #64]	; 0x40
 800445e:	647a      	str	r2, [r7, #68]	; 0x44
 8004460:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004464:	f7fc faee 	bl	8000a44 <__aeabi_uldivmod>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4613      	mov	r3, r2
 800446e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004472:	4b60      	ldr	r3, [pc, #384]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	0c1b      	lsrs	r3, r3, #16
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	3301      	adds	r3, #1
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004484:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004488:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004494:	e0a6      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004496:	4b57      	ldr	r3, [pc, #348]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800449e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a2:	4b54      	ldr	r3, [pc, #336]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d02a      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ae:	4b51      	ldr	r3, [pc, #324]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	2200      	movs	r2, #0
 80044b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044c0:	2100      	movs	r1, #0
 80044c2:	4b4e      	ldr	r3, [pc, #312]	; (80045fc <HAL_RCC_GetSysClockFreq+0x350>)
 80044c4:	fb03 f201 	mul.w	r2, r3, r1
 80044c8:	2300      	movs	r3, #0
 80044ca:	fb00 f303 	mul.w	r3, r0, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	4a4a      	ldr	r2, [pc, #296]	; (80045fc <HAL_RCC_GetSysClockFreq+0x350>)
 80044d2:	fba0 1202 	umull	r1, r2, r0, r2
 80044d6:	677a      	str	r2, [r7, #116]	; 0x74
 80044d8:	460a      	mov	r2, r1
 80044da:	673a      	str	r2, [r7, #112]	; 0x70
 80044dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80044de:	4413      	add	r3, r2
 80044e0:	677b      	str	r3, [r7, #116]	; 0x74
 80044e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e6:	2200      	movs	r2, #0
 80044e8:	633b      	str	r3, [r7, #48]	; 0x30
 80044ea:	637a      	str	r2, [r7, #52]	; 0x34
 80044ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044f0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80044f4:	f7fc faa6 	bl	8000a44 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004502:	e05b      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004504:	4b3b      	ldr	r3, [pc, #236]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x348>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	099b      	lsrs	r3, r3, #6
 800450a:	2200      	movs	r2, #0
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
 800450e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004516:	623b      	str	r3, [r7, #32]
 8004518:	2300      	movs	r3, #0
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
 800451c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004520:	4642      	mov	r2, r8
 8004522:	464b      	mov	r3, r9
 8004524:	f04f 0000 	mov.w	r0, #0
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	0159      	lsls	r1, r3, #5
 800452e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004532:	0150      	lsls	r0, r2, #5
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	4641      	mov	r1, r8
 800453a:	ebb2 0a01 	subs.w	sl, r2, r1
 800453e:	4649      	mov	r1, r9
 8004540:	eb63 0b01 	sbc.w	fp, r3, r1
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004550:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004554:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004558:	ebb2 040a 	subs.w	r4, r2, sl
 800455c:	eb63 050b 	sbc.w	r5, r3, fp
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	00eb      	lsls	r3, r5, #3
 800456a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800456e:	00e2      	lsls	r2, r4, #3
 8004570:	4614      	mov	r4, r2
 8004572:	461d      	mov	r5, r3
 8004574:	4643      	mov	r3, r8
 8004576:	18e3      	adds	r3, r4, r3
 8004578:	603b      	str	r3, [r7, #0]
 800457a:	464b      	mov	r3, r9
 800457c:	eb45 0303 	adc.w	r3, r5, r3
 8004580:	607b      	str	r3, [r7, #4]
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800458e:	4629      	mov	r1, r5
 8004590:	028b      	lsls	r3, r1, #10
 8004592:	4621      	mov	r1, r4
 8004594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004598:	4621      	mov	r1, r4
 800459a:	028a      	lsls	r2, r1, #10
 800459c:	4610      	mov	r0, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045a4:	2200      	movs	r2, #0
 80045a6:	61bb      	str	r3, [r7, #24]
 80045a8:	61fa      	str	r2, [r7, #28]
 80045aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ae:	f7fc fa49 	bl	8000a44 <__aeabi_uldivmod>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4613      	mov	r3, r2
 80045b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80045bc:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x348>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	0f1b      	lsrs	r3, r3, #28
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80045ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80045da:	e003      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80045de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80045e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3798      	adds	r7, #152	; 0x98
 80045ec:	46bd      	mov	sp, r7
 80045ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	017d7840 	.word	0x017d7840

08004600 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e28d      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 8083 	beq.w	8004726 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004620:	4b94      	ldr	r3, [pc, #592]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 030c 	and.w	r3, r3, #12
 8004628:	2b04      	cmp	r3, #4
 800462a:	d019      	beq.n	8004660 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800462c:	4b91      	ldr	r3, [pc, #580]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004634:	2b08      	cmp	r3, #8
 8004636:	d106      	bne.n	8004646 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004638:	4b8e      	ldr	r3, [pc, #568]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004644:	d00c      	beq.n	8004660 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004646:	4b8b      	ldr	r3, [pc, #556]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d112      	bne.n	8004678 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004652:	4b88      	ldr	r3, [pc, #544]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800465e:	d10b      	bne.n	8004678 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	4b84      	ldr	r3, [pc, #528]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d05b      	beq.n	8004724 <HAL_RCC_OscConfig+0x124>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d157      	bne.n	8004724 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e25a      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004680:	d106      	bne.n	8004690 <HAL_RCC_OscConfig+0x90>
 8004682:	4b7c      	ldr	r3, [pc, #496]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a7b      	ldr	r2, [pc, #492]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e01d      	b.n	80046cc <HAL_RCC_OscConfig+0xcc>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0xb4>
 800469a:	4b76      	ldr	r3, [pc, #472]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a75      	ldr	r2, [pc, #468]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 80046a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	4b73      	ldr	r3, [pc, #460]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a72      	ldr	r2, [pc, #456]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_OscConfig+0xcc>
 80046b4:	4b6f      	ldr	r3, [pc, #444]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a6e      	ldr	r2, [pc, #440]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 80046ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b6c      	ldr	r3, [pc, #432]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a6b      	ldr	r2, [pc, #428]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 80046c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d013      	beq.n	80046fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fe fc10 	bl	8002ef8 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046dc:	f7fe fc0c 	bl	8002ef8 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b64      	cmp	r3, #100	; 0x64
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e21f      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ee:	4b61      	ldr	r3, [pc, #388]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0xdc>
 80046fa:	e014      	b.n	8004726 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fe fbfc 	bl	8002ef8 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004704:	f7fe fbf8 	bl	8002ef8 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e20b      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004716:	4b57      	ldr	r3, [pc, #348]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x104>
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d06f      	beq.n	8004812 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004732:	4b50      	ldr	r3, [pc, #320]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b00      	cmp	r3, #0
 800473c:	d017      	beq.n	800476e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800473e:	4b4d      	ldr	r3, [pc, #308]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004746:	2b08      	cmp	r3, #8
 8004748:	d105      	bne.n	8004756 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800474a:	4b4a      	ldr	r3, [pc, #296]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00b      	beq.n	800476e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004756:	4b47      	ldr	r3, [pc, #284]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800475e:	2b0c      	cmp	r3, #12
 8004760:	d11c      	bne.n	800479c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004762:	4b44      	ldr	r3, [pc, #272]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d116      	bne.n	800479c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476e:	4b41      	ldr	r3, [pc, #260]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_RCC_OscConfig+0x186>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d001      	beq.n	8004786 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e1d3      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004786:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4937      	ldr	r1, [pc, #220]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479a:	e03a      	b.n	8004812 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d020      	beq.n	80047e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a4:	4b34      	ldr	r3, [pc, #208]	; (8004878 <HAL_RCC_OscConfig+0x278>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7fe fba5 	bl	8002ef8 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b2:	f7fe fba1 	bl	8002ef8 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e1b4      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c4:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d0:	4b28      	ldr	r3, [pc, #160]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4925      	ldr	r1, [pc, #148]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]
 80047e4:	e015      	b.n	8004812 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e6:	4b24      	ldr	r3, [pc, #144]	; (8004878 <HAL_RCC_OscConfig+0x278>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fe fb84 	bl	8002ef8 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f4:	f7fe fb80 	bl	8002ef8 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e193      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004806:	4b1b      	ldr	r3, [pc, #108]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d036      	beq.n	800488c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d016      	beq.n	8004854 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004826:	4b15      	ldr	r3, [pc, #84]	; (800487c <HAL_RCC_OscConfig+0x27c>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482c:	f7fe fb64 	bl	8002ef8 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004834:	f7fe fb60 	bl	8002ef8 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e173      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCC_OscConfig+0x274>)
 8004848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCC_OscConfig+0x234>
 8004852:	e01b      	b.n	800488c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004854:	4b09      	ldr	r3, [pc, #36]	; (800487c <HAL_RCC_OscConfig+0x27c>)
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485a:	f7fe fb4d 	bl	8002ef8 <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004860:	e00e      	b.n	8004880 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004862:	f7fe fb49 	bl	8002ef8 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d907      	bls.n	8004880 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e15c      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
 8004874:	40023800 	.word	0x40023800
 8004878:	42470000 	.word	0x42470000
 800487c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004880:	4b8a      	ldr	r3, [pc, #552]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1ea      	bne.n	8004862 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8097 	beq.w	80049c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800489e:	4b83      	ldr	r3, [pc, #524]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10f      	bne.n	80048ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	4b7f      	ldr	r3, [pc, #508]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a7e      	ldr	r2, [pc, #504]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b7c      	ldr	r3, [pc, #496]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	60bb      	str	r3, [r7, #8]
 80048c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c6:	2301      	movs	r3, #1
 80048c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ca:	4b79      	ldr	r3, [pc, #484]	; (8004ab0 <HAL_RCC_OscConfig+0x4b0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d118      	bne.n	8004908 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d6:	4b76      	ldr	r3, [pc, #472]	; (8004ab0 <HAL_RCC_OscConfig+0x4b0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a75      	ldr	r2, [pc, #468]	; (8004ab0 <HAL_RCC_OscConfig+0x4b0>)
 80048dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e2:	f7fe fb09 	bl	8002ef8 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ea:	f7fe fb05 	bl	8002ef8 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e118      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fc:	4b6c      	ldr	r3, [pc, #432]	; (8004ab0 <HAL_RCC_OscConfig+0x4b0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d106      	bne.n	800491e <HAL_RCC_OscConfig+0x31e>
 8004910:	4b66      	ldr	r3, [pc, #408]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	4a65      	ldr	r2, [pc, #404]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	6713      	str	r3, [r2, #112]	; 0x70
 800491c:	e01c      	b.n	8004958 <HAL_RCC_OscConfig+0x358>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b05      	cmp	r3, #5
 8004924:	d10c      	bne.n	8004940 <HAL_RCC_OscConfig+0x340>
 8004926:	4b61      	ldr	r3, [pc, #388]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492a:	4a60      	ldr	r2, [pc, #384]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 800492c:	f043 0304 	orr.w	r3, r3, #4
 8004930:	6713      	str	r3, [r2, #112]	; 0x70
 8004932:	4b5e      	ldr	r3, [pc, #376]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	4a5d      	ldr	r2, [pc, #372]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	6713      	str	r3, [r2, #112]	; 0x70
 800493e:	e00b      	b.n	8004958 <HAL_RCC_OscConfig+0x358>
 8004940:	4b5a      	ldr	r3, [pc, #360]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004944:	4a59      	ldr	r2, [pc, #356]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	6713      	str	r3, [r2, #112]	; 0x70
 800494c:	4b57      	ldr	r3, [pc, #348]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	4a56      	ldr	r2, [pc, #344]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004952:	f023 0304 	bic.w	r3, r3, #4
 8004956:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d015      	beq.n	800498c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7fe faca 	bl	8002ef8 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004966:	e00a      	b.n	800497e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004968:	f7fe fac6 	bl	8002ef8 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f241 3288 	movw	r2, #5000	; 0x1388
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e0d7      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497e:	4b4b      	ldr	r3, [pc, #300]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0ee      	beq.n	8004968 <HAL_RCC_OscConfig+0x368>
 800498a:	e014      	b.n	80049b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498c:	f7fe fab4 	bl	8002ef8 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004992:	e00a      	b.n	80049aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004994:	f7fe fab0 	bl	8002ef8 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e0c1      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049aa:	4b40      	ldr	r3, [pc, #256]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1ee      	bne.n	8004994 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d105      	bne.n	80049c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049bc:	4b3b      	ldr	r3, [pc, #236]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	4a3a      	ldr	r2, [pc, #232]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 80049c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80ad 	beq.w	8004b2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049d2:	4b36      	ldr	r3, [pc, #216]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d060      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d145      	bne.n	8004a72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e6:	4b33      	ldr	r3, [pc, #204]	; (8004ab4 <HAL_RCC_OscConfig+0x4b4>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fe fa84 	bl	8002ef8 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f4:	f7fe fa80 	bl	8002ef8 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e093      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a06:	4b29      	ldr	r3, [pc, #164]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69da      	ldr	r2, [r3, #28]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	019b      	lsls	r3, r3, #6
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	085b      	lsrs	r3, r3, #1
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	041b      	lsls	r3, r3, #16
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	071b      	lsls	r3, r3, #28
 8004a3e:	491b      	ldr	r1, [pc, #108]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a44:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <HAL_RCC_OscConfig+0x4b4>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4a:	f7fe fa55 	bl	8002ef8 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a52:	f7fe fa51 	bl	8002ef8 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e064      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a64:	4b11      	ldr	r3, [pc, #68]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0x452>
 8004a70:	e05c      	b.n	8004b2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a72:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <HAL_RCC_OscConfig+0x4b4>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fe fa3e 	bl	8002ef8 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a80:	f7fe fa3a 	bl	8002ef8 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e04d      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a92:	4b06      	ldr	r3, [pc, #24]	; (8004aac <HAL_RCC_OscConfig+0x4ac>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x480>
 8004a9e:	e045      	b.n	8004b2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d107      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e040      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	40007000 	.word	0x40007000
 8004ab4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ab8:	4b1f      	ldr	r3, [pc, #124]	; (8004b38 <HAL_RCC_OscConfig+0x538>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d030      	beq.n	8004b28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d129      	bne.n	8004b28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d122      	bne.n	8004b28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ae8:	4013      	ands	r3, r2
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d119      	bne.n	8004b28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	3b01      	subs	r3, #1
 8004b02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d10f      	bne.n	8004b28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d107      	bne.n	8004b28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d001      	beq.n	8004b2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800

08004b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e041      	b.n	8004bd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fd fd1a 	bl	800259c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3304      	adds	r3, #4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	f000 fa96 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d001      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e04e      	b.n	8004c92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a23      	ldr	r2, [pc, #140]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d022      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1e:	d01d      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d018      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ca8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1c      	ldr	r2, [pc, #112]	; (8004cac <HAL_TIM_Base_Start_IT+0xd0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00e      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1b      	ldr	r2, [pc, #108]	; (8004cb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a19      	ldr	r2, [pc, #100]	; (8004cb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0x80>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d111      	bne.n	8004c80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b06      	cmp	r3, #6
 8004c6c:	d010      	beq.n	8004c90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0201 	orr.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7e:	e007      	b.n	8004c90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	40000400 	.word	0x40000400
 8004ca8:	40000800 	.word	0x40000800
 8004cac:	40000c00 	.word	0x40000c00
 8004cb0:	40010400 	.word	0x40010400
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40001800 	.word	0x40001800

08004cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d122      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d11b      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0202 	mvn.w	r2, #2
 8004ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f9b5 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004d04:	e005      	b.n	8004d12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f9a7 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f9b8 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d122      	bne.n	8004d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d11b      	bne.n	8004d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0204 	mvn.w	r2, #4
 8004d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f98b 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004d58:	e005      	b.n	8004d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f97d 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f98e 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d122      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d11b      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0208 	mvn.w	r2, #8
 8004d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2204      	movs	r2, #4
 8004d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f961 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004dac:	e005      	b.n	8004dba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f953 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f964 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2b10      	cmp	r3, #16
 8004dcc:	d122      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0310 	and.w	r3, r3, #16
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d11b      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0210 	mvn.w	r2, #16
 8004de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2208      	movs	r2, #8
 8004dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f937 	bl	800506e <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f929 	bl	800505a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f93a 	bl	8005082 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d10e      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d107      	bne.n	8004e40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0201 	mvn.w	r2, #1
 8004e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fc ffde 	bl	8001dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4a:	2b80      	cmp	r3, #128	; 0x80
 8004e4c:	d10e      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e58:	2b80      	cmp	r3, #128	; 0x80
 8004e5a:	d107      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa64 	bl	8005334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d10e      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e84:	2b40      	cmp	r3, #64	; 0x40
 8004e86:	d107      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f8ff 	bl	8005096 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d107      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0220 	mvn.w	r2, #32
 8004ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa2e 	bl	8005320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e0b4      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x186>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f20:	d03e      	beq.n	8004fa0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f26:	f200 8087 	bhi.w	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2e:	f000 8086 	beq.w	800503e <HAL_TIM_ConfigClockSource+0x172>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	d87f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f38:	2b70      	cmp	r3, #112	; 0x70
 8004f3a:	d01a      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0xa6>
 8004f3c:	2b70      	cmp	r3, #112	; 0x70
 8004f3e:	d87b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	2b60      	cmp	r3, #96	; 0x60
 8004f42:	d050      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x11a>
 8004f44:	2b60      	cmp	r3, #96	; 0x60
 8004f46:	d877      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f48:	2b50      	cmp	r3, #80	; 0x50
 8004f4a:	d03c      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0xfa>
 8004f4c:	2b50      	cmp	r3, #80	; 0x50
 8004f4e:	d873      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f50:	2b40      	cmp	r3, #64	; 0x40
 8004f52:	d058      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x13a>
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d86f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f58:	2b30      	cmp	r3, #48	; 0x30
 8004f5a:	d064      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f5c:	2b30      	cmp	r3, #48	; 0x30
 8004f5e:	d86b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d060      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d867      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d05c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d05a      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f70:	e062      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6899      	ldr	r1, [r3, #8]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f000 f9ad 	bl	80052e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	609a      	str	r2, [r3, #8]
      break;
 8004f9e:	e04f      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6899      	ldr	r1, [r3, #8]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f000 f996 	bl	80052e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fc2:	609a      	str	r2, [r3, #8]
      break;
 8004fc4:	e03c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f000 f90a 	bl	80051ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2150      	movs	r1, #80	; 0x50
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 f963 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e02c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6859      	ldr	r1, [r3, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f000 f929 	bl	800524a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2160      	movs	r1, #96	; 0x60
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 f953 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8005004:	e01c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	461a      	mov	r2, r3
 8005014:	f000 f8ea 	bl	80051ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2140      	movs	r1, #64	; 0x40
 800501e:	4618      	mov	r0, r3
 8005020:	f000 f943 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8005024:	e00c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f000 f93a 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8005036:	e003      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      break;
 800503c:	e000      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800503e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
	...

080050ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a40      	ldr	r2, [pc, #256]	; (80051c0 <TIM_Base_SetConfig+0x114>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ca:	d00f      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3d      	ldr	r2, [pc, #244]	; (80051c4 <TIM_Base_SetConfig+0x118>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a3c      	ldr	r2, [pc, #240]	; (80051c8 <TIM_Base_SetConfig+0x11c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a3b      	ldr	r2, [pc, #236]	; (80051cc <TIM_Base_SetConfig+0x120>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3a      	ldr	r2, [pc, #232]	; (80051d0 <TIM_Base_SetConfig+0x124>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d108      	bne.n	80050fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2f      	ldr	r2, [pc, #188]	; (80051c0 <TIM_Base_SetConfig+0x114>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d02b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510c:	d027      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2c      	ldr	r2, [pc, #176]	; (80051c4 <TIM_Base_SetConfig+0x118>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d023      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2b      	ldr	r2, [pc, #172]	; (80051c8 <TIM_Base_SetConfig+0x11c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01f      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2a      	ldr	r2, [pc, #168]	; (80051cc <TIM_Base_SetConfig+0x120>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <TIM_Base_SetConfig+0x124>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d017      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a28      	ldr	r2, [pc, #160]	; (80051d4 <TIM_Base_SetConfig+0x128>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a27      	ldr	r2, [pc, #156]	; (80051d8 <TIM_Base_SetConfig+0x12c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00f      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a26      	ldr	r2, [pc, #152]	; (80051dc <TIM_Base_SetConfig+0x130>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00b      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a25      	ldr	r2, [pc, #148]	; (80051e0 <TIM_Base_SetConfig+0x134>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d007      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a24      	ldr	r2, [pc, #144]	; (80051e4 <TIM_Base_SetConfig+0x138>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a23      	ldr	r2, [pc, #140]	; (80051e8 <TIM_Base_SetConfig+0x13c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <TIM_Base_SetConfig+0x114>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_Base_SetConfig+0xf8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a0c      	ldr	r2, [pc, #48]	; (80051d0 <TIM_Base_SetConfig+0x124>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d103      	bne.n	80051ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	615a      	str	r2, [r3, #20]
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40010400 	.word	0x40010400
 80051d4:	40014000 	.word	0x40014000
 80051d8:	40014400 	.word	0x40014400
 80051dc:	40014800 	.word	0x40014800
 80051e0:	40001800 	.word	0x40001800
 80051e4:	40001c00 	.word	0x40001c00
 80051e8:	40002000 	.word	0x40002000

080051ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f023 0201 	bic.w	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f023 030a 	bic.w	r3, r3, #10
 8005228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524a:	b480      	push	{r7}
 800524c:	b087      	sub	sp, #28
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f023 0210 	bic.w	r2, r3, #16
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	031b      	lsls	r3, r3, #12
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005286:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f043 0307 	orr.w	r3, r3, #7
 80052cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	021a      	lsls	r2, r3, #8
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	431a      	orrs	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4313      	orrs	r3, r2
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	609a      	str	r2, [r3, #8]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e03f      	b.n	80053da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fd f93c 	bl	80025ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2224      	movs	r2, #36	; 0x24
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800538a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fddf 	bl	8005f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695a      	ldr	r2, [r3, #20]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b08a      	sub	sp, #40	; 0x28
 80053e6:	af02      	add	r7, sp, #8
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	603b      	str	r3, [r7, #0]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d17c      	bne.n	80054fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <HAL_UART_Transmit+0x2c>
 8005408:	88fb      	ldrh	r3, [r7, #6]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e075      	b.n	80054fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_UART_Transmit+0x3e>
 800541c:	2302      	movs	r3, #2
 800541e:	e06e      	b.n	80054fe <HAL_UART_Transmit+0x11c>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2221      	movs	r2, #33	; 0x21
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005436:	f7fd fd5f 	bl	8002ef8 <HAL_GetTick>
 800543a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	88fa      	ldrh	r2, [r7, #6]
 8005440:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	88fa      	ldrh	r2, [r7, #6]
 8005446:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005450:	d108      	bne.n	8005464 <HAL_UART_Transmit+0x82>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d104      	bne.n	8005464 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800545a:	2300      	movs	r3, #0
 800545c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	e003      	b.n	800546c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005468:	2300      	movs	r3, #0
 800546a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005474:	e02a      	b.n	80054cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2200      	movs	r2, #0
 800547e:	2180      	movs	r1, #128	; 0x80
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fb1f 	bl	8005ac4 <UART_WaitOnFlagUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e036      	b.n	80054fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10b      	bne.n	80054ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	3302      	adds	r3, #2
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	e007      	b.n	80054be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	3301      	adds	r3, #1
 80054bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1cf      	bne.n	8005476 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2200      	movs	r2, #0
 80054de:	2140      	movs	r1, #64	; 0x40
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 faef 	bl	8005ac4 <UART_WaitOnFlagUntilTimeout>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e006      	b.n	80054fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e000      	b.n	80054fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
  }
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	4613      	mov	r3, r2
 8005512:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b20      	cmp	r3, #32
 800551e:	d11d      	bne.n	800555c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_UART_Receive_IT+0x26>
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e016      	b.n	800555e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <HAL_UART_Receive_IT+0x38>
 800553a:	2302      	movs	r3, #2
 800553c:	e00f      	b.n	800555e <HAL_UART_Receive_IT+0x58>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	461a      	mov	r2, r3
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fb24 	bl	8005ba0 <UART_Start_Receive_IT>
 8005558:	4603      	mov	r3, r0
 800555a:	e000      	b.n	800555e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800555c:	2302      	movs	r3, #2
  }
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b0ba      	sub	sp, #232	; 0xe8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800558e:	2300      	movs	r3, #0
 8005590:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005594:	2300      	movs	r3, #0
 8005596:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80055a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10f      	bne.n	80055ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <HAL_UART_IRQHandler+0x66>
 80055ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fc07 	bl	8005dda <UART_Receive_IT>
      return;
 80055cc:	e256      	b.n	8005a7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 80de 	beq.w	8005794 <HAL_UART_IRQHandler+0x22c>
 80055d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d106      	bne.n	80055f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 80d1 	beq.w	8005794 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <HAL_UART_IRQHandler+0xae>
 80055fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	f043 0201 	orr.w	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00b      	beq.n	800563a <HAL_UART_IRQHandler+0xd2>
 8005622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	f043 0202 	orr.w	r2, r3, #2
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800563a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00b      	beq.n	800565e <HAL_UART_IRQHandler+0xf6>
 8005646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	f043 0204 	orr.w	r2, r3, #4
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d011      	beq.n	800568e <HAL_UART_IRQHandler+0x126>
 800566a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800566e:	f003 0320 	and.w	r3, r3, #32
 8005672:	2b00      	cmp	r3, #0
 8005674:	d105      	bne.n	8005682 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f043 0208 	orr.w	r2, r3, #8
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 81ed 	beq.w	8005a72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d008      	beq.n	80056b6 <HAL_UART_IRQHandler+0x14e>
 80056a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fb92 	bl	8005dda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c0:	2b40      	cmp	r3, #64	; 0x40
 80056c2:	bf0c      	ite	eq
 80056c4:	2301      	moveq	r3, #1
 80056c6:	2300      	movne	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <HAL_UART_IRQHandler+0x17a>
 80056da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d04f      	beq.n	8005782 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fa9a 	bl	8005c1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	d141      	bne.n	800577a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3314      	adds	r3, #20
 80056fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800570c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3314      	adds	r3, #20
 800571e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005722:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800572e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800573a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1d9      	bne.n	80056f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	2b00      	cmp	r3, #0
 8005748:	d013      	beq.n	8005772 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	4a7d      	ldr	r2, [pc, #500]	; (8005944 <HAL_UART_IRQHandler+0x3dc>)
 8005750:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	4618      	mov	r0, r3
 8005758:	f7fe fa53 	bl	8003c02 <HAL_DMA_Abort_IT>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d016      	beq.n	8005790 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800576c:	4610      	mov	r0, r2
 800576e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005770:	e00e      	b.n	8005790 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f990 	bl	8005a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005778:	e00a      	b.n	8005790 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f98c 	bl	8005a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005780:	e006      	b.n	8005790 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f988 	bl	8005a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800578e:	e170      	b.n	8005a72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005790:	bf00      	nop
    return;
 8005792:	e16e      	b.n	8005a72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	2b01      	cmp	r3, #1
 800579a:	f040 814a 	bne.w	8005a32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800579e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 8143 	beq.w	8005a32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 813c 	beq.w	8005a32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057ba:	2300      	movs	r3, #0
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60bb      	str	r3, [r7, #8]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	60bb      	str	r3, [r7, #8]
 80057ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	f040 80b4 	bne.w	8005948 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 8140 	beq.w	8005a76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057fe:	429a      	cmp	r2, r3
 8005800:	f080 8139 	bcs.w	8005a76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800580a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005816:	f000 8088 	beq.w	800592a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	330c      	adds	r3, #12
 8005820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005830:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	330c      	adds	r3, #12
 8005842:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005846:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800584a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005852:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800585e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1d9      	bne.n	800581a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3314      	adds	r3, #20
 800586c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005878:	f023 0301 	bic.w	r3, r3, #1
 800587c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3314      	adds	r3, #20
 8005886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800588a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800588e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005892:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800589c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e1      	bne.n	8005866 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3314      	adds	r3, #20
 80058a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3314      	adds	r3, #20
 80058c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e3      	bne.n	80058a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	330c      	adds	r3, #12
 80058ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058fa:	f023 0310 	bic.w	r3, r3, #16
 80058fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800590c:	65ba      	str	r2, [r7, #88]	; 0x58
 800590e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005912:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800591a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e3      	bne.n	80058e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	4618      	mov	r0, r3
 8005926:	f7fe f8fc 	bl	8003b22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005932:	b29b      	uxth	r3, r3
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	b29b      	uxth	r3, r3
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f8b6 	bl	8005aac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005940:	e099      	b.n	8005a76 <HAL_UART_IRQHandler+0x50e>
 8005942:	bf00      	nop
 8005944:	08005ce3 	.word	0x08005ce3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005950:	b29b      	uxth	r3, r3
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800595c:	b29b      	uxth	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 808b 	beq.w	8005a7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8086 	beq.w	8005a7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	330c      	adds	r3, #12
 8005974:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800597e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005980:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005984:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	330c      	adds	r3, #12
 800598e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005992:	647a      	str	r2, [r7, #68]	; 0x44
 8005994:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005996:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005998:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800599a:	e841 2300 	strex	r3, r2, [r1]
 800599e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1e3      	bne.n	800596e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3314      	adds	r3, #20
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	623b      	str	r3, [r7, #32]
   return(result);
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	f023 0301 	bic.w	r3, r3, #1
 80059bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3314      	adds	r3, #20
 80059c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059ca:	633a      	str	r2, [r7, #48]	; 0x30
 80059cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e3      	bne.n	80059a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	330c      	adds	r3, #12
 80059f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	e853 3f00 	ldrex	r3, [r3]
 80059fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0310 	bic.w	r3, r3, #16
 8005a02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a10:	61fa      	str	r2, [r7, #28]
 8005a12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	69b9      	ldr	r1, [r7, #24]
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e3      	bne.n	80059ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f83e 	bl	8005aac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a30:	e023      	b.n	8005a7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <HAL_UART_IRQHandler+0x4ea>
 8005a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f95d 	bl	8005d0a <UART_Transmit_IT>
    return;
 8005a50:	e014      	b.n	8005a7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00e      	beq.n	8005a7c <HAL_UART_IRQHandler+0x514>
 8005a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d008      	beq.n	8005a7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f99d 	bl	8005daa <UART_EndTransmit_IT>
    return;
 8005a70:	e004      	b.n	8005a7c <HAL_UART_IRQHandler+0x514>
    return;
 8005a72:	bf00      	nop
 8005a74:	e002      	b.n	8005a7c <HAL_UART_IRQHandler+0x514>
      return;
 8005a76:	bf00      	nop
 8005a78:	e000      	b.n	8005a7c <HAL_UART_IRQHandler+0x514>
      return;
 8005a7a:	bf00      	nop
  }
}
 8005a7c:	37e8      	adds	r7, #232	; 0xe8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop

08005a84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b090      	sub	sp, #64	; 0x40
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad4:	e050      	b.n	8005b78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005adc:	d04c      	beq.n	8005b78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ae4:	f7fd fa08 	bl	8002ef8 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d241      	bcs.n	8005b78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	330c      	adds	r3, #12
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	e853 3f00 	ldrex	r3, [r3]
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b14:	637a      	str	r2, [r7, #52]	; 0x34
 8005b16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b1c:	e841 2300 	strex	r3, r2, [r1]
 8005b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e5      	bne.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3314      	adds	r3, #20
 8005b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	613b      	str	r3, [r7, #16]
   return(result);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f023 0301 	bic.w	r3, r3, #1
 8005b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3314      	adds	r3, #20
 8005b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b48:	623a      	str	r2, [r7, #32]
 8005b4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	69f9      	ldr	r1, [r7, #28]
 8005b4e:	6a3a      	ldr	r2, [r7, #32]
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e5      	bne.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e00f      	b.n	8005b98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	4013      	ands	r3, r2
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	bf0c      	ite	eq
 8005b88:	2301      	moveq	r3, #1
 8005b8a:	2300      	movne	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	79fb      	ldrb	r3, [r7, #7]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d09f      	beq.n	8005ad6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3740      	adds	r7, #64	; 0x40
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	88fa      	ldrh	r2, [r7, #6]
 8005bb8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	88fa      	ldrh	r2, [r7, #6]
 8005bbe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2222      	movs	r2, #34	; 0x22
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695a      	ldr	r2, [r3, #20]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0220 	orr.w	r2, r2, #32
 8005c0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b095      	sub	sp, #84	; 0x54
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	330c      	adds	r3, #12
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c44:	643a      	str	r2, [r7, #64]	; 0x40
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3314      	adds	r3, #20
 8005c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f023 0301 	bic.w	r3, r3, #1
 8005c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3314      	adds	r3, #20
 8005c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e5      	bne.n	8005c58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d119      	bne.n	8005cc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f023 0310 	bic.w	r3, r3, #16
 8005caa:	647b      	str	r3, [r7, #68]	; 0x44
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cb4:	61ba      	str	r2, [r7, #24]
 8005cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	6979      	ldr	r1, [r7, #20]
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e5      	bne.n	8005c94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cd6:	bf00      	nop
 8005cd8:	3754      	adds	r7, #84	; 0x54
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f7ff fecb 	bl	8005a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b085      	sub	sp, #20
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b21      	cmp	r3, #33	; 0x21
 8005d1c:	d13e      	bne.n	8005d9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d26:	d114      	bne.n	8005d52 <UART_Transmit_IT+0x48>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d110      	bne.n	8005d52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	1c9a      	adds	r2, r3, #2
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	621a      	str	r2, [r3, #32]
 8005d50:	e008      	b.n	8005d64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	1c59      	adds	r1, r3, #1
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6211      	str	r1, [r2, #32]
 8005d5c:	781a      	ldrb	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	4619      	mov	r1, r3
 8005d72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10f      	bne.n	8005d98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e000      	b.n	8005d9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d9c:	2302      	movs	r3, #2
  }
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7ff fe5a 	bl	8005a84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b08c      	sub	sp, #48	; 0x30
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b22      	cmp	r3, #34	; 0x22
 8005dec:	f040 80ab 	bne.w	8005f46 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df8:	d117      	bne.n	8005e2a <UART_Receive_IT+0x50>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d113      	bne.n	8005e2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	1c9a      	adds	r2, r3, #2
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	629a      	str	r2, [r3, #40]	; 0x28
 8005e28:	e026      	b.n	8005e78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e30:	2300      	movs	r3, #0
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e3c:	d007      	beq.n	8005e4e <UART_Receive_IT+0x74>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <UART_Receive_IT+0x82>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	e008      	b.n	8005e6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	4619      	mov	r1, r3
 8005e86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d15a      	bne.n	8005f42 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0220 	bic.w	r2, r2, #32
 8005e9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695a      	ldr	r2, [r3, #20]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0201 	bic.w	r2, r2, #1
 8005eba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d135      	bne.n	8005f38 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	330c      	adds	r3, #12
 8005ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	e853 3f00 	ldrex	r3, [r3]
 8005ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f023 0310 	bic.w	r3, r3, #16
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	330c      	adds	r3, #12
 8005ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef2:	623a      	str	r2, [r7, #32]
 8005ef4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	69f9      	ldr	r1, [r7, #28]
 8005ef8:	6a3a      	ldr	r2, [r7, #32]
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e5      	bne.n	8005ed2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d10a      	bne.n	8005f2a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff fdbb 	bl	8005aac <HAL_UARTEx_RxEventCallback>
 8005f36:	e002      	b.n	8005f3e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fb ff97 	bl	8001e6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e002      	b.n	8005f48 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	e000      	b.n	8005f48 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f46:	2302      	movs	r3, #2
  }
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3730      	adds	r7, #48	; 0x30
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f54:	b0c0      	sub	sp, #256	; 0x100
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6c:	68d9      	ldr	r1, [r3, #12]
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	ea40 0301 	orr.w	r3, r0, r1
 8005f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	431a      	orrs	r2, r3
 8005f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fa8:	f021 010c 	bic.w	r1, r1, #12
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fb6:	430b      	orrs	r3, r1
 8005fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fca:	6999      	ldr	r1, [r3, #24]
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	ea40 0301 	orr.w	r3, r0, r1
 8005fd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b8f      	ldr	r3, [pc, #572]	; (800621c <UART_SetConfig+0x2cc>)
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d005      	beq.n	8005ff0 <UART_SetConfig+0xa0>
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b8d      	ldr	r3, [pc, #564]	; (8006220 <UART_SetConfig+0x2d0>)
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d104      	bne.n	8005ffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ff0:	f7fe f948 	bl	8004284 <HAL_RCC_GetPCLK2Freq>
 8005ff4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ff8:	e003      	b.n	8006002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ffa:	f7fe f92f 	bl	800425c <HAL_RCC_GetPCLK1Freq>
 8005ffe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800600c:	f040 810c 	bne.w	8006228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006014:	2200      	movs	r2, #0
 8006016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800601a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800601e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006022:	4622      	mov	r2, r4
 8006024:	462b      	mov	r3, r5
 8006026:	1891      	adds	r1, r2, r2
 8006028:	65b9      	str	r1, [r7, #88]	; 0x58
 800602a:	415b      	adcs	r3, r3
 800602c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800602e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006032:	4621      	mov	r1, r4
 8006034:	eb12 0801 	adds.w	r8, r2, r1
 8006038:	4629      	mov	r1, r5
 800603a:	eb43 0901 	adc.w	r9, r3, r1
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800604a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800604e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006052:	4690      	mov	r8, r2
 8006054:	4699      	mov	r9, r3
 8006056:	4623      	mov	r3, r4
 8006058:	eb18 0303 	adds.w	r3, r8, r3
 800605c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006060:	462b      	mov	r3, r5
 8006062:	eb49 0303 	adc.w	r3, r9, r3
 8006066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800606a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006076:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800607a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800607e:	460b      	mov	r3, r1
 8006080:	18db      	adds	r3, r3, r3
 8006082:	653b      	str	r3, [r7, #80]	; 0x50
 8006084:	4613      	mov	r3, r2
 8006086:	eb42 0303 	adc.w	r3, r2, r3
 800608a:	657b      	str	r3, [r7, #84]	; 0x54
 800608c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006094:	f7fa fcd6 	bl	8000a44 <__aeabi_uldivmod>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4b61      	ldr	r3, [pc, #388]	; (8006224 <UART_SetConfig+0x2d4>)
 800609e:	fba3 2302 	umull	r2, r3, r3, r2
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	011c      	lsls	r4, r3, #4
 80060a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060b8:	4642      	mov	r2, r8
 80060ba:	464b      	mov	r3, r9
 80060bc:	1891      	adds	r1, r2, r2
 80060be:	64b9      	str	r1, [r7, #72]	; 0x48
 80060c0:	415b      	adcs	r3, r3
 80060c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060c8:	4641      	mov	r1, r8
 80060ca:	eb12 0a01 	adds.w	sl, r2, r1
 80060ce:	4649      	mov	r1, r9
 80060d0:	eb43 0b01 	adc.w	fp, r3, r1
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060e8:	4692      	mov	sl, r2
 80060ea:	469b      	mov	fp, r3
 80060ec:	4643      	mov	r3, r8
 80060ee:	eb1a 0303 	adds.w	r3, sl, r3
 80060f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060f6:	464b      	mov	r3, r9
 80060f8:	eb4b 0303 	adc.w	r3, fp, r3
 80060fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800610c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006114:	460b      	mov	r3, r1
 8006116:	18db      	adds	r3, r3, r3
 8006118:	643b      	str	r3, [r7, #64]	; 0x40
 800611a:	4613      	mov	r3, r2
 800611c:	eb42 0303 	adc.w	r3, r2, r3
 8006120:	647b      	str	r3, [r7, #68]	; 0x44
 8006122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800612a:	f7fa fc8b 	bl	8000a44 <__aeabi_uldivmod>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4611      	mov	r1, r2
 8006134:	4b3b      	ldr	r3, [pc, #236]	; (8006224 <UART_SetConfig+0x2d4>)
 8006136:	fba3 2301 	umull	r2, r3, r3, r1
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	2264      	movs	r2, #100	; 0x64
 800613e:	fb02 f303 	mul.w	r3, r2, r3
 8006142:	1acb      	subs	r3, r1, r3
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800614a:	4b36      	ldr	r3, [pc, #216]	; (8006224 <UART_SetConfig+0x2d4>)
 800614c:	fba3 2302 	umull	r2, r3, r3, r2
 8006150:	095b      	lsrs	r3, r3, #5
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006158:	441c      	add	r4, r3
 800615a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800615e:	2200      	movs	r2, #0
 8006160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006164:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	1891      	adds	r1, r2, r2
 8006172:	63b9      	str	r1, [r7, #56]	; 0x38
 8006174:	415b      	adcs	r3, r3
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800617c:	4641      	mov	r1, r8
 800617e:	1851      	adds	r1, r2, r1
 8006180:	6339      	str	r1, [r7, #48]	; 0x30
 8006182:	4649      	mov	r1, r9
 8006184:	414b      	adcs	r3, r1
 8006186:	637b      	str	r3, [r7, #52]	; 0x34
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006194:	4659      	mov	r1, fp
 8006196:	00cb      	lsls	r3, r1, #3
 8006198:	4651      	mov	r1, sl
 800619a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800619e:	4651      	mov	r1, sl
 80061a0:	00ca      	lsls	r2, r1, #3
 80061a2:	4610      	mov	r0, r2
 80061a4:	4619      	mov	r1, r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	4642      	mov	r2, r8
 80061aa:	189b      	adds	r3, r3, r2
 80061ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061b0:	464b      	mov	r3, r9
 80061b2:	460a      	mov	r2, r1
 80061b4:	eb42 0303 	adc.w	r3, r2, r3
 80061b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061d0:	460b      	mov	r3, r1
 80061d2:	18db      	adds	r3, r3, r3
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d6:	4613      	mov	r3, r2
 80061d8:	eb42 0303 	adc.w	r3, r2, r3
 80061dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061e6:	f7fa fc2d 	bl	8000a44 <__aeabi_uldivmod>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4b0d      	ldr	r3, [pc, #52]	; (8006224 <UART_SetConfig+0x2d4>)
 80061f0:	fba3 1302 	umull	r1, r3, r3, r2
 80061f4:	095b      	lsrs	r3, r3, #5
 80061f6:	2164      	movs	r1, #100	; 0x64
 80061f8:	fb01 f303 	mul.w	r3, r1, r3
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	3332      	adds	r3, #50	; 0x32
 8006202:	4a08      	ldr	r2, [pc, #32]	; (8006224 <UART_SetConfig+0x2d4>)
 8006204:	fba2 2303 	umull	r2, r3, r2, r3
 8006208:	095b      	lsrs	r3, r3, #5
 800620a:	f003 0207 	and.w	r2, r3, #7
 800620e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4422      	add	r2, r4
 8006216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006218:	e105      	b.n	8006426 <UART_SetConfig+0x4d6>
 800621a:	bf00      	nop
 800621c:	40011000 	.word	0x40011000
 8006220:	40011400 	.word	0x40011400
 8006224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800622c:	2200      	movs	r2, #0
 800622e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006232:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800623a:	4642      	mov	r2, r8
 800623c:	464b      	mov	r3, r9
 800623e:	1891      	adds	r1, r2, r2
 8006240:	6239      	str	r1, [r7, #32]
 8006242:	415b      	adcs	r3, r3
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
 8006246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800624a:	4641      	mov	r1, r8
 800624c:	1854      	adds	r4, r2, r1
 800624e:	4649      	mov	r1, r9
 8006250:	eb43 0501 	adc.w	r5, r3, r1
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	00eb      	lsls	r3, r5, #3
 800625e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006262:	00e2      	lsls	r2, r4, #3
 8006264:	4614      	mov	r4, r2
 8006266:	461d      	mov	r5, r3
 8006268:	4643      	mov	r3, r8
 800626a:	18e3      	adds	r3, r4, r3
 800626c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006270:	464b      	mov	r3, r9
 8006272:	eb45 0303 	adc.w	r3, r5, r3
 8006276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800627a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006286:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	f04f 0300 	mov.w	r3, #0
 8006292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006296:	4629      	mov	r1, r5
 8006298:	008b      	lsls	r3, r1, #2
 800629a:	4621      	mov	r1, r4
 800629c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062a0:	4621      	mov	r1, r4
 80062a2:	008a      	lsls	r2, r1, #2
 80062a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062a8:	f7fa fbcc 	bl	8000a44 <__aeabi_uldivmod>
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4b60      	ldr	r3, [pc, #384]	; (8006434 <UART_SetConfig+0x4e4>)
 80062b2:	fba3 2302 	umull	r2, r3, r3, r2
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	011c      	lsls	r4, r3, #4
 80062ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062be:	2200      	movs	r2, #0
 80062c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062cc:	4642      	mov	r2, r8
 80062ce:	464b      	mov	r3, r9
 80062d0:	1891      	adds	r1, r2, r2
 80062d2:	61b9      	str	r1, [r7, #24]
 80062d4:	415b      	adcs	r3, r3
 80062d6:	61fb      	str	r3, [r7, #28]
 80062d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062dc:	4641      	mov	r1, r8
 80062de:	1851      	adds	r1, r2, r1
 80062e0:	6139      	str	r1, [r7, #16]
 80062e2:	4649      	mov	r1, r9
 80062e4:	414b      	adcs	r3, r1
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	f04f 0200 	mov.w	r2, #0
 80062ec:	f04f 0300 	mov.w	r3, #0
 80062f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062f4:	4659      	mov	r1, fp
 80062f6:	00cb      	lsls	r3, r1, #3
 80062f8:	4651      	mov	r1, sl
 80062fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062fe:	4651      	mov	r1, sl
 8006300:	00ca      	lsls	r2, r1, #3
 8006302:	4610      	mov	r0, r2
 8006304:	4619      	mov	r1, r3
 8006306:	4603      	mov	r3, r0
 8006308:	4642      	mov	r2, r8
 800630a:	189b      	adds	r3, r3, r2
 800630c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006310:	464b      	mov	r3, r9
 8006312:	460a      	mov	r2, r1
 8006314:	eb42 0303 	adc.w	r3, r2, r3
 8006318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	67bb      	str	r3, [r7, #120]	; 0x78
 8006326:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006334:	4649      	mov	r1, r9
 8006336:	008b      	lsls	r3, r1, #2
 8006338:	4641      	mov	r1, r8
 800633a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800633e:	4641      	mov	r1, r8
 8006340:	008a      	lsls	r2, r1, #2
 8006342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006346:	f7fa fb7d 	bl	8000a44 <__aeabi_uldivmod>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	4b39      	ldr	r3, [pc, #228]	; (8006434 <UART_SetConfig+0x4e4>)
 8006350:	fba3 1302 	umull	r1, r3, r3, r2
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	2164      	movs	r1, #100	; 0x64
 8006358:	fb01 f303 	mul.w	r3, r1, r3
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	3332      	adds	r3, #50	; 0x32
 8006362:	4a34      	ldr	r2, [pc, #208]	; (8006434 <UART_SetConfig+0x4e4>)
 8006364:	fba2 2303 	umull	r2, r3, r2, r3
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800636e:	441c      	add	r4, r3
 8006370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006374:	2200      	movs	r2, #0
 8006376:	673b      	str	r3, [r7, #112]	; 0x70
 8006378:	677a      	str	r2, [r7, #116]	; 0x74
 800637a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800637e:	4642      	mov	r2, r8
 8006380:	464b      	mov	r3, r9
 8006382:	1891      	adds	r1, r2, r2
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	415b      	adcs	r3, r3
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800638e:	4641      	mov	r1, r8
 8006390:	1851      	adds	r1, r2, r1
 8006392:	6039      	str	r1, [r7, #0]
 8006394:	4649      	mov	r1, r9
 8006396:	414b      	adcs	r3, r1
 8006398:	607b      	str	r3, [r7, #4]
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063a6:	4659      	mov	r1, fp
 80063a8:	00cb      	lsls	r3, r1, #3
 80063aa:	4651      	mov	r1, sl
 80063ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063b0:	4651      	mov	r1, sl
 80063b2:	00ca      	lsls	r2, r1, #3
 80063b4:	4610      	mov	r0, r2
 80063b6:	4619      	mov	r1, r3
 80063b8:	4603      	mov	r3, r0
 80063ba:	4642      	mov	r2, r8
 80063bc:	189b      	adds	r3, r3, r2
 80063be:	66bb      	str	r3, [r7, #104]	; 0x68
 80063c0:	464b      	mov	r3, r9
 80063c2:	460a      	mov	r2, r1
 80063c4:	eb42 0303 	adc.w	r3, r2, r3
 80063c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	663b      	str	r3, [r7, #96]	; 0x60
 80063d4:	667a      	str	r2, [r7, #100]	; 0x64
 80063d6:	f04f 0200 	mov.w	r2, #0
 80063da:	f04f 0300 	mov.w	r3, #0
 80063de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063e2:	4649      	mov	r1, r9
 80063e4:	008b      	lsls	r3, r1, #2
 80063e6:	4641      	mov	r1, r8
 80063e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ec:	4641      	mov	r1, r8
 80063ee:	008a      	lsls	r2, r1, #2
 80063f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063f4:	f7fa fb26 	bl	8000a44 <__aeabi_uldivmod>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <UART_SetConfig+0x4e4>)
 80063fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	2164      	movs	r1, #100	; 0x64
 8006406:	fb01 f303 	mul.w	r3, r1, r3
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	3332      	adds	r3, #50	; 0x32
 8006410:	4a08      	ldr	r2, [pc, #32]	; (8006434 <UART_SetConfig+0x4e4>)
 8006412:	fba2 2303 	umull	r2, r3, r2, r3
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	f003 020f 	and.w	r2, r3, #15
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4422      	add	r2, r4
 8006424:	609a      	str	r2, [r3, #8]
}
 8006426:	bf00      	nop
 8006428:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800642c:	46bd      	mov	sp, r7
 800642e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006432:	bf00      	nop
 8006434:	51eb851f 	.word	0x51eb851f

08006438 <movingAverageInit>:
 */

#include "movingAverage.h"

void movingAverageInit(MovingAverage *movingAverage, uint16_t window)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	807b      	strh	r3, [r7, #2]
	movingAverage->index = 0;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	801a      	strh	r2, [r3, #0]
	movingAverage->window = window;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	887a      	ldrh	r2, [r7, #2]
 800644e:	805a      	strh	r2, [r3, #2]
	memset(movingAverage->buffer, 0x00, MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS * sizeof(int32_t));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006458:	2100      	movs	r1, #0
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fa4a 	bl	80068f4 <memset>
	movingAverage->sum = 0;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
	movingAverage->movingAverage = 0;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <movingAverageAddValue>:

void movingAverageAddValue(MovingAverage *movingAverage, int32_t newValue)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	movingAverage->sum = movingAverage->sum - movingAverage->buffer[movingAverage->index] + newValue;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	; 0x4b4
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	440b      	add	r3, r1
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	1ad2      	subs	r2, r2, r3
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	441a      	add	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
	movingAverage->buffer[movingAverage->index] = newValue;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	605a      	str	r2, [r3, #4]
	movingAverage->movingAverage = movingAverage->sum / movingAverage->window;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	8852      	ldrh	r2, [r2, #2]
 80064bc:	fb93 f2f2 	sdiv	r2, r3, r2
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
	movingAverage->index = (movingAverage->index + 1) % movingAverage->window;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064cc:	3301      	adds	r3, #1
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	8852      	ldrh	r2, [r2, #2]
 80064d2:	fb93 f1f2 	sdiv	r1, r3, r2
 80064d6:	fb01 f202 	mul.w	r2, r1, r2
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	b21a      	sxth	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	801a      	strh	r2, [r3, #0]
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <movingAverageGetMean>:

int32_t movingAverageGetMean(MovingAverage *movingAverage)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
	return movingAverage->movingAverage;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 34b8 	ldr.w	r3, [r3, #1208]	; 0x4b8
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <pidInit>:

#include "pid.h"
#include "defs.h"

void pidInit(PidController *pidController, float kp, float ki, float kd, float offset, float bias, ControllerTopology controllerTopology)
{
 8006508:	b480      	push	{r7}
 800650a:	b089      	sub	sp, #36	; 0x24
 800650c:	af00      	add	r7, sp, #0
 800650e:	61f8      	str	r0, [r7, #28]
 8006510:	ed87 0a06 	vstr	s0, [r7, #24]
 8006514:	edc7 0a05 	vstr	s1, [r7, #20]
 8006518:	ed87 1a04 	vstr	s2, [r7, #16]
 800651c:	edc7 1a03 	vstr	s3, [r7, #12]
 8006520:	ed87 2a02 	vstr	s4, [r7, #8]
 8006524:	460b      	mov	r3, r1
 8006526:	71fb      	strb	r3, [r7, #7]
	pidController->kp = kp;
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	601a      	str	r2, [r3, #0]
	pidController->ki = ki;
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	605a      	str	r2, [r3, #4]
	pidController->kd = kd;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	609a      	str	r2, [r3, #8]
	pidController->controllerTopology = controllerTopology;
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	79fa      	ldrb	r2, [r7, #7]
 800653e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	pidController->currentError = 0;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f04f 0200 	mov.w	r2, #0
 8006548:	60da      	str	r2, [r3, #12]
	pidController->previousError = 0;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	611a      	str	r2, [r3, #16]
	pidController->sumOfErrors = 0;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	f04f 0200 	mov.w	r2, #0
 8006558:	615a      	str	r2, [r3, #20]
	pidController->setpoint = 0;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	619a      	str	r2, [r3, #24]
	pidController->controlledVariable = 0;
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	61da      	str	r2, [r3, #28]
	pidController->processVariable = 0;
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	f04f 0200 	mov.w	r2, #0
 8006570:	621a      	str	r2, [r3, #32]
	pidController->differenceOfErrors = 0;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	625a      	str	r2, [r3, #36]	; 0x24
	pidController->minSumOfErrors = -10000;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	4a0d      	ldr	r2, [pc, #52]	; (80065b4 <pidInit+0xac>)
 800657e:	635a      	str	r2, [r3, #52]	; 0x34
	pidController->maxSumOfErrors = 10000;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	f242 7210 	movw	r2, #10000	; 0x2710
 8006586:	639a      	str	r2, [r3, #56]	; 0x38
	pidController->minControlledVariable = 0;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2200      	movs	r2, #0
 800658c:	63da      	str	r2, [r3, #60]	; 0x3c
	pidController->maxControlledVariable = 4095;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006594:	641a      	str	r2, [r3, #64]	; 0x40
	pidController->offset = offset;
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	62da      	str	r2, [r3, #44]	; 0x2c
	pidController->bias = bias;
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	631a      	str	r2, [r3, #48]	; 0x30
	pidController->interval = ((float) DELAY_25_MILISECONDS) / 10000;
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4a04      	ldr	r2, [pc, #16]	; (80065b8 <pidInit+0xb0>)
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80065a8:	bf00      	nop
 80065aa:	3724      	adds	r7, #36	; 0x24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	ffffd8f0 	.word	0xffffd8f0
 80065b8:	3ccccccd 	.word	0x3ccccccd

080065bc <pidCompute>:

void pidCompute(PidController *pidController)
{
 80065bc:	b480      	push	{r7}
 80065be:	b089      	sub	sp, #36	; 0x24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	pidController->currentError = pidController->setpoint - pidController->processVariable;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	edd3 7a08 	vldr	s15, [r3, #32]
 80065d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	edc3 7a03 	vstr	s15, [r3, #12]
	pidController->sumOfErrors += pidController->currentError;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	ed93 7a05 	vldr	s14, [r3, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80065e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	edc3 7a05 	vstr	s15, [r3, #20]
	pidController->differenceOfErrors = pidController->currentError - pidController->previousError;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80065fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	if (pidController->sumOfErrors > pidController->maxSumOfErrors)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	ed93 7a05 	vldr	s14, [r3, #20]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	ee07 3a90 	vmov	s15, r3
 8006614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006618:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800661c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006620:	dd09      	ble.n	8006636 <pidCompute+0x7a>
	{
		pidController->sumOfErrors = pidController->maxSumOfErrors;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	edc3 7a05 	vstr	s15, [r3, #20]
 8006634:	e016      	b.n	8006664 <pidCompute+0xa8>
	}
	else if (pidController->sumOfErrors < pidController->minSumOfErrors)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	ed93 7a05 	vldr	s14, [r3, #20]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006640:	ee07 3a90 	vmov	s15, r3
 8006644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006648:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800664c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006650:	d508      	bpl.n	8006664 <pidCompute+0xa8>
	{
		pidController->sumOfErrors = pidController->minSumOfErrors;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	if (pidController->controllerTopology == P_CONTROLLER)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800666a:	2b00      	cmp	r3, #0
 800666c:	d114      	bne.n	8006698 <pidCompute+0xdc>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	ed93 7a00 	vldr	s14, [r3]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	edd3 7a03 	vldr	s15, [r3, #12]
 800667a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667e:	edc7 7a02 	vstr	s15, [r7, #8]
		pidController->controlledVariable = proportionalTerm + pidController->bias;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8006688:	edd7 7a02 	vldr	s15, [r7, #8]
 800668c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	edc3 7a07 	vstr	s15, [r3, #28]
 8006696:	e061      	b.n	800675c <pidCompute+0x1a0>
	}
	else if (pidController->controllerTopology == PI_CONTROLLER)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d122      	bne.n	80066e8 <pidCompute+0x12c>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	ed93 7a00 	vldr	s14, [r3]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80066ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b2:	edc7 7a04 	vstr	s15, [r7, #16]
		float integralTerm = pidController->ki * pidController->sumOfErrors;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	edd3 7a05 	vldr	s15, [r3, #20]
 80066c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c6:	edc7 7a03 	vstr	s15, [r7, #12]
		pidController->controlledVariable = proportionalTerm + integralTerm + pidController->bias;
 80066ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80066ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80066d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80066dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	edc3 7a07 	vstr	s15, [r3, #28]
 80066e6:	e039      	b.n	800675c <pidCompute+0x1a0>
	}
	else if (pidController->controllerTopology == PID_CONTROLLER)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d130      	bne.n	8006754 <pidCompute+0x198>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	ed93 7a00 	vldr	s14, [r3]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80066fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006702:	edc7 7a07 	vstr	s15, [r7, #28]
		float integralTerm = pidController->ki * pidController->sumOfErrors;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	ed93 7a01 	vldr	s14, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006716:	edc7 7a06 	vstr	s15, [r7, #24]
		float derivativeTerm = pidController->kd * pidController->differenceOfErrors;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	ed93 7a02 	vldr	s14, [r3, #8]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672a:	edc7 7a05 	vstr	s15, [r7, #20]
		pidController->controlledVariable = proportionalTerm + integralTerm + derivativeTerm + pidController->bias;
 800672e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006732:	edd7 7a06 	vldr	s15, [r7, #24]
 8006736:	ee37 7a27 	vadd.f32	s14, s14, s15
 800673a:	edd7 7a05 	vldr	s15, [r7, #20]
 800673e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	edc3 7a07 	vstr	s15, [r3, #28]
 8006752:	e003      	b.n	800675c <pidCompute+0x1a0>
	}
	else
	{
		pidController->controlledVariable = 0;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	61da      	str	r2, [r3, #28]
	}

	if (pidController->controlledVariable > pidController->maxControlledVariable)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	ed93 7a07 	vldr	s14, [r3, #28]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800676e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006776:	dd09      	ble.n	800678c <pidCompute+0x1d0>
	{
		pidController->controlledVariable = pidController->maxControlledVariable;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	ee07 3a90 	vmov	s15, r3
 8006780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	edc3 7a07 	vstr	s15, [r3, #28]
 800678a:	e016      	b.n	80067ba <pidCompute+0x1fe>
	}
	else if (pidController->controlledVariable < pidController->minControlledVariable)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	ed93 7a07 	vldr	s14, [r3, #28]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800679e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067a6:	d508      	bpl.n	80067ba <pidCompute+0x1fe>
	{
		pidController->controlledVariable = pidController->minControlledVariable;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ac:	ee07 3a90 	vmov	s15, r3
 80067b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	pidController->previousError = pidController->currentError;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	611a      	str	r2, [r3, #16]
}
 80067c2:	bf00      	nop
 80067c4:	3724      	adds	r7, #36	; 0x24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <pidSetSetpoint>:

void pidSetSetpoint(PidController *pidController, float setpoint)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	ed87 0a00 	vstr	s0, [r7]
	pidController->setpoint = setpoint;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	619a      	str	r2, [r3, #24]
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <pidSetProcessVariable>:
{
	return pidController->setpoint;
}

void pidSetProcessVariable(PidController *pidController, float processVariable)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	ed87 0a00 	vstr	s0, [r7]
	pidController->processVariable = processVariable + pidController->offset;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80067fe:	edd7 7a00 	vldr	s15, [r7]
 8006802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <pidGetProcessVariable>:

float pidGetProcessVariable(PidController *pidController)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	return pidController->processVariable;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	ee07 3a90 	vmov	s15, r3
}
 8006828:	eeb0 0a67 	vmov.f32	s0, s15
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <pidGetControlledVariable>:

float pidGetControlledVariable(PidController *pidController)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
	return pidController->controlledVariable;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	ee07 3a90 	vmov	s15, r3
}
 8006846:	eeb0 0a67 	vmov.f32	s0, s15
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <pidGetInterval>:

float pidGetInterval(PidController *pidController)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
	return pidController->interval;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	ee07 3a90 	vmov	s15, r3
}
 8006864:	eeb0 0a67 	vmov.f32	s0, s15
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <pidSetInterval>:

void pidSetInterval(PidController *pidController, float interval)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	ed87 0a00 	vstr	s0, [r7]
	pidController->interval = interval;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <__libc_init_array>:
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	4d0d      	ldr	r5, [pc, #52]	; (80068c8 <__libc_init_array+0x38>)
 8006894:	4c0d      	ldr	r4, [pc, #52]	; (80068cc <__libc_init_array+0x3c>)
 8006896:	1b64      	subs	r4, r4, r5
 8006898:	10a4      	asrs	r4, r4, #2
 800689a:	2600      	movs	r6, #0
 800689c:	42a6      	cmp	r6, r4
 800689e:	d109      	bne.n	80068b4 <__libc_init_array+0x24>
 80068a0:	4d0b      	ldr	r5, [pc, #44]	; (80068d0 <__libc_init_array+0x40>)
 80068a2:	4c0c      	ldr	r4, [pc, #48]	; (80068d4 <__libc_init_array+0x44>)
 80068a4:	f000 f82e 	bl	8006904 <_init>
 80068a8:	1b64      	subs	r4, r4, r5
 80068aa:	10a4      	asrs	r4, r4, #2
 80068ac:	2600      	movs	r6, #0
 80068ae:	42a6      	cmp	r6, r4
 80068b0:	d105      	bne.n	80068be <__libc_init_array+0x2e>
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b8:	4798      	blx	r3
 80068ba:	3601      	adds	r6, #1
 80068bc:	e7ee      	b.n	800689c <__libc_init_array+0xc>
 80068be:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c2:	4798      	blx	r3
 80068c4:	3601      	adds	r6, #1
 80068c6:	e7f2      	b.n	80068ae <__libc_init_array+0x1e>
 80068c8:	08006a3c 	.word	0x08006a3c
 80068cc:	08006a3c 	.word	0x08006a3c
 80068d0:	08006a3c 	.word	0x08006a3c
 80068d4:	08006a40 	.word	0x08006a40

080068d8 <memcpy>:
 80068d8:	440a      	add	r2, r1
 80068da:	4291      	cmp	r1, r2
 80068dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80068e0:	d100      	bne.n	80068e4 <memcpy+0xc>
 80068e2:	4770      	bx	lr
 80068e4:	b510      	push	{r4, lr}
 80068e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068ee:	4291      	cmp	r1, r2
 80068f0:	d1f9      	bne.n	80068e6 <memcpy+0xe>
 80068f2:	bd10      	pop	{r4, pc}

080068f4 <memset>:
 80068f4:	4402      	add	r2, r0
 80068f6:	4603      	mov	r3, r0
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d100      	bne.n	80068fe <memset+0xa>
 80068fc:	4770      	bx	lr
 80068fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006902:	e7f9      	b.n	80068f8 <memset+0x4>

08006904 <_init>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	bf00      	nop
 8006908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690a:	bc08      	pop	{r3}
 800690c:	469e      	mov	lr, r3
 800690e:	4770      	bx	lr

08006910 <_fini>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	bf00      	nop
 8006914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006916:	bc08      	pop	{r3}
 8006918:	469e      	mov	lr, r3
 800691a:	4770      	bx	lr
