
CurrentController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078cc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08007a94  08007a94  00017a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bac  08007bac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007bac  08007bac  00017bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bb4  08007bb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bb4  08007bb4  00017bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  2000000c  08007bc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  08007bc8  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001835c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034bd  00000000  00000000  00038398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  0003b858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  0003cda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024eb3  00000000  00000000  0003e170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018302  00000000  00000000  00063023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfe96  00000000  00000000  0007b325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b1bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b20  00000000  00000000  0015b20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007a7c 	.word	0x08007a7c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08007a7c 	.word	0x08007a7c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b974 	b.w	8000d44 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468e      	mov	lr, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d14d      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a82:	428a      	cmp	r2, r1
 8000a84:	4694      	mov	ip, r2
 8000a86:	d969      	bls.n	8000b5c <__udivmoddi4+0xe8>
 8000a88:	fab2 f282 	clz	r2, r2
 8000a8c:	b152      	cbz	r2, 8000aa4 <__udivmoddi4+0x30>
 8000a8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a92:	f1c2 0120 	rsb	r1, r2, #32
 8000a96:	fa20 f101 	lsr.w	r1, r0, r1
 8000a9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa8:	0c21      	lsrs	r1, r4, #16
 8000aaa:	fbbe f6f8 	udiv	r6, lr, r8
 8000aae:	fa1f f78c 	uxth.w	r7, ip
 8000ab2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ab6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aba:	fb06 f107 	mul.w	r1, r6, r7
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aca:	f080 811f 	bcs.w	8000d0c <__udivmoddi4+0x298>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 811c 	bls.w	8000d0c <__udivmoddi4+0x298>
 8000ad4:	3e02      	subs	r6, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a5b      	subs	r3, r3, r1
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae8:	fb00 f707 	mul.w	r7, r0, r7
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	d90a      	bls.n	8000b06 <__udivmoddi4+0x92>
 8000af0:	eb1c 0404 	adds.w	r4, ip, r4
 8000af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af8:	f080 810a 	bcs.w	8000d10 <__udivmoddi4+0x29c>
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	f240 8107 	bls.w	8000d10 <__udivmoddi4+0x29c>
 8000b02:	4464      	add	r4, ip
 8000b04:	3802      	subs	r0, #2
 8000b06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b0a:	1be4      	subs	r4, r4, r7
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	b11d      	cbz	r5, 8000b18 <__udivmoddi4+0xa4>
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	2300      	movs	r3, #0
 8000b14:	e9c5 4300 	strd	r4, r3, [r5]
 8000b18:	4631      	mov	r1, r6
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d909      	bls.n	8000b36 <__udivmoddi4+0xc2>
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	f000 80ef 	beq.w	8000d06 <__udivmoddi4+0x292>
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2e:	4630      	mov	r0, r6
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	fab3 f683 	clz	r6, r3
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d14a      	bne.n	8000bd4 <__udivmoddi4+0x160>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d302      	bcc.n	8000b48 <__udivmoddi4+0xd4>
 8000b42:	4282      	cmp	r2, r0
 8000b44:	f200 80f9 	bhi.w	8000d3a <__udivmoddi4+0x2c6>
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b4e:	2001      	movs	r0, #1
 8000b50:	469e      	mov	lr, r3
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	d0e0      	beq.n	8000b18 <__udivmoddi4+0xa4>
 8000b56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b5a:	e7dd      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000b5c:	b902      	cbnz	r2, 8000b60 <__udivmoddi4+0xec>
 8000b5e:	deff      	udf	#255	; 0xff
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	f040 8092 	bne.w	8000c8e <__udivmoddi4+0x21a>
 8000b6a:	eba1 010c 	sub.w	r1, r1, ip
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2601      	movs	r6, #1
 8000b78:	0c20      	lsrs	r0, r4, #16
 8000b7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b86:	fb0e f003 	mul.w	r0, lr, r3
 8000b8a:	4288      	cmp	r0, r1
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x12c>
 8000b8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x12a>
 8000b98:	4288      	cmp	r0, r1
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2c0>
 8000b9e:	4643      	mov	r3, r8
 8000ba0:	1a09      	subs	r1, r1, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x156>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x154>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bc8:	4608      	mov	r0, r1
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bd2:	e79c      	b.n	8000b0e <__udivmoddi4+0x9a>
 8000bd4:	f1c6 0720 	rsb	r7, r6, #32
 8000bd8:	40b3      	lsls	r3, r6
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa20 f407 	lsr.w	r4, r0, r7
 8000be6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bea:	431c      	orrs	r4, r3
 8000bec:	40f9      	lsrs	r1, r7
 8000bee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bfa:	0c20      	lsrs	r0, r4, #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fb09 1118 	mls	r1, r9, r8, r1
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	fb08 f00e 	mul.w	r0, r8, lr
 8000c0c:	4288      	cmp	r0, r1
 8000c0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b8>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2bc>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2bc>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1a09      	subs	r1, r1, r0
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c34:	fb09 1110 	mls	r1, r9, r0, r1
 8000c38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c40:	458e      	cmp	lr, r1
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1e2>
 8000c44:	eb1c 0101 	adds.w	r1, ip, r1
 8000c48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2b4>
 8000c4e:	458e      	cmp	lr, r1
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2b4>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4461      	add	r1, ip
 8000c56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c5e:	eba1 010e 	sub.w	r1, r1, lr
 8000c62:	42a1      	cmp	r1, r4
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46a6      	mov	lr, r4
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x2a4>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x2a0>
 8000c6c:	b15d      	cbz	r5, 8000c86 <__udivmoddi4+0x212>
 8000c6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c72:	eb61 010e 	sbc.w	r1, r1, lr
 8000c76:	fa01 f707 	lsl.w	r7, r1, r7
 8000c7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c7e:	40f1      	lsrs	r1, r6
 8000c80:	431f      	orrs	r7, r3
 8000c82:	e9c5 7100 	strd	r7, r1, [r5]
 8000c86:	2600      	movs	r6, #0
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	f1c2 0320 	rsb	r3, r2, #32
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c98:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4301      	orrs	r1, r0
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cac:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb0:	0c0b      	lsrs	r3, r1, #16
 8000cb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x260>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b8>
 8000ccc:	429e      	cmp	r6, r3
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b8>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	b289      	uxth	r1, r1
 8000cd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x28a>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cfa:	3e02      	subs	r6, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0x104>
 8000d06:	462e      	mov	r6, r5
 8000d08:	4628      	mov	r0, r5
 8000d0a:	e705      	b.n	8000b18 <__udivmoddi4+0xa4>
 8000d0c:	4606      	mov	r6, r0
 8000d0e:	e6e3      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000d10:	4618      	mov	r0, r3
 8000d12:	e6f8      	b.n	8000b06 <__udivmoddi4+0x92>
 8000d14:	454b      	cmp	r3, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f8>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d20:	3801      	subs	r0, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f8>
 8000d24:	4646      	mov	r6, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x28a>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1e2>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b8>
 8000d34:	3b02      	subs	r3, #2
 8000d36:	4461      	add	r1, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x12c>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e709      	b.n	8000b52 <__udivmoddi4+0xde>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x156>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <appInit>:

// ======== Init =========== //
void appInit(App *app, GPIO_TypeDef* ledPort, uint16_t ledPin,
			UART_HandleTypeDef huart, DAC_HandleTypeDef hdac,
			UART_HandleTypeDef huartDebug, ADC_HandleTypeDef hadc)
{
 8000d48:	b082      	sub	sp, #8
 8000d4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4c:	b0a5      	sub	sp, #148	; 0x94
 8000d4e:	af20      	add	r7, sp, #128	; 0x80
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d56:	4613      	mov	r3, r2
 8000d58:	80fb      	strh	r3, [r7, #6]
	// ======== LED =========== //
	blinkLedInit(&app->blinkLed, ledPort, ledPin, PATTERN_TOGGLE_EACH_100_MS);
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	88fa      	ldrh	r2, [r7, #6]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	f000 fbd4 	bl	800150e <blinkLedInit>

	// ======== Comm ======== //
	commInit(&app->comm, huart, huartDebug);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f103 0610 	add.w	r6, r3, #16
 8000d6c:	a80e      	add	r0, sp, #56	; 0x38
 8000d6e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d72:	2244      	movs	r2, #68	; 0x44
 8000d74:	4619      	mov	r1, r3
 8000d76:	f006 fe6b 	bl	8007a50 <memcpy>
 8000d7a:	466d      	mov	r5, sp
 8000d7c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d90:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	f000 fd68 	bl	8001870 <commInit>

	// ======== Filter =========== //
	movingAverageInit(&app->movingAverageFilter, 128);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	4618      	mov	r0, r3
 8000daa:	f006 fa71 	bl	8007290 <movingAverageInit>

	// ======== Sampling =========== //
	samplingInit(&app->sampling, hadc);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f503 66cf 	add.w	r6, r3, #1656	; 0x678
 8000db4:	466d      	mov	r5, sp
 8000db6:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 8000dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000dca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000dce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000dd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	f001 fe78 	bl	8002aca <samplingInit>

	// ======== Controller =========== //
	controllerInit(&app->controller, hdac);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f503 64da 	add.w	r4, r3, #1744	; 0x6d0
 8000de0:	466a      	mov	r2, sp
 8000de2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000de6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000dea:	e882 0003 	stmia.w	r2, {r0, r1}
 8000dee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000df4:	4620      	mov	r0, r4
 8000df6:	f001 fc7b 	bl	80026f0 <controllerInit>
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000e04:	b002      	add	sp, #8
 8000e06:	4770      	bx	lr

08000e08 <appExecuteBlinkLed>:

// ======== LED =========== //
void appExecuteBlinkLed(App *app)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	blinkLedExecuteBlink(&app->blinkLed);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fba4 	bl	8001560 <blinkLedExecuteBlink>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <appRunController>:

// ======== Controller =========== //
void appRunController(App *app)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	controllerRunPidController(&app->controller);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 fc9e 	bl	8002770 <controllerRunPidController>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	0000      	movs	r0, r0
	...

08000e40 <appGetCurrentInMiliAmps>:

// ======== App Calculations =========== //
uint32_t appGetCurrentInMiliAmps(App *app, uint16_t adcValue)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	; 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
	uint32_t electronicCircuitGain = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
	float voltageDividerRate = 0;
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]

	if (samplingGetCurrentMagnitudeOrder(&app->sampling) == LOW_CURRENT)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 feda 	bl	8002c16 <samplingGetCurrentMagnitudeOrder>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d104      	bne.n	8000e72 <appGetCurrentInMiliAmps+0x32>
	{
		electronicCircuitGain = 100;
 8000e68:	2364      	movs	r3, #100	; 0x64
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
		voltageDividerRate = 0.877;
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <appGetCurrentInMiliAmps+0xe0>)
 8000e6e:	623b      	str	r3, [r7, #32]
 8000e70:	e003      	b.n	8000e7a <appGetCurrentInMiliAmps+0x3a>
	}
	else
	{
		electronicCircuitGain = 10;
 8000e72:	230a      	movs	r3, #10
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
		voltageDividerRate = 0.955;
 8000e76:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <appGetCurrentInMiliAmps+0xe4>)
 8000e78:	623b      	str	r3, [r7, #32]
	}

	uint32_t shuntResistorInOhms = 1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	61fb      	str	r3, [r7, #28]
  	float measuredSignalInVolts = ((3.3 * adcValue) / 4095);
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fb13 	bl	80004ac <__aeabi_i2d>
 8000e86:	a322      	add	r3, pc, #136	; (adr r3, 8000f10 <appGetCurrentInMiliAmps+0xd0>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f7ff fb78 	bl	8000580 <__aeabi_dmul>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	a31f      	add	r3, pc, #124	; (adr r3, 8000f18 <appGetCurrentInMiliAmps+0xd8>)
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	f7ff fc99 	bl	80007d4 <__aeabi_ddiv>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fd7b 	bl	80009a4 <__aeabi_d2f>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	61bb      	str	r3, [r7, #24]
  	float conditionedSignalInVolts = measuredSignalInVolts / (electronicCircuitGain * voltageDividerRate);
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ebc:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ec0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ec4:	edd7 6a06 	vldr	s13, [r7, #24]
 8000ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ecc:	edc7 7a05 	vstr	s15, [r7, #20]
  	float calculatedCurrentInAmps = conditionedSignalInVolts / shuntResistorInOhms;
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eda:	edd7 6a05 	vldr	s13, [r7, #20]
 8000ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ee2:	edc7 7a04 	vstr	s15, [r7, #16]
  	float calculatedCurrentInMiliAmpsAux = 1000 * calculatedCurrentInAmps;
 8000ee6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f28 <appGetCurrentInMiliAmps+0xe8>
 8000eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef2:	edc7 7a03 	vstr	s15, [r7, #12]
  	uint32_t calculatedCurrentInMiliAmps = (uint32_t) calculatedCurrentInMiliAmpsAux;
 8000ef6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000efe:	ee17 3a90 	vmov	r3, s15
 8000f02:	60bb      	str	r3, [r7, #8]
  	return calculatedCurrentInMiliAmps;
 8000f04:	68bb      	ldr	r3, [r7, #8]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	66666666 	.word	0x66666666
 8000f14:	400a6666 	.word	0x400a6666
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	40affe00 	.word	0x40affe00
 8000f20:	3f608312 	.word	0x3f608312
 8000f24:	3f747ae1 	.word	0x3f747ae1
 8000f28:	447a0000 	.word	0x447a0000

08000f2c <appExecuteSampling>:

// ======== Sampling =========== //
void appExecuteSampling(App *app)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	samplingExecuteAdcRead(&app->sampling);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 fdec 	bl	8002b18 <samplingExecuteAdcRead>

	uint16_t readAdcValue = samplingGetAdcValue(&app->sampling);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fe59 	bl	8002bfe <samplingGetAdcValue>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	82fb      	strh	r3, [r7, #22]
	uint32_t calculatedCurrentInMiliAmps = appGetCurrentInMiliAmps(app, readAdcValue);
 8000f50:	8afb      	ldrh	r3, [r7, #22]
 8000f52:	4619      	mov	r1, r3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff73 	bl	8000e40 <appGetCurrentInMiliAmps>
 8000f5a:	6138      	str	r0, [r7, #16]
	appAddNewValueToFilter(app, calculatedCurrentInMiliAmps);
 8000f5c:	6939      	ldr	r1, [r7, #16]
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f80c 	bl	8000f7c <appAddNewValueToFilter>
	uint32_t filteredCurrentInMiliAmps = appGetFilterResult(app);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f81a 	bl	8000f9e <appGetFilterResult>
 8000f6a:	60f8      	str	r0, [r7, #12]
	appSetPidProcessVariable(app, filteredCurrentInMiliAmps);
 8000f6c:	68f9      	ldr	r1, [r7, #12]
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 fa23 	bl	80013ba <appSetPidProcessVariable>
}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <appAddNewValueToFilter>:

// ======== Filter =========== //
void appAddNewValueToFilter(App *app, uint32_t newValue)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
	movingAverageAddValue(&app->movingAverageFilter, newValue);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f006 f99d 	bl	80072d0 <movingAverageAddValue>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <appGetFilterResult>:

uint32_t appGetFilterResult(App *app)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	return movingAverageGetMean(&app->movingAverageFilter);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fac:	4618      	mov	r0, r3
 8000fae:	f006 f9ca 	bl	8007346 <movingAverageGetMean>
 8000fb2:	4603      	mov	r3, r0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <appAppendReceivedByte>:

// ======== Data Packet Rx =========== //
void appAppendReceivedByte(App *app, uint8_t receivedByte)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	70fb      	strb	r3, [r7, #3]
	commAppendReceivedByte(&app->comm, receivedByte);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3310      	adds	r3, #16
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 f84d 	bl	8002070 <commAppendReceivedByte>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <appDecodeReceivedData>:

void appDecodeReceivedData(App *app)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
	commTryDecodeReceivedDataPacket(&app->comm);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3310      	adds	r3, #16
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 f851 	bl	8002092 <commTryDecodeReceivedDataPacket>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <appExtractCommandAndPayloadFromDecodedData>:

void appExtractCommandAndPayloadFromDecodedData(App *app)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	commTryExtractCommandAndPayloadFromDecodedDataPacket(&app->comm);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3310      	adds	r3, #16
 8001004:	4618      	mov	r0, r3
 8001006:	f001 f851 	bl	80020ac <commTryExtractCommandAndPayloadFromDecodedDataPacket>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <appDecodeExtractedCommand>:

void appDecodeExtractedCommand(App *app)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	commTryDecodeExtractedCommand(&app->comm, app);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3310      	adds	r3, #16
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4618      	mov	r0, r3
 8001022:	f001 f87e 	bl	8002122 <commTryDecodeExtractedCommand>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <appSendData>:

// ======== Data Packet Tx =========== //
void appSendData(App *app)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	commTrySendData(&app->comm, app);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3310      	adds	r3, #16
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fc64 	bl	800190a <commTrySendData>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <appGetPidKp>:

// ======= Getters and Setters ======== //
float appGetPidKp(App *app)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	return controllerGetPidKp(&app->controller);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001058:	4618      	mov	r0, r3
 800105a:	f001 fba8 	bl	80027ae <controllerGetPidKp>
 800105e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001062:	eeb0 0a67 	vmov.f32	s0, s15
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <appSetPidKp>:

void appSetPidKp(App *app, float kp)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidKp(&app->controller, kp);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800107e:	ed97 0a00 	vldr	s0, [r7]
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fba2 	bl	80027cc <controllerSetPidKp>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <appGetPidKi>:

float appGetPidKi(App *app)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	return controllerGetPidKi(&app->controller);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fba4 	bl	80027ec <controllerGetPidKi>
 80010a4:	eef0 7a40 	vmov.f32	s15, s0
}
 80010a8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <appSetPidKi>:

void appSetPidKi(App *app, float ki)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidKi(&app->controller, ki);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80010c4:	ed97 0a00 	vldr	s0, [r7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fb9e 	bl	800280a <controllerSetPidKi>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <appGetPidKd>:

float appGetPidKd(App *app)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
	return controllerGetPidKd(&app->controller);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 fba0 	bl	800282a <controllerGetPidKd>
 80010ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80010ee:	eeb0 0a67 	vmov.f32	s0, s15
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <appSetPidKd>:

void appSetPidKd(App *app, float kd)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidKd(&app->controller, kd);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800110a:	ed97 0a00 	vldr	s0, [r7]
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fb9a 	bl	8002848 <controllerSetPidKd>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <appGetPidInterval>:

uint16_t appGetPidInterval(App *app)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	return (uint16_t) (10000 * controllerGetPidInterval(&app->controller));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fb9c 	bl	8002868 <controllerGetPidInterval>
 8001130:	eef0 7a40 	vmov.f32	s15, s0
 8001134:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001150 <appGetPidInterval+0x34>
 8001138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001140:	ee17 3a90 	vmov	r3, s15
 8001144:	b29b      	uxth	r3, r3
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	461c4000 	.word	0x461c4000

08001154 <appSetPidInterval>:

void appSetPidInterval(App *app, uint16_t pidInterval)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
	if ((pidInterval >= 0) && (pidInterval <= DELAY_5000_MILISECONDS))
 8001160:	887b      	ldrh	r3, [r7, #2]
 8001162:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001166:	4293      	cmp	r3, r2
 8001168:	d810      	bhi.n	800118c <appSetPidInterval+0x38>
	{
		controllerSetPidInterval(&app->controller, ((float) pidInterval) / 10000);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001170:	887a      	ldrh	r2, [r7, #2]
 8001172:	ee07 2a90 	vmov	s15, r2
 8001176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001194 <appSetPidInterval+0x40>
 800117e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001182:	eeb0 0a47 	vmov.f32	s0, s14
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fb7d 	bl	8002886 <controllerSetPidInterval>
	}
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	461c4000 	.word	0x461c4000

08001198 <appGetPidMinSumOfErrors>:

int32_t appGetPidMinSumOfErrors(App *app)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	return controllerGetPidMinSumOfErrors(&app->controller);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 fb7d 	bl	80028a6 <controllerGetPidMinSumOfErrors>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <appSetPidMinSumOfErrors>:

void appSetPidMinSumOfErrors(App *app, int32_t minSumOfErrors)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
	controllerSetPidMinSumOfErrors(&app->controller, minSumOfErrors);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80011c6:	6839      	ldr	r1, [r7, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fb79 	bl	80028c0 <controllerSetPidMinSumOfErrors>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <appGetPidMaxSumOfErrors>:

int32_t appGetPidMaxSumOfErrors(App *app)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	return controllerGetPidMaxSumOfErrors(&app->controller);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 fb79 	bl	80028dc <controllerGetPidMaxSumOfErrors>
 80011ea:	4603      	mov	r3, r0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <appSetPidMaxSumOfErrors>:

void appSetPidMaxSumOfErrors(App *app, int32_t maxSumOfErrors)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	controllerSetPidMaxSumOfErrors(&app->controller, maxSumOfErrors);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001204:	6839      	ldr	r1, [r7, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fb75 	bl	80028f6 <controllerSetPidMaxSumOfErrors>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <appGetPidMinControlledVariable>:

int32_t appGetPidMinControlledVariable(App *app)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	return controllerGetPidMinControlledVariable(&app->controller);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001222:	4618      	mov	r0, r3
 8001224:	f001 fb75 	bl	8002912 <controllerGetPidMinControlledVariable>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <appSetPidMinControlledVariable>:

void appSetPidMinControlledVariable(App *app, int32_t minControlledVariable)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]
	controllerSetPidMinControlledVariable(&app->controller, minControlledVariable);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001242:	6839      	ldr	r1, [r7, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f001 fb71 	bl	800292c <controllerSetPidMinControlledVariable>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <appGetPidMaxControlledVariable>:

int32_t appGetPidMaxControlledVariable(App *app)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
	return controllerGetPidMaxControlledVariable(&app->controller);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001260:	4618      	mov	r0, r3
 8001262:	f001 fb71 	bl	8002948 <controllerGetPidMaxControlledVariable>
 8001266:	4603      	mov	r3, r0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <appSetPidMaxControlledVariable>:

void appSetPidMaxControlledVariable(App *app, int32_t maxControlledVariable)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	controllerSetPidMaxControlledVariable(&app->controller, maxControlledVariable);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001280:	6839      	ldr	r1, [r7, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fb6d 	bl	8002962 <controllerSetPidMaxControlledVariable>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <appGetPidOffset>:

float appGetPidOffset(App *app)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	return controllerGetPidOffset(&app->controller);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fb6d 	bl	800297e <controllerGetPidOffset>
 80012a4:	eef0 7a40 	vmov.f32	s15, s0
}
 80012a8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <appSetPidOffset>:

void appSetPidOffset(App *app, float offset)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidOffset(&app->controller, offset);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80012c4:	ed97 0a00 	vldr	s0, [r7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fb67 	bl	800299c <controllerSetPidOffset>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <appGetPidBias>:

float appGetPidBias(App *app)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	return controllerGetPidBias(&app->controller);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fb69 	bl	80029bc <controllerGetPidBias>
 80012ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80012ee:	eeb0 0a67 	vmov.f32	s0, s15
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <appSetPidBias>:

void appSetPidBias(App *app, float bias)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	ed87 0a00 	vstr	s0, [r7]
	controllerSetPidBias(&app->controller, bias);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800130a:	ed97 0a00 	vldr	s0, [r7]
 800130e:	4618      	mov	r0, r3
 8001310:	f001 fb63 	bl	80029da <controllerSetPidBias>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <appGetPidSetpoint>:

float appGetPidSetpoint(App *app)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	return controllerGetPidSetpoint(&app->controller);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 800132a:	4618      	mov	r0, r3
 800132c:	f001 fb65 	bl	80029fa <controllerGetPidSetpoint>
 8001330:	eef0 7a40 	vmov.f32	s15, s0
}
 8001334:	eeb0 0a67 	vmov.f32	s0, s15
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <appSetPidSetpoint>:

void appSetPidSetpoint(App *app, float setpoint)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	ed87 0a00 	vstr	s0, [r7]
	if ((setpoint >= MIN_CURRENT_IN_MICRO_AMPS) && (setpoint <= MAX_CURRENT_IN_MICRO_AMPS))
 800134c:	edd7 7a00 	vldr	s15, [r7]
 8001350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	da00      	bge.n	800135c <appSetPidSetpoint+0x1c>
	{
		controllerSetPidSetpoint(&app->controller, setpoint);
		commSetEnableSendCurrentPidSetpointValue(&app->comm, TRUE);
	}
}
 800135a:	e017      	b.n	800138c <appSetPidSetpoint+0x4c>
	if ((setpoint >= MIN_CURRENT_IN_MICRO_AMPS) && (setpoint <= MAX_CURRENT_IN_MICRO_AMPS))
 800135c:	edd7 7a00 	vldr	s15, [r7]
 8001360:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001394 <appSetPidSetpoint+0x54>
 8001364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136c:	d900      	bls.n	8001370 <appSetPidSetpoint+0x30>
}
 800136e:	e00d      	b.n	800138c <appSetPidSetpoint+0x4c>
		controllerSetPidSetpoint(&app->controller, setpoint);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001376:	ed97 0a00 	vldr	s0, [r7]
 800137a:	4618      	mov	r0, r3
 800137c:	f001 fb4c 	bl	8002a18 <controllerSetPidSetpoint>
		commSetEnableSendCurrentPidSetpointValue(&app->comm, TRUE);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3310      	adds	r3, #16
 8001384:	2101      	movs	r1, #1
 8001386:	4618      	mov	r0, r3
 8001388:	f001 f93b 	bl	8002602 <commSetEnableSendCurrentPidSetpointValue>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	48927c00 	.word	0x48927c00

08001398 <appGetPidProcessVariable>:

float appGetPidProcessVariable(App *app)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	return controllerGetPidProcessVariable(&app->controller);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 fb46 	bl	8002a38 <controllerGetPidProcessVariable>
 80013ac:	eef0 7a40 	vmov.f32	s15, s0
}
 80013b0:	eeb0 0a67 	vmov.f32	s0, s15
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <appSetPidProcessVariable>:

void appSetPidProcessVariable(App *app, uint32_t value)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
	controllerSetPidProcessVariable(&app->controller, (float) value);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	ee07 2a90 	vmov	s15, r2
 80013d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013d4:	eeb0 0a67 	vmov.f32	s0, s15
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 fb3c 	bl	8002a56 <controllerSetPidProcessVariable>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <appGetRunPidControllerStatus>:

Bool appGetRunPidControllerStatus(App *app)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
	return controllerGetRunPidControllerStatus(&app->controller);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 fb3e 	bl	8002a76 <controllerGetRunPidControllerStatus>
 80013fa:	4603      	mov	r3, r0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <appSetRunPidControllerStatus>:

void appSetRunPidControllerStatus(App *app, Bool status)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	70fb      	strb	r3, [r7, #3]
	if (status == TRUE)
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d105      	bne.n	8001422 <appSetRunPidControllerStatus+0x1e>
	{
		blinkLedSetBlinkPattern(&app->blinkLed, PATTERN_TOGGLE_EACH_250_MS);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2104      	movs	r1, #4
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fa17 	bl	800184e <blinkLedSetBlinkPattern>
 8001420:	e004      	b.n	800142c <appSetRunPidControllerStatus+0x28>
	}
	else
	{
		blinkLedSetBlinkPattern(&app->blinkLed, PATTERN_TOGGLE_EACH_100_MS);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2101      	movs	r1, #1
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fa11 	bl	800184e <blinkLedSetBlinkPattern>
	}

	controllerSetRunPidControllerStatus(&app->controller, status);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f503 63da 	add.w	r3, r3, #1744	; 0x6d0
 8001432:	78fa      	ldrb	r2, [r7, #3]
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f001 fb2a 	bl	8002a90 <controllerSetRunPidControllerStatus>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <appGetSamplingInterval>:

uint16_t appGetSamplingInterval(App *app)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	return samplingGetSamplingInterval(&app->sampling);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8001452:	4618      	mov	r0, r3
 8001454:	f001 fbb8 	bl	8002bc8 <samplingGetSamplingInterval>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <appSetSamplingInterval>:

void appSetSamplingInterval(App *app, uint16_t samplingInterval)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	807b      	strh	r3, [r7, #2]
	if ((samplingInterval >= 0) && (samplingInterval <= DELAY_5000_MILISECONDS))
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001474:	4293      	cmp	r3, r2
 8001476:	d807      	bhi.n	8001488 <appSetSamplingInterval+0x26>
	{
		samplingSetSamplingInterval(&app->sampling, samplingInterval);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	4611      	mov	r1, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f001 fbac 	bl	8002be0 <samplingSetSamplingInterval>
	}
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <appGetMovingAverageFilterWindow>:

uint16_t appGetMovingAverageFilterWindow(App *app)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	return movingAverageGetWindow(&app->movingAverageFilter);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800149e:	4618      	mov	r0, r3
 80014a0:	f005 ff5e 	bl	8007360 <movingAverageGetWindow>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <appSetMovingAverageFilterWindow>:

void appSetMovingAverageFilterWindow(App *app, uint16_t movingAverageFilterWindow)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	460b      	mov	r3, r1
 80014b8:	807b      	strh	r3, [r7, #2]
	movingAverageSetWindow(&app->movingAverageFilter, movingAverageFilterWindow);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014c0:	887a      	ldrh	r2, [r7, #2]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f005 ff57 	bl	8007378 <movingAverageSetWindow>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <appSetEnableSendKeepAliveMessage>:
{
	return commGetEnableSendKeepAliveMessage(&app->comm);
}

void appSetEnableSendKeepAliveMessage(App *app, Bool status)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	70fb      	strb	r3, [r7, #3]
	commSetEnableSendKeepAliveMessage(&app->comm, status);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3310      	adds	r3, #16
 80014e2:	78fa      	ldrb	r2, [r7, #3]
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 f8a8 	bl	800263c <commSetEnableSendKeepAliveMessage>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <appGetBlinkDelay>:

uint32_t appGetBlinkDelay(App *app)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	return blinkLedGetBlinkDelay(&app->blinkLed);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f964 	bl	80017cc <blinkLedGetBlinkDelay>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <blinkLedInit>:

#include "blinkLed.h"

// ======== Init =========== //
void blinkLedInit(BlinkLed *blinkLed, GPIO_TypeDef* ledPort, uint16_t ledPin, uint8_t blinkPattern)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	4611      	mov	r1, r2
 800151a:	461a      	mov	r2, r3
 800151c:	460b      	mov	r3, r1
 800151e:	80fb      	strh	r3, [r7, #6]
 8001520:	4613      	mov	r3, r2
 8001522:	717b      	strb	r3, [r7, #5]
	blinkLed->ledPort = ledPort;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	609a      	str	r2, [r3, #8]
	blinkLed->ledPin = ledPin;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	88fa      	ldrh	r2, [r7, #6]
 800152e:	819a      	strh	r2, [r3, #12]
	blinkLed->blinkPattern = blinkPattern;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	797a      	ldrb	r2, [r7, #5]
 8001534:	715a      	strb	r2, [r3, #5]
	blinkLed->counter = 0;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	711a      	strb	r2, [r3, #4]
	HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6898      	ldr	r0, [r3, #8]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	899b      	ldrh	r3, [r3, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	4619      	mov	r1, r3
 8001548:	f003 fc3e 	bl	8004dc8 <HAL_GPIO_WritePin>
	blinkLedSetBlinkDelay(blinkLed, DELAY_100_MILISECONDS);
 800154c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 f947 	bl	80017e4 <blinkLedSetBlinkDelay>
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <blinkLedExecuteBlink>:

// ======== LED =========== //
void blinkLedExecuteBlink(BlinkLed *blinkLed)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	switch (blinkLedGetBlinkPattern(blinkLed))
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f964 	bl	8001836 <blinkLedGetBlinkPattern>
 800156e:	4603      	mov	r3, r0
 8001570:	2b05      	cmp	r3, #5
 8001572:	f200 8127 	bhi.w	80017c4 <blinkLedExecuteBlink+0x264>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <blinkLedExecuteBlink+0x1c>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	08001595 	.word	0x08001595
 8001580:	080015cd 	.word	0x080015cd
 8001584:	08001605 	.word	0x08001605
 8001588:	0800170b 	.word	0x0800170b
 800158c:	080015e9 	.word	0x080015e9
 8001590:	080015b1 	.word	0x080015b1
	{
		case PATTERN_ALWAYS_OFF:
			HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6898      	ldr	r0, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	899b      	ldrh	r3, [r3, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	4619      	mov	r1, r3
 80015a0:	f003 fc12 	bl	8004dc8 <HAL_GPIO_WritePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80015a4:	f241 3188 	movw	r1, #5000	; 0x1388
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f91b 	bl	80017e4 <blinkLedSetBlinkDelay>
			break;
 80015ae:	e109      	b.n	80017c4 <blinkLedExecuteBlink+0x264>

		case PATTERN_ALWAYS_ON:
			HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6898      	ldr	r0, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	899b      	ldrh	r3, [r3, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	4619      	mov	r1, r3
 80015bc:	f003 fc04 	bl	8004dc8 <HAL_GPIO_WritePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80015c0:	f241 3188 	movw	r1, #5000	; 0x1388
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f90d 	bl	80017e4 <blinkLedSetBlinkDelay>
			break;
 80015ca:	e0fb      	b.n	80017c4 <blinkLedExecuteBlink+0x264>

		case PATTERN_TOGGLE_EACH_100_MS:
			HAL_GPIO_TogglePin(blinkLed->ledPort, blinkLed->ledPin);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	899b      	ldrh	r3, [r3, #12]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4610      	mov	r0, r2
 80015d8:	f003 fc0f 	bl	8004dfa <HAL_GPIO_TogglePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_100_MILISECONDS);
 80015dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f8ff 	bl	80017e4 <blinkLedSetBlinkDelay>
			break;
 80015e6:	e0ed      	b.n	80017c4 <blinkLedExecuteBlink+0x264>

		case PATTERN_TOGGLE_EACH_250_MS:
			HAL_GPIO_TogglePin(blinkLed->ledPort, blinkLed->ledPin);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	899b      	ldrh	r3, [r3, #12]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4610      	mov	r0, r2
 80015f4:	f003 fc01 	bl	8004dfa <HAL_GPIO_TogglePin>
			blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 80015f8:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f8f1 	bl	80017e4 <blinkLedSetBlinkDelay>
			break;
 8001602:	e0df      	b.n	80017c4 <blinkLedExecuteBlink+0x264>

		case PATTERN_SHORT_SHORT_LONG:
			switch (blinkLedGetCounter(blinkLed))
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f8fb 	bl	8001800 <blinkLedGetCounter>
 800160a:	4603      	mov	r3, r0
 800160c:	2b05      	cmp	r3, #5
 800160e:	f200 80d6 	bhi.w	80017be <blinkLedExecuteBlink+0x25e>
 8001612:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <blinkLedExecuteBlink+0xb8>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	08001631 	.word	0x08001631
 800161c:	08001655 	.word	0x08001655
 8001620:	08001679 	.word	0x08001679
 8001624:	0800169d 	.word	0x0800169d
 8001628:	080016c1 	.word	0x080016c1
 800162c:	080016e5 	.word	0x080016e5
			{
				case 0:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6898      	ldr	r0, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	899b      	ldrh	r3, [r3, #12]
 8001638:	2201      	movs	r2, #1
 800163a:	4619      	mov	r1, r3
 800163c:	f003 fbc4 	bl	8004dc8 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 8001640:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f8cd 	bl	80017e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 1);
 800164a:	2101      	movs	r1, #1
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f8e3 	bl	8001818 <blinkLedSetCounter>
					break;
 8001652:	e059      	b.n	8001708 <blinkLedExecuteBlink+0x1a8>

				case 1:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6898      	ldr	r0, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	899b      	ldrh	r3, [r3, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	4619      	mov	r1, r3
 8001660:	f003 fbb2 	bl	8004dc8 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 8001664:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f8bb 	bl	80017e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 2);
 800166e:	2102      	movs	r1, #2
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f8d1 	bl	8001818 <blinkLedSetCounter>
					break;
 8001676:	e047      	b.n	8001708 <blinkLedExecuteBlink+0x1a8>

				case 2:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6898      	ldr	r0, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	899b      	ldrh	r3, [r3, #12]
 8001680:	2201      	movs	r2, #1
 8001682:	4619      	mov	r1, r3
 8001684:	f003 fba0 	bl	8004dc8 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 8001688:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f8a9 	bl	80017e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 3);
 8001692:	2103      	movs	r1, #3
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f8bf 	bl	8001818 <blinkLedSetCounter>
					break;
 800169a:	e035      	b.n	8001708 <blinkLedExecuteBlink+0x1a8>

				case 3:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6898      	ldr	r0, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	899b      	ldrh	r3, [r3, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	4619      	mov	r1, r3
 80016a8:	f003 fb8e 	bl	8004dc8 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_250_MILISECONDS);
 80016ac:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f897 	bl	80017e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 4);
 80016b6:	2104      	movs	r1, #4
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f8ad 	bl	8001818 <blinkLedSetCounter>
					break;
 80016be:	e023      	b.n	8001708 <blinkLedExecuteBlink+0x1a8>

				case 4:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6898      	ldr	r0, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	899b      	ldrh	r3, [r3, #12]
 80016c8:	2201      	movs	r2, #1
 80016ca:	4619      	mov	r1, r3
 80016cc:	f003 fb7c 	bl	8004dc8 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_750_MILISECONDS);
 80016d0:	f641 514c 	movw	r1, #7500	; 0x1d4c
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f885 	bl	80017e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 5);
 80016da:	2105      	movs	r1, #5
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f89b 	bl	8001818 <blinkLedSetCounter>
					break;
 80016e2:	e011      	b.n	8001708 <blinkLedExecuteBlink+0x1a8>

				case 5:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6898      	ldr	r0, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	899b      	ldrh	r3, [r3, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	4619      	mov	r1, r3
 80016f0:	f003 fb6a 	bl	8004dc8 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 80016f4:	f241 3188 	movw	r1, #5000	; 0x1388
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f873 	bl	80017e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 0);
 80016fe:	2100      	movs	r1, #0
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f889 	bl	8001818 <blinkLedSetCounter>
					break;
 8001706:	bf00      	nop
			}
			break;
 8001708:	e059      	b.n	80017be <blinkLedExecuteBlink+0x25e>

		case PATTERN_HEART_BEAT:
			switch (blinkLedGetCounter(blinkLed))
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f878 	bl	8001800 <blinkLedGetCounter>
 8001710:	4603      	mov	r3, r0
 8001712:	2b03      	cmp	r3, #3
 8001714:	d855      	bhi.n	80017c2 <blinkLedExecuteBlink+0x262>
 8001716:	a201      	add	r2, pc, #4	; (adr r2, 800171c <blinkLedExecuteBlink+0x1bc>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	0800172d 	.word	0x0800172d
 8001720:	08001751 	.word	0x08001751
 8001724:	08001775 	.word	0x08001775
 8001728:	08001799 	.word	0x08001799
			{
				case 0:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6898      	ldr	r0, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	899b      	ldrh	r3, [r3, #12]
 8001734:	2201      	movs	r2, #1
 8001736:	4619      	mov	r1, r3
 8001738:	f003 fb46 	bl	8004dc8 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_200_MILISECONDS);
 800173c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f84f 	bl	80017e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 1);
 8001746:	2101      	movs	r1, #1
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f865 	bl	8001818 <blinkLedSetCounter>
					break;
 800174e:	e035      	b.n	80017bc <blinkLedExecuteBlink+0x25c>

				case 1:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6898      	ldr	r0, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	899b      	ldrh	r3, [r3, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	4619      	mov	r1, r3
 800175c:	f003 fb34 	bl	8004dc8 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_150_MILISECONDS);
 8001760:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f83d 	bl	80017e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 2);
 800176a:	2102      	movs	r1, #2
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f853 	bl	8001818 <blinkLedSetCounter>
					break;
 8001772:	e023      	b.n	80017bc <blinkLedExecuteBlink+0x25c>

				case 2:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_SET);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6898      	ldr	r0, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	899b      	ldrh	r3, [r3, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	4619      	mov	r1, r3
 8001780:	f003 fb22 	bl	8004dc8 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_500_MILISECONDS);
 8001784:	f241 3188 	movw	r1, #5000	; 0x1388
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f82b 	bl	80017e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 3);
 800178e:	2103      	movs	r1, #3
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f841 	bl	8001818 <blinkLedSetCounter>
					break;
 8001796:	e011      	b.n	80017bc <blinkLedExecuteBlink+0x25c>

				case 3:
					HAL_GPIO_WritePin(blinkLed->ledPort, blinkLed->ledPin, GPIO_PIN_RESET);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6898      	ldr	r0, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	899b      	ldrh	r3, [r3, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	4619      	mov	r1, r3
 80017a4:	f003 fb10 	bl	8004dc8 <HAL_GPIO_WritePin>
					blinkLedSetBlinkDelay(blinkLed, DELAY_400_MILISECONDS);
 80017a8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f819 	bl	80017e4 <blinkLedSetBlinkDelay>
					blinkLedSetCounter(blinkLed, 0);
 80017b2:	2100      	movs	r1, #0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f82f 	bl	8001818 <blinkLedSetCounter>
					break;
 80017ba:	bf00      	nop
			}
			break;
 80017bc:	e001      	b.n	80017c2 <blinkLedExecuteBlink+0x262>
			break;
 80017be:	bf00      	nop
 80017c0:	e000      	b.n	80017c4 <blinkLedExecuteBlink+0x264>
			break;
 80017c2:	bf00      	nop
	}
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <blinkLedGetBlinkDelay>:

// ======= Getters and Setters ======== //
uint32_t blinkLedGetBlinkDelay(BlinkLed *blinkLed)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	return blinkLed->blinkDelay;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <blinkLedSetBlinkDelay>:

void blinkLedSetBlinkDelay(BlinkLed *blinkLed, uint32_t blinkDelay)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
	blinkLed->blinkDelay = blinkDelay;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	601a      	str	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <blinkLedGetCounter>:

uint8_t blinkLedGetCounter(BlinkLed *blinkLed)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	return blinkLed->counter;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	791b      	ldrb	r3, [r3, #4]
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <blinkLedSetCounter>:

void blinkLedSetCounter(BlinkLed *blinkLed, uint8_t counter)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
	blinkLed->counter = counter;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	711a      	strb	r2, [r3, #4]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <blinkLedGetBlinkPattern>:

uint8_t blinkLedGetBlinkPattern(BlinkLed *blinkLed)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
	return blinkLed->blinkPattern;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	795b      	ldrb	r3, [r3, #5]
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <blinkLedSetBlinkPattern>:

void blinkLedSetBlinkPattern(BlinkLed *blinkLed, uint8_t blinkPattern)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	70fb      	strb	r3, [r7, #3]
	blinkLed->blinkPattern = blinkPattern;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	715a      	strb	r2, [r3, #5]
	blinkLedSetCounter(blinkLed, 0);
 8001860:	2100      	movs	r1, #0
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffd8 	bl	8001818 <blinkLedSetCounter>
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <commInit>:

#include "comm.h"

// ======== Init ======== //
void commInit(Comm *comm, UART_HandleTypeDef huart, UART_HandleTypeDef huartDebug)
{
 8001870:	b084      	sub	sp, #16
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	f107 0014 	add.w	r0, r7, #20
 800187e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// ======== UART =========== //
	comm->huart = huart;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4618      	mov	r0, r3
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	2244      	movs	r2, #68	; 0x44
 800188c:	4619      	mov	r1, r3
 800188e:	f006 f8df 	bl	8007a50 <memcpy>
	comm->huartDebug = huartDebug;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3344      	adds	r3, #68	; 0x44
 8001896:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800189a:	2244      	movs	r2, #68	; 0x44
 800189c:	4618      	mov	r0, r3
 800189e:	f006 f8d7 	bl	8007a50 <memcpy>

	// ======== Data Packet Tx =========== //
	dataPacketTxInit(&comm->dataPacketTx, 0xAA, 0x55);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3388      	adds	r3, #136	; 0x88
 80018a6:	2255      	movs	r2, #85	; 0x55
 80018a8:	21aa      	movs	r1, #170	; 0xaa
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 f8da 	bl	8003a64 <dataPacketTxInit>
	commSetEnableSendProcessVariable(comm, FALSE);
 80018b0:	2100      	movs	r1, #0
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 fe6b 	bl	800258e <commSetEnableSendProcessVariable>
	commSetEnableSendCurrentConfigDataValues(comm, FALSE);
 80018b8:	2100      	movs	r1, #0
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 fe84 	bl	80025c8 <commSetEnableSendCurrentConfigDataValues>
	commSetEnableSendCurrentPidSetpointValue(comm, FALSE);
 80018c0:	2100      	movs	r1, #0
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fe9d 	bl	8002602 <commSetEnableSendCurrentPidSetpointValue>
	commSetEnableSendKeepAliveMessage(comm,  FALSE);
 80018c8:	2100      	movs	r1, #0
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 feb6 	bl	800263c <commSetEnableSendKeepAliveMessage>

	// ======== Data Packet Rx =========== //
	dataPacketRxInit(&comm->dataPacketRx, 0xAA, 0x55);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	33fe      	adds	r3, #254	; 0xfe
 80018d4:	2255      	movs	r2, #85	; 0x55
 80018d6:	21aa      	movs	r1, #170	; 0xaa
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 fef7 	bl	80036cc <dataPacketRxInit>
	commSetDecodeCommandStatus(comm, FALSE);
 80018de:	2100      	movs	r1, #0
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fec8 	bl	8002676 <commSetDecodeCommandStatus>
	commSetCommand(comm, 0x00);
 80018e6:	2100      	movs	r1, #0
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 fee1 	bl	80026b0 <commSetCommand>
	commClearData(comm);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fbae 	bl	8002050 <commClearData>
	commSetDataLenght(comm, 0);
 80018f4:	2100      	movs	r1, #0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 feea 	bl	80026d0 <commSetDataLenght>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001906:	b004      	add	sp, #16
 8001908:	4770      	bx	lr

0800190a <commTrySendData>:

// ======== TX - Data Packet =========== //
void commTrySendData(Comm *comm, App *app)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
	if (commGetEnableSendCurrentConfigDataValues(comm) == TRUE)
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 fe4a 	bl	80025ae <commGetEnableSendCurrentConfigDataValues>
 800191a:	4603      	mov	r3, r0
 800191c:	2b01      	cmp	r3, #1
 800191e:	d108      	bne.n	8001932 <commTrySendData+0x28>
	{
		commSendCurrentConfigDataValues(comm, app);
 8001920:	6839      	ldr	r1, [r7, #0]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f832 	bl	800198c <commSendCurrentConfigDataValues>
		commSetEnableSendCurrentConfigDataValues(comm, FALSE);
 8001928:	2100      	movs	r1, #0
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 fe4c 	bl	80025c8 <commSetEnableSendCurrentConfigDataValues>
	}
	else if (commGetEnableSendProcessVariable(comm) == TRUE)
	{
		commSendProcessVariable(comm, app);
	}
}
 8001930:	e027      	b.n	8001982 <commTrySendData+0x78>
	else if (commGetEnableSendCurrentPidSetpointValue(comm) == TRUE)
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fe58 	bl	80025e8 <commGetEnableSendCurrentPidSetpointValue>
 8001938:	4603      	mov	r3, r0
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <commTrySendData+0x46>
		commSendCurrentPidSetpointValue(comm, app);
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f9e3 	bl	8001d0c <commSendCurrentPidSetpointValue>
		commSetEnableSendCurrentPidSetpointValue(comm, FALSE);
 8001946:	2100      	movs	r1, #0
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fe5a 	bl	8002602 <commSetEnableSendCurrentPidSetpointValue>
}
 800194e:	e018      	b.n	8001982 <commTrySendData+0x78>
	else if (commGetEnableSendKeepAliveMessage(comm) == TRUE)
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fe66 	bl	8002622 <commGetEnableSendKeepAliveMessage>
 8001956:	4603      	mov	r3, r0
 8001958:	2b01      	cmp	r3, #1
 800195a:	d108      	bne.n	800196e <commTrySendData+0x64>
		commSendKeepAliveMessage(comm, app);
 800195c:	6839      	ldr	r1, [r7, #0]
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 fa60 	bl	8001e24 <commSendKeepAliveMessage>
		commSetEnableSendKeepAliveMessage(comm, FALSE);
 8001964:	2100      	movs	r1, #0
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fe68 	bl	800263c <commSetEnableSendKeepAliveMessage>
}
 800196c:	e009      	b.n	8001982 <commTrySendData+0x78>
	else if (commGetEnableSendProcessVariable(comm) == TRUE)
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fe00 	bl	8002574 <commGetEnableSendProcessVariable>
 8001974:	4603      	mov	r3, r0
 8001976:	2b01      	cmp	r3, #1
 8001978:	d103      	bne.n	8001982 <commTrySendData+0x78>
		commSendProcessVariable(comm, app);
 800197a:	6839      	ldr	r1, [r7, #0]
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 fac7 	bl	8001f10 <commSendProcessVariable>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <commSendCurrentConfigDataValues>:

void commSendCurrentConfigDataValues(Comm *comm, App *app)
{
 800198c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001990:	b09e      	sub	sp, #120	; 0x78
 8001992:	af0e      	add	r7, sp, #56	; 0x38
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
 8001998:	466b      	mov	r3, sp
 800199a:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 42;
 800199c:	232a      	movs	r3, #42	; 0x2a
 800199e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t bytes[qtyOfBytes];
 80019a2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80019a6:	460b      	mov	r3, r1
 80019a8:	3b01      	subs	r3, #1
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80019ac:	b2cb      	uxtb	r3, r1
 80019ae:	2200      	movs	r2, #0
 80019b0:	4698      	mov	r8, r3
 80019b2:	4691      	mov	r9, r2
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019c8:	b2cb      	uxtb	r3, r1
 80019ca:	2200      	movs	r2, #0
 80019cc:	461c      	mov	r4, r3
 80019ce:	4615      	mov	r5, r2
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	00eb      	lsls	r3, r5, #3
 80019da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019de:	00e2      	lsls	r2, r4, #3
 80019e0:	460b      	mov	r3, r1
 80019e2:	3307      	adds	r3, #7
 80019e4:	08db      	lsrs	r3, r3, #3
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	ebad 0d03 	sub.w	sp, sp, r3
 80019ec:	ab0e      	add	r3, sp, #56	; 0x38
 80019ee:	3300      	adds	r3, #0
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t kpTimes1000 = (uint32_t) (1000 * appGetPidKp(app));
 80019f2:	6838      	ldr	r0, [r7, #0]
 80019f4:	f7ff fb29 	bl	800104a <appGetPidKp>
 80019f8:	eef0 7a40 	vmov.f32	s15, s0
 80019fc:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8001cb4 <commSendCurrentConfigDataValues+0x328>
 8001a00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a08:	ee17 3a90 	vmov	r3, s15
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t kiTimes1000 = (uint32_t) (1000 * appGetPidKi(app));
 8001a0e:	6838      	ldr	r0, [r7, #0]
 8001a10:	f7ff fb3e 	bl	8001090 <appGetPidKi>
 8001a14:	eef0 7a40 	vmov.f32	s15, s0
 8001a18:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001cb4 <commSendCurrentConfigDataValues+0x328>
 8001a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a24:	ee17 3a90 	vmov	r3, s15
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t kdTimes1000 = (uint32_t) (1000 * appGetPidKd(app));
 8001a2a:	6838      	ldr	r0, [r7, #0]
 8001a2c:	f7ff fb53 	bl	80010d6 <appGetPidKd>
 8001a30:	eef0 7a40 	vmov.f32	s15, s0
 8001a34:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8001cb4 <commSendCurrentConfigDataValues+0x328>
 8001a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a40:	ee17 3a90 	vmov	r3, s15
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t pidInterval = (uint16_t) appGetPidInterval(app);
 8001a46:	6838      	ldr	r0, [r7, #0]
 8001a48:	f7ff fb68 	bl	800111c <appGetPidInterval>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t samplingInterval = appGetSamplingInterval(app);
 8001a50:	6838      	ldr	r0, [r7, #0]
 8001a52:	f7ff fcf7 	bl	8001444 <appGetSamplingInterval>
 8001a56:	4603      	mov	r3, r0
 8001a58:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t movingAverageWindow = appGetMovingAverageFilterWindow(app);
 8001a5a:	6838      	ldr	r0, [r7, #0]
 8001a5c:	f7ff fd18 	bl	8001490 <appGetMovingAverageFilterWindow>
 8001a60:	4603      	mov	r3, r0
 8001a62:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t minSumOfErrors = (uint32_t) (appGetPidMinSumOfErrors(app) + 1000000000);
 8001a64:	6838      	ldr	r0, [r7, #0]
 8001a66:	f7ff fb97 	bl	8001198 <appGetPidMinSumOfErrors>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4b92      	ldr	r3, [pc, #584]	; (8001cb8 <commSendCurrentConfigDataValues+0x32c>)
 8001a6e:	4413      	add	r3, r2
 8001a70:	61fb      	str	r3, [r7, #28]
	uint32_t maxSumOfErrors = (uint32_t) (appGetPidMaxSumOfErrors(app) + 1000000000);
 8001a72:	6838      	ldr	r0, [r7, #0]
 8001a74:	f7ff fbaf 	bl	80011d6 <appGetPidMaxSumOfErrors>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b8f      	ldr	r3, [pc, #572]	; (8001cb8 <commSendCurrentConfigDataValues+0x32c>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
	uint32_t minControlledVariable = (uint32_t) (appGetPidMinControlledVariable(app) + 1000000000);
 8001a80:	6838      	ldr	r0, [r7, #0]
 8001a82:	f7ff fbc7 	bl	8001214 <appGetPidMinControlledVariable>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b8b      	ldr	r3, [pc, #556]	; (8001cb8 <commSendCurrentConfigDataValues+0x32c>)
 8001a8a:	4413      	add	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]
	uint32_t maxControlledVariable = (uint32_t) (appGetPidMaxControlledVariable(app) + 1000000000);
 8001a8e:	6838      	ldr	r0, [r7, #0]
 8001a90:	f7ff fbdf 	bl	8001252 <appGetPidMaxControlledVariable>
 8001a94:	4602      	mov	r2, r0
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <commSendCurrentConfigDataValues+0x32c>)
 8001a98:	4413      	add	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
	uint32_t offset = (uint32_t) ((appGetPidOffset(app) * 1000) + 1000000);
 8001a9c:	6838      	ldr	r0, [r7, #0]
 8001a9e:	f7ff fbf7 	bl	8001290 <appGetPidOffset>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
 8001aa6:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001cb4 <commSendCurrentConfigDataValues+0x328>
 8001aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aae:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001cbc <commSendCurrentConfigDataValues+0x330>
 8001ab2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aba:	ee17 3a90 	vmov	r3, s15
 8001abe:	60fb      	str	r3, [r7, #12]
	uint32_t bias = (uint32_t) ((appGetPidBias(app) * 1000) + 1000000);
 8001ac0:	6838      	ldr	r0, [r7, #0]
 8001ac2:	f7ff fc08 	bl	80012d6 <appGetPidBias>
 8001ac6:	eef0 7a40 	vmov.f32	s15, s0
 8001aca:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001cb4 <commSendCurrentConfigDataValues+0x328>
 8001ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad2:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001cbc <commSendCurrentConfigDataValues+0x330>
 8001ad6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ade:	ee17 3a90 	vmov	r3, s15
 8001ae2:	60bb      	str	r3, [r7, #8]

	/************* Kp *************/
	bytes[0] = ((kpTimes1000 >> 24) & 0x000000FF);
 8001ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae6:	0e1b      	lsrs	r3, r3, #24
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aec:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((kpTimes1000 >> 16) & 0x000000FF);
 8001aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af0:	0c1b      	lsrs	r3, r3, #16
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af6:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((kpTimes1000 >> 8) & 0x000000FF);
 8001af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b00:	709a      	strb	r2, [r3, #2]
	bytes[3] = (kpTimes1000 & 0x000000FF);
 8001b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b08:	70da      	strb	r2, [r3, #3]

	/************* Ki *************/
	bytes[4] = ((kiTimes1000 >> 24) & 0x000000FF);
 8001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0c:	0e1b      	lsrs	r3, r3, #24
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b12:	711a      	strb	r2, [r3, #4]
	bytes[5] = ((kiTimes1000 >> 16) & 0x000000FF);
 8001b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b16:	0c1b      	lsrs	r3, r3, #16
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1c:	715a      	strb	r2, [r3, #5]
	bytes[6] = ((kiTimes1000 >> 8) & 0x000000FF);
 8001b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b26:	719a      	strb	r2, [r3, #6]
	bytes[7] = (kiTimes1000 & 0x000000FF);
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2e:	71da      	strb	r2, [r3, #7]

	/************* Kd *************/
	bytes[8] = ((kdTimes1000 >> 24) & 0x000000FF);
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	0e1b      	lsrs	r3, r3, #24
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b38:	721a      	strb	r2, [r3, #8]
	bytes[9] = ((kdTimes1000 >> 16) & 0x000000FF);
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b42:	725a      	strb	r2, [r3, #9]
	bytes[10] = ((kdTimes1000 >> 8) & 0x000000FF);
 8001b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4c:	729a      	strb	r2, [r3, #10]
	bytes[11] = (kdTimes1000 & 0x000000FF);
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b54:	72da      	strb	r2, [r3, #11]

	/************* Pid Interval *************/
	bytes[12] = ((pidInterval >> 8) & 0x00FF);
 8001b56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b60:	731a      	strb	r2, [r3, #12]
	bytes[13] = (pidInterval & 0x00FF);
 8001b62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b68:	735a      	strb	r2, [r3, #13]

	/************* Sampling Interval *************/
	bytes[14] = ((samplingInterval >> 8) & 0x00FF);
 8001b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b74:	739a      	strb	r2, [r3, #14]
	bytes[15] = (samplingInterval & 0x00FF);
 8001b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7c:	73da      	strb	r2, [r3, #15]

	/************* Moving Average Window *************/
	bytes[16] = ((movingAverageWindow >> 8) & 0x00FF);
 8001b7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b88:	741a      	strb	r2, [r3, #16]
	bytes[17] = (movingAverageWindow & 0x00FF);
 8001b8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b90:	745a      	strb	r2, [r3, #17]

	/************* Min Sum Of Errors *************/
	bytes[18] = ((minSumOfErrors >> 24) & 0x000000FF);
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	0e1b      	lsrs	r3, r3, #24
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9a:	749a      	strb	r2, [r3, #18]
	bytes[19] = ((minSumOfErrors >> 16) & 0x000000FF);
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	0c1b      	lsrs	r3, r3, #16
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba4:	74da      	strb	r2, [r3, #19]
	bytes[20] = ((minSumOfErrors >> 8) & 0x000000FF);
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bae:	751a      	strb	r2, [r3, #20]
	bytes[21] = (minSumOfErrors & 0x000000FF);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb6:	755a      	strb	r2, [r3, #21]

	/************* Max Sum Of Errors *************/
	bytes[22] = ((maxSumOfErrors >> 24) & 0x000000FF);
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	0e1b      	lsrs	r3, r3, #24
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc0:	759a      	strb	r2, [r3, #22]
	bytes[23] = ((maxSumOfErrors >> 16) & 0x000000FF);
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bca:	75da      	strb	r2, [r3, #23]
	bytes[24] = ((maxSumOfErrors >> 8) & 0x000000FF);
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd4:	761a      	strb	r2, [r3, #24]
	bytes[25] = (maxSumOfErrors & 0x000000FF);
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bdc:	765a      	strb	r2, [r3, #25]

	/************* Min Controlled Variable *************/
	bytes[26] = ((minControlledVariable >> 24) & 0x000000FF);
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	0e1b      	lsrs	r3, r3, #24
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be6:	769a      	strb	r2, [r3, #26]
	bytes[27] = ((minControlledVariable >> 16) & 0x000000FF);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf0:	76da      	strb	r2, [r3, #27]
	bytes[28] = ((minControlledVariable >> 8) & 0x000000FF);
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	0a1b      	lsrs	r3, r3, #8
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfa:	771a      	strb	r2, [r3, #28]
	bytes[29] = (minControlledVariable & 0x000000FF);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c02:	775a      	strb	r2, [r3, #29]

	/************* Max Controlled Variable *************/
	bytes[30] = ((maxControlledVariable >> 24) & 0x000000FF);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	0e1b      	lsrs	r3, r3, #24
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0c:	779a      	strb	r2, [r3, #30]
	bytes[31] = ((maxControlledVariable >> 16) & 0x000000FF);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	77da      	strb	r2, [r3, #31]
	bytes[32] = ((maxControlledVariable >> 8) & 0x000000FF);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c20:	f883 2020 	strb.w	r2, [r3, #32]
	bytes[33] = (maxControlledVariable & 0x000000FF);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/************* Offset *************/
	bytes[34] = ((offset >> 24) & 0x000000FF);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	0e1b      	lsrs	r3, r3, #24
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	bytes[35] = ((offset >> 16) & 0x000000FF);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	0c1b      	lsrs	r3, r3, #16
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c42:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	bytes[36] = ((offset >> 8) & 0x000000FF);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	bytes[37] = (offset & 0x000000FF);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	/************* Bias *************/
	bytes[38] = ((bias >> 24) & 0x000000FF);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	0e1b      	lsrs	r3, r3, #24
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	bytes[39] = ((bias >> 16) & 0x000000FF);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	0c1b      	lsrs	r3, r3, #16
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c70:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	bytes[40] = ((bias >> 8) & 0x000000FF);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	bytes[41] = (bias & 0x000000FF);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_CURRENT_CONFIG_DATA_VALUES);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3388      	adds	r3, #136	; 0x88
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	4618      	mov	r0, r3
 8001c92:	f001 ffc4 	bl	8003c1e <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3388      	adds	r3, #136	; 0x88
 8001c9a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001c9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 ffd6 	bl	8003c52 <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3388      	adds	r3, #136	; 0x88
 8001caa:	4618      	mov	r0, r3
 8001cac:	f001 ff0c 	bl	8003ac8 <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	e005      	b.n	8001cc0 <commSendCurrentConfigDataValues+0x334>
 8001cb4:	447a0000 	.word	0x447a0000
 8001cb8:	3b9aca00 	.word	0x3b9aca00
 8001cbc:	49742400 	.word	0x49742400
 8001cc0:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 8001cc4:	687e      	ldr	r6, [r7, #4]
 8001cc6:	466d      	mov	r5, sp
 8001cc8:	f106 040c 	add.w	r4, r6, #12
 8001ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ce0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001ce4:	4660      	mov	r0, ip
 8001ce6:	f001 ff3d 	bl	8003b64 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3388      	adds	r3, #136	; 0x88
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f001 ff77 	bl	8003be2 <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3388      	adds	r3, #136	; 0x88
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 ff54 	bl	8003ba6 <dataPacketTxClear>
 8001cfe:	46d5      	mov	sp, sl
}
 8001d00:	bf00      	nop
 8001d02:	3740      	adds	r7, #64	; 0x40
 8001d04:	46bd      	mov	sp, r7
 8001d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d0a:	bf00      	nop

08001d0c <commSendCurrentPidSetpointValue>:

void commSendCurrentPidSetpointValue(Comm *comm, App *app)
{
 8001d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d10:	b094      	sub	sp, #80	; 0x50
 8001d12:	af0e      	add	r7, sp, #56	; 0x38
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
 8001d18:	466b      	mov	r3, sp
 8001d1a:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 4;
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	75fb      	strb	r3, [r7, #23]
	uint8_t bytes[qtyOfBytes];
 8001d20:	7df9      	ldrb	r1, [r7, #23]
 8001d22:	460b      	mov	r3, r1
 8001d24:	3b01      	subs	r3, #1
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	b2cb      	uxtb	r3, r1
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4698      	mov	r8, r3
 8001d2e:	4691      	mov	r9, r2
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d44:	b2cb      	uxtb	r3, r1
 8001d46:	2200      	movs	r2, #0
 8001d48:	461c      	mov	r4, r3
 8001d4a:	4615      	mov	r5, r2
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	00eb      	lsls	r3, r5, #3
 8001d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d5a:	00e2      	lsls	r2, r4, #3
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	3307      	adds	r3, #7
 8001d60:	08db      	lsrs	r3, r3, #3
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	ebad 0d03 	sub.w	sp, sp, r3
 8001d68:	ab0e      	add	r3, sp, #56	; 0x38
 8001d6a:	3300      	adds	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
	uint32_t setpointTimes1000 = (uint32_t)(1000 * appGetPidSetpoint(app));
 8001d6e:	6838      	ldr	r0, [r7, #0]
 8001d70:	f7ff fad4 	bl	800131c <appGetPidSetpoint>
 8001d74:	eef0 7a40 	vmov.f32	s15, s0
 8001d78:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001e20 <commSendCurrentPidSetpointValue+0x114>
 8001d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d84:	ee17 3a90 	vmov	r3, s15
 8001d88:	60bb      	str	r3, [r7, #8]

	bytes[0] = ((setpointTimes1000 >> 24) & 0x000000FF);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	0e1b      	lsrs	r3, r3, #24
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((setpointTimes1000 >> 16) & 0x000000FF);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	0c1b      	lsrs	r3, r3, #16
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((setpointTimes1000 >> 8) & 0x000000FF);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	709a      	strb	r2, [r3, #2]
	bytes[3] = (setpointTimes1000 & 0x000000FF);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	70da      	strb	r2, [r3, #3]

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_CURRENT_PID_SETPOINT);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3388      	adds	r3, #136	; 0x88
 8001db4:	2181      	movs	r1, #129	; 0x81
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 ff31 	bl	8003c1e <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3388      	adds	r3, #136	; 0x88
 8001dc0:	7dfa      	ldrb	r2, [r7, #23]
 8001dc2:	68f9      	ldr	r1, [r7, #12]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f001 ff44 	bl	8003c52 <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3388      	adds	r3, #136	; 0x88
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fe7a 	bl	8003ac8 <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 8001dda:	687e      	ldr	r6, [r7, #4]
 8001ddc:	466d      	mov	r5, sp
 8001dde:	f106 040c 	add.w	r4, r6, #12
 8001de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001df2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001df6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001dfa:	4660      	mov	r0, ip
 8001dfc:	f001 feb2 	bl	8003b64 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3388      	adds	r3, #136	; 0x88
 8001e04:	4618      	mov	r0, r3
 8001e06:	f001 feec 	bl	8003be2 <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3388      	adds	r3, #136	; 0x88
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 fec9 	bl	8003ba6 <dataPacketTxClear>
 8001e14:	46d5      	mov	sp, sl
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e20:	447a0000 	.word	0x447a0000

08001e24 <commSendKeepAliveMessage>:

void commSendKeepAliveMessage(Comm *comm, App *app)
{
 8001e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e28:	b094      	sub	sp, #80	; 0x50
 8001e2a:	af0e      	add	r7, sp, #56	; 0x38
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
 8001e30:	466b      	mov	r3, sp
 8001e32:	469a      	mov	sl, r3
	uint8_t qtyOfBytes = 1;
 8001e34:	2301      	movs	r3, #1
 8001e36:	75fb      	strb	r3, [r7, #23]
	uint8_t bytes[qtyOfBytes];
 8001e38:	7df9      	ldrb	r1, [r7, #23]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	b2cb      	uxtb	r3, r1
 8001e42:	2200      	movs	r2, #0
 8001e44:	4698      	mov	r8, r3
 8001e46:	4691      	mov	r9, r2
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e5c:	b2cb      	uxtb	r3, r1
 8001e5e:	2200      	movs	r2, #0
 8001e60:	461c      	mov	r4, r3
 8001e62:	4615      	mov	r5, r2
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	00eb      	lsls	r3, r5, #3
 8001e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e72:	00e2      	lsls	r2, r4, #3
 8001e74:	460b      	mov	r3, r1
 8001e76:	3307      	adds	r3, #7
 8001e78:	08db      	lsrs	r3, r3, #3
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	ebad 0d03 	sub.w	sp, sp, r3
 8001e80:	ab0e      	add	r3, sp, #56	; 0x38
 8001e82:	3300      	adds	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]

	if (appGetRunPidControllerStatus(app) == TRUE)
 8001e86:	6838      	ldr	r0, [r7, #0]
 8001e88:	f7ff faad 	bl	80013e6 <appGetRunPidControllerStatus>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d103      	bne.n	8001e9a <commSendKeepAliveMessage+0x76>
	{
		bytes[0] = RUN;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	e002      	b.n	8001ea0 <commSendKeepAliveMessage+0x7c>
	}
	else
	{
		bytes[0] = HALT;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
	}

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_KEEP_ALIVE_MESSAGE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3388      	adds	r3, #136	; 0x88
 8001ea4:	2183      	movs	r1, #131	; 0x83
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 feb9 	bl	8003c1e <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3388      	adds	r3, #136	; 0x88
 8001eb0:	7dfa      	ldrb	r2, [r7, #23]
 8001eb2:	68f9      	ldr	r1, [r7, #12]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f001 fecc 	bl	8003c52 <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3388      	adds	r3, #136	; 0x88
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 fe02 	bl	8003ac8 <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 8001eca:	687e      	ldr	r6, [r7, #4]
 8001ecc:	466d      	mov	r5, sp
 8001ece:	f106 040c 	add.w	r4, r6, #12
 8001ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ede:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ee2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ee6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001eea:	4660      	mov	r0, ip
 8001eec:	f001 fe3a 	bl	8003b64 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3388      	adds	r3, #136	; 0x88
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f001 fe74 	bl	8003be2 <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3388      	adds	r3, #136	; 0x88
 8001efe:	4618      	mov	r0, r3
 8001f00:	f001 fe51 	bl	8003ba6 <dataPacketTxClear>
 8001f04:	46d5      	mov	sp, sl
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001f10 <commSendProcessVariable>:

void commSendProcessVariable(Comm *comm, App *app)
{
 8001f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f14:	b094      	sub	sp, #80	; 0x50
 8001f16:	af0e      	add	r7, sp, #56	; 0x38
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
 8001f1c:	466b      	mov	r3, sp
 8001f1e:	469a      	mov	sl, r3
	uint32_t processVariableValue = (uint32_t) appGetPidProcessVariable(app);
 8001f20:	6838      	ldr	r0, [r7, #0]
 8001f22:	f7ff fa39 	bl	8001398 <appGetPidProcessVariable>
 8001f26:	eef0 7a40 	vmov.f32	s15, s0
 8001f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f2e:	ee17 3a90 	vmov	r3, s15
 8001f32:	617b      	str	r3, [r7, #20]
	uint8_t qtyOfBytes = 4;
 8001f34:	2304      	movs	r3, #4
 8001f36:	74fb      	strb	r3, [r7, #19]
	uint8_t bytes[qtyOfBytes];
 8001f38:	7cf9      	ldrb	r1, [r7, #19]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	b2cb      	uxtb	r3, r1
 8001f42:	2200      	movs	r2, #0
 8001f44:	4698      	mov	r8, r3
 8001f46:	4691      	mov	r9, r2
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f5c:	b2cb      	uxtb	r3, r1
 8001f5e:	2200      	movs	r2, #0
 8001f60:	461c      	mov	r4, r3
 8001f62:	4615      	mov	r5, r2
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	00eb      	lsls	r3, r5, #3
 8001f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f72:	00e2      	lsls	r2, r4, #3
 8001f74:	460b      	mov	r3, r1
 8001f76:	3307      	adds	r3, #7
 8001f78:	08db      	lsrs	r3, r3, #3
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	ebad 0d03 	sub.w	sp, sp, r3
 8001f80:	ab0e      	add	r3, sp, #56	; 0x38
 8001f82:	3300      	adds	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]
	bytes[0] = ((processVariableValue >> 24) & 0x000000FF);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	0e1b      	lsrs	r3, r3, #24
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	701a      	strb	r2, [r3, #0]
	bytes[1] = ((processVariableValue >> 16) & 0x000000FF);
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	0c1b      	lsrs	r3, r3, #16
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	705a      	strb	r2, [r3, #1]
	bytes[2] = ((processVariableValue >> 8) & 0x000000FF);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	709a      	strb	r2, [r3, #2]
	bytes[3] = (processVariableValue & 0x000000FF);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	70da      	strb	r2, [r3, #3]

	dataPacketTxSetCommand(&comm->dataPacketTx, CMD_TX_CURRENT_PROCESS_VARIABLE_VALUE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3388      	adds	r3, #136	; 0x88
 8001fb0:	2182      	movs	r1, #130	; 0x82
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f001 fe33 	bl	8003c1e <dataPacketTxSetCommand>
	dataPacketTxSetPayloadData(&comm->dataPacketTx, bytes, qtyOfBytes);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3388      	adds	r3, #136	; 0x88
 8001fbc:	7cfa      	ldrb	r2, [r7, #19]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 fe46 	bl	8003c52 <dataPacketTxSetPayloadData>
	dataPacketTxMount(&comm->dataPacketTx);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3388      	adds	r3, #136	; 0x88
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 fd7c 	bl	8003ac8 <dataPacketTxMount>
	dataPacketTxUartSend(&comm->dataPacketTx, comm->huart);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f103 0c88 	add.w	ip, r3, #136	; 0x88
 8001fd6:	687e      	ldr	r6, [r7, #4]
 8001fd8:	466d      	mov	r5, sp
 8001fda:	f106 040c 	add.w	r4, r6, #12
 8001fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fee:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ff2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001ff6:	4660      	mov	r0, ip
 8001ff8:	f001 fdb4 	bl	8003b64 <dataPacketTxUartSend>
	dataPacketTxPayloadDataClear(&comm->dataPacketTx);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3388      	adds	r3, #136	; 0x88
 8002000:	4618      	mov	r0, r3
 8002002:	f001 fdee 	bl	8003be2 <dataPacketTxPayloadDataClear>
	dataPacketTxClear(&comm->dataPacketTx);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3388      	adds	r3, #136	; 0x88
 800200a:	4618      	mov	r0, r3
 800200c:	f001 fdcb 	bl	8003ba6 <dataPacketTxClear>
 8002010:	46d5      	mov	sp, sl
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800201c <commSetData>:

// ======== RX - Data Packet =========== //
void commSetData(Comm *comm, uint8_t *data, uint8_t dataLength)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	4613      	mov	r3, r2
 8002028:	71fb      	strb	r3, [r7, #7]
	if (dataLength <= QTY_DATA_BYTES)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b32      	cmp	r3, #50	; 0x32
 800202e:	d80b      	bhi.n	8002048 <commSetData+0x2c>
	{
		comm->dataLenght = dataLength;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	79fa      	ldrb	r2, [r7, #7]
 8002034:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
		memcpy(comm->data, data, dataLength);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800203e:	79fa      	ldrb	r2, [r7, #7]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	4618      	mov	r0, r3
 8002044:	f005 fd04 	bl	8007a50 <memcpy>
	}
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <commClearData>:

void commClearData(Comm *comm)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	memset(comm->data, 0x00, QTY_DATA_BYTES);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800205e:	2232      	movs	r2, #50	; 0x32
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f005 fd02 	bl	8007a6c <memset>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <commAppendReceivedByte>:

void commAppendReceivedByte(Comm *comm, uint8_t receivedByte)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	70fb      	strb	r3, [r7, #3]
	dataPacketRxAppend(&comm->dataPacketRx, receivedByte);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	33fe      	adds	r3, #254	; 0xfe
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f001 fb5f 	bl	8003748 <dataPacketRxAppend>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <commTryDecodeReceivedDataPacket>:

void commTryDecodeReceivedDataPacket(Comm *comm)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
	dataPacketRxDecode(&comm->dataPacketRx);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	33fe      	adds	r3, #254	; 0xfe
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 fb85 	bl	80037ae <dataPacketRxDecode>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <commTryExtractCommandAndPayloadFromDecodedDataPacket>:

void commTryExtractCommandAndPayloadFromDecodedDataPacket(Comm *comm)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	if (dataPacketRxGetDataPacketStatus(&comm->dataPacketRx) == VALID_RX_DATA_PACKET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	33fe      	adds	r3, #254	; 0xfe
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 fcc6 	bl	8003a4a <dataPacketRxGetDataPacketStatus>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d12a      	bne.n	800211a <commTryExtractCommandAndPayloadFromDecodedDataPacket+0x6e>
	{
		uint8_t receivedCmd = dataPacketRxGetCommand(&comm->dataPacketRx);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	33fe      	adds	r3, #254	; 0xfe
 80020c8:	4618      	mov	r0, r3
 80020ca:	f001 fc81 	bl	80039d0 <dataPacketRxGetCommand>
 80020ce:	4603      	mov	r3, r0
 80020d0:	73fb      	strb	r3, [r7, #15]
		uint8_t receivedPayloadDataLength = dataPacketRxGetPayloadDataLength(&comm->dataPacketRx);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	33fe      	adds	r3, #254	; 0xfe
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 fcab 	bl	8003a32 <dataPacketRxGetPayloadDataLength>
 80020dc:	4603      	mov	r3, r0
 80020de:	73bb      	strb	r3, [r7, #14]

		if (receivedPayloadDataLength > 0)
 80020e0:	7bbb      	ldrb	r3, [r7, #14]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <commTryExtractCommandAndPayloadFromDecodedDataPacket+0x52>
		{
			uint8_t *receivedPayloadData = dataPacketRxGetPayloadData(&comm->dataPacketRx);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	33fe      	adds	r3, #254	; 0xfe
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 fc95 	bl	8003a1a <dataPacketRxGetPayloadData>
 80020f0:	60b8      	str	r0, [r7, #8]
			commSetData(comm, receivedPayloadData, receivedPayloadDataLength);
 80020f2:	7bbb      	ldrb	r3, [r7, #14]
 80020f4:	461a      	mov	r2, r3
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff8f 	bl	800201c <commSetData>
		}

		commSetCommand(comm, receivedCmd);
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fad4 	bl	80026b0 <commSetCommand>
		commSetDecodeCommandStatus(comm, TRUE);
 8002108:	2101      	movs	r1, #1
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fab3 	bl	8002676 <commSetDecodeCommandStatus>
		dataPacketRxClear(&comm->dataPacketRx);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	33fe      	adds	r3, #254	; 0xfe
 8002114:	4618      	mov	r0, r3
 8002116:	f001 fc0d 	bl	8003934 <dataPacketRxClear>
	}
}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <commTryDecodeExtractedCommand>:

void commTryDecodeExtractedCommand(Comm *comm, App *app)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
	if (commGetDecodeCommandStatus(comm) == TRUE)
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fa95 	bl	800265c <commGetDecodeCommandStatus>
 8002132:	4603      	mov	r3, r0
 8002134:	2b01      	cmp	r3, #1
 8002136:	d107      	bne.n	8002148 <commTryDecodeExtractedCommand+0x26>
	{
		commDecodeReceivedCommand(comm, app);
 8002138:	6839      	ldr	r1, [r7, #0]
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f808 	bl	8002150 <commDecodeReceivedCommand>
		commSetDecodeCommandStatus(comm, FALSE);
 8002140:	2100      	movs	r1, #0
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 fa97 	bl	8002676 <commSetDecodeCommandStatus>
	}
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <commDecodeReceivedCommand>:

void commDecodeReceivedCommand(Comm *comm, App *app)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b094      	sub	sp, #80	; 0x50
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
	uint16_t receivedSamplingInterval = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t receivedPidInterval = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t receivedMovingAverageWindow = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int32_t receivedPidMinSumOfErrors = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t receivedPidMaxSumOfErrors = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t receivedPidMinControlledVariable = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t receivedPidMaxControlledVariable = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	63bb      	str	r3, [r7, #56]	; 0x38

	uint32_t receivedPidSetpointTimes1000 = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	637b      	str	r3, [r7, #52]	; 0x34
	float receivedPidSetpoint = 0;
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	633b      	str	r3, [r7, #48]	; 0x30

	uint32_t pidKpTimes1000 = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
	float pidKp = 0;
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pidKiTimes1000 = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
	float pidKi = 0;
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	623b      	str	r3, [r7, #32]

	uint32_t pidKdTimes1000 = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
	float pidKd = 0;
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	61bb      	str	r3, [r7, #24]

	uint32_t receiveidPidOffset = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
	float pidOffset = 0;
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]

	uint32_t receiveidPidBias = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
	float pidBias = 0;
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]

	switch (commGetCommand(comm))
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 fa6c 	bl	8002696 <commGetCommand>
 80021be:	4603      	mov	r3, r0
 80021c0:	3b01      	subs	r3, #1
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	f200 81cd 	bhi.w	8002562 <commDecodeReceivedCommand+0x412>
 80021c8:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <commDecodeReceivedCommand+0x80>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	080021e9 	.word	0x080021e9
 80021d4:	080024ab 	.word	0x080024ab
 80021d8:	080024b5 	.word	0x080024b5
 80021dc:	080024fd 	.word	0x080024fd
 80021e0:	08002531 	.word	0x08002531
 80021e4:	08002559 	.word	0x08002559
	{
		case CMD_RX_SET_CONFIG_DATA_VALUES:

			// ************* Kp ************* //
			pidKpTimes1000 = (comm->data[0] << 24) + (comm->data[1] << 16) + (comm->data[2] << 8) + comm->data[3];
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80021ee:	061a      	lsls	r2, r3, #24
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80021f6:	041b      	lsls	r3, r3, #16
 80021f8:	441a      	add	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	4413      	add	r3, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	f892 217b 	ldrb.w	r2, [r2, #379]	; 0x17b
 800220a:	4413      	add	r3, r2
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
			pidKp = ((float) pidKpTimes1000) / 1000;
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002218:	eddf 6ac2 	vldr	s13, [pc, #776]	; 8002524 <commDecodeReceivedCommand+0x3d4>
 800221c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002220:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			appSetPidKp(app, pidKp);
 8002224:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8002228:	6838      	ldr	r0, [r7, #0]
 800222a:	f7fe ff1f 	bl	800106c <appSetPidKp>

			// ************* Ki ************* //
			pidKiTimes1000 = (comm->data[4] << 24) + (comm->data[5] << 16) + (comm->data[6] << 8) + comm->data[7];
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8002234:	061a      	lsls	r2, r3, #24
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	441a      	add	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	4413      	add	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	f892 217f 	ldrb.w	r2, [r2, #383]	; 0x17f
 8002250:	4413      	add	r3, r2
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
			pidKi = ((float) pidKiTimes1000) / 1000;
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800225e:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8002524 <commDecodeReceivedCommand+0x3d4>
 8002262:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002266:	edc7 7a08 	vstr	s15, [r7, #32]
			appSetPidKi(app, pidKi);
 800226a:	ed97 0a08 	vldr	s0, [r7, #32]
 800226e:	6838      	ldr	r0, [r7, #0]
 8002270:	f7fe ff1f 	bl	80010b2 <appSetPidKi>

			// ************* Kd ************* //
			pidKdTimes1000 = (comm->data[8] << 24) + (comm->data[9] << 16) + (comm->data[10] << 8) + comm->data[11];
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800227a:	061a      	lsls	r2, r3, #24
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	441a      	add	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	4413      	add	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	f892 2183 	ldrb.w	r2, [r2, #387]	; 0x183
 8002296:	4413      	add	r3, r2
 8002298:	61fb      	str	r3, [r7, #28]
			pidKd = ((float) pidKdTimes1000) / 1000;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	ee07 3a90 	vmov	s15, r3
 80022a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022a4:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8002524 <commDecodeReceivedCommand+0x3d4>
 80022a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022ac:	edc7 7a06 	vstr	s15, [r7, #24]
			appSetPidKd(app, pidKd);
 80022b0:	ed97 0a06 	vldr	s0, [r7, #24]
 80022b4:	6838      	ldr	r0, [r7, #0]
 80022b6:	f7fe ff1f 	bl	80010f8 <appSetPidKd>

			// ************* Pid Interval ************* //
			receivedPidInterval = (comm->data[12] << 8) + comm->data[13];
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3185 	ldrb.w	r3, [r3, #389]	; 0x185
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			appSetPidInterval(app, receivedPidInterval);
 80022d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80022d8:	4619      	mov	r1, r3
 80022da:	6838      	ldr	r0, [r7, #0]
 80022dc:	f7fe ff3a 	bl	8001154 <appSetPidInterval>

			// ************* Sampling Interval ************* //
			receivedSamplingInterval = (comm->data[14] << 8) + comm->data[15];
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3186 	ldrb.w	r3, [r3, #390]	; 0x186
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			appSetSamplingInterval(app, receivedSamplingInterval);
 80022fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022fe:	4619      	mov	r1, r3
 8002300:	6838      	ldr	r0, [r7, #0]
 8002302:	f7ff f8ae 	bl	8001462 <appSetSamplingInterval>

			// ************* Moving Average Window ************* //
			receivedMovingAverageWindow = (comm->data[16] << 8) + comm->data[17];
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 800230c:	b29b      	uxth	r3, r3
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	b29a      	uxth	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8002318:	b29b      	uxth	r3, r3
 800231a:	4413      	add	r3, r2
 800231c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			appSetMovingAverageFilterWindow(app, receivedMovingAverageWindow);
 8002320:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002324:	4619      	mov	r1, r3
 8002326:	6838      	ldr	r0, [r7, #0]
 8002328:	f7ff f8c1 	bl	80014ae <appSetMovingAverageFilterWindow>

			// ************* Min Sum Of Errors ************* //
			receivedPidMinSumOfErrors = (comm->data[18] << 24) + (comm->data[19] << 16) + (comm->data[20] << 8) + comm->data[21];
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8002332:	061a      	lsls	r2, r3, #24
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	441a      	add	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8002344:	021b      	lsls	r3, r3, #8
 8002346:	4413      	add	r3, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	f892 218d 	ldrb.w	r2, [r2, #397]	; 0x18d
 800234e:	4413      	add	r3, r2
 8002350:	647b      	str	r3, [r7, #68]	; 0x44
			receivedPidMinSumOfErrors -= 1000000000;
 8002352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002354:	4b74      	ldr	r3, [pc, #464]	; (8002528 <commDecodeReceivedCommand+0x3d8>)
 8002356:	4413      	add	r3, r2
 8002358:	647b      	str	r3, [r7, #68]	; 0x44
			appSetPidMinSumOfErrors(app, receivedPidMinSumOfErrors);
 800235a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800235c:	6838      	ldr	r0, [r7, #0]
 800235e:	f7fe ff2a 	bl	80011b6 <appSetPidMinSumOfErrors>

			// ************* Max Sum Of Errors ************* //
			receivedPidMaxSumOfErrors = (comm->data[22] << 24) + (comm->data[23] << 16) + (comm->data[24] << 8) + comm->data[25];
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 8002368:	061a      	lsls	r2, r3, #24
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 318f 	ldrb.w	r3, [r3, #399]	; 0x18f
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	441a      	add	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	4413      	add	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	f892 2191 	ldrb.w	r2, [r2, #401]	; 0x191
 8002384:	4413      	add	r3, r2
 8002386:	643b      	str	r3, [r7, #64]	; 0x40
			receivedPidMaxSumOfErrors -= 1000000000;
 8002388:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <commDecodeReceivedCommand+0x3d8>)
 800238c:	4413      	add	r3, r2
 800238e:	643b      	str	r3, [r7, #64]	; 0x40
			appSetPidMaxSumOfErrors(app, receivedPidMaxSumOfErrors);
 8002390:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002392:	6838      	ldr	r0, [r7, #0]
 8002394:	f7fe ff2e 	bl	80011f4 <appSetPidMaxSumOfErrors>

			// ************* Min Controlled Variable ************* //
			receivedPidMinControlledVariable = (comm->data[26] << 24) + (comm->data[27] << 16) + (comm->data[28] << 8) + comm->data[29];
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 800239e:	061a      	lsls	r2, r3, #24
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3193 	ldrb.w	r3, [r3, #403]	; 0x193
 80023a6:	041b      	lsls	r3, r3, #16
 80023a8:	441a      	add	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	4413      	add	r3, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	f892 2195 	ldrb.w	r2, [r2, #405]	; 0x195
 80023ba:	4413      	add	r3, r2
 80023bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			receivedPidMinControlledVariable -= 1000000000;
 80023be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023c0:	4b59      	ldr	r3, [pc, #356]	; (8002528 <commDecodeReceivedCommand+0x3d8>)
 80023c2:	4413      	add	r3, r2
 80023c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			appSetPidMinControlledVariable(app, receivedPidMinControlledVariable);
 80023c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80023c8:	6838      	ldr	r0, [r7, #0]
 80023ca:	f7fe ff32 	bl	8001232 <appSetPidMinControlledVariable>

			// ************* Max Controlled Variable ************* //
			receivedPidMaxControlledVariable = (comm->data[30] << 24) + (comm->data[31] << 16) + (comm->data[32] << 8) + comm->data[33];
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80023d4:	061a      	lsls	r2, r3, #24
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80023dc:	041b      	lsls	r3, r3, #16
 80023de:	441a      	add	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	4413      	add	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	f892 2199 	ldrb.w	r2, [r2, #409]	; 0x199
 80023f0:	4413      	add	r3, r2
 80023f2:	63bb      	str	r3, [r7, #56]	; 0x38
			receivedPidMaxControlledVariable -= 1000000000;
 80023f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023f6:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <commDecodeReceivedCommand+0x3d8>)
 80023f8:	4413      	add	r3, r2
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38
			appSetPidMaxControlledVariable(app, receivedPidMaxControlledVariable);
 80023fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023fe:	6838      	ldr	r0, [r7, #0]
 8002400:	f7fe ff36 	bl	8001270 <appSetPidMaxControlledVariable>

			// ************* Pid Offset ************* //
			receiveidPidOffset = (comm->data[34] << 24) + (comm->data[35] << 16) + (comm->data[36] << 8) + comm->data[37];
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 319a 	ldrb.w	r3, [r3, #410]	; 0x19a
 800240a:	061a      	lsls	r2, r3, #24
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 319b 	ldrb.w	r3, [r3, #411]	; 0x19b
 8002412:	041b      	lsls	r3, r3, #16
 8002414:	441a      	add	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	4413      	add	r3, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	f892 219d 	ldrb.w	r2, [r2, #413]	; 0x19d
 8002426:	4413      	add	r3, r2
 8002428:	617b      	str	r3, [r7, #20]
			pidOffset = (((float) receiveidPidOffset) - 1000000) / 1000;
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002434:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800252c <commDecodeReceivedCommand+0x3dc>
 8002438:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800243c:	eddf 6a39 	vldr	s13, [pc, #228]	; 8002524 <commDecodeReceivedCommand+0x3d4>
 8002440:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002444:	edc7 7a04 	vstr	s15, [r7, #16]
			appSetPidOffset(app, pidOffset);
 8002448:	ed97 0a04 	vldr	s0, [r7, #16]
 800244c:	6838      	ldr	r0, [r7, #0]
 800244e:	f7fe ff30 	bl	80012b2 <appSetPidOffset>

			// ************* Pid Bias ************* //
			receiveidPidBias = (comm->data[38] << 24) + (comm->data[39] << 16) + (comm->data[40] << 8) + comm->data[41];
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 319e 	ldrb.w	r3, [r3, #414]	; 0x19e
 8002458:	061a      	lsls	r2, r3, #24
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	441a      	add	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	4413      	add	r3, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	f892 21a1 	ldrb.w	r2, [r2, #417]	; 0x1a1
 8002474:	4413      	add	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
			pidBias = (((float) receiveidPidBias) - 1000000) / 1000;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002482:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800252c <commDecodeReceivedCommand+0x3dc>
 8002486:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800248a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002524 <commDecodeReceivedCommand+0x3d4>
 800248e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002492:	edc7 7a02 	vstr	s15, [r7, #8]
			appSetPidBias(app, pidBias);
 8002496:	ed97 0a02 	vldr	s0, [r7, #8]
 800249a:	6838      	ldr	r0, [r7, #0]
 800249c:	f7fe ff2c 	bl	80012f8 <appSetPidBias>

			// ************* Send The New Config Data Values ************* //
			commSetEnableSendCurrentConfigDataValues(comm, TRUE);
 80024a0:	2101      	movs	r1, #1
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f890 	bl	80025c8 <commSetEnableSendCurrentConfigDataValues>
			break;
 80024a8:	e060      	b.n	800256c <commDecodeReceivedCommand+0x41c>

		case CMD_RX_ASK_FOR_CURRENT_CONFIG_DATA_VALUES:
			commSetEnableSendCurrentConfigDataValues(comm, TRUE);
 80024aa:	2101      	movs	r1, #1
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f88b 	bl	80025c8 <commSetEnableSendCurrentConfigDataValues>
			break;
 80024b2:	e05b      	b.n	800256c <commDecodeReceivedCommand+0x41c>

		case CMD_RX_SET_PID_SETPOINT:
			receivedPidSetpointTimes1000 = (comm->data[0] << 24) + (comm->data[1] << 16) + (comm->data[2] << 8) + comm->data[3];
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80024ba:	061a      	lsls	r2, r3, #24
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80024c2:	041b      	lsls	r3, r3, #16
 80024c4:	441a      	add	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	4413      	add	r3, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	f892 217b 	ldrb.w	r2, [r2, #379]	; 0x17b
 80024d6:	4413      	add	r3, r2
 80024d8:	637b      	str	r3, [r7, #52]	; 0x34
			receivedPidSetpoint = ((float) receivedPidSetpointTimes1000) / 1000;
 80024da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024e4:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002524 <commDecodeReceivedCommand+0x3d4>
 80024e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ec:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			appSetPidSetpoint(app, receivedPidSetpoint);
 80024f0:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80024f4:	6838      	ldr	r0, [r7, #0]
 80024f6:	f7fe ff23 	bl	8001340 <appSetPidSetpoint>
			break;
 80024fa:	e037      	b.n	800256c <commDecodeReceivedCommand+0x41c>

		case CMD_RX_SET_RUN_PID_CONTROLLER_STATUS:
			if (comm->data[0] == HALT)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <commDecodeReceivedCommand+0x3c0>
			{
				appSetRunPidControllerStatus(app, FALSE);
 8002506:	2100      	movs	r1, #0
 8002508:	6838      	ldr	r0, [r7, #0]
 800250a:	f7fe ff7b 	bl	8001404 <appSetRunPidControllerStatus>
			}
			else if (comm->data[0] == RUN)
			{
				appSetRunPidControllerStatus(app, TRUE);
			}
			break;
 800250e:	e02a      	b.n	8002566 <commDecodeReceivedCommand+0x416>
			else if (comm->data[0] == RUN)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8002516:	2b01      	cmp	r3, #1
 8002518:	d125      	bne.n	8002566 <commDecodeReceivedCommand+0x416>
				appSetRunPidControllerStatus(app, TRUE);
 800251a:	2101      	movs	r1, #1
 800251c:	6838      	ldr	r0, [r7, #0]
 800251e:	f7fe ff71 	bl	8001404 <appSetRunPidControllerStatus>
			break;
 8002522:	e020      	b.n	8002566 <commDecodeReceivedCommand+0x416>
 8002524:	447a0000 	.word	0x447a0000
 8002528:	c4653600 	.word	0xc4653600
 800252c:	49742400 	.word	0x49742400

		case CMD_RX_SET_SEND_PROCESS_VARIABLE_STATUS:
			if (comm->data[0] == NOT_SEND)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8002536:	2b00      	cmp	r3, #0
 8002538:	d104      	bne.n	8002544 <commDecodeReceivedCommand+0x3f4>
			{
				commSetEnableSendProcessVariable(comm, FALSE);
 800253a:	2100      	movs	r1, #0
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f826 	bl	800258e <commSetEnableSendProcessVariable>
			}
			else if (comm->data[0] == SEND)
			{
				commSetEnableSendProcessVariable(comm, TRUE);
			}
			break;
 8002542:	e012      	b.n	800256a <commDecodeReceivedCommand+0x41a>
			else if (comm->data[0] == SEND)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800254a:	2b01      	cmp	r3, #1
 800254c:	d10d      	bne.n	800256a <commDecodeReceivedCommand+0x41a>
				commSetEnableSendProcessVariable(comm, TRUE);
 800254e:	2101      	movs	r1, #1
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f81c 	bl	800258e <commSetEnableSendProcessVariable>
			break;
 8002556:	e008      	b.n	800256a <commDecodeReceivedCommand+0x41a>

		case CMD_RX_ASK_FOR_CURRENT_PID_SETPOINT_VALUE:
			commSetEnableSendCurrentPidSetpointValue(comm, TRUE);
 8002558:	2101      	movs	r1, #1
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f851 	bl	8002602 <commSetEnableSendCurrentPidSetpointValue>
			break;
 8002560:	e004      	b.n	800256c <commDecodeReceivedCommand+0x41c>

		default:
			break;
 8002562:	bf00      	nop
 8002564:	e002      	b.n	800256c <commDecodeReceivedCommand+0x41c>
			break;
 8002566:	bf00      	nop
 8002568:	e000      	b.n	800256c <commDecodeReceivedCommand+0x41c>
			break;
 800256a:	bf00      	nop
	}
}
 800256c:	bf00      	nop
 800256e:	3750      	adds	r7, #80	; 0x50
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <commGetEnableSendProcessVariable>:

// ======== TX - Getters and Setters ======== //
Bool commGetEnableSendProcessVariable(Comm *comm)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	return comm->enableSendProcessVariable;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <commSetEnableSendProcessVariable>:

void commSetEnableSendProcessVariable(Comm *comm, Bool status)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	460b      	mov	r3, r1
 8002598:	70fb      	strb	r3, [r7, #3]
	comm->enableSendProcessVariable = status;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <commGetEnableSendCurrentConfigDataValues>:

Bool commGetEnableSendCurrentConfigDataValues(Comm *comm)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
	return comm->enableSendCurrentConfigDataValues;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <commSetEnableSendCurrentConfigDataValues>:

void commSetEnableSendCurrentConfigDataValues(Comm *comm, Bool status)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	70fb      	strb	r3, [r7, #3]
	comm->enableSendCurrentConfigDataValues = status;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <commGetEnableSendCurrentPidSetpointValue>:

Bool commGetEnableSendCurrentPidSetpointValue(Comm *comm)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	return comm->enableSendCurrentPidSetpointValue;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <commSetEnableSendCurrentPidSetpointValue>:

void commSetEnableSendCurrentPidSetpointValue(Comm *comm, Bool status)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	70fb      	strb	r3, [r7, #3]
	comm->enableSendCurrentPidSetpointValue = status;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <commGetEnableSendKeepAliveMessage>:

Bool commGetEnableSendKeepAliveMessage(Comm *comm)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
	return comm->enableSendKeepAliveMessage;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <commSetEnableSendKeepAliveMessage>:

void commSetEnableSendKeepAliveMessage(Comm *comm, Bool status)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	70fb      	strb	r3, [r7, #3]
	comm->enableSendKeepAliveMessage = status;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <commGetDecodeCommandStatus>:

// ======== RX - Getters and Setters ======== //
Bool commGetDecodeCommandStatus(Comm *comm)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	return comm->decodeCommandStatus;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3176 	ldrb.w	r3, [r3, #374]	; 0x176
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <commSetDecodeCommandStatus>:

void commSetDecodeCommandStatus(Comm *comm, Bool status)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	70fb      	strb	r3, [r7, #3]
	comm->decodeCommandStatus = status;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <commGetCommand>:

uint8_t commGetCommand(Comm *comm)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
	return comm->command;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3177 	ldrb.w	r3, [r3, #375]	; 0x177
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <commSetCommand>:

void commSetCommand(Comm *comm, uint8_t command)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
	comm->command = command;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <commSetDataLenght>:
{
	return comm->dataLenght;
}

void commSetDataLenght(Comm *comm, uint8_t dataLenght)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
	comm->dataLenght = dataLenght;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <controllerInit>:

#include "controller.h"

// ======== Init ======== //
void controllerInit(Controller *controller, DAC_HandleTypeDef hdac)
{
 80026f0:	b084      	sub	sp, #16
 80026f2:	b5b0      	push	{r4, r5, r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	f107 001c 	add.w	r0, r7, #28
 80026fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	controller->hdac = hdac;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8002708:	f107 051c 	add.w	r5, r7, #28
 800270c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800270e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	6023      	str	r3, [r4, #0]

	pidInit(&controller->pid, 50, 2, 100, 0, 0, PID_CONTROLLER);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2102      	movs	r1, #2
 8002718:	ed9f 2a12 	vldr	s4, [pc, #72]	; 8002764 <controllerInit+0x74>
 800271c:	eddf 1a11 	vldr	s3, [pc, #68]	; 8002764 <controllerInit+0x74>
 8002720:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8002768 <controllerInit+0x78>
 8002724:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002728:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800276c <controllerInit+0x7c>
 800272c:	4618      	mov	r0, r3
 800272e:	f004 fe39 	bl	80073a4 <pidInit>
	pidSetSetpoint(&controller->pid, 0);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002764 <controllerInit+0x74>
 8002738:	4618      	mov	r0, r3
 800273a:	f005 f83f 	bl	80077bc <pidSetSetpoint>
	controllerSetRunPidControllerStatus(controller, FALSE);
 800273e:	2100      	movs	r1, #0
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f9a5 	bl	8002a90 <controllerSetRunPidControllerStatus>
	HAL_DAC_SetValue(&controller->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 800274c:	2300      	movs	r3, #0
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	f002 f89e 	bl	8004892 <HAL_DAC_SetValue>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002760:	b004      	add	sp, #16
 8002762:	4770      	bx	lr
 8002764:	00000000 	.word	0x00000000
 8002768:	42c80000 	.word	0x42c80000
 800276c:	42480000 	.word	0x42480000

08002770 <controllerRunPidController>:

// ======== Controller =========== //
void controllerRunPidController(Controller *controller)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	pidCompute(&controller->pid);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fe6c 	bl	8007458 <pidCompute>
	uint32_t controlledVariable = (uint32_t) pidGetControlledVariable(&controller->pid);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4618      	mov	r0, r3
 8002784:	f005 f84e 	bl	8007824 <pidGetControlledVariable>
 8002788:	eef0 7a40 	vmov.f32	s15, s0
 800278c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002790:	ee17 3a90 	vmov	r3, s15
 8002794:	60fb      	str	r3, [r7, #12]
	HAL_DAC_SetValue(&controller->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, controlledVariable);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	f002 f876 	bl	8004892 <HAL_DAC_SetValue>
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <controllerGetPidKp>:

// ======= Getters and Setters ======== //
float controllerGetPidKp(Controller *controller)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
	return pidGetKp(&controller->pid);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f004 ff78 	bl	80076ae <pidGetKp>
 80027be:	eef0 7a40 	vmov.f32	s15, s0
}
 80027c2:	eeb0 0a67 	vmov.f32	s0, s15
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <controllerSetPidKp>:

void controllerSetPidKp(Controller *controller, float kp)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	ed87 0a00 	vstr	s0, [r7]
	pidSetKp(&controller->pid, kp);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	ed97 0a00 	vldr	s0, [r7]
 80027de:	4618      	mov	r0, r3
 80027e0:	f004 ff74 	bl	80076cc <pidSetKp>
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <controllerGetPidKi>:

float controllerGetPidKi(Controller *controller)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	return pidGetKi(&controller->pid);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 ff77 	bl	80076ea <pidGetKi>
 80027fc:	eef0 7a40 	vmov.f32	s15, s0
}
 8002800:	eeb0 0a67 	vmov.f32	s0, s15
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <controllerSetPidKi>:

void controllerSetPidKi(Controller *controller, float ki)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	ed87 0a00 	vstr	s0, [r7]
	pidSetKi(&controller->pid, ki);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	ed97 0a00 	vldr	s0, [r7]
 800281c:	4618      	mov	r0, r3
 800281e:	f004 ff73 	bl	8007708 <pidSetKi>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <controllerGetPidKd>:

float controllerGetPidKd(Controller *controller)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
	return pidGetKd(&controller->pid);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	f004 ff76 	bl	8007726 <pidGetKd>
 800283a:	eef0 7a40 	vmov.f32	s15, s0
}
 800283e:	eeb0 0a67 	vmov.f32	s0, s15
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <controllerSetPidKd>:

void controllerSetPidKd(Controller *controller, float kd)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	ed87 0a00 	vstr	s0, [r7]
	pidSetKd(&controller->pid, kd);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	ed97 0a00 	vldr	s0, [r7]
 800285a:	4618      	mov	r0, r3
 800285c:	f004 ff72 	bl	8007744 <pidSetKd>
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <controllerGetPidInterval>:

float controllerGetPidInterval(Controller *controller)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	return pidGetInterval(&controller->pid);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4618      	mov	r0, r3
 8002874:	f004 ff75 	bl	8007762 <pidGetInterval>
 8002878:	eef0 7a40 	vmov.f32	s15, s0
}
 800287c:	eeb0 0a67 	vmov.f32	s0, s15
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <controllerSetPidInterval>:

void controllerSetPidInterval(Controller *controller, float pidInterval)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	ed87 0a00 	vstr	s0, [r7]
	pidSetInterval(&controller->pid, pidInterval);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	ed97 0a00 	vldr	s0, [r7]
 8002898:	4618      	mov	r0, r3
 800289a:	f004 ff71 	bl	8007780 <pidSetInterval>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <controllerGetPidMinSumOfErrors>:

int32_t controllerGetPidMinSumOfErrors(Controller *controller)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
	return pidGetMinSumOfErrors(&controller->pid);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f005 f802 	bl	80078ba <pidGetMinSumOfErrors>
 80028b6:	4603      	mov	r3, r0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <controllerSetPidMinSumOfErrors>:

void controllerSetPidMinSumOfErrors(Controller *controller, int32_t minSumOfErrors)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
	pidSetMinSumOfErrors(&controller->pid, minSumOfErrors);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6839      	ldr	r1, [r7, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f005 f800 	bl	80078d4 <pidSetMinSumOfErrors>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <controllerGetPidMaxSumOfErrors>:

int32_t controllerGetPidMaxSumOfErrors(Controller *controller)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	return pidGetMaxSumOfErrors(&controller->pid);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f005 f814 	bl	8007914 <pidGetMaxSumOfErrors>
 80028ec:	4603      	mov	r3, r0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <controllerSetPidMaxSumOfErrors>:

void controllerSetPidMaxSumOfErrors(Controller *controller, int32_t maxSumOfErrors)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
	pidSetMaxSumOfErrors(&controller->pid, maxSumOfErrors);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6839      	ldr	r1, [r7, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f005 f811 	bl	800792c <pidSetMaxSumOfErrors>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <controllerGetPidMinControlledVariable>:

int32_t controllerGetPidMinControlledVariable(Controller *controller)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
	return pidGetMinControlledVariable(&controller->pid);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4618      	mov	r0, r3
 800291e:	f005 f825 	bl	800796c <pidGetMinControlledVariable>
 8002922:	4603      	mov	r3, r0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <controllerSetPidMinControlledVariable>:

void controllerSetPidMinControlledVariable(Controller *controller, int32_t minControlledVariable)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
	pidSetMinControlledVariable(&controller->pid, minControlledVariable);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6839      	ldr	r1, [r7, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f005 f822 	bl	8007984 <pidSetMinControlledVariable>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <controllerGetPidMaxControlledVariable>:

int32_t controllerGetPidMaxControlledVariable(Controller *controller)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	return pidGetMaxControlledVariable(&controller->pid);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4618      	mov	r0, r3
 8002954:	f005 f831 	bl	80079ba <pidGetMaxControlledVariable>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <controllerSetPidMaxControlledVariable>:

void controllerSetPidMaxControlledVariable(Controller *controller, int32_t maxControlledVariable)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
	pidSetMaxControlledVariable(&controller->pid, maxControlledVariable);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6839      	ldr	r1, [r7, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f005 f82e 	bl	80079d2 <pidSetMaxControlledVariable>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <controllerGetPidOffset>:

float controllerGetPidOffset(Controller *controller)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
	return pidGetOffset(&controller->pid);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4618      	mov	r0, r3
 800298a:	f004 ff5a 	bl	8007842 <pidGetOffset>
 800298e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002992:	eeb0 0a67 	vmov.f32	s0, s15
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <controllerSetPidOffset>:

void controllerSetPidOffset(Controller *controller, float offset)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	ed87 0a00 	vstr	s0, [r7]
	pidSetOffset(&controller->pid, offset);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	ed97 0a00 	vldr	s0, [r7]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f004 ff56 	bl	8007860 <pidSetOffset>
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <controllerGetPidBias>:

float controllerGetPidBias(Controller *controller)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	return pidGetBias(&controller->pid);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f004 ff59 	bl	800787e <pidGetBias>
 80029cc:	eef0 7a40 	vmov.f32	s15, s0
}
 80029d0:	eeb0 0a67 	vmov.f32	s0, s15
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <controllerSetPidBias>:

void controllerSetPidBias(Controller *controller, float bias)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	ed87 0a00 	vstr	s0, [r7]
	pidSetBias(&controller->pid, bias);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	ed97 0a00 	vldr	s0, [r7]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f004 ff55 	bl	800789c <pidSetBias>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <controllerGetPidSetpoint>:

float controllerGetPidSetpoint(Controller *controller)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
	return pidGetSetpoint(&controller->pid);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 feca 	bl	800779e <pidGetSetpoint>
 8002a0a:	eef0 7a40 	vmov.f32	s15, s0
}
 8002a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <controllerSetPidSetpoint>:

void controllerSetPidSetpoint(Controller *controller, float setpoint)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	ed87 0a00 	vstr	s0, [r7]
	pidSetSetpoint(&controller->pid, setpoint);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	ed97 0a00 	vldr	s0, [r7]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 fec6 	bl	80077bc <pidSetSetpoint>
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <controllerGetPidProcessVariable>:

float controllerGetPidProcessVariable(Controller *controller)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	return pidGetProcessVariable(&controller->pid);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 fec9 	bl	80077da <pidGetProcessVariable>
 8002a48:	eef0 7a40 	vmov.f32	s15, s0
}
 8002a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <controllerSetPidProcessVariable>:

void controllerSetPidProcessVariable(Controller *controller, float value)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	ed87 0a00 	vstr	s0, [r7]
	pidSetProcessVariable(&controller->pid, value);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	ed97 0a00 	vldr	s0, [r7]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f004 fec5 	bl	80077f8 <pidSetProcessVariable>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <controllerGetRunPidControllerStatus>:

Bool controllerGetRunPidControllerStatus(Controller *controller)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
	return controller->runPidController;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <controllerSetRunPidControllerStatus>:

void controllerSetRunPidControllerStatus(Controller *controller, Bool status)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	70fb      	strb	r3, [r7, #3]
	if (status == FALSE)
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10b      	bne.n	8002aba <controllerSetRunPidControllerStatus+0x2a>
	{
		pidClearParameters(&controller->pid);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f004 fde0 	bl	800766a <pidClearParameters>
		HAL_DAC_SetValue(&controller->hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	f001 feec 	bl	8004892 <HAL_DAC_SetValue>
	}

	controller->runPidController = status;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <samplingInit>:

#include "sampling.h"

// ======== Init ======== //
void samplingInit(Sampling *sampling, ADC_HandleTypeDef hadc)
{
 8002aca:	b084      	sub	sp, #16
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	f107 0014 	add.w	r0, r7, #20
 8002ad8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	sampling->hadc = hadc;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3310      	adds	r3, #16
 8002ae0:	f107 0114 	add.w	r1, r7, #20
 8002ae4:	2248      	movs	r2, #72	; 0x48
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 ffb2 	bl	8007a50 <memcpy>
	sampling->adcHysteresisCriticalValue = 3000;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002af2:	809a      	strh	r2, [r3, #4]
	sampling->adcHysteresisThreshold = 500;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002afa:	80da      	strh	r2, [r3, #6]
	sampling->currentMagnitudeOrder = LOW_CURRENT;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	731a      	strb	r2, [r3, #12]

	samplingSetSamplingInterval(sampling, DELAY_5_MILISECONDS);
 8002b02:	2132      	movs	r1, #50	; 0x32
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f86b 	bl	8002be0 <samplingSetSamplingInterval>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b14:	b004      	add	sp, #16
 8002b16:	4770      	bx	lr

08002b18 <samplingExecuteAdcRead>:

// ======== Sampling ============ //
void samplingExecuteAdcRead(Sampling *sampling)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&sampling->hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3310      	adds	r3, #16
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 f963 	bl	8003df0 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&sampling->hadc, HAL_MAX_DELAY);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3310      	adds	r3, #16
 8002b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 fa61 	bl	8003ffa <HAL_ADC_PollForConversion>
	uint16_t adc1In1Value = HAL_ADC_GetValue(&sampling->hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3310      	adds	r3, #16
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 fae7 	bl	8004110 <HAL_ADC_GetValue>
 8002b42:	4603      	mov	r3, r0
 8002b44:	81fb      	strh	r3, [r7, #14]

	HAL_ADC_PollForConversion(&sampling->hadc, HAL_MAX_DELAY);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3310      	adds	r3, #16
 8002b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f001 fa53 	bl	8003ffa <HAL_ADC_PollForConversion>
	uint16_t adc1In6Value = HAL_ADC_GetValue(&sampling->hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3310      	adds	r3, #16
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f001 fad9 	bl	8004110 <HAL_ADC_GetValue>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	81bb      	strh	r3, [r7, #12]

	HAL_ADC_Stop(&sampling->hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3310      	adds	r3, #16
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 fa14 	bl	8003f94 <HAL_ADC_Stop>

	sampling->adcValueHigh = adc1In1Value;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	89fa      	ldrh	r2, [r7, #14]
 8002b70:	811a      	strh	r2, [r3, #8]
	sampling->adcValueLow = adc1In6Value;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	89ba      	ldrh	r2, [r7, #12]
 8002b76:	815a      	strh	r2, [r3, #10]

	if (adc1In6Value >= (sampling->adcHysteresisCriticalValue + sampling->adcHysteresisThreshold))
 8002b78:	89ba      	ldrh	r2, [r7, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	889b      	ldrh	r3, [r3, #4]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	88db      	ldrh	r3, [r3, #6]
 8002b84:	440b      	add	r3, r1
 8002b86:	429a      	cmp	r2, r3
 8002b88:	db03      	blt.n	8002b92 <samplingExecuteAdcRead+0x7a>
	{
		sampling->currentMagnitudeOrder = HIGH_CURRENT;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	731a      	strb	r2, [r3, #12]
 8002b90:	e00b      	b.n	8002baa <samplingExecuteAdcRead+0x92>
	}
	else if (adc1In6Value <= (sampling->adcHysteresisCriticalValue - sampling->adcHysteresisThreshold))
 8002b92:	89ba      	ldrh	r2, [r7, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	889b      	ldrh	r3, [r3, #4]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	88db      	ldrh	r3, [r3, #6]
 8002b9e:	1acb      	subs	r3, r1, r3
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	dc02      	bgt.n	8002baa <samplingExecuteAdcRead+0x92>
	{
		sampling->currentMagnitudeOrder = LOW_CURRENT;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	731a      	strb	r2, [r3, #12]
	}

	if (sampling->currentMagnitudeOrder == LOW_CURRENT)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	7b1b      	ldrb	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <samplingExecuteAdcRead+0xa2>
	{
		sampling->adcValue = adc1In6Value;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	89ba      	ldrh	r2, [r7, #12]
 8002bb6:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		sampling->adcValue = adc1In1Value;
	}
}
 8002bb8:	e002      	b.n	8002bc0 <samplingExecuteAdcRead+0xa8>
		sampling->adcValue = adc1In1Value;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	89fa      	ldrh	r2, [r7, #14]
 8002bbe:	805a      	strh	r2, [r3, #2]
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <samplingGetSamplingInterval>:

// ======= Getters and Setters ======== //
uint16_t samplingGetSamplingInterval(Sampling *sampling)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	return sampling->samplingInterval;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	881b      	ldrh	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <samplingSetSamplingInterval>:

void samplingSetSamplingInterval(Sampling *sampling, uint16_t samplingInterval)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
	sampling->samplingInterval = samplingInterval;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	801a      	strh	r2, [r3, #0]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <samplingGetAdcValue>:

uint16_t samplingGetAdcValue(Sampling *sampling)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
	return sampling->adcValue;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	885b      	ldrh	r3, [r3, #2]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <samplingGetCurrentMagnitudeOrder>:
{
	sampling->adcValue = adcValue;
}

uint8_t samplingGetCurrentMagnitudeOrder(Sampling *sampling)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
	return sampling->currentMagnitudeOrder;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7b1b      	ldrb	r3, [r3, #12]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (100us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	if (htim == &htim9)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a16      	ldr	r2, [pc, #88]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d123      	bne.n	8002c88 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		decodeDataPacketDelay++;
 8002c40:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002c4a:	801a      	strh	r2, [r3, #0]
		blinkLedDelay++;
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002c56:	801a      	strh	r2, [r3, #0]
		sendDataDelay1++;
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002c62:	801a      	strh	r2, [r3, #0]
		samplingInterval++;
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002c6e:	801a      	strh	r2, [r3, #0]
		controllerInterval++;
 8002c70:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002c7a:	801a      	strh	r2, [r3, #0]
		sendKeepAliveDelay++;
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002c86:	801a      	strh	r2, [r3, #0]
	}
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	20000084 	.word	0x20000084
 8002c98:	20000156 	.word	0x20000156
 8002c9c:	20000158 	.word	0x20000158
 8002ca0:	2000015a 	.word	0x2000015a
 8002ca4:	2000015c 	.word	0x2000015c
 8002ca8:	2000015e 	.word	0x2000015e
 8002cac:	20000160 	.word	0x20000160

08002cb0 <HAL_UART_RxCpltCallback>:

/*
 * Interrupt for UART RX
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <HAL_UART_RxCpltCallback+0x34>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d10d      	bne.n	8002cdc <HAL_UART_RxCpltCallback+0x2c>
	{
		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4909      	ldr	r1, [pc, #36]	; (8002ce8 <HAL_UART_RxCpltCallback+0x38>)
 8002cc4:	4807      	ldr	r0, [pc, #28]	; (8002ce4 <HAL_UART_RxCpltCallback+0x34>)
 8002cc6:	f003 fb4a 	bl	800635e <HAL_UART_Receive_IT>
		appAppendReceivedByte(&app, receivedByte);
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_UART_RxCpltCallback+0x38>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4806      	ldr	r0, [pc, #24]	; (8002cec <HAL_UART_RxCpltCallback+0x3c>)
 8002cd2:	f7fe f973 	bl	8000fbc <appAppendReceivedByte>
		receivedByte = 0x00;
 8002cd6:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_UART_RxCpltCallback+0x38>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
	}
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	200000cc 	.word	0x200000cc
 8002ce8:	20000154 	.word	0x20000154
 8002cec:	20000164 	.word	0x20000164

08002cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf2:	b0b9      	sub	sp, #228	; 0xe4
 8002cf4:	af38      	add	r7, sp, #224	; 0xe0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cf6:	f000 ffc5 	bl	8003c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cfa:	f000 f8e9 	bl	8002ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cfe:	f000 fa71 	bl	80031e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002d02:	f000 f957 	bl	8002fb4 <MX_ADC1_Init>
  MX_TIM9_Init();
 8002d06:	f000 f9df 	bl	80030c8 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8002d0a:	f000 fa17 	bl	800313c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002d0e:	f000 fa3f 	bl	8003190 <MX_USART3_UART_Init>
  MX_DAC_Init();
 8002d12:	f000 f9af 	bl	8003074 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim9);
 8002d16:	485f      	ldr	r0, [pc, #380]	; (8002e94 <main+0x1a4>)
 8002d18:	f002 fe8c 	bl	8005a34 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	485e      	ldr	r0, [pc, #376]	; (8002e98 <main+0x1a8>)
 8002d20:	f001 fd65 	bl	80047ee <HAL_DAC_Start>
  appInit(&app, LED_GPIO_Port, LED_Pin, huart2, hdac, huart3, hadc1);
 8002d24:	4e5d      	ldr	r6, [pc, #372]	; (8002e9c <main+0x1ac>)
 8002d26:	4a5e      	ldr	r2, [pc, #376]	; (8002ea0 <main+0x1b0>)
 8002d28:	ab26      	add	r3, sp, #152	; 0x98
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	2248      	movs	r2, #72	; 0x48
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f004 fe8e 	bl	8007a50 <memcpy>
 8002d34:	4a5b      	ldr	r2, [pc, #364]	; (8002ea4 <main+0x1b4>)
 8002d36:	ab15      	add	r3, sp, #84	; 0x54
 8002d38:	4611      	mov	r1, r2
 8002d3a:	2244      	movs	r2, #68	; 0x44
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f004 fe87 	bl	8007a50 <memcpy>
 8002d42:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <main+0x1a8>)
 8002d44:	ac10      	add	r4, sp, #64	; 0x40
 8002d46:	461d      	mov	r5, r3
 8002d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d4c:	682b      	ldr	r3, [r5, #0]
 8002d4e:	6023      	str	r3, [r4, #0]
 8002d50:	466d      	mov	r5, sp
 8002d52:	1d34      	adds	r4, r6, #4
 8002d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002d68:	6833      	ldr	r3, [r6, #0]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	494e      	ldr	r1, [pc, #312]	; (8002ea8 <main+0x1b8>)
 8002d6e:	484f      	ldr	r0, [pc, #316]	; (8002eac <main+0x1bc>)
 8002d70:	f7fd ffea 	bl	8000d48 <appInit>
  HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
 8002d74:	2201      	movs	r2, #1
 8002d76:	494e      	ldr	r1, [pc, #312]	; (8002eb0 <main+0x1c0>)
 8002d78:	4848      	ldr	r0, [pc, #288]	; (8002e9c <main+0x1ac>)
 8002d7a:	f003 faf0 	bl	800635e <HAL_UART_Receive_IT>

	  /********************************* TOP SLOT START ********************************/

	  /* Put here the code to be executed in all cycles before the state machine */

	  if (samplingInterval >= appGetSamplingInterval(&app))
 8002d7e:	484b      	ldr	r0, [pc, #300]	; (8002eac <main+0x1bc>)
 8002d80:	f7fe fb60 	bl	8001444 <appGetSamplingInterval>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b4a      	ldr	r3, [pc, #296]	; (8002eb4 <main+0x1c4>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d805      	bhi.n	8002d9c <main+0xac>
	  {
		  appExecuteSampling(&app);
 8002d90:	4846      	ldr	r0, [pc, #280]	; (8002eac <main+0x1bc>)
 8002d92:	f7fe f8cb 	bl	8000f2c <appExecuteSampling>
		  samplingInterval = 0;
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <main+0x1c4>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	801a      	strh	r2, [r3, #0]
	  }

	  if (controllerInterval >= appGetPidInterval(&app))
 8002d9c:	4843      	ldr	r0, [pc, #268]	; (8002eac <main+0x1bc>)
 8002d9e:	f7fe f9bd 	bl	800111c <appGetPidInterval>
 8002da2:	4603      	mov	r3, r0
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b44      	ldr	r3, [pc, #272]	; (8002eb8 <main+0x1c8>)
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d80b      	bhi.n	8002dc6 <main+0xd6>
	  {
		  if (appGetRunPidControllerStatus(&app) == TRUE)
 8002dae:	483f      	ldr	r0, [pc, #252]	; (8002eac <main+0x1bc>)
 8002db0:	f7fe fb19 	bl	80013e6 <appGetRunPidControllerStatus>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d102      	bne.n	8002dc0 <main+0xd0>
		  {
			  appRunController(&app);
 8002dba:	483c      	ldr	r0, [pc, #240]	; (8002eac <main+0x1bc>)
 8002dbc:	f7fe f830 	bl	8000e20 <appRunController>
		  }
		  controllerInterval = 0;
 8002dc0:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <main+0x1c8>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	801a      	strh	r2, [r3, #0]

	  /* ============================================================================= */

	  /****************************** STATE MACHINE START ******************************/

	  switch (stateMachine)
 8002dc6:	4b3d      	ldr	r3, [pc, #244]	; (8002ebc <main+0x1cc>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b05      	cmp	r3, #5
 8002dcc:	d85d      	bhi.n	8002e8a <main+0x19a>
 8002dce:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <main+0xe4>)
 8002dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd4:	08002ded 	.word	0x08002ded
 8002dd8:	08002e09 	.word	0x08002e09
 8002ddc:	08002e17 	.word	0x08002e17
 8002de0:	08002e25 	.word	0x08002e25
 8002de4:	08002e4b 	.word	0x08002e4b
 8002de8:	08002e69 	.word	0x08002e69
	  {
	  	  case 0:
	  		  if (decodeDataPacketDelay >= DELAY_10_MILISECONDS)
 8002dec:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <main+0x1d0>)
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	2b63      	cmp	r3, #99	; 0x63
 8002df2:	d905      	bls.n	8002e00 <main+0x110>
	  		  {
	  			appDecodeReceivedData(&app);
 8002df4:	482d      	ldr	r0, [pc, #180]	; (8002eac <main+0x1bc>)
 8002df6:	f7fe f8f2 	bl	8000fde <appDecodeReceivedData>
	  			decodeDataPacketDelay = 0;
 8002dfa:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <main+0x1d0>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	801a      	strh	r2, [r3, #0]
	  		  }
	  		  stateMachine = 1;
 8002e00:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <main+0x1cc>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002e06:	e044      	b.n	8002e92 <main+0x1a2>

		  case 1:
			  appExtractCommandAndPayloadFromDecodedData(&app);
 8002e08:	4828      	ldr	r0, [pc, #160]	; (8002eac <main+0x1bc>)
 8002e0a:	f7fe f8f5 	bl	8000ff8 <appExtractCommandAndPayloadFromDecodedData>
			  stateMachine = 2;
 8002e0e:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <main+0x1cc>)
 8002e10:	2202      	movs	r2, #2
 8002e12:	701a      	strb	r2, [r3, #0]
			  break;
 8002e14:	e03d      	b.n	8002e92 <main+0x1a2>

		  case 2:
			  appDecodeExtractedCommand(&app);
 8002e16:	4825      	ldr	r0, [pc, #148]	; (8002eac <main+0x1bc>)
 8002e18:	f7fe f8fb 	bl	8001012 <appDecodeExtractedCommand>
			  stateMachine = 3;
 8002e1c:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <main+0x1cc>)
 8002e1e:	2203      	movs	r2, #3
 8002e20:	701a      	strb	r2, [r3, #0]
			  break;
 8002e22:	e036      	b.n	8002e92 <main+0x1a2>

		  case 3:
			  if (blinkLedDelay >= appGetBlinkDelay(&app))
 8002e24:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <main+0x1d4>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	461c      	mov	r4, r3
 8002e2a:	4820      	ldr	r0, [pc, #128]	; (8002eac <main+0x1bc>)
 8002e2c:	f7fe fb62 	bl	80014f4 <appGetBlinkDelay>
 8002e30:	4603      	mov	r3, r0
 8002e32:	429c      	cmp	r4, r3
 8002e34:	d305      	bcc.n	8002e42 <main+0x152>
			  {
				  appExecuteBlinkLed(&app);
 8002e36:	481d      	ldr	r0, [pc, #116]	; (8002eac <main+0x1bc>)
 8002e38:	f7fd ffe6 	bl	8000e08 <appExecuteBlinkLed>
				  blinkLedDelay = 0;
 8002e3c:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <main+0x1d4>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 4;
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <main+0x1cc>)
 8002e44:	2204      	movs	r2, #4
 8002e46:	701a      	strb	r2, [r3, #0]
			  break;
 8002e48:	e023      	b.n	8002e92 <main+0x1a2>

		  case 4:
			  if (sendDataDelay1 >= DELAY_100_MILISECONDS)
 8002e4a:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <main+0x1d8>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e52:	d305      	bcc.n	8002e60 <main+0x170>
			  {
				  appSendData(&app);
 8002e54:	4815      	ldr	r0, [pc, #84]	; (8002eac <main+0x1bc>)
 8002e56:	f7fe f8ea 	bl	800102e <appSendData>
				  sendDataDelay1 = 0;
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <main+0x1d8>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 5;
 8002e60:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <main+0x1cc>)
 8002e62:	2205      	movs	r2, #5
 8002e64:	701a      	strb	r2, [r3, #0]
			  break;
 8002e66:	e014      	b.n	8002e92 <main+0x1a2>

		  case 5:
			  if (sendKeepAliveDelay >= DELAY_2000_MILISECONDS)
 8002e68:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <main+0x1dc>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d906      	bls.n	8002e82 <main+0x192>
			  {
				  appSetEnableSendKeepAliveMessage(&app, TRUE);
 8002e74:	2101      	movs	r1, #1
 8002e76:	480d      	ldr	r0, [pc, #52]	; (8002eac <main+0x1bc>)
 8002e78:	f7fe fb2b 	bl	80014d2 <appSetEnableSendKeepAliveMessage>
				  sendKeepAliveDelay = 0;
 8002e7c:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <main+0x1dc>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	801a      	strh	r2, [r3, #0]
			  }
			  stateMachine = 0;
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <main+0x1cc>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
			  break;
 8002e88:	e003      	b.n	8002e92 <main+0x1a2>

		  default:
			  stateMachine = 0;
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <main+0x1cc>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
			  break;
 8002e90:	bf00      	nop
	  if (samplingInterval >= appGetSamplingInterval(&app))
 8002e92:	e774      	b.n	8002d7e <main+0x8e>
 8002e94:	20000084 	.word	0x20000084
 8002e98:	20000070 	.word	0x20000070
 8002e9c:	200000cc 	.word	0x200000cc
 8002ea0:	20000028 	.word	0x20000028
 8002ea4:	20000110 	.word	0x20000110
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	20000164 	.word	0x20000164
 8002eb0:	20000154 	.word	0x20000154
 8002eb4:	2000015c 	.word	0x2000015c
 8002eb8:	2000015e 	.word	0x2000015e
 8002ebc:	20000894 	.word	0x20000894
 8002ec0:	20000156 	.word	0x20000156
 8002ec4:	20000158 	.word	0x20000158
 8002ec8:	2000015a 	.word	0x2000015a
 8002ecc:	20000160 	.word	0x20000160

08002ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b094      	sub	sp, #80	; 0x50
 8002ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ed6:	f107 031c 	add.w	r3, r7, #28
 8002eda:	2234      	movs	r2, #52	; 0x34
 8002edc:	2100      	movs	r1, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f004 fdc4 	bl	8007a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ee4:	f107 0308 	add.w	r3, r7, #8
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <SystemClock_Config+0xdc>)
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	4a2b      	ldr	r2, [pc, #172]	; (8002fac <SystemClock_Config+0xdc>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6413      	str	r3, [r2, #64]	; 0x40
 8002f04:	4b29      	ldr	r3, [pc, #164]	; (8002fac <SystemClock_Config+0xdc>)
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f10:	2300      	movs	r3, #0
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <SystemClock_Config+0xe0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <SystemClock_Config+0xe0>)
 8002f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <SystemClock_Config+0xe0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f28:	603b      	str	r3, [r7, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f30:	2301      	movs	r3, #1
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f34:	2310      	movs	r3, #16
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f40:	2308      	movs	r3, #8
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002f44:	23b4      	movs	r3, #180	; 0xb4
 8002f46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f50:	2302      	movs	r3, #2
 8002f52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f54:	f107 031c 	add.w	r3, r7, #28
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f002 fa7d 	bl	8005458 <HAL_RCC_OscConfig>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002f64:	f000 f990 	bl	8003288 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002f68:	f001 ff62 	bl	8004e30 <HAL_PWREx_EnableOverDrive>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002f72:	f000 f989 	bl	8003288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f76:	230f      	movs	r3, #15
 8002f78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f8c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f8e:	f107 0308 	add.w	r3, r7, #8
 8002f92:	2105      	movs	r1, #5
 8002f94:	4618      	mov	r0, r3
 8002f96:	f001 ff9b 	bl	8004ed0 <HAL_RCC_ClockConfig>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002fa0:	f000 f972 	bl	8003288 <Error_Handler>
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3750      	adds	r7, #80	; 0x50
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40007000 	.word	0x40007000

08002fb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fba:	463b      	mov	r3, r7
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002fc6:	4b28      	ldr	r3, [pc, #160]	; (8003068 <MX_ADC1_Init+0xb4>)
 8002fc8:	4a28      	ldr	r2, [pc, #160]	; (800306c <MX_ADC1_Init+0xb8>)
 8002fca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002fcc:	4b26      	ldr	r3, [pc, #152]	; (8003068 <MX_ADC1_Init+0xb4>)
 8002fce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fd4:	4b24      	ldr	r3, [pc, #144]	; (8003068 <MX_ADC1_Init+0xb4>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002fda:	4b23      	ldr	r3, [pc, #140]	; (8003068 <MX_ADC1_Init+0xb4>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002fe0:	4b21      	ldr	r3, [pc, #132]	; (8003068 <MX_ADC1_Init+0xb4>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <MX_ADC1_Init+0xb4>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fee:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <MX_ADC1_Init+0xb4>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <MX_ADC1_Init+0xb4>)
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <MX_ADC1_Init+0xbc>)
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <MX_ADC1_Init+0xb4>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003000:	4b19      	ldr	r3, [pc, #100]	; (8003068 <MX_ADC1_Init+0xb4>)
 8003002:	2202      	movs	r2, #2
 8003004:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <MX_ADC1_Init+0xb4>)
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <MX_ADC1_Init+0xb4>)
 8003010:	2201      	movs	r2, #1
 8003012:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003014:	4814      	ldr	r0, [pc, #80]	; (8003068 <MX_ADC1_Init+0xb4>)
 8003016:	f000 fea7 	bl	8003d68 <HAL_ADC_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003020:	f000 f932 	bl	8003288 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003024:	2301      	movs	r3, #1
 8003026:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003028:	2301      	movs	r3, #1
 800302a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800302c:	2306      	movs	r3, #6
 800302e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003030:	463b      	mov	r3, r7
 8003032:	4619      	mov	r1, r3
 8003034:	480c      	ldr	r0, [pc, #48]	; (8003068 <MX_ADC1_Init+0xb4>)
 8003036:	f001 f879 	bl	800412c <HAL_ADC_ConfigChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003040:	f000 f922 	bl	8003288 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003044:	2306      	movs	r3, #6
 8003046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003048:	2302      	movs	r3, #2
 800304a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800304c:	463b      	mov	r3, r7
 800304e:	4619      	mov	r1, r3
 8003050:	4805      	ldr	r0, [pc, #20]	; (8003068 <MX_ADC1_Init+0xb4>)
 8003052:	f001 f86b 	bl	800412c <HAL_ADC_ConfigChannel>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800305c:	f000 f914 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20000028 	.word	0x20000028
 800306c:	40012000 	.word	0x40012000
 8003070:	0f000001 	.word	0x0f000001

08003074 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800307a:	463b      	mov	r3, r7
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003082:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <MX_DAC_Init+0x4c>)
 8003084:	4a0f      	ldr	r2, [pc, #60]	; (80030c4 <MX_DAC_Init+0x50>)
 8003086:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003088:	480d      	ldr	r0, [pc, #52]	; (80030c0 <MX_DAC_Init+0x4c>)
 800308a:	f001 fb8e 	bl	80047aa <HAL_DAC_Init>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003094:	f000 f8f8 	bl	8003288 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003098:	2300      	movs	r3, #0
 800309a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800309c:	2302      	movs	r3, #2
 800309e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80030a0:	463b      	mov	r3, r7
 80030a2:	2200      	movs	r2, #0
 80030a4:	4619      	mov	r1, r3
 80030a6:	4806      	ldr	r0, [pc, #24]	; (80030c0 <MX_DAC_Init+0x4c>)
 80030a8:	f001 fc18 	bl	80048dc <HAL_DAC_ConfigChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80030b2:	f000 f8e9 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000070 	.word	0x20000070
 80030c4:	40007400 	.word	0x40007400

080030c8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ce:	463b      	mov	r3, r7
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <MX_TIM9_Init+0x6c>)
 80030dc:	4a16      	ldr	r2, [pc, #88]	; (8003138 <MX_TIM9_Init+0x70>)
 80030de:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 80030e0:	4b14      	ldr	r3, [pc, #80]	; (8003134 <MX_TIM9_Init+0x6c>)
 80030e2:	2204      	movs	r2, #4
 80030e4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <MX_TIM9_Init+0x6c>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3665;
 80030ec:	4b11      	ldr	r3, [pc, #68]	; (8003134 <MX_TIM9_Init+0x6c>)
 80030ee:	f640 6251 	movw	r2, #3665	; 0xe51
 80030f2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <MX_TIM9_Init+0x6c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030fa:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <MX_TIM9_Init+0x6c>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003100:	480c      	ldr	r0, [pc, #48]	; (8003134 <MX_TIM9_Init+0x6c>)
 8003102:	f002 fc47 	bl	8005994 <HAL_TIM_Base_Init>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800310c:	f000 f8bc 	bl	8003288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003114:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003116:	463b      	mov	r3, r7
 8003118:	4619      	mov	r1, r3
 800311a:	4806      	ldr	r0, [pc, #24]	; (8003134 <MX_TIM9_Init+0x6c>)
 800311c:	f002 fe02 	bl	8005d24 <HAL_TIM_ConfigClockSource>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003126:	f000 f8af 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000084 	.word	0x20000084
 8003138:	40014000 	.word	0x40014000

0800313c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003142:	4a12      	ldr	r2, [pc, #72]	; (800318c <MX_USART2_UART_Init+0x50>)
 8003144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800314c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800314e:	4b0e      	ldr	r3, [pc, #56]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003156:	2200      	movs	r2, #0
 8003158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 800315c:	2200      	movs	r2, #0
 800315e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003162:	220c      	movs	r2, #12
 8003164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003168:	2200      	movs	r2, #0
 800316a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 800316e:	2200      	movs	r2, #0
 8003170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <MX_USART2_UART_Init+0x4c>)
 8003174:	f003 f814 	bl	80061a0 <HAL_UART_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800317e:	f000 f883 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	200000cc 	.word	0x200000cc
 800318c:	40004400 	.word	0x40004400

08003190 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 8003196:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <MX_USART3_UART_Init+0x50>)
 8003198:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 800319c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031b6:	220c      	movs	r2, #12
 80031b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031c6:	4805      	ldr	r0, [pc, #20]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031c8:	f002 ffea 	bl	80061a0 <HAL_UART_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80031d2:	f000 f859 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000110 	.word	0x20000110
 80031e0:	40004800 	.word	0x40004800

080031e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ea:	f107 030c 	add.w	r3, r7, #12
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	60da      	str	r2, [r3, #12]
 80031f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	4b1f      	ldr	r3, [pc, #124]	; (800327c <MX_GPIO_Init+0x98>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a1e      	ldr	r2, [pc, #120]	; (800327c <MX_GPIO_Init+0x98>)
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b1c      	ldr	r3, [pc, #112]	; (800327c <MX_GPIO_Init+0x98>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	4b18      	ldr	r3, [pc, #96]	; (800327c <MX_GPIO_Init+0x98>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a17      	ldr	r2, [pc, #92]	; (800327c <MX_GPIO_Init+0x98>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b15      	ldr	r3, [pc, #84]	; (800327c <MX_GPIO_Init+0x98>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003232:	2200      	movs	r2, #0
 8003234:	2120      	movs	r1, #32
 8003236:	4812      	ldr	r0, [pc, #72]	; (8003280 <MX_GPIO_Init+0x9c>)
 8003238:	f001 fdc6 	bl	8004dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800323c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003240:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800324a:	f107 030c 	add.w	r3, r7, #12
 800324e:	4619      	mov	r1, r3
 8003250:	480c      	ldr	r0, [pc, #48]	; (8003284 <MX_GPIO_Init+0xa0>)
 8003252:	f001 fc25 	bl	8004aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003256:	2320      	movs	r3, #32
 8003258:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325a:	2301      	movs	r3, #1
 800325c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	4619      	mov	r1, r3
 800326c:	4804      	ldr	r0, [pc, #16]	; (8003280 <MX_GPIO_Init+0x9c>)
 800326e:	f001 fc17 	bl	8004aa0 <HAL_GPIO_Init>

}
 8003272:	bf00      	nop
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	40020000 	.word	0x40020000
 8003284:	40020800 	.word	0x40020800

08003288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800328c:	b672      	cpsid	i
}
 800328e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003290:	e7fe      	b.n	8003290 <Error_Handler+0x8>
	...

08003294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <HAL_MspInit+0x4c>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_MspInit+0x4c>)
 80032a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a8:	6453      	str	r3, [r2, #68]	; 0x44
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_MspInit+0x4c>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b2:	607b      	str	r3, [r7, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_MspInit+0x4c>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <HAL_MspInit+0x4c>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	; 0x40
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_MspInit+0x4c>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800

080032e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a17      	ldr	r2, [pc, #92]	; (8003360 <HAL_ADC_MspInit+0x7c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d127      	bne.n	8003356 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <HAL_ADC_MspInit+0x80>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	4a15      	ldr	r2, [pc, #84]	; (8003364 <HAL_ADC_MspInit+0x80>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003314:	6453      	str	r3, [r2, #68]	; 0x44
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_ADC_MspInit+0x80>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_ADC_MspInit+0x80>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a0e      	ldr	r2, [pc, #56]	; (8003364 <HAL_ADC_MspInit+0x80>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_ADC_MspInit+0x80>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = HIGH_CURRENT_SENSE_Pin|LOW_CURRENT_SENSE_Pin;
 800333e:	2342      	movs	r3, #66	; 0x42
 8003340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003342:	2303      	movs	r3, #3
 8003344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	4619      	mov	r1, r3
 8003350:	4805      	ldr	r0, [pc, #20]	; (8003368 <HAL_ADC_MspInit+0x84>)
 8003352:	f001 fba5 	bl	8004aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003356:	bf00      	nop
 8003358:	3728      	adds	r7, #40	; 0x28
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40012000 	.word	0x40012000
 8003364:	40023800 	.word	0x40023800
 8003368:	40020000 	.word	0x40020000

0800336c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08a      	sub	sp, #40	; 0x28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a17      	ldr	r2, [pc, #92]	; (80033e8 <HAL_DAC_MspInit+0x7c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d127      	bne.n	80033de <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_DAC_MspInit+0x80>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	4a15      	ldr	r2, [pc, #84]	; (80033ec <HAL_DAC_MspInit+0x80>)
 8003398:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800339c:	6413      	str	r3, [r2, #64]	; 0x40
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <HAL_DAC_MspInit+0x80>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <HAL_DAC_MspInit+0x80>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <HAL_DAC_MspInit+0x80>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_DAC_MspInit+0x80>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = CURRENT_CTRL_Pin;
 80033c6:	2310      	movs	r3, #16
 80033c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ca:	2303      	movs	r3, #3
 80033cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_CTRL_GPIO_Port, &GPIO_InitStruct);
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	4619      	mov	r1, r3
 80033d8:	4805      	ldr	r0, [pc, #20]	; (80033f0 <HAL_DAC_MspInit+0x84>)
 80033da:	f001 fb61 	bl	8004aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80033de:	bf00      	nop
 80033e0:	3728      	adds	r7, #40	; 0x28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40007400 	.word	0x40007400
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40020000 	.word	0x40020000

080033f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0e      	ldr	r2, [pc, #56]	; (800343c <HAL_TIM_Base_MspInit+0x48>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d115      	bne.n	8003432 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <HAL_TIM_Base_MspInit+0x4c>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	4a0c      	ldr	r2, [pc, #48]	; (8003440 <HAL_TIM_Base_MspInit+0x4c>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003414:	6453      	str	r3, [r2, #68]	; 0x44
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <HAL_TIM_Base_MspInit+0x4c>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003422:	2200      	movs	r2, #0
 8003424:	2100      	movs	r1, #0
 8003426:	2018      	movs	r0, #24
 8003428:	f001 f989 	bl	800473e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800342c:	2018      	movs	r0, #24
 800342e:	f001 f9a2 	bl	8004776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40014000 	.word	0x40014000
 8003440:	40023800 	.word	0x40023800

08003444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	; 0x30
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 031c 	add.w	r3, r7, #28
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a36      	ldr	r2, [pc, #216]	; (800353c <HAL_UART_MspInit+0xf8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d134      	bne.n	80034d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	4b35      	ldr	r3, [pc, #212]	; (8003540 <HAL_UART_MspInit+0xfc>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	4a34      	ldr	r2, [pc, #208]	; (8003540 <HAL_UART_MspInit+0xfc>)
 8003470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003474:	6413      	str	r3, [r2, #64]	; 0x40
 8003476:	4b32      	ldr	r3, [pc, #200]	; (8003540 <HAL_UART_MspInit+0xfc>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <HAL_UART_MspInit+0xfc>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4a2d      	ldr	r2, [pc, #180]	; (8003540 <HAL_UART_MspInit+0xfc>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <HAL_UART_MspInit+0xfc>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800349e:	230c      	movs	r3, #12
 80034a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034aa:	2303      	movs	r3, #3
 80034ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034ae:	2307      	movs	r3, #7
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b2:	f107 031c 	add.w	r3, r7, #28
 80034b6:	4619      	mov	r1, r3
 80034b8:	4822      	ldr	r0, [pc, #136]	; (8003544 <HAL_UART_MspInit+0x100>)
 80034ba:	f001 faf1 	bl	8004aa0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034be:	2200      	movs	r2, #0
 80034c0:	2100      	movs	r1, #0
 80034c2:	2026      	movs	r0, #38	; 0x26
 80034c4:	f001 f93b 	bl	800473e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034c8:	2026      	movs	r0, #38	; 0x26
 80034ca:	f001 f954 	bl	8004776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80034ce:	e031      	b.n	8003534 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <HAL_UART_MspInit+0x104>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d12c      	bne.n	8003534 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	4b18      	ldr	r3, [pc, #96]	; (8003540 <HAL_UART_MspInit+0xfc>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	4a17      	ldr	r2, [pc, #92]	; (8003540 <HAL_UART_MspInit+0xfc>)
 80034e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ea:	4b15      	ldr	r3, [pc, #84]	; (8003540 <HAL_UART_MspInit+0xfc>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_UART_MspInit+0xfc>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a10      	ldr	r2, [pc, #64]	; (8003540 <HAL_UART_MspInit+0xfc>)
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <HAL_UART_MspInit+0xfc>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003512:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003518:	2302      	movs	r3, #2
 800351a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003520:	2303      	movs	r3, #3
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003524:	2307      	movs	r3, #7
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003528:	f107 031c 	add.w	r3, r7, #28
 800352c:	4619      	mov	r1, r3
 800352e:	4807      	ldr	r0, [pc, #28]	; (800354c <HAL_UART_MspInit+0x108>)
 8003530:	f001 fab6 	bl	8004aa0 <HAL_GPIO_Init>
}
 8003534:	bf00      	nop
 8003536:	3730      	adds	r7, #48	; 0x30
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40004400 	.word	0x40004400
 8003540:	40023800 	.word	0x40023800
 8003544:	40020000 	.word	0x40020000
 8003548:	40004800 	.word	0x40004800
 800354c:	40020800 	.word	0x40020800

08003550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003554:	e7fe      	b.n	8003554 <NMI_Handler+0x4>

08003556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800355a:	e7fe      	b.n	800355a <HardFault_Handler+0x4>

0800355c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003560:	e7fe      	b.n	8003560 <MemManage_Handler+0x4>

08003562 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003566:	e7fe      	b.n	8003566 <BusFault_Handler+0x4>

08003568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800356c:	e7fe      	b.n	800356c <UsageFault_Handler+0x4>

0800356e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800358a:	b480      	push	{r7}
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800359c:	f000 fbc4 	bl	8003d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035a0:	bf00      	nop
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80035a8:	4802      	ldr	r0, [pc, #8]	; (80035b4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80035aa:	f002 fab3 	bl	8005b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000084 	.word	0x20000084

080035b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035bc:	4802      	ldr	r0, [pc, #8]	; (80035c8 <USART2_IRQHandler+0x10>)
 80035be:	f002 feff 	bl	80063c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	200000cc 	.word	0x200000cc

080035cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <SystemInit+0x20>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	4a05      	ldr	r2, [pc, #20]	; (80035ec <SystemInit+0x20>)
 80035d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003628 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035f4:	480d      	ldr	r0, [pc, #52]	; (800362c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035f6:	490e      	ldr	r1, [pc, #56]	; (8003630 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035f8:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035fc:	e002      	b.n	8003604 <LoopCopyDataInit>

080035fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003602:	3304      	adds	r3, #4

08003604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003608:	d3f9      	bcc.n	80035fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800360a:	4a0b      	ldr	r2, [pc, #44]	; (8003638 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800360c:	4c0b      	ldr	r4, [pc, #44]	; (800363c <LoopFillZerobss+0x26>)
  movs r3, #0
 800360e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003610:	e001      	b.n	8003616 <LoopFillZerobss>

08003612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003614:	3204      	adds	r2, #4

08003616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003618:	d3fb      	bcc.n	8003612 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800361a:	f7ff ffd7 	bl	80035cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800361e:	f004 f9f3 	bl	8007a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003622:	f7ff fb65 	bl	8002cf0 <main>
  bx  lr    
 8003626:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800362c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003630:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003634:	08007bbc 	.word	0x08007bbc
  ldr r2, =_sbss
 8003638:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800363c:	2000089c 	.word	0x2000089c

08003640 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003640:	e7fe      	b.n	8003640 <ADC_IRQHandler>

08003642 <genCrc>:

/**
  * Calcula o crc8 entre o range passado como parametro.
  */
uint8_t genCrc(uint8_t buffer[], uint16_t qtd_de_bytes_no_pacote)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	460b      	mov	r3, r1
 800364c:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	73bb      	strb	r3, [r7, #14]

    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 8003656:	2300      	movs	r3, #0
 8003658:	73bb      	strb	r3, [r7, #14]
 800365a:	e00d      	b.n	8003678 <genCrc+0x36>
    {
      crc = calcCrc8(crc, buffer[i]);
 800365c:	7bbb      	ldrb	r3, [r7, #14]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	781a      	ldrb	r2, [r3, #0]
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f80f 	bl	800368c <calcCrc8>
 800366e:	4603      	mov	r3, r0
 8003670:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < qtd_de_bytes_no_pacote; i++)
 8003672:	7bbb      	ldrb	r3, [r7, #14]
 8003674:	3301      	adds	r3, #1
 8003676:	73bb      	strb	r3, [r7, #14]
 8003678:	7bbb      	ldrb	r3, [r7, #14]
 800367a:	b29b      	uxth	r3, r3
 800367c:	887a      	ldrh	r2, [r7, #2]
 800367e:	429a      	cmp	r2, r3
 8003680:	d8ec      	bhi.n	800365c <genCrc+0x1a>
    }

  return crc;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <calcCrc8>:

/**
  * Funcao que calcula o CRC8
  */
static uint8_t calcCrc8(uint8_t crc3, uint8_t b)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	460a      	mov	r2, r1
 8003696:	71fb      	strb	r3, [r7, #7]
 8003698:	4613      	mov	r3, r2
 800369a:	71bb      	strb	r3, [r7, #6]
    uint8_t pos = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]
    pos = (((crc3 & 0xff) ^ b) & 0xff);
 80036a0:	79fa      	ldrb	r2, [r7, #7]
 80036a2:	79bb      	ldrb	r3, [r7, #6]
 80036a4:	4053      	eors	r3, r2
 80036a6:	73fb      	strb	r3, [r7, #15]

    return ((crc3) >> 8) ^ table[pos];
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	121b      	asrs	r3, r3, #8
 80036ac:	b25a      	sxtb	r2, r3
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	4905      	ldr	r1, [pc, #20]	; (80036c8 <calcCrc8+0x3c>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	b25b      	sxtb	r3, r3
 80036b6:	4053      	eors	r3, r2
 80036b8:	b25b      	sxtb	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	08007aac 	.word	0x08007aac

080036cc <dataPacketRxInit>:
 */

#include "dataPacketRx.h"

void dataPacketRxInit(DataPacketRx *dataPacketRx, uint8_t start_1, uint8_t start_2)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	70fb      	strb	r3, [r7, #3]
 80036d8:	4613      	mov	r3, r2
 80036da:	70bb      	strb	r3, [r7, #2]
	dataPacketRx->start_1 = start_1;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	701a      	strb	r2, [r3, #0]
	dataPacketRx->start_2 = start_2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	78ba      	ldrb	r2, [r7, #2]
 80036e6:	705a      	strb	r2, [r3, #1]
	dataPacketRx->command = 0x00;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	709a      	strb	r2, [r3, #2]
	dataPacketRx->payloadDataLength = 0x00;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	70da      	strb	r2, [r3, #3]
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	2232      	movs	r2, #50	; 0x32
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f004 f9b5 	bl	8007a6c <memset>
	dataPacketRx->crc8 = 0x00;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3337      	adds	r3, #55	; 0x37
 800370e:	2237      	movs	r2, #55	; 0x37
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f004 f9aa 	bl	8007a6c <memset>
	dataPacketRx->dataPacketLength = 0x00;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketRx->currentRxByteIndex = 0;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	dataPacketRx->containsStarterBytes = FALSE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	dataPacketRx->starterByteIndex = 0;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <dataPacketRxAppend>:

void dataPacketRxAppend(DataPacketRx *dataPacketRx, uint8_t newByte)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacket[dataPacketRx->currentRxByteIndex] = newByte;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800375a:	461a      	mov	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketRx->currentRxByteIndex++;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800376c:	3301      	adds	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketLength++;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800377c:	3301      	adds	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	if (dataPacketRx->currentRxByteIndex > QTY_PACKET_RX_BYTES)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800378c:	2b37      	cmp	r3, #55	; 0x37
 800378e:	d90a      	bls.n	80037a6 <dataPacketRxAppend+0x5e>
	{
		dataPacketRxClear(dataPacketRx);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f8cf 	bl	8003934 <dataPacketRxClear>
		dataPacketRx->currentRxByteIndex = 0;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		dataPacketRx->dataPacketLength = 0;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	}
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <dataPacketRxDecode>:

void dataPacketRxDecode(DataPacketRx *dataPacketRx)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
	if (dataPacketRx->containsStarterBytes == TRUE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d17e      	bne.n	80038be <dataPacketRxDecode+0x110>
	{
		dataPacketRxSetCommand(dataPacketRx, dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 2]);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80037c6:	3302      	adds	r3, #2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80037d0:	4619      	mov	r1, r3
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f8e2 	bl	800399c <dataPacketRxSetCommand>
		dataPacketRx->payloadDataLength = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 3];
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80037de:	3303      	adds	r3, #3
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	70da      	strb	r2, [r3, #3]

		if (dataPacketRx->payloadDataLength == 0)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	78db      	ldrb	r3, [r3, #3]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d126      	bne.n	8003842 <dataPacketRxDecode+0x94>
		{
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + 4];
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80037fa:	3304      	adds	r3, #4
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4413      	add	r3, r2
 8003800:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003804:	733b      	strb	r3, [r7, #12]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, 4);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3337      	adds	r3, #55	; 0x37
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	f8b2 2074 	ldrh.w	r2, [r2, #116]	; 0x74
 8003810:	4413      	add	r3, r2
 8003812:	2104      	movs	r1, #4
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff14 	bl	8003642 <genCrc>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

			if (dataPacketRx->crc8 == receivedCrc8)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800382a:	7b3a      	ldrb	r2, [r7, #12]
 800382c:	429a      	cmp	r2, r3
 800382e:	d17d      	bne.n	800392c <dataPacketRxDecode+0x17e>
			{
				dataPacketRx->currentRxByteIndex = 0;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
			{
				dataPacketRxClear(dataPacketRx);
			}
		}
	}
}
 8003840:	e074      	b.n	800392c <dataPacketRxDecode+0x17e>
			uint8_t receivedCrc8 = dataPacketRx->dataPacket[dataPacketRx->starterByteIndex + dataPacketRx->payloadDataLength + 4];
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8003848:	461a      	mov	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	78db      	ldrb	r3, [r3, #3]
 800384e:	4413      	add	r3, r2
 8003850:	3304      	adds	r3, #4
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	4413      	add	r3, r2
 8003856:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800385a:	737b      	strb	r3, [r7, #13]
			dataPacketRx->crc8 = genCrc(dataPacketRx->dataPacket + dataPacketRx->starterByteIndex, dataPacketRx->payloadDataLength + 4);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3337      	adds	r3, #55	; 0x37
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	f8b2 2074 	ldrh.w	r2, [r2, #116]	; 0x74
 8003866:	441a      	add	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	78db      	ldrb	r3, [r3, #3]
 800386c:	b29b      	uxth	r3, r3
 800386e:	3304      	adds	r3, #4
 8003870:	b29b      	uxth	r3, r3
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7ff fee4 	bl	8003642 <genCrc>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			if (dataPacketRx->crc8 == receivedCrc8)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800388a:	7b7a      	ldrb	r2, [r7, #13]
 800388c:	429a      	cmp	r2, r3
 800388e:	d14d      	bne.n	800392c <dataPacketRxDecode+0x17e>
				dataPacketRxSetPayloadData(dataPacketRx, dataPacketRx->dataPacket + dataPacketRx->starterByteIndex + 4, dataPacketRx->payloadDataLength);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800389c:	3304      	adds	r3, #4
 800389e:	18d1      	adds	r1, r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	78db      	ldrb	r3, [r3, #3]
 80038a4:	461a      	mov	r2, r3
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f89e 	bl	80039e8 <dataPacketRxSetPayloadData>
				dataPacketRx->currentRxByteIndex = 0;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
				dataPacketRx->dataPacketRxStatus = VALID_RX_DATA_PACKET;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
 80038bc:	e036      	b.n	800392c <dataPacketRxDecode+0x17e>
		if (dataPacketRx->dataPacketLength >= MIN_PACKET_RX_BYTES)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d931      	bls.n	800392c <dataPacketRxDecode+0x17e>
			uint16_t index = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	81fb      	strh	r3, [r7, #14]
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 80038cc:	2300      	movs	r3, #0
 80038ce:	81fb      	strh	r3, [r7, #14]
 80038d0:	e01e      	b.n	8003910 <dataPacketRxDecode+0x162>
				if ((dataPacketRx->dataPacket[index] == dataPacketRx->start_1) && (dataPacketRx->dataPacket[index+1] == dataPacketRx->start_2))
 80038d2:	89fb      	ldrh	r3, [r7, #14]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4413      	add	r3, r2
 80038d8:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d112      	bne.n	800390a <dataPacketRxDecode+0x15c>
 80038e4:	89fb      	ldrh	r3, [r7, #14]
 80038e6:	3301      	adds	r3, #1
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d108      	bne.n	800390a <dataPacketRxDecode+0x15c>
					dataPacketRx->containsStarterBytes = TRUE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
					dataPacketRx->starterByteIndex = index;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	89fa      	ldrh	r2, [r7, #14]
 8003904:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
					break;
 8003908:	e008      	b.n	800391c <dataPacketRxDecode+0x16e>
			for (index = 0; index < dataPacketRx->dataPacketLength; index++)
 800390a:	89fb      	ldrh	r3, [r7, #14]
 800390c:	3301      	adds	r3, #1
 800390e:	81fb      	strh	r3, [r7, #14]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8003916:	89fa      	ldrh	r2, [r7, #14]
 8003918:	429a      	cmp	r2, r3
 800391a:	d3da      	bcc.n	80038d2 <dataPacketRxDecode+0x124>
			if (dataPacketRx->containsStarterBytes == FALSE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <dataPacketRxDecode+0x17e>
				dataPacketRxClear(dataPacketRx);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f804 	bl	8003934 <dataPacketRxClear>
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <dataPacketRxClear>:

void dataPacketRxClear(DataPacketRx *dataPacketRx)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	dataPacketRx->containsStarterBytes = FALSE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	dataPacketRx->currentRxByteIndex = 0;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	dataPacketRx->dataPacketLength = 0;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketRx->payloadDataLength = 0;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	70da      	strb	r2, [r3, #3]
	dataPacketRx->command = 0x00;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	709a      	strb	r2, [r3, #2]
	dataPacketRx->crc8 = 0x00;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketRx->starterByteIndex = 0;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	2232      	movs	r2, #50	; 0x32
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f004 f873 	bl	8007a6c <memset>
	memset(dataPacketRx->dataPacket, 0x00, QTY_PACKET_RX_BYTES);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3337      	adds	r3, #55	; 0x37
 800398a:	2237      	movs	r2, #55	; 0x37
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f004 f86c 	bl	8007a6c <memset>
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <dataPacketRxSetCommand>:
	dataPacketRx->crc8 = 0x00;
	memset(dataPacketRx->payloadData, 0x00, QTY_PAYLOAD_RX_DATA_BYTES);
}

void dataPacketRxSetCommand(DataPacketRx *dataPacketRx, uint8_t command)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	70fb      	strb	r3, [r7, #3]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76

	if ((command < 0x01) || (command > 0xFE))
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d006      	beq.n	80039c4 <dataPacketRxSetCommand+0x28>
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	2bff      	cmp	r3, #255	; 0xff
 80039ba:	d003      	beq.n	80039c4 <dataPacketRxSetCommand+0x28>
	{
		return;
	}

	dataPacketRx->command = command;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	709a      	strb	r2, [r3, #2]
 80039c2:	e000      	b.n	80039c6 <dataPacketRxSetCommand+0x2a>
		return;
 80039c4:	bf00      	nop
}
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <dataPacketRxGetCommand>:

uint8_t dataPacketRxGetCommand(DataPacketRx *dataPacketRx)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	return dataPacketRx->command;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	789b      	ldrb	r3, [r3, #2]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <dataPacketRxSetPayloadData>:

void dataPacketRxSetPayloadData(DataPacketRx *dataPacketRx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	4613      	mov	r3, r2
 80039f4:	71fb      	strb	r3, [r7, #7]
	dataPacketRx->dataPacketRxStatus = INVALID_RX_DATA_PACKET;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	memcpy(dataPacketRx->payloadData, payloadData, payloadDataLength);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3304      	adds	r3, #4
 8003a02:	79fa      	ldrb	r2, [r7, #7]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f004 f822 	bl	8007a50 <memcpy>
	dataPacketRx->payloadDataLength = payloadDataLength;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	79fa      	ldrb	r2, [r7, #7]
 8003a10:	70da      	strb	r2, [r3, #3]
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <dataPacketRxGetPayloadData>:

uint8_t *dataPacketRxGetPayloadData(DataPacketRx *dataPacketRx)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadData;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3304      	adds	r3, #4
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <dataPacketRxGetPayloadDataLength>:

uint8_t dataPacketRxGetPayloadDataLength(DataPacketRx *dataPacketRx)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
	return dataPacketRx->payloadDataLength;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	78db      	ldrb	r3, [r3, #3]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <dataPacketRxGetDataPacketStatus>:
{
	return dataPacketRx->dataPacketLength;
}

DataPacketRxStatus dataPacketRxGetDataPacketStatus(DataPacketRx *dataPacketRx)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
	return dataPacketRx->dataPacketRxStatus;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <dataPacketTxInit>:
 */

#include "dataPacketTx.h"

void dataPacketTxInit(DataPacketTx *dataPacketTx, uint8_t start_1, uint8_t start_2)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	70fb      	strb	r3, [r7, #3]
 8003a70:	4613      	mov	r3, r2
 8003a72:	70bb      	strb	r3, [r7, #2]
	dataPacketTx->start_1 = start_1;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	701a      	strb	r2, [r3, #0]
	dataPacketTx->start_2 = start_2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	78ba      	ldrb	r2, [r7, #2]
 8003a7e:	705a      	strb	r2, [r3, #1]
	dataPacketTx->command = 0x00;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	709a      	strb	r2, [r3, #2]
	dataPacketTx->payloadDataLength = 0x00;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	70da      	strb	r2, [r3, #3]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	2232      	movs	r2, #50	; 0x32
 8003a92:	2100      	movs	r1, #0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f003 ffe9 	bl	8007a6c <memset>
	dataPacketTx->crc8 = 0x00;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3337      	adds	r3, #55	; 0x37
 8003aa6:	2237      	movs	r2, #55	; 0x37
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f003 ffde 	bl	8007a6c <memset>
	dataPacketTx->dataPacketLength = 0x00;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <dataPacketTxMount>:

void dataPacketTxMount(DataPacketTx *dataPacketTx)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacket[0] = dataPacketTx->start_1;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketTx->dataPacket[1] = dataPacketTx->start_2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	785a      	ldrb	r2, [r3, #1]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dataPacketTx->dataPacket[2] = dataPacketTx->command;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	789a      	ldrb	r2, [r3, #2]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dataPacketTx->dataPacket[3] = dataPacketTx->payloadDataLength;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	78da      	ldrb	r2, [r3, #3]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	memcpy(dataPacketTx->dataPacket + 4, dataPacketTx->payloadData, dataPacketTx->payloadDataLength);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3337      	adds	r3, #55	; 0x37
 8003afc:	1d18      	adds	r0, r3, #4
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	1d19      	adds	r1, r3, #4
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	78db      	ldrb	r3, [r3, #3]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f003 ffa2 	bl	8007a50 <memcpy>
	dataPacketTx->dataPacketLength = dataPacketTx->payloadDataLength + 4 + 1;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	78db      	ldrb	r3, [r3, #3]
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3305      	adds	r3, #5
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = genCrc(dataPacketTx->dataPacket, dataPacketTx->dataPacketLength - 1);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f103 0237 	add.w	r2, r3, #55	; 0x37
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f7ff fd87 	bl	8003642 <genCrc>
 8003b34:	4603      	mov	r3, r0
 8003b36:	461a      	mov	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->dataPacket[dataPacketTx->payloadDataLength + 4] = dataPacketTx->crc8;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	78db      	ldrb	r3, [r3, #3]
 8003b42:	3304      	adds	r3, #4
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	f892 1036 	ldrb.w	r1, [r2, #54]	; 0x36
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	460a      	mov	r2, r1
 8003b50:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	dataPacketTx->dataPacketTxStatus = VALID_TX_DATA_PACKET;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <dataPacketTxUartSend>:

void dataPacketTxUartSend(DataPacketTx *dataPacketTx, UART_HandleTypeDef huart)
{
 8003b64:	b084      	sub	sp, #16
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	f107 0014 	add.w	r0, r7, #20
 8003b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (dataPacketTx->dataPacketTxStatus == VALID_TX_DATA_PACKET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10b      	bne.n	8003b98 <dataPacketTxUartSend+0x34>
	{
		HAL_UART_Transmit(&huart, dataPacketTx->dataPacket, dataPacketTx->dataPacketLength, HAL_MAX_DELAY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 8003b8c:	f107 0014 	add.w	r0, r7, #20
 8003b90:	f04f 33ff 	mov.w	r3, #4294967295
 8003b94:	f002 fb51 	bl	800623a <HAL_UART_Transmit>
	}
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ba2:	b004      	add	sp, #16
 8003ba4:	4770      	bx	lr

08003ba6 <dataPacketTxClear>:

void dataPacketTxClear(DataPacketTx *dataPacketTx)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	dataPacketTx->dataPacketLength = 0;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = 0x00;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->command = 0x00;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->dataPacket, 0x00, QTY_PACKET_TX_BYTES);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3337      	adds	r3, #55	; 0x37
 8003bd0:	2237      	movs	r2, #55	; 0x37
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f003 ff49 	bl	8007a6c <memset>
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <dataPacketTxPayloadDataClear>:

void dataPacketTxPayloadDataClear(DataPacketTx *dataPacketTx)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	dataPacketTx->dataPacketLength = 0;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	dataPacketTx->crc8 = 0x00;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	dataPacketTx->command = 0x00;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	709a      	strb	r2, [r3, #2]
	memset(dataPacketTx->payloadData, 0x00, QTY_PAYLOAD_TX_DATA_BYTES);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	2232      	movs	r2, #50	; 0x32
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4618      	mov	r0, r3
 8003c12:	f003 ff2b 	bl	8007a6c <memset>
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <dataPacketTxSetCommand>:

void dataPacketTxSetCommand(DataPacketTx *dataPacketTx, uint8_t command)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	460b      	mov	r3, r1
 8003c28:	70fb      	strb	r3, [r7, #3]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

	if ((command < 0x01) || (command > 0xFE))
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d006      	beq.n	8003c46 <dataPacketTxSetCommand+0x28>
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	2bff      	cmp	r3, #255	; 0xff
 8003c3c:	d003      	beq.n	8003c46 <dataPacketTxSetCommand+0x28>
	{
		return;
	}

	dataPacketTx->command = command;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	709a      	strb	r2, [r3, #2]
 8003c44:	e000      	b.n	8003c48 <dataPacketTxSetCommand+0x2a>
		return;
 8003c46:	bf00      	nop
}
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <dataPacketTxSetPayloadData>:
{
	return dataPacketTx->command;
}

void dataPacketTxSetPayloadData(DataPacketTx *dataPacketTx, uint8_t *payloadData, uint8_t payloadDataLength)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	71fb      	strb	r3, [r7, #7]
	dataPacketTx->dataPacketTxStatus = INVALID_TX_DATA_PACKET;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	memcpy(dataPacketTx->payloadData, payloadData, payloadDataLength);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	79fa      	ldrb	r2, [r7, #7]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f003 feed 	bl	8007a50 <memcpy>
	dataPacketTx->payloadDataLength = payloadDataLength;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	79fa      	ldrb	r2, [r7, #7]
 8003c7a:	70da      	strb	r2, [r3, #3]
}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_Init+0x40>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <HAL_Init+0x40>)
 8003c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c94:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <HAL_Init+0x40>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0a      	ldr	r2, [pc, #40]	; (8003cc4 <HAL_Init+0x40>)
 8003c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ca0:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <HAL_Init+0x40>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a07      	ldr	r2, [pc, #28]	; (8003cc4 <HAL_Init+0x40>)
 8003ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cac:	2003      	movs	r0, #3
 8003cae:	f000 fd3b 	bl	8004728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cb2:	200f      	movs	r0, #15
 8003cb4:	f000 f808 	bl	8003cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cb8:	f7ff faec 	bl	8003294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023c00 	.word	0x40023c00

08003cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <HAL_InitTick+0x54>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <HAL_InitTick+0x58>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fd53 	bl	8004792 <HAL_SYSTICK_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e00e      	b.n	8003d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b0f      	cmp	r3, #15
 8003cfa:	d80a      	bhi.n	8003d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	f04f 30ff 	mov.w	r0, #4294967295
 8003d04:	f000 fd1b 	bl	800473e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d08:	4a06      	ldr	r2, [pc, #24]	; (8003d24 <HAL_InitTick+0x5c>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e000      	b.n	8003d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000000 	.word	0x20000000
 8003d20:	20000008 	.word	0x20000008
 8003d24:	20000004 	.word	0x20000004

08003d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_IncTick+0x20>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_IncTick+0x24>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4413      	add	r3, r2
 8003d38:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <HAL_IncTick+0x24>)
 8003d3a:	6013      	str	r3, [r2, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000008 	.word	0x20000008
 8003d4c:	20000898 	.word	0x20000898

08003d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return uwTick;
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_GetTick+0x14>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000898 	.word	0x20000898

08003d68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e033      	b.n	8003de6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff faac 	bl	80032e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d118      	bne.n	8003dd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003dae:	f023 0302 	bic.w	r3, r3, #2
 8003db2:	f043 0202 	orr.w	r2, r3, #2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fae8 	bl	8004390 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
 8003dd6:	e001      	b.n	8003ddc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_ADC_Start+0x1a>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e0b2      	b.n	8003f70 <HAL_ADC_Start+0x180>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d018      	beq.n	8003e52 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e30:	4b52      	ldr	r3, [pc, #328]	; (8003f7c <HAL_ADC_Start+0x18c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a52      	ldr	r2, [pc, #328]	; (8003f80 <HAL_ADC_Start+0x190>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	0c9a      	lsrs	r2, r3, #18
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e44:	e002      	b.n	8003e4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f9      	bne.n	8003e46 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d17a      	bne.n	8003f56 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9e:	d106      	bne.n	8003eae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea4:	f023 0206 	bic.w	r2, r3, #6
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	645a      	str	r2, [r3, #68]	; 0x44
 8003eac:	e002      	b.n	8003eb4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ebc:	4b31      	ldr	r3, [pc, #196]	; (8003f84 <HAL_ADC_Start+0x194>)
 8003ebe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ec8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d12a      	bne.n	8003f2c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2b      	ldr	r2, [pc, #172]	; (8003f88 <HAL_ADC_Start+0x198>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d015      	beq.n	8003f0c <HAL_ADC_Start+0x11c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a29      	ldr	r2, [pc, #164]	; (8003f8c <HAL_ADC_Start+0x19c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d105      	bne.n	8003ef6 <HAL_ADC_Start+0x106>
 8003eea:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <HAL_ADC_Start+0x194>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a25      	ldr	r2, [pc, #148]	; (8003f90 <HAL_ADC_Start+0x1a0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d136      	bne.n	8003f6e <HAL_ADC_Start+0x17e>
 8003f00:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <HAL_ADC_Start+0x194>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d130      	bne.n	8003f6e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d129      	bne.n	8003f6e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f28:	609a      	str	r2, [r3, #8]
 8003f2a:	e020      	b.n	8003f6e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <HAL_ADC_Start+0x198>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d11b      	bne.n	8003f6e <HAL_ADC_Start+0x17e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d114      	bne.n	8003f6e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	e00b      	b.n	8003f6e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f043 0210 	orr.w	r2, r3, #16
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	f043 0201 	orr.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	20000000 	.word	0x20000000
 8003f80:	431bde83 	.word	0x431bde83
 8003f84:	40012300 	.word	0x40012300
 8003f88:	40012000 	.word	0x40012000
 8003f8c:	40012100 	.word	0x40012100
 8003f90:	40012200 	.word	0x40012200

08003f94 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_ADC_Stop+0x16>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e021      	b.n	8003fee <HAL_ADC_Stop+0x5a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	f043 0201 	orr.w	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004016:	d113      	bne.n	8004040 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004026:	d10b      	bne.n	8004040 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f043 0220 	orr.w	r2, r3, #32
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e063      	b.n	8004108 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004040:	f7ff fe86 	bl	8003d50 <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004046:	e021      	b.n	800408c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404e:	d01d      	beq.n	800408c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <HAL_ADC_PollForConversion+0x6c>
 8004056:	f7ff fe7b 	bl	8003d50 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d212      	bcs.n	800408c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b02      	cmp	r3, #2
 8004072:	d00b      	beq.n	800408c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f043 0204 	orr.w	r2, r3, #4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e03d      	b.n	8004108 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b02      	cmp	r3, #2
 8004098:	d1d6      	bne.n	8004048 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f06f 0212 	mvn.w	r2, #18
 80040a2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d123      	bne.n	8004106 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11f      	bne.n	8004106 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d006      	beq.n	80040e2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d111      	bne.n	8004106 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d105      	bne.n	8004106 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0201 	orr.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x1c>
 8004144:	2302      	movs	r3, #2
 8004146:	e113      	b.n	8004370 <HAL_ADC_ConfigChannel+0x244>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b09      	cmp	r3, #9
 8004156:	d925      	bls.n	80041a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68d9      	ldr	r1, [r3, #12]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	4613      	mov	r3, r2
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	4413      	add	r3, r2
 800416c:	3b1e      	subs	r3, #30
 800416e:	2207      	movs	r2, #7
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	43da      	mvns	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	400a      	ands	r2, r1
 800417c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68d9      	ldr	r1, [r3, #12]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	4618      	mov	r0, r3
 8004190:	4603      	mov	r3, r0
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4403      	add	r3, r0
 8004196:	3b1e      	subs	r3, #30
 8004198:	409a      	lsls	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	60da      	str	r2, [r3, #12]
 80041a2:	e022      	b.n	80041ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6919      	ldr	r1, [r3, #16]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	4613      	mov	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4413      	add	r3, r2
 80041b8:	2207      	movs	r2, #7
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43da      	mvns	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	400a      	ands	r2, r1
 80041c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6919      	ldr	r1, [r3, #16]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	4618      	mov	r0, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	4403      	add	r3, r0
 80041e0:	409a      	lsls	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b06      	cmp	r3, #6
 80041f0:	d824      	bhi.n	800423c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	3b05      	subs	r3, #5
 8004204:	221f      	movs	r2, #31
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	43da      	mvns	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	400a      	ands	r2, r1
 8004212:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	4618      	mov	r0, r3
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	3b05      	subs	r3, #5
 800422e:	fa00 f203 	lsl.w	r2, r0, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	635a      	str	r2, [r3, #52]	; 0x34
 800423a:	e04c      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d824      	bhi.n	800428e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	3b23      	subs	r3, #35	; 0x23
 8004256:	221f      	movs	r2, #31
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43da      	mvns	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	400a      	ands	r2, r1
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	b29b      	uxth	r3, r3
 8004272:	4618      	mov	r0, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	3b23      	subs	r3, #35	; 0x23
 8004280:	fa00 f203 	lsl.w	r2, r0, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
 800428c:	e023      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	3b41      	subs	r3, #65	; 0x41
 80042a0:	221f      	movs	r2, #31
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43da      	mvns	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	400a      	ands	r2, r1
 80042ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	4618      	mov	r0, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	3b41      	subs	r3, #65	; 0x41
 80042ca:	fa00 f203 	lsl.w	r2, r0, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042d6:	4b29      	ldr	r3, [pc, #164]	; (800437c <HAL_ADC_ConfigChannel+0x250>)
 80042d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a28      	ldr	r2, [pc, #160]	; (8004380 <HAL_ADC_ConfigChannel+0x254>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10f      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x1d8>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b12      	cmp	r3, #18
 80042ea:	d10b      	bne.n	8004304 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1d      	ldr	r2, [pc, #116]	; (8004380 <HAL_ADC_ConfigChannel+0x254>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d12b      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x23a>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <HAL_ADC_ConfigChannel+0x258>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <HAL_ADC_ConfigChannel+0x1f4>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b11      	cmp	r3, #17
 800431e:	d122      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a11      	ldr	r2, [pc, #68]	; (8004384 <HAL_ADC_ConfigChannel+0x258>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d111      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004342:	4b11      	ldr	r3, [pc, #68]	; (8004388 <HAL_ADC_ConfigChannel+0x25c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a11      	ldr	r2, [pc, #68]	; (800438c <HAL_ADC_ConfigChannel+0x260>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	0c9a      	lsrs	r2, r3, #18
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004358:	e002      	b.n	8004360 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	3b01      	subs	r3, #1
 800435e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f9      	bne.n	800435a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	40012300 	.word	0x40012300
 8004380:	40012000 	.word	0x40012000
 8004384:	10000012 	.word	0x10000012
 8004388:	20000000 	.word	0x20000000
 800438c:	431bde83 	.word	0x431bde83

08004390 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004398:	4b79      	ldr	r3, [pc, #484]	; (8004580 <ADC_Init+0x1f0>)
 800439a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	431a      	orrs	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6859      	ldr	r1, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	021a      	lsls	r2, r3, #8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80043e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6859      	ldr	r1, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800440a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6899      	ldr	r1, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004422:	4a58      	ldr	r2, [pc, #352]	; (8004584 <ADC_Init+0x1f4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d022      	beq.n	800446e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004436:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6899      	ldr	r1, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	e00f      	b.n	800448e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800447c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800448c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0202 	bic.w	r2, r2, #2
 800449c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6899      	ldr	r1, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	7e1b      	ldrb	r3, [r3, #24]
 80044a8:	005a      	lsls	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01b      	beq.n	80044f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80044da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6859      	ldr	r1, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	3b01      	subs	r3, #1
 80044e8:	035a      	lsls	r2, r3, #13
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	e007      	b.n	8004504 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004502:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004512:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	3b01      	subs	r3, #1
 8004520:	051a      	lsls	r2, r3, #20
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6899      	ldr	r1, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004546:	025a      	lsls	r2, r3, #9
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6899      	ldr	r1, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	029a      	lsls	r2, r3, #10
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	40012300 	.word	0x40012300
 8004584:	0f000001 	.word	0x0f000001

08004588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004598:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <__NVIC_SetPriorityGrouping+0x44>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045a4:	4013      	ands	r3, r2
 80045a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ba:	4a04      	ldr	r2, [pc, #16]	; (80045cc <__NVIC_SetPriorityGrouping+0x44>)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	60d3      	str	r3, [r2, #12]
}
 80045c0:	bf00      	nop
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045d4:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <__NVIC_GetPriorityGrouping+0x18>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	0a1b      	lsrs	r3, r3, #8
 80045da:	f003 0307 	and.w	r3, r3, #7
}
 80045de:	4618      	mov	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	e000ed00 	.word	0xe000ed00

080045ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	db0b      	blt.n	8004616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	f003 021f 	and.w	r2, r3, #31
 8004604:	4907      	ldr	r1, [pc, #28]	; (8004624 <__NVIC_EnableIRQ+0x38>)
 8004606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	2001      	movs	r0, #1
 800460e:	fa00 f202 	lsl.w	r2, r0, r2
 8004612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	e000e100 	.word	0xe000e100

08004628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	6039      	str	r1, [r7, #0]
 8004632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004638:	2b00      	cmp	r3, #0
 800463a:	db0a      	blt.n	8004652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	b2da      	uxtb	r2, r3
 8004640:	490c      	ldr	r1, [pc, #48]	; (8004674 <__NVIC_SetPriority+0x4c>)
 8004642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004646:	0112      	lsls	r2, r2, #4
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	440b      	add	r3, r1
 800464c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004650:	e00a      	b.n	8004668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	4908      	ldr	r1, [pc, #32]	; (8004678 <__NVIC_SetPriority+0x50>)
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	3b04      	subs	r3, #4
 8004660:	0112      	lsls	r2, r2, #4
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	440b      	add	r3, r1
 8004666:	761a      	strb	r2, [r3, #24]
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	e000e100 	.word	0xe000e100
 8004678:	e000ed00 	.word	0xe000ed00

0800467c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800467c:	b480      	push	{r7}
 800467e:	b089      	sub	sp, #36	; 0x24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f1c3 0307 	rsb	r3, r3, #7
 8004696:	2b04      	cmp	r3, #4
 8004698:	bf28      	it	cs
 800469a:	2304      	movcs	r3, #4
 800469c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	3304      	adds	r3, #4
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d902      	bls.n	80046ac <NVIC_EncodePriority+0x30>
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	3b03      	subs	r3, #3
 80046aa:	e000      	b.n	80046ae <NVIC_EncodePriority+0x32>
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43da      	mvns	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	401a      	ands	r2, r3
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046c4:	f04f 31ff 	mov.w	r1, #4294967295
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	fa01 f303 	lsl.w	r3, r1, r3
 80046ce:	43d9      	mvns	r1, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d4:	4313      	orrs	r3, r2
         );
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3724      	adds	r7, #36	; 0x24
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046f4:	d301      	bcc.n	80046fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046f6:	2301      	movs	r3, #1
 80046f8:	e00f      	b.n	800471a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046fa:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <SysTick_Config+0x40>)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3b01      	subs	r3, #1
 8004700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004702:	210f      	movs	r1, #15
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	f7ff ff8e 	bl	8004628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <SysTick_Config+0x40>)
 800470e:	2200      	movs	r2, #0
 8004710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004712:	4b04      	ldr	r3, [pc, #16]	; (8004724 <SysTick_Config+0x40>)
 8004714:	2207      	movs	r2, #7
 8004716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	e000e010 	.word	0xe000e010

08004728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff ff29 	bl	8004588 <__NVIC_SetPriorityGrouping>
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800473e:	b580      	push	{r7, lr}
 8004740:	b086      	sub	sp, #24
 8004742:	af00      	add	r7, sp, #0
 8004744:	4603      	mov	r3, r0
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
 800474a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004750:	f7ff ff3e 	bl	80045d0 <__NVIC_GetPriorityGrouping>
 8004754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	6978      	ldr	r0, [r7, #20]
 800475c:	f7ff ff8e 	bl	800467c <NVIC_EncodePriority>
 8004760:	4602      	mov	r2, r0
 8004762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004766:	4611      	mov	r1, r2
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff ff5d 	bl	8004628 <__NVIC_SetPriority>
}
 800476e:	bf00      	nop
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	4603      	mov	r3, r0
 800477e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff ff31 	bl	80045ec <__NVIC_EnableIRQ>
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7ff ffa2 	bl	80046e4 <SysTick_Config>
 80047a0:	4603      	mov	r3, r0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e014      	b.n	80047e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	791b      	ldrb	r3, [r3, #4]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d105      	bne.n	80047d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7fe fdcd 	bl	800336c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2202      	movs	r2, #2
 80047d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	795b      	ldrb	r3, [r3, #5]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_DAC_Start+0x16>
 8004800:	2302      	movs	r3, #2
 8004802:	e040      	b.n	8004886 <HAL_DAC_Start+0x98>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6819      	ldr	r1, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2201      	movs	r2, #1
 800481e:	409a      	lsls	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10f      	bne.n	800484e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004838:	2b3c      	cmp	r3, #60	; 0x3c
 800483a:	d11d      	bne.n	8004878 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	e014      	b.n	8004878 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	213c      	movs	r1, #60	; 0x3c
 8004860:	fa01 f303 	lsl.w	r3, r1, r3
 8004864:	429a      	cmp	r2, r3
 8004866:	d107      	bne.n	8004878 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0202 	orr.w	r2, r2, #2
 8004876:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004892:	b480      	push	{r7}
 8004894:	b087      	sub	sp, #28
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4413      	add	r3, r2
 80048b6:	3308      	adds	r3, #8
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e004      	b.n	80048c6 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4413      	add	r3, r2
 80048c2:	3314      	adds	r3, #20
 80048c4:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	461a      	mov	r2, r3
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	795b      	ldrb	r3, [r3, #5]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_DAC_ConfigChannel+0x18>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e03c      	b.n	800496e <HAL_DAC_ConfigChannel+0x92>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2202      	movs	r2, #2
 80048fe:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43db      	mvns	r3, r3
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4013      	ands	r3, r2
 800491c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f003 0310 	and.w	r3, r3, #16
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	fa02 f303 	lsl.w	r3, r2, r3
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6819      	ldr	r1, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	22c0      	movs	r2, #192	; 0xc0
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43da      	mvns	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	400a      	ands	r2, r1
 800495e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2201      	movs	r2, #1
 8004964:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004986:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004988:	f7ff f9e2 	bl	8003d50 <HAL_GetTick>
 800498c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d008      	beq.n	80049ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2280      	movs	r2, #128	; 0x80
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e052      	b.n	8004a52 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0216 	bic.w	r2, r2, #22
 80049ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695a      	ldr	r2, [r3, #20]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d103      	bne.n	80049dc <HAL_DMA_Abort+0x62>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0208 	bic.w	r2, r2, #8
 80049ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049fc:	e013      	b.n	8004a26 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049fe:	f7ff f9a7 	bl	8003d50 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b05      	cmp	r3, #5
 8004a0a:	d90c      	bls.n	8004a26 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2203      	movs	r2, #3
 8004a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e015      	b.n	8004a52 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e4      	bne.n	80049fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a38:	223f      	movs	r2, #63	; 0x3f
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d004      	beq.n	8004a78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2280      	movs	r2, #128	; 0x80
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e00c      	b.n	8004a92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2205      	movs	r2, #5
 8004a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0201 	bic.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b089      	sub	sp, #36	; 0x24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	e165      	b.n	8004d88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004abc:	2201      	movs	r2, #1
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4013      	ands	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	f040 8154 	bne.w	8004d82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d005      	beq.n	8004af2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d130      	bne.n	8004b54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	2203      	movs	r2, #3
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4013      	ands	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b28:	2201      	movs	r2, #1
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4013      	ands	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	f003 0201 	and.w	r2, r3, #1
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d017      	beq.n	8004b90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	43db      	mvns	r3, r3
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4013      	ands	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f003 0303 	and.w	r3, r3, #3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d123      	bne.n	8004be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	08da      	lsrs	r2, r3, #3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3208      	adds	r2, #8
 8004ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	220f      	movs	r2, #15
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	08da      	lsrs	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3208      	adds	r2, #8
 8004bde:	69b9      	ldr	r1, [r7, #24]
 8004be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	2203      	movs	r2, #3
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0203 	and.w	r2, r3, #3
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 80ae 	beq.w	8004d82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	4b5d      	ldr	r3, [pc, #372]	; (8004da0 <HAL_GPIO_Init+0x300>)
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	4a5c      	ldr	r2, [pc, #368]	; (8004da0 <HAL_GPIO_Init+0x300>)
 8004c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c34:	6453      	str	r3, [r2, #68]	; 0x44
 8004c36:	4b5a      	ldr	r3, [pc, #360]	; (8004da0 <HAL_GPIO_Init+0x300>)
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c42:	4a58      	ldr	r2, [pc, #352]	; (8004da4 <HAL_GPIO_Init+0x304>)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	089b      	lsrs	r3, r3, #2
 8004c48:	3302      	adds	r3, #2
 8004c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	220f      	movs	r2, #15
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a4f      	ldr	r2, [pc, #316]	; (8004da8 <HAL_GPIO_Init+0x308>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d025      	beq.n	8004cba <HAL_GPIO_Init+0x21a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a4e      	ldr	r2, [pc, #312]	; (8004dac <HAL_GPIO_Init+0x30c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01f      	beq.n	8004cb6 <HAL_GPIO_Init+0x216>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a4d      	ldr	r2, [pc, #308]	; (8004db0 <HAL_GPIO_Init+0x310>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d019      	beq.n	8004cb2 <HAL_GPIO_Init+0x212>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a4c      	ldr	r2, [pc, #304]	; (8004db4 <HAL_GPIO_Init+0x314>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <HAL_GPIO_Init+0x20e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a4b      	ldr	r2, [pc, #300]	; (8004db8 <HAL_GPIO_Init+0x318>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00d      	beq.n	8004caa <HAL_GPIO_Init+0x20a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a4a      	ldr	r2, [pc, #296]	; (8004dbc <HAL_GPIO_Init+0x31c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d007      	beq.n	8004ca6 <HAL_GPIO_Init+0x206>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a49      	ldr	r2, [pc, #292]	; (8004dc0 <HAL_GPIO_Init+0x320>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d101      	bne.n	8004ca2 <HAL_GPIO_Init+0x202>
 8004c9e:	2306      	movs	r3, #6
 8004ca0:	e00c      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004ca2:	2307      	movs	r3, #7
 8004ca4:	e00a      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004ca6:	2305      	movs	r3, #5
 8004ca8:	e008      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004caa:	2304      	movs	r3, #4
 8004cac:	e006      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e004      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e002      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_GPIO_Init+0x21c>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	f002 0203 	and.w	r2, r2, #3
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	4093      	lsls	r3, r2
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ccc:	4935      	ldr	r1, [pc, #212]	; (8004da4 <HAL_GPIO_Init+0x304>)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cda:	4b3a      	ldr	r3, [pc, #232]	; (8004dc4 <HAL_GPIO_Init+0x324>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cfe:	4a31      	ldr	r2, [pc, #196]	; (8004dc4 <HAL_GPIO_Init+0x324>)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d04:	4b2f      	ldr	r3, [pc, #188]	; (8004dc4 <HAL_GPIO_Init+0x324>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d28:	4a26      	ldr	r2, [pc, #152]	; (8004dc4 <HAL_GPIO_Init+0x324>)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d2e:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_GPIO_Init+0x324>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d52:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <HAL_GPIO_Init+0x324>)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d58:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <HAL_GPIO_Init+0x324>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d7c:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <HAL_GPIO_Init+0x324>)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b0f      	cmp	r3, #15
 8004d8c:	f67f ae96 	bls.w	8004abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3724      	adds	r7, #36	; 0x24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40013800 	.word	0x40013800
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40020400 	.word	0x40020400
 8004db0:	40020800 	.word	0x40020800
 8004db4:	40020c00 	.word	0x40020c00
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40021400 	.word	0x40021400
 8004dc0:	40021800 	.word	0x40021800
 8004dc4:	40013c00 	.word	0x40013c00

08004dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	807b      	strh	r3, [r7, #2]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dd8:	787b      	ldrb	r3, [r7, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dde:	887a      	ldrh	r2, [r7, #2]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004de4:	e003      	b.n	8004dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004de6:	887b      	ldrh	r3, [r7, #2]
 8004de8:	041a      	lsls	r2, r3, #16
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	619a      	str	r2, [r3, #24]
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e0c:	887a      	ldrh	r2, [r7, #2]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4013      	ands	r3, r2
 8004e12:	041a      	lsls	r2, r3, #16
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	43d9      	mvns	r1, r3
 8004e18:	887b      	ldrh	r3, [r7, #2]
 8004e1a:	400b      	ands	r3, r1
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	619a      	str	r2, [r3, #24]
}
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	603b      	str	r3, [r7, #0]
 8004e3e:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	4a1f      	ldr	r2, [pc, #124]	; (8004ec0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e48:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ec0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e56:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e5c:	f7fe ff78 	bl	8003d50 <HAL_GetTick>
 8004e60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e62:	e009      	b.n	8004e78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e64:	f7fe ff74 	bl	8003d50 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e72:	d901      	bls.n	8004e78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e01f      	b.n	8004eb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e78:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e84:	d1ee      	bne.n	8004e64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e86:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e88:	2201      	movs	r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e8c:	f7fe ff60 	bl	8003d50 <HAL_GetTick>
 8004e90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e92:	e009      	b.n	8004ea8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e94:	f7fe ff5c 	bl	8003d50 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ea2:	d901      	bls.n	8004ea8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e007      	b.n	8004eb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb4:	d1ee      	bne.n	8004e94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	420e0040 	.word	0x420e0040
 8004ec8:	40007000 	.word	0x40007000
 8004ecc:	420e0044 	.word	0x420e0044

08004ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0cc      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee4:	4b68      	ldr	r3, [pc, #416]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d90c      	bls.n	8004f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef2:	4b65      	ldr	r3, [pc, #404]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b63      	ldr	r3, [pc, #396]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0b8      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d020      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f24:	4b59      	ldr	r3, [pc, #356]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	4a58      	ldr	r2, [pc, #352]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f3c:	4b53      	ldr	r3, [pc, #332]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	4a52      	ldr	r2, [pc, #328]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f48:	4b50      	ldr	r3, [pc, #320]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	494d      	ldr	r1, [pc, #308]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d044      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6e:	4b47      	ldr	r3, [pc, #284]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d119      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e07f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d003      	beq.n	8004f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d107      	bne.n	8004f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8e:	4b3f      	ldr	r3, [pc, #252]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e06f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9e:	4b3b      	ldr	r3, [pc, #236]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e067      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fae:	4b37      	ldr	r3, [pc, #220]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f023 0203 	bic.w	r2, r3, #3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4934      	ldr	r1, [pc, #208]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc0:	f7fe fec6 	bl	8003d50 <HAL_GetTick>
 8004fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc6:	e00a      	b.n	8004fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc8:	f7fe fec2 	bl	8003d50 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e04f      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fde:	4b2b      	ldr	r3, [pc, #172]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 020c 	and.w	r2, r3, #12
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d1eb      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff0:	4b25      	ldr	r3, [pc, #148]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d20c      	bcs.n	8005018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffe:	4b22      	ldr	r3, [pc, #136]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b20      	ldr	r3, [pc, #128]	; (8005088 <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e032      	b.n	800507e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005024:	4b19      	ldr	r3, [pc, #100]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4916      	ldr	r1, [pc, #88]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005042:	4b12      	ldr	r3, [pc, #72]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	490e      	ldr	r1, [pc, #56]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	4313      	orrs	r3, r2
 8005054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005056:	f000 f855 	bl	8005104 <HAL_RCC_GetSysClockFreq>
 800505a:	4602      	mov	r2, r0
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	490a      	ldr	r1, [pc, #40]	; (8005090 <HAL_RCC_ClockConfig+0x1c0>)
 8005068:	5ccb      	ldrb	r3, [r1, r3]
 800506a:	fa22 f303 	lsr.w	r3, r2, r3
 800506e:	4a09      	ldr	r2, [pc, #36]	; (8005094 <HAL_RCC_ClockConfig+0x1c4>)
 8005070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <HAL_RCC_ClockConfig+0x1c8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe fe26 	bl	8003cc8 <HAL_InitTick>

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40023c00 	.word	0x40023c00
 800508c:	40023800 	.word	0x40023800
 8005090:	08007a94 	.word	0x08007a94
 8005094:	20000000 	.word	0x20000000
 8005098:	20000004 	.word	0x20000004

0800509c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050a0:	4b03      	ldr	r3, [pc, #12]	; (80050b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050a2:	681b      	ldr	r3, [r3, #0]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000000 	.word	0x20000000

080050b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050b8:	f7ff fff0 	bl	800509c <HAL_RCC_GetHCLKFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	0a9b      	lsrs	r3, r3, #10
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	4903      	ldr	r1, [pc, #12]	; (80050d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40023800 	.word	0x40023800
 80050d8:	08007aa4 	.word	0x08007aa4

080050dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050e0:	f7ff ffdc 	bl	800509c <HAL_RCC_GetHCLKFreq>
 80050e4:	4602      	mov	r2, r0
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	0b5b      	lsrs	r3, r3, #13
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	4903      	ldr	r1, [pc, #12]	; (8005100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050f2:	5ccb      	ldrb	r3, [r1, r3]
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40023800 	.word	0x40023800
 8005100:	08007aa4 	.word	0x08007aa4

08005104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005108:	b0a6      	sub	sp, #152	; 0x98
 800510a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800512a:	4bc8      	ldr	r3, [pc, #800]	; (800544c <HAL_RCC_GetSysClockFreq+0x348>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b0c      	cmp	r3, #12
 8005134:	f200 817e 	bhi.w	8005434 <HAL_RCC_GetSysClockFreq+0x330>
 8005138:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <HAL_RCC_GetSysClockFreq+0x3c>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	08005175 	.word	0x08005175
 8005144:	08005435 	.word	0x08005435
 8005148:	08005435 	.word	0x08005435
 800514c:	08005435 	.word	0x08005435
 8005150:	0800517d 	.word	0x0800517d
 8005154:	08005435 	.word	0x08005435
 8005158:	08005435 	.word	0x08005435
 800515c:	08005435 	.word	0x08005435
 8005160:	08005185 	.word	0x08005185
 8005164:	08005435 	.word	0x08005435
 8005168:	08005435 	.word	0x08005435
 800516c:	08005435 	.word	0x08005435
 8005170:	080052ef 	.word	0x080052ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005174:	4bb6      	ldr	r3, [pc, #728]	; (8005450 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800517a:	e15f      	b.n	800543c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800517c:	4bb5      	ldr	r3, [pc, #724]	; (8005454 <HAL_RCC_GetSysClockFreq+0x350>)
 800517e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005182:	e15b      	b.n	800543c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005184:	4bb1      	ldr	r3, [pc, #708]	; (800544c <HAL_RCC_GetSysClockFreq+0x348>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800518c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005190:	4bae      	ldr	r3, [pc, #696]	; (800544c <HAL_RCC_GetSysClockFreq+0x348>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d031      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519c:	4bab      	ldr	r3, [pc, #684]	; (800544c <HAL_RCC_GetSysClockFreq+0x348>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	099b      	lsrs	r3, r3, #6
 80051a2:	2200      	movs	r2, #0
 80051a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ae:	663b      	str	r3, [r7, #96]	; 0x60
 80051b0:	2300      	movs	r3, #0
 80051b2:	667b      	str	r3, [r7, #100]	; 0x64
 80051b4:	4ba7      	ldr	r3, [pc, #668]	; (8005454 <HAL_RCC_GetSysClockFreq+0x350>)
 80051b6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80051ba:	462a      	mov	r2, r5
 80051bc:	fb03 f202 	mul.w	r2, r3, r2
 80051c0:	2300      	movs	r3, #0
 80051c2:	4621      	mov	r1, r4
 80051c4:	fb01 f303 	mul.w	r3, r1, r3
 80051c8:	4413      	add	r3, r2
 80051ca:	4aa2      	ldr	r2, [pc, #648]	; (8005454 <HAL_RCC_GetSysClockFreq+0x350>)
 80051cc:	4621      	mov	r1, r4
 80051ce:	fba1 1202 	umull	r1, r2, r1, r2
 80051d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051d4:	460a      	mov	r2, r1
 80051d6:	67ba      	str	r2, [r7, #120]	; 0x78
 80051d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80051da:	4413      	add	r3, r2
 80051dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051e2:	2200      	movs	r2, #0
 80051e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80051e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80051e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051ec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80051f0:	f7fb fc28 	bl	8000a44 <__aeabi_uldivmod>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4613      	mov	r3, r2
 80051fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051fe:	e064      	b.n	80052ca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005200:	4b92      	ldr	r3, [pc, #584]	; (800544c <HAL_RCC_GetSysClockFreq+0x348>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	2200      	movs	r2, #0
 8005208:	653b      	str	r3, [r7, #80]	; 0x50
 800520a:	657a      	str	r2, [r7, #84]	; 0x54
 800520c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800520e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005212:	64bb      	str	r3, [r7, #72]	; 0x48
 8005214:	2300      	movs	r3, #0
 8005216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005218:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800521c:	4622      	mov	r2, r4
 800521e:	462b      	mov	r3, r5
 8005220:	f04f 0000 	mov.w	r0, #0
 8005224:	f04f 0100 	mov.w	r1, #0
 8005228:	0159      	lsls	r1, r3, #5
 800522a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800522e:	0150      	lsls	r0, r2, #5
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4621      	mov	r1, r4
 8005236:	1a51      	subs	r1, r2, r1
 8005238:	6139      	str	r1, [r7, #16]
 800523a:	4629      	mov	r1, r5
 800523c:	eb63 0301 	sbc.w	r3, r3, r1
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800524e:	4659      	mov	r1, fp
 8005250:	018b      	lsls	r3, r1, #6
 8005252:	4651      	mov	r1, sl
 8005254:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005258:	4651      	mov	r1, sl
 800525a:	018a      	lsls	r2, r1, #6
 800525c:	4651      	mov	r1, sl
 800525e:	ebb2 0801 	subs.w	r8, r2, r1
 8005262:	4659      	mov	r1, fp
 8005264:	eb63 0901 	sbc.w	r9, r3, r1
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005274:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005278:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800527c:	4690      	mov	r8, r2
 800527e:	4699      	mov	r9, r3
 8005280:	4623      	mov	r3, r4
 8005282:	eb18 0303 	adds.w	r3, r8, r3
 8005286:	60bb      	str	r3, [r7, #8]
 8005288:	462b      	mov	r3, r5
 800528a:	eb49 0303 	adc.w	r3, r9, r3
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800529c:	4629      	mov	r1, r5
 800529e:	028b      	lsls	r3, r1, #10
 80052a0:	4621      	mov	r1, r4
 80052a2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052a6:	4621      	mov	r1, r4
 80052a8:	028a      	lsls	r2, r1, #10
 80052aa:	4610      	mov	r0, r2
 80052ac:	4619      	mov	r1, r3
 80052ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052b2:	2200      	movs	r2, #0
 80052b4:	643b      	str	r3, [r7, #64]	; 0x40
 80052b6:	647a      	str	r2, [r7, #68]	; 0x44
 80052b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052bc:	f7fb fbc2 	bl	8000a44 <__aeabi_uldivmod>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4613      	mov	r3, r2
 80052c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052ca:	4b60      	ldr	r3, [pc, #384]	; (800544c <HAL_RCC_GetSysClockFreq+0x348>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	0c1b      	lsrs	r3, r3, #16
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	3301      	adds	r3, #1
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80052dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80052ec:	e0a6      	b.n	800543c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052ee:	4b57      	ldr	r3, [pc, #348]	; (800544c <HAL_RCC_GetSysClockFreq+0x348>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052fa:	4b54      	ldr	r3, [pc, #336]	; (800544c <HAL_RCC_GetSysClockFreq+0x348>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02a      	beq.n	800535c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005306:	4b51      	ldr	r3, [pc, #324]	; (800544c <HAL_RCC_GetSysClockFreq+0x348>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	099b      	lsrs	r3, r3, #6
 800530c:	2200      	movs	r2, #0
 800530e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005310:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005318:	2100      	movs	r1, #0
 800531a:	4b4e      	ldr	r3, [pc, #312]	; (8005454 <HAL_RCC_GetSysClockFreq+0x350>)
 800531c:	fb03 f201 	mul.w	r2, r3, r1
 8005320:	2300      	movs	r3, #0
 8005322:	fb00 f303 	mul.w	r3, r0, r3
 8005326:	4413      	add	r3, r2
 8005328:	4a4a      	ldr	r2, [pc, #296]	; (8005454 <HAL_RCC_GetSysClockFreq+0x350>)
 800532a:	fba0 1202 	umull	r1, r2, r0, r2
 800532e:	677a      	str	r2, [r7, #116]	; 0x74
 8005330:	460a      	mov	r2, r1
 8005332:	673a      	str	r2, [r7, #112]	; 0x70
 8005334:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005336:	4413      	add	r3, r2
 8005338:	677b      	str	r3, [r7, #116]	; 0x74
 800533a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800533e:	2200      	movs	r2, #0
 8005340:	633b      	str	r3, [r7, #48]	; 0x30
 8005342:	637a      	str	r2, [r7, #52]	; 0x34
 8005344:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005348:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800534c:	f7fb fb7a 	bl	8000a44 <__aeabi_uldivmod>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4613      	mov	r3, r2
 8005356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800535a:	e05b      	b.n	8005414 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535c:	4b3b      	ldr	r3, [pc, #236]	; (800544c <HAL_RCC_GetSysClockFreq+0x348>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	099b      	lsrs	r3, r3, #6
 8005362:	2200      	movs	r2, #0
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
 8005366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536e:	623b      	str	r3, [r7, #32]
 8005370:	2300      	movs	r3, #0
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
 8005374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005378:	4642      	mov	r2, r8
 800537a:	464b      	mov	r3, r9
 800537c:	f04f 0000 	mov.w	r0, #0
 8005380:	f04f 0100 	mov.w	r1, #0
 8005384:	0159      	lsls	r1, r3, #5
 8005386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800538a:	0150      	lsls	r0, r2, #5
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4641      	mov	r1, r8
 8005392:	ebb2 0a01 	subs.w	sl, r2, r1
 8005396:	4649      	mov	r1, r9
 8005398:	eb63 0b01 	sbc.w	fp, r3, r1
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	f04f 0300 	mov.w	r3, #0
 80053a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053b0:	ebb2 040a 	subs.w	r4, r2, sl
 80053b4:	eb63 050b 	sbc.w	r5, r3, fp
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	00eb      	lsls	r3, r5, #3
 80053c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053c6:	00e2      	lsls	r2, r4, #3
 80053c8:	4614      	mov	r4, r2
 80053ca:	461d      	mov	r5, r3
 80053cc:	4643      	mov	r3, r8
 80053ce:	18e3      	adds	r3, r4, r3
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	464b      	mov	r3, r9
 80053d4:	eb45 0303 	adc.w	r3, r5, r3
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053e6:	4629      	mov	r1, r5
 80053e8:	028b      	lsls	r3, r1, #10
 80053ea:	4621      	mov	r1, r4
 80053ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053f0:	4621      	mov	r1, r4
 80053f2:	028a      	lsls	r2, r1, #10
 80053f4:	4610      	mov	r0, r2
 80053f6:	4619      	mov	r1, r3
 80053f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053fc:	2200      	movs	r2, #0
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	61fa      	str	r2, [r7, #28]
 8005402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005406:	f7fb fb1d 	bl	8000a44 <__aeabi_uldivmod>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	4613      	mov	r3, r2
 8005410:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005414:	4b0d      	ldr	r3, [pc, #52]	; (800544c <HAL_RCC_GetSysClockFreq+0x348>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	0f1b      	lsrs	r3, r3, #28
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8005422:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005426:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800542a:	fbb2 f3f3 	udiv	r3, r2, r3
 800542e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005432:	e003      	b.n	800543c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800543a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800543c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8005440:	4618      	mov	r0, r3
 8005442:	3798      	adds	r7, #152	; 0x98
 8005444:	46bd      	mov	sp, r7
 8005446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800544a:	bf00      	nop
 800544c:	40023800 	.word	0x40023800
 8005450:	00f42400 	.word	0x00f42400
 8005454:	017d7840 	.word	0x017d7840

08005458 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e28d      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 8083 	beq.w	800557e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005478:	4b94      	ldr	r3, [pc, #592]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 030c 	and.w	r3, r3, #12
 8005480:	2b04      	cmp	r3, #4
 8005482:	d019      	beq.n	80054b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005484:	4b91      	ldr	r3, [pc, #580]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800548c:	2b08      	cmp	r3, #8
 800548e:	d106      	bne.n	800549e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005490:	4b8e      	ldr	r3, [pc, #568]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549c:	d00c      	beq.n	80054b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800549e:	4b8b      	ldr	r3, [pc, #556]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054a6:	2b0c      	cmp	r3, #12
 80054a8:	d112      	bne.n	80054d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054aa:	4b88      	ldr	r3, [pc, #544]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b6:	d10b      	bne.n	80054d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b8:	4b84      	ldr	r3, [pc, #528]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d05b      	beq.n	800557c <HAL_RCC_OscConfig+0x124>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d157      	bne.n	800557c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e25a      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d8:	d106      	bne.n	80054e8 <HAL_RCC_OscConfig+0x90>
 80054da:	4b7c      	ldr	r3, [pc, #496]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a7b      	ldr	r2, [pc, #492]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80054e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e01d      	b.n	8005524 <HAL_RCC_OscConfig+0xcc>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f0:	d10c      	bne.n	800550c <HAL_RCC_OscConfig+0xb4>
 80054f2:	4b76      	ldr	r3, [pc, #472]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a75      	ldr	r2, [pc, #468]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80054f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	4b73      	ldr	r3, [pc, #460]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a72      	ldr	r2, [pc, #456]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 8005504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e00b      	b.n	8005524 <HAL_RCC_OscConfig+0xcc>
 800550c:	4b6f      	ldr	r3, [pc, #444]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a6e      	ldr	r2, [pc, #440]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 8005512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	4b6c      	ldr	r3, [pc, #432]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a6b      	ldr	r2, [pc, #428]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 800551e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d013      	beq.n	8005554 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552c:	f7fe fc10 	bl	8003d50 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005534:	f7fe fc0c 	bl	8003d50 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	; 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e21f      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005546:	4b61      	ldr	r3, [pc, #388]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0f0      	beq.n	8005534 <HAL_RCC_OscConfig+0xdc>
 8005552:	e014      	b.n	800557e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fe fbfc 	bl	8003d50 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800555c:	f7fe fbf8 	bl	8003d50 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b64      	cmp	r3, #100	; 0x64
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e20b      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800556e:	4b57      	ldr	r3, [pc, #348]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x104>
 800557a:	e000      	b.n	800557e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d06f      	beq.n	800566a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800558a:	4b50      	ldr	r3, [pc, #320]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	2b00      	cmp	r3, #0
 8005594:	d017      	beq.n	80055c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005596:	4b4d      	ldr	r3, [pc, #308]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d105      	bne.n	80055ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055a2:	4b4a      	ldr	r3, [pc, #296]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00b      	beq.n	80055c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ae:	4b47      	ldr	r3, [pc, #284]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055b6:	2b0c      	cmp	r3, #12
 80055b8:	d11c      	bne.n	80055f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ba:	4b44      	ldr	r3, [pc, #272]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d116      	bne.n	80055f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c6:	4b41      	ldr	r3, [pc, #260]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_RCC_OscConfig+0x186>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e1d3      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055de:	4b3b      	ldr	r3, [pc, #236]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4937      	ldr	r1, [pc, #220]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f2:	e03a      	b.n	800566a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d020      	beq.n	800563e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055fc:	4b34      	ldr	r3, [pc, #208]	; (80056d0 <HAL_RCC_OscConfig+0x278>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fe fba5 	bl	8003d50 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800560a:	f7fe fba1 	bl	8003d50 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e1b4      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561c:	4b2b      	ldr	r3, [pc, #172]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005628:	4b28      	ldr	r3, [pc, #160]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4925      	ldr	r1, [pc, #148]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]
 800563c:	e015      	b.n	800566a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800563e:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <HAL_RCC_OscConfig+0x278>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fe fb84 	bl	8003d50 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800564c:	f7fe fb80 	bl	8003d50 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e193      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800565e:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d036      	beq.n	80056e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <HAL_RCC_OscConfig+0x27c>)
 8005680:	2201      	movs	r2, #1
 8005682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005684:	f7fe fb64 	bl	8003d50 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800568c:	f7fe fb60 	bl	8003d50 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e173      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800569e:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <HAL_RCC_OscConfig+0x274>)
 80056a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x234>
 80056aa:	e01b      	b.n	80056e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <HAL_RCC_OscConfig+0x27c>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b2:	f7fe fb4d 	bl	8003d50 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b8:	e00e      	b.n	80056d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ba:	f7fe fb49 	bl	8003d50 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d907      	bls.n	80056d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e15c      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
 80056cc:	40023800 	.word	0x40023800
 80056d0:	42470000 	.word	0x42470000
 80056d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d8:	4b8a      	ldr	r3, [pc, #552]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 80056da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ea      	bne.n	80056ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8097 	beq.w	8005820 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f6:	4b83      	ldr	r3, [pc, #524]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	4b7f      	ldr	r3, [pc, #508]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	4a7e      	ldr	r2, [pc, #504]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005710:	6413      	str	r3, [r2, #64]	; 0x40
 8005712:	4b7c      	ldr	r3, [pc, #496]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571e:	2301      	movs	r3, #1
 8005720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005722:	4b79      	ldr	r3, [pc, #484]	; (8005908 <HAL_RCC_OscConfig+0x4b0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d118      	bne.n	8005760 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572e:	4b76      	ldr	r3, [pc, #472]	; (8005908 <HAL_RCC_OscConfig+0x4b0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a75      	ldr	r2, [pc, #468]	; (8005908 <HAL_RCC_OscConfig+0x4b0>)
 8005734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573a:	f7fe fb09 	bl	8003d50 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005742:	f7fe fb05 	bl	8003d50 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e118      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005754:	4b6c      	ldr	r3, [pc, #432]	; (8005908 <HAL_RCC_OscConfig+0x4b0>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d106      	bne.n	8005776 <HAL_RCC_OscConfig+0x31e>
 8005768:	4b66      	ldr	r3, [pc, #408]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	4a65      	ldr	r2, [pc, #404]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	6713      	str	r3, [r2, #112]	; 0x70
 8005774:	e01c      	b.n	80057b0 <HAL_RCC_OscConfig+0x358>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b05      	cmp	r3, #5
 800577c:	d10c      	bne.n	8005798 <HAL_RCC_OscConfig+0x340>
 800577e:	4b61      	ldr	r3, [pc, #388]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	4a60      	ldr	r2, [pc, #384]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 8005784:	f043 0304 	orr.w	r3, r3, #4
 8005788:	6713      	str	r3, [r2, #112]	; 0x70
 800578a:	4b5e      	ldr	r3, [pc, #376]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	4a5d      	ldr	r2, [pc, #372]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	6713      	str	r3, [r2, #112]	; 0x70
 8005796:	e00b      	b.n	80057b0 <HAL_RCC_OscConfig+0x358>
 8005798:	4b5a      	ldr	r3, [pc, #360]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	4a59      	ldr	r2, [pc, #356]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	6713      	str	r3, [r2, #112]	; 0x70
 80057a4:	4b57      	ldr	r3, [pc, #348]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	4a56      	ldr	r2, [pc, #344]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 80057aa:	f023 0304 	bic.w	r3, r3, #4
 80057ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d015      	beq.n	80057e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b8:	f7fe faca 	bl	8003d50 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	e00a      	b.n	80057d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fe fac6 	bl	8003d50 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e0d7      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d6:	4b4b      	ldr	r3, [pc, #300]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0ee      	beq.n	80057c0 <HAL_RCC_OscConfig+0x368>
 80057e2:	e014      	b.n	800580e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e4:	f7fe fab4 	bl	8003d50 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ec:	f7fe fab0 	bl	8003d50 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e0c1      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005802:	4b40      	ldr	r3, [pc, #256]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ee      	bne.n	80057ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d105      	bne.n	8005820 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005814:	4b3b      	ldr	r3, [pc, #236]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	4a3a      	ldr	r2, [pc, #232]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 800581a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800581e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80ad 	beq.w	8005984 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800582a:	4b36      	ldr	r3, [pc, #216]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b08      	cmp	r3, #8
 8005834:	d060      	beq.n	80058f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d145      	bne.n	80058ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583e:	4b33      	ldr	r3, [pc, #204]	; (800590c <HAL_RCC_OscConfig+0x4b4>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7fe fa84 	bl	8003d50 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800584c:	f7fe fa80 	bl	8003d50 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e093      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585e:	4b29      	ldr	r3, [pc, #164]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	3b01      	subs	r3, #1
 8005884:	041b      	lsls	r3, r3, #16
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	061b      	lsls	r3, r3, #24
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	071b      	lsls	r3, r3, #28
 8005896:	491b      	ldr	r1, [pc, #108]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 8005898:	4313      	orrs	r3, r2
 800589a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800589c:	4b1b      	ldr	r3, [pc, #108]	; (800590c <HAL_RCC_OscConfig+0x4b4>)
 800589e:	2201      	movs	r2, #1
 80058a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a2:	f7fe fa55 	bl	8003d50 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058aa:	f7fe fa51 	bl	8003d50 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e064      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058bc:	4b11      	ldr	r3, [pc, #68]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0f0      	beq.n	80058aa <HAL_RCC_OscConfig+0x452>
 80058c8:	e05c      	b.n	8005984 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ca:	4b10      	ldr	r3, [pc, #64]	; (800590c <HAL_RCC_OscConfig+0x4b4>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d0:	f7fe fa3e 	bl	8003d50 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d8:	f7fe fa3a 	bl	8003d50 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e04d      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <HAL_RCC_OscConfig+0x4ac>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f0      	bne.n	80058d8 <HAL_RCC_OscConfig+0x480>
 80058f6:	e045      	b.n	8005984 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d107      	bne.n	8005910 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e040      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
 8005904:	40023800 	.word	0x40023800
 8005908:	40007000 	.word	0x40007000
 800590c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005910:	4b1f      	ldr	r3, [pc, #124]	; (8005990 <HAL_RCC_OscConfig+0x538>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d030      	beq.n	8005980 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005928:	429a      	cmp	r2, r3
 800592a:	d129      	bne.n	8005980 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005936:	429a      	cmp	r2, r3
 8005938:	d122      	bne.n	8005980 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005940:	4013      	ands	r3, r2
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005946:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005948:	4293      	cmp	r3, r2
 800594a:	d119      	bne.n	8005980 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	085b      	lsrs	r3, r3, #1
 8005958:	3b01      	subs	r3, #1
 800595a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800595c:	429a      	cmp	r2, r3
 800595e:	d10f      	bne.n	8005980 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800596c:	429a      	cmp	r2, r3
 800596e:	d107      	bne.n	8005980 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800597c:	429a      	cmp	r2, r3
 800597e:	d001      	beq.n	8005984 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	40023800 	.word	0x40023800

08005994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e041      	b.n	8005a2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fd fd1a 	bl	80033f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f000 fa96 	bl	8005f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d001      	beq.n	8005a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e04e      	b.n	8005aea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a23      	ldr	r2, [pc, #140]	; (8005af8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d022      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a76:	d01d      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1f      	ldr	r2, [pc, #124]	; (8005afc <HAL_TIM_Base_Start_IT+0xc8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d018      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1e      	ldr	r2, [pc, #120]	; (8005b00 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d013      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1c      	ldr	r2, [pc, #112]	; (8005b04 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d00e      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d009      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	; (8005b0c <HAL_TIM_Base_Start_IT+0xd8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d004      	beq.n	8005ab4 <HAL_TIM_Base_Start_IT+0x80>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a18      	ldr	r2, [pc, #96]	; (8005b10 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d111      	bne.n	8005ad8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b06      	cmp	r3, #6
 8005ac4:	d010      	beq.n	8005ae8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0201 	orr.w	r2, r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad6:	e007      	b.n	8005ae8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40010000 	.word	0x40010000
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800
 8005b04:	40000c00 	.word	0x40000c00
 8005b08:	40010400 	.word	0x40010400
 8005b0c:	40014000 	.word	0x40014000
 8005b10:	40001800 	.word	0x40001800

08005b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d122      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d11b      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0202 	mvn.w	r2, #2
 8005b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f9b5 	bl	8005ec6 <HAL_TIM_IC_CaptureCallback>
 8005b5c:	e005      	b.n	8005b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f9a7 	bl	8005eb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f9b8 	bl	8005eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d122      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0204 	mvn.w	r2, #4
 8005b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f98b 	bl	8005ec6 <HAL_TIM_IC_CaptureCallback>
 8005bb0:	e005      	b.n	8005bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f97d 	bl	8005eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f98e 	bl	8005eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d122      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d11b      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0208 	mvn.w	r2, #8
 8005be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2204      	movs	r2, #4
 8005bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f961 	bl	8005ec6 <HAL_TIM_IC_CaptureCallback>
 8005c04:	e005      	b.n	8005c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f953 	bl	8005eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f964 	bl	8005eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b10      	cmp	r3, #16
 8005c24:	d122      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d11b      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0210 	mvn.w	r2, #16
 8005c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2208      	movs	r2, #8
 8005c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f937 	bl	8005ec6 <HAL_TIM_IC_CaptureCallback>
 8005c58:	e005      	b.n	8005c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f929 	bl	8005eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f93a 	bl	8005eda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d10e      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d107      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0201 	mvn.w	r2, #1
 8005c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fc ffcc 	bl	8002c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	d10e      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb0:	2b80      	cmp	r3, #128	; 0x80
 8005cb2:	d107      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fa64 	bl	800618c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b40      	cmp	r3, #64	; 0x40
 8005cd0:	d10e      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d107      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f8ff 	bl	8005eee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d10e      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d107      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0220 	mvn.w	r2, #32
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa2e 	bl	8006178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d1c:	bf00      	nop
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_TIM_ConfigClockSource+0x1c>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e0b4      	b.n	8005eaa <HAL_TIM_ConfigClockSource+0x186>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d78:	d03e      	beq.n	8005df8 <HAL_TIM_ConfigClockSource+0xd4>
 8005d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d7e:	f200 8087 	bhi.w	8005e90 <HAL_TIM_ConfigClockSource+0x16c>
 8005d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d86:	f000 8086 	beq.w	8005e96 <HAL_TIM_ConfigClockSource+0x172>
 8005d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8e:	d87f      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x16c>
 8005d90:	2b70      	cmp	r3, #112	; 0x70
 8005d92:	d01a      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0xa6>
 8005d94:	2b70      	cmp	r3, #112	; 0x70
 8005d96:	d87b      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x16c>
 8005d98:	2b60      	cmp	r3, #96	; 0x60
 8005d9a:	d050      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0x11a>
 8005d9c:	2b60      	cmp	r3, #96	; 0x60
 8005d9e:	d877      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x16c>
 8005da0:	2b50      	cmp	r3, #80	; 0x50
 8005da2:	d03c      	beq.n	8005e1e <HAL_TIM_ConfigClockSource+0xfa>
 8005da4:	2b50      	cmp	r3, #80	; 0x50
 8005da6:	d873      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x16c>
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	d058      	beq.n	8005e5e <HAL_TIM_ConfigClockSource+0x13a>
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	d86f      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x16c>
 8005db0:	2b30      	cmp	r3, #48	; 0x30
 8005db2:	d064      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x15a>
 8005db4:	2b30      	cmp	r3, #48	; 0x30
 8005db6:	d86b      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x16c>
 8005db8:	2b20      	cmp	r3, #32
 8005dba:	d060      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x15a>
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d867      	bhi.n	8005e90 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d05c      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x15a>
 8005dc4:	2b10      	cmp	r3, #16
 8005dc6:	d05a      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x15a>
 8005dc8:	e062      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6899      	ldr	r1, [r3, #8]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f000 f9ad 	bl	8006138 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	609a      	str	r2, [r3, #8]
      break;
 8005df6:	e04f      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6818      	ldr	r0, [r3, #0]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	6899      	ldr	r1, [r3, #8]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f000 f996 	bl	8006138 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e1a:	609a      	str	r2, [r3, #8]
      break;
 8005e1c:	e03c      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	6859      	ldr	r1, [r3, #4]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f000 f90a 	bl	8006044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2150      	movs	r1, #80	; 0x50
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f963 	bl	8006102 <TIM_ITRx_SetConfig>
      break;
 8005e3c:	e02c      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	6859      	ldr	r1, [r3, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f000 f929 	bl	80060a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2160      	movs	r1, #96	; 0x60
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 f953 	bl	8006102 <TIM_ITRx_SetConfig>
      break;
 8005e5c:	e01c      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	6859      	ldr	r1, [r3, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f000 f8ea 	bl	8006044 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2140      	movs	r1, #64	; 0x40
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 f943 	bl	8006102 <TIM_ITRx_SetConfig>
      break;
 8005e7c:	e00c      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f000 f93a 	bl	8006102 <TIM_ITRx_SetConfig>
      break;
 8005e8e:	e003      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
      break;
 8005e94:	e000      	b.n	8005e98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a40      	ldr	r2, [pc, #256]	; (8006018 <TIM_Base_SetConfig+0x114>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d013      	beq.n	8005f44 <TIM_Base_SetConfig+0x40>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f22:	d00f      	beq.n	8005f44 <TIM_Base_SetConfig+0x40>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a3d      	ldr	r2, [pc, #244]	; (800601c <TIM_Base_SetConfig+0x118>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00b      	beq.n	8005f44 <TIM_Base_SetConfig+0x40>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a3c      	ldr	r2, [pc, #240]	; (8006020 <TIM_Base_SetConfig+0x11c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d007      	beq.n	8005f44 <TIM_Base_SetConfig+0x40>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a3b      	ldr	r2, [pc, #236]	; (8006024 <TIM_Base_SetConfig+0x120>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d003      	beq.n	8005f44 <TIM_Base_SetConfig+0x40>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a3a      	ldr	r2, [pc, #232]	; (8006028 <TIM_Base_SetConfig+0x124>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d108      	bne.n	8005f56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a2f      	ldr	r2, [pc, #188]	; (8006018 <TIM_Base_SetConfig+0x114>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d02b      	beq.n	8005fb6 <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f64:	d027      	beq.n	8005fb6 <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a2c      	ldr	r2, [pc, #176]	; (800601c <TIM_Base_SetConfig+0x118>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d023      	beq.n	8005fb6 <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a2b      	ldr	r2, [pc, #172]	; (8006020 <TIM_Base_SetConfig+0x11c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d01f      	beq.n	8005fb6 <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a2a      	ldr	r2, [pc, #168]	; (8006024 <TIM_Base_SetConfig+0x120>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d01b      	beq.n	8005fb6 <TIM_Base_SetConfig+0xb2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a29      	ldr	r2, [pc, #164]	; (8006028 <TIM_Base_SetConfig+0x124>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d017      	beq.n	8005fb6 <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a28      	ldr	r2, [pc, #160]	; (800602c <TIM_Base_SetConfig+0x128>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a27      	ldr	r2, [pc, #156]	; (8006030 <TIM_Base_SetConfig+0x12c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00f      	beq.n	8005fb6 <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a26      	ldr	r2, [pc, #152]	; (8006034 <TIM_Base_SetConfig+0x130>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00b      	beq.n	8005fb6 <TIM_Base_SetConfig+0xb2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a25      	ldr	r2, [pc, #148]	; (8006038 <TIM_Base_SetConfig+0x134>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d007      	beq.n	8005fb6 <TIM_Base_SetConfig+0xb2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a24      	ldr	r2, [pc, #144]	; (800603c <TIM_Base_SetConfig+0x138>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <TIM_Base_SetConfig+0xb2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a23      	ldr	r2, [pc, #140]	; (8006040 <TIM_Base_SetConfig+0x13c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d108      	bne.n	8005fc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a0a      	ldr	r2, [pc, #40]	; (8006018 <TIM_Base_SetConfig+0x114>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d003      	beq.n	8005ffc <TIM_Base_SetConfig+0xf8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a0c      	ldr	r2, [pc, #48]	; (8006028 <TIM_Base_SetConfig+0x124>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d103      	bne.n	8006004 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	615a      	str	r2, [r3, #20]
}
 800600a:	bf00      	nop
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40010000 	.word	0x40010000
 800601c:	40000400 	.word	0x40000400
 8006020:	40000800 	.word	0x40000800
 8006024:	40000c00 	.word	0x40000c00
 8006028:	40010400 	.word	0x40010400
 800602c:	40014000 	.word	0x40014000
 8006030:	40014400 	.word	0x40014400
 8006034:	40014800 	.word	0x40014800
 8006038:	40001800 	.word	0x40001800
 800603c:	40001c00 	.word	0x40001c00
 8006040:	40002000 	.word	0x40002000

08006044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f023 0201 	bic.w	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f023 030a 	bic.w	r3, r3, #10
 8006080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b087      	sub	sp, #28
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f023 0210 	bic.w	r2, r3, #16
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	031b      	lsls	r3, r3, #12
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	f043 0307 	orr.w	r3, r3, #7
 8006124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	609a      	str	r2, [r3, #8]
}
 800612c:	bf00      	nop
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	021a      	lsls	r2, r3, #8
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	431a      	orrs	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	4313      	orrs	r3, r2
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e03f      	b.n	8006232 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fd f93c 	bl	8003444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2224      	movs	r2, #36	; 0x24
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fddf 	bl	8006da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695a      	ldr	r2, [r3, #20]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006208:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006218:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b08a      	sub	sp, #40	; 0x28
 800623e:	af02      	add	r7, sp, #8
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	603b      	str	r3, [r7, #0]
 8006246:	4613      	mov	r3, r2
 8006248:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b20      	cmp	r3, #32
 8006258:	d17c      	bne.n	8006354 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <HAL_UART_Transmit+0x2c>
 8006260:	88fb      	ldrh	r3, [r7, #6]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e075      	b.n	8006356 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_UART_Transmit+0x3e>
 8006274:	2302      	movs	r3, #2
 8006276:	e06e      	b.n	8006356 <HAL_UART_Transmit+0x11c>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2221      	movs	r2, #33	; 0x21
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800628e:	f7fd fd5f 	bl	8003d50 <HAL_GetTick>
 8006292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	88fa      	ldrh	r2, [r7, #6]
 800629e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a8:	d108      	bne.n	80062bc <HAL_UART_Transmit+0x82>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d104      	bne.n	80062bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80062b2:	2300      	movs	r3, #0
 80062b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	e003      	b.n	80062c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062c0:	2300      	movs	r3, #0
 80062c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80062cc:	e02a      	b.n	8006324 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2200      	movs	r2, #0
 80062d6:	2180      	movs	r1, #128	; 0x80
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f000 fb1f 	bl	800691c <UART_WaitOnFlagUntilTimeout>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e036      	b.n	8006356 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10b      	bne.n	8006306 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	3302      	adds	r3, #2
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	e007      	b.n	8006316 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	781a      	ldrb	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	3301      	adds	r3, #1
 8006314:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1cf      	bne.n	80062ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2200      	movs	r2, #0
 8006336:	2140      	movs	r1, #64	; 0x40
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 faef 	bl	800691c <UART_WaitOnFlagUntilTimeout>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e006      	b.n	8006356 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2220      	movs	r2, #32
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	e000      	b.n	8006356 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006354:	2302      	movs	r3, #2
  }
}
 8006356:	4618      	mov	r0, r3
 8006358:	3720      	adds	r7, #32
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	4613      	mov	r3, r2
 800636a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b20      	cmp	r3, #32
 8006376:	d11d      	bne.n	80063b4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <HAL_UART_Receive_IT+0x26>
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e016      	b.n	80063b6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_UART_Receive_IT+0x38>
 8006392:	2302      	movs	r3, #2
 8006394:	e00f      	b.n	80063b6 <HAL_UART_Receive_IT+0x58>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063a4:	88fb      	ldrh	r3, [r7, #6]
 80063a6:	461a      	mov	r2, r3
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fb24 	bl	80069f8 <UART_Start_Receive_IT>
 80063b0:	4603      	mov	r3, r0
 80063b2:	e000      	b.n	80063b6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80063b4:	2302      	movs	r3, #2
  }
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b0ba      	sub	sp, #232	; 0xe8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80063fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10f      	bne.n	8006426 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	d009      	beq.n	8006426 <HAL_UART_IRQHandler+0x66>
 8006412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fc07 	bl	8006c32 <UART_Receive_IT>
      return;
 8006424:	e256      	b.n	80068d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 80de 	beq.w	80065ec <HAL_UART_IRQHandler+0x22c>
 8006430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d106      	bne.n	800644a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800643c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006440:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80d1 	beq.w	80065ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800644a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00b      	beq.n	800646e <HAL_UART_IRQHandler+0xae>
 8006456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d005      	beq.n	800646e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f043 0201 	orr.w	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800646e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <HAL_UART_IRQHandler+0xd2>
 800647a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d005      	beq.n	8006492 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f043 0202 	orr.w	r2, r3, #2
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00b      	beq.n	80064b6 <HAL_UART_IRQHandler+0xf6>
 800649e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	f043 0204 	orr.w	r2, r3, #4
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d011      	beq.n	80064e6 <HAL_UART_IRQHandler+0x126>
 80064c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d105      	bne.n	80064da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80064ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f043 0208 	orr.w	r2, r3, #8
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 81ed 	beq.w	80068ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d008      	beq.n	800650e <HAL_UART_IRQHandler+0x14e>
 80064fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fb92 	bl	8006c32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	bf0c      	ite	eq
 800651c:	2301      	moveq	r3, #1
 800651e:	2300      	movne	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d103      	bne.n	800653a <HAL_UART_IRQHandler+0x17a>
 8006532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006536:	2b00      	cmp	r3, #0
 8006538:	d04f      	beq.n	80065da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa9a 	bl	8006a74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654a:	2b40      	cmp	r3, #64	; 0x40
 800654c:	d141      	bne.n	80065d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3314      	adds	r3, #20
 8006554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3314      	adds	r3, #20
 8006576:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800657a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800657e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006586:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800658a:	e841 2300 	strex	r3, r2, [r1]
 800658e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1d9      	bne.n	800654e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d013      	beq.n	80065ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	4a7d      	ldr	r2, [pc, #500]	; (800679c <HAL_UART_IRQHandler+0x3dc>)
 80065a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fe fa53 	bl	8004a5a <HAL_DMA_Abort_IT>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d016      	beq.n	80065e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065c4:	4610      	mov	r0, r2
 80065c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c8:	e00e      	b.n	80065e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f990 	bl	80068f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d0:	e00a      	b.n	80065e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f98c 	bl	80068f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d8:	e006      	b.n	80065e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f988 	bl	80068f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80065e6:	e170      	b.n	80068ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e8:	bf00      	nop
    return;
 80065ea:	e16e      	b.n	80068ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	f040 814a 	bne.w	800688a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80065f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fa:	f003 0310 	and.w	r3, r3, #16
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 8143 	beq.w	800688a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 813c 	beq.w	800688a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006612:	2300      	movs	r3, #0
 8006614:	60bb      	str	r3, [r7, #8]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	60bb      	str	r3, [r7, #8]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	60bb      	str	r3, [r7, #8]
 8006626:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006632:	2b40      	cmp	r3, #64	; 0x40
 8006634:	f040 80b4 	bne.w	80067a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006644:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 8140 	beq.w	80068ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006652:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006656:	429a      	cmp	r2, r3
 8006658:	f080 8139 	bcs.w	80068ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006662:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666e:	f000 8088 	beq.w	8006782 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	330c      	adds	r3, #12
 8006678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800668c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	330c      	adds	r3, #12
 800669a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800669e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1d9      	bne.n	8006672 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3314      	adds	r3, #20
 80066c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066d0:	f023 0301 	bic.w	r3, r3, #1
 80066d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3314      	adds	r3, #20
 80066de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e1      	bne.n	80066be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3314      	adds	r3, #20
 8006700:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800670a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800670c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006710:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3314      	adds	r3, #20
 800671a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800671e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006720:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006724:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800672c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e3      	bne.n	80066fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	330c      	adds	r3, #12
 8006746:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006752:	f023 0310 	bic.w	r3, r3, #16
 8006756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006764:	65ba      	str	r2, [r7, #88]	; 0x58
 8006766:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006768:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800676a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800676c:	e841 2300 	strex	r3, r2, [r1]
 8006770:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e3      	bne.n	8006740 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	4618      	mov	r0, r3
 800677e:	f7fe f8fc 	bl	800497a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800678a:	b29b      	uxth	r3, r3
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	b29b      	uxth	r3, r3
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f8b6 	bl	8006904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006798:	e099      	b.n	80068ce <HAL_UART_IRQHandler+0x50e>
 800679a:	bf00      	nop
 800679c:	08006b3b 	.word	0x08006b3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 808b 	beq.w	80068d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80067bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 8086 	beq.w	80068d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	330c      	adds	r3, #12
 80067cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	330c      	adds	r3, #12
 80067e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80067ea:	647a      	str	r2, [r7, #68]	; 0x44
 80067ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e3      	bne.n	80067c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3314      	adds	r3, #20
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	e853 3f00 	ldrex	r3, [r3]
 800680c:	623b      	str	r3, [r7, #32]
   return(result);
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	f023 0301 	bic.w	r3, r3, #1
 8006814:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3314      	adds	r3, #20
 800681e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006822:	633a      	str	r2, [r7, #48]	; 0x30
 8006824:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e3      	bne.n	80067fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2220      	movs	r2, #32
 800683a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	330c      	adds	r3, #12
 800684a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	60fb      	str	r3, [r7, #12]
   return(result);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0310 	bic.w	r3, r3, #16
 800685a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	330c      	adds	r3, #12
 8006864:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006868:	61fa      	str	r2, [r7, #28]
 800686a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686c:	69b9      	ldr	r1, [r7, #24]
 800686e:	69fa      	ldr	r2, [r7, #28]
 8006870:	e841 2300 	strex	r3, r2, [r1]
 8006874:	617b      	str	r3, [r7, #20]
   return(result);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e3      	bne.n	8006844 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800687c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f83e 	bl	8006904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006888:	e023      	b.n	80068d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800688a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <HAL_UART_IRQHandler+0x4ea>
 8006896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800689a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f95d 	bl	8006b62 <UART_Transmit_IT>
    return;
 80068a8:	e014      	b.n	80068d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00e      	beq.n	80068d4 <HAL_UART_IRQHandler+0x514>
 80068b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d008      	beq.n	80068d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f99d 	bl	8006c02 <UART_EndTransmit_IT>
    return;
 80068c8:	e004      	b.n	80068d4 <HAL_UART_IRQHandler+0x514>
    return;
 80068ca:	bf00      	nop
 80068cc:	e002      	b.n	80068d4 <HAL_UART_IRQHandler+0x514>
      return;
 80068ce:	bf00      	nop
 80068d0:	e000      	b.n	80068d4 <HAL_UART_IRQHandler+0x514>
      return;
 80068d2:	bf00      	nop
  }
}
 80068d4:	37e8      	adds	r7, #232	; 0xe8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop

080068dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b090      	sub	sp, #64	; 0x40
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	4613      	mov	r3, r2
 800692a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800692c:	e050      	b.n	80069d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800692e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006934:	d04c      	beq.n	80069d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006938:	2b00      	cmp	r3, #0
 800693a:	d007      	beq.n	800694c <UART_WaitOnFlagUntilTimeout+0x30>
 800693c:	f7fd fa08 	bl	8003d50 <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006948:	429a      	cmp	r2, r3
 800694a:	d241      	bcs.n	80069d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	330c      	adds	r3, #12
 8006952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	330c      	adds	r3, #12
 800696a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800696c:	637a      	str	r2, [r7, #52]	; 0x34
 800696e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e5      	bne.n	800694c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3314      	adds	r3, #20
 8006986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	613b      	str	r3, [r7, #16]
   return(result);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	63bb      	str	r3, [r7, #56]	; 0x38
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3314      	adds	r3, #20
 800699e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069a0:	623a      	str	r2, [r7, #32]
 80069a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	69f9      	ldr	r1, [r7, #28]
 80069a6:	6a3a      	ldr	r2, [r7, #32]
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e5      	bne.n	8006980 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e00f      	b.n	80069f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4013      	ands	r3, r2
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	429a      	cmp	r2, r3
 80069de:	bf0c      	ite	eq
 80069e0:	2301      	moveq	r3, #1
 80069e2:	2300      	movne	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	461a      	mov	r2, r3
 80069e8:	79fb      	ldrb	r3, [r7, #7]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d09f      	beq.n	800692e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3740      	adds	r7, #64	; 0x40
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	4613      	mov	r3, r2
 8006a04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	88fa      	ldrh	r2, [r7, #6]
 8006a10:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	88fa      	ldrh	r2, [r7, #6]
 8006a16:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2222      	movs	r2, #34	; 0x22
 8006a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d007      	beq.n	8006a46 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a44:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695a      	ldr	r2, [r3, #20]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0201 	orr.w	r2, r2, #1
 8006a54:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0220 	orr.w	r2, r2, #32
 8006a64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b095      	sub	sp, #84	; 0x54
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	330c      	adds	r3, #12
 8006a82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	330c      	adds	r3, #12
 8006a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a9c:	643a      	str	r2, [r7, #64]	; 0x40
 8006a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e5      	bne.n	8006a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3314      	adds	r3, #20
 8006ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f023 0301 	bic.w	r3, r3, #1
 8006ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3314      	adds	r3, #20
 8006ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e5      	bne.n	8006ab0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d119      	bne.n	8006b20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	330c      	adds	r3, #12
 8006af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f023 0310 	bic.w	r3, r3, #16
 8006b02:	647b      	str	r3, [r7, #68]	; 0x44
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b0c:	61ba      	str	r2, [r7, #24]
 8006b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	6979      	ldr	r1, [r7, #20]
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	613b      	str	r3, [r7, #16]
   return(result);
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e5      	bne.n	8006aec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b2e:	bf00      	nop
 8006b30:	3754      	adds	r7, #84	; 0x54
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7ff fecb 	bl	80068f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b5a:	bf00      	nop
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b085      	sub	sp, #20
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b21      	cmp	r3, #33	; 0x21
 8006b74:	d13e      	bne.n	8006bf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7e:	d114      	bne.n	8006baa <UART_Transmit_IT+0x48>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d110      	bne.n	8006baa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	1c9a      	adds	r2, r3, #2
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	621a      	str	r2, [r3, #32]
 8006ba8:	e008      	b.n	8006bbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	1c59      	adds	r1, r3, #1
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6211      	str	r1, [r2, #32]
 8006bb4:	781a      	ldrb	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10f      	bne.n	8006bf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e000      	b.n	8006bf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bf4:	2302      	movs	r3, #2
  }
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff fe5a 	bl	80068dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b08c      	sub	sp, #48	; 0x30
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b22      	cmp	r3, #34	; 0x22
 8006c44:	f040 80ab 	bne.w	8006d9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c50:	d117      	bne.n	8006c82 <UART_Receive_IT+0x50>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d113      	bne.n	8006c82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7a:	1c9a      	adds	r2, r3, #2
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c80:	e026      	b.n	8006cd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c94:	d007      	beq.n	8006ca6 <UART_Receive_IT+0x74>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10a      	bne.n	8006cb4 <UART_Receive_IT+0x82>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d106      	bne.n	8006cb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	e008      	b.n	8006cc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d15a      	bne.n	8006d9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0220 	bic.w	r2, r2, #32
 8006cf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695a      	ldr	r2, [r3, #20]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0201 	bic.w	r2, r2, #1
 8006d12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d135      	bne.n	8006d90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	330c      	adds	r3, #12
 8006d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	613b      	str	r3, [r7, #16]
   return(result);
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f023 0310 	bic.w	r3, r3, #16
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	330c      	adds	r3, #12
 8006d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4a:	623a      	str	r2, [r7, #32]
 8006d4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	69f9      	ldr	r1, [r7, #28]
 8006d50:	6a3a      	ldr	r2, [r7, #32]
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e5      	bne.n	8006d2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0310 	and.w	r3, r3, #16
 8006d68:	2b10      	cmp	r3, #16
 8006d6a:	d10a      	bne.n	8006d82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff fdbb 	bl	8006904 <HAL_UARTEx_RxEventCallback>
 8006d8e:	e002      	b.n	8006d96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7fb ff8d 	bl	8002cb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	e002      	b.n	8006da0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e000      	b.n	8006da0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d9e:	2302      	movs	r3, #2
  }
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3730      	adds	r7, #48	; 0x30
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dac:	b0c0      	sub	sp, #256	; 0x100
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc4:	68d9      	ldr	r1, [r3, #12]
 8006dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	ea40 0301 	orr.w	r3, r0, r1
 8006dd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	431a      	orrs	r2, r3
 8006de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e00:	f021 010c 	bic.w	r1, r1, #12
 8006e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e22:	6999      	ldr	r1, [r3, #24]
 8006e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	ea40 0301 	orr.w	r3, r0, r1
 8006e2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	4b8f      	ldr	r3, [pc, #572]	; (8007074 <UART_SetConfig+0x2cc>)
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d005      	beq.n	8006e48 <UART_SetConfig+0xa0>
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	4b8d      	ldr	r3, [pc, #564]	; (8007078 <UART_SetConfig+0x2d0>)
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d104      	bne.n	8006e52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e48:	f7fe f948 	bl	80050dc <HAL_RCC_GetPCLK2Freq>
 8006e4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e50:	e003      	b.n	8006e5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e52:	f7fe f92f 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 8006e56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e64:	f040 810c 	bne.w	8007080 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	1891      	adds	r1, r2, r2
 8006e80:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e82:	415b      	adcs	r3, r3
 8006e84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	eb12 0801 	adds.w	r8, r2, r1
 8006e90:	4629      	mov	r1, r5
 8006e92:	eb43 0901 	adc.w	r9, r3, r1
 8006e96:	f04f 0200 	mov.w	r2, #0
 8006e9a:	f04f 0300 	mov.w	r3, #0
 8006e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eaa:	4690      	mov	r8, r2
 8006eac:	4699      	mov	r9, r3
 8006eae:	4623      	mov	r3, r4
 8006eb0:	eb18 0303 	adds.w	r3, r8, r3
 8006eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006eb8:	462b      	mov	r3, r5
 8006eba:	eb49 0303 	adc.w	r3, r9, r3
 8006ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ece:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ed2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	18db      	adds	r3, r3, r3
 8006eda:	653b      	str	r3, [r7, #80]	; 0x50
 8006edc:	4613      	mov	r3, r2
 8006ede:	eb42 0303 	adc.w	r3, r2, r3
 8006ee2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ee4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ee8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006eec:	f7f9 fdaa 	bl	8000a44 <__aeabi_uldivmod>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4b61      	ldr	r3, [pc, #388]	; (800707c <UART_SetConfig+0x2d4>)
 8006ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8006efa:	095b      	lsrs	r3, r3, #5
 8006efc:	011c      	lsls	r4, r3, #4
 8006efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f10:	4642      	mov	r2, r8
 8006f12:	464b      	mov	r3, r9
 8006f14:	1891      	adds	r1, r2, r2
 8006f16:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f18:	415b      	adcs	r3, r3
 8006f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f20:	4641      	mov	r1, r8
 8006f22:	eb12 0a01 	adds.w	sl, r2, r1
 8006f26:	4649      	mov	r1, r9
 8006f28:	eb43 0b01 	adc.w	fp, r3, r1
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	f04f 0300 	mov.w	r3, #0
 8006f34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f40:	4692      	mov	sl, r2
 8006f42:	469b      	mov	fp, r3
 8006f44:	4643      	mov	r3, r8
 8006f46:	eb1a 0303 	adds.w	r3, sl, r3
 8006f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f4e:	464b      	mov	r3, r9
 8006f50:	eb4b 0303 	adc.w	r3, fp, r3
 8006f54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	18db      	adds	r3, r3, r3
 8006f70:	643b      	str	r3, [r7, #64]	; 0x40
 8006f72:	4613      	mov	r3, r2
 8006f74:	eb42 0303 	adc.w	r3, r2, r3
 8006f78:	647b      	str	r3, [r7, #68]	; 0x44
 8006f7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f82:	f7f9 fd5f 	bl	8000a44 <__aeabi_uldivmod>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	4b3b      	ldr	r3, [pc, #236]	; (800707c <UART_SetConfig+0x2d4>)
 8006f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	2264      	movs	r2, #100	; 0x64
 8006f96:	fb02 f303 	mul.w	r3, r2, r3
 8006f9a:	1acb      	subs	r3, r1, r3
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006fa2:	4b36      	ldr	r3, [pc, #216]	; (800707c <UART_SetConfig+0x2d4>)
 8006fa4:	fba3 2302 	umull	r2, r3, r3, r2
 8006fa8:	095b      	lsrs	r3, r3, #5
 8006faa:	005b      	lsls	r3, r3, #1
 8006fac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fb0:	441c      	add	r4, r3
 8006fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006fc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006fc4:	4642      	mov	r2, r8
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	1891      	adds	r1, r2, r2
 8006fca:	63b9      	str	r1, [r7, #56]	; 0x38
 8006fcc:	415b      	adcs	r3, r3
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	1851      	adds	r1, r2, r1
 8006fd8:	6339      	str	r1, [r7, #48]	; 0x30
 8006fda:	4649      	mov	r1, r9
 8006fdc:	414b      	adcs	r3, r1
 8006fde:	637b      	str	r3, [r7, #52]	; 0x34
 8006fe0:	f04f 0200 	mov.w	r2, #0
 8006fe4:	f04f 0300 	mov.w	r3, #0
 8006fe8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006fec:	4659      	mov	r1, fp
 8006fee:	00cb      	lsls	r3, r1, #3
 8006ff0:	4651      	mov	r1, sl
 8006ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ff6:	4651      	mov	r1, sl
 8006ff8:	00ca      	lsls	r2, r1, #3
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4603      	mov	r3, r0
 8007000:	4642      	mov	r2, r8
 8007002:	189b      	adds	r3, r3, r2
 8007004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007008:	464b      	mov	r3, r9
 800700a:	460a      	mov	r2, r1
 800700c:	eb42 0303 	adc.w	r3, r2, r3
 8007010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007020:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007024:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007028:	460b      	mov	r3, r1
 800702a:	18db      	adds	r3, r3, r3
 800702c:	62bb      	str	r3, [r7, #40]	; 0x28
 800702e:	4613      	mov	r3, r2
 8007030:	eb42 0303 	adc.w	r3, r2, r3
 8007034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007036:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800703a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800703e:	f7f9 fd01 	bl	8000a44 <__aeabi_uldivmod>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4b0d      	ldr	r3, [pc, #52]	; (800707c <UART_SetConfig+0x2d4>)
 8007048:	fba3 1302 	umull	r1, r3, r3, r2
 800704c:	095b      	lsrs	r3, r3, #5
 800704e:	2164      	movs	r1, #100	; 0x64
 8007050:	fb01 f303 	mul.w	r3, r1, r3
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	3332      	adds	r3, #50	; 0x32
 800705a:	4a08      	ldr	r2, [pc, #32]	; (800707c <UART_SetConfig+0x2d4>)
 800705c:	fba2 2303 	umull	r2, r3, r2, r3
 8007060:	095b      	lsrs	r3, r3, #5
 8007062:	f003 0207 	and.w	r2, r3, #7
 8007066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4422      	add	r2, r4
 800706e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007070:	e105      	b.n	800727e <UART_SetConfig+0x4d6>
 8007072:	bf00      	nop
 8007074:	40011000 	.word	0x40011000
 8007078:	40011400 	.word	0x40011400
 800707c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007084:	2200      	movs	r2, #0
 8007086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800708a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800708e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007092:	4642      	mov	r2, r8
 8007094:	464b      	mov	r3, r9
 8007096:	1891      	adds	r1, r2, r2
 8007098:	6239      	str	r1, [r7, #32]
 800709a:	415b      	adcs	r3, r3
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
 800709e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070a2:	4641      	mov	r1, r8
 80070a4:	1854      	adds	r4, r2, r1
 80070a6:	4649      	mov	r1, r9
 80070a8:	eb43 0501 	adc.w	r5, r3, r1
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	00eb      	lsls	r3, r5, #3
 80070b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070ba:	00e2      	lsls	r2, r4, #3
 80070bc:	4614      	mov	r4, r2
 80070be:	461d      	mov	r5, r3
 80070c0:	4643      	mov	r3, r8
 80070c2:	18e3      	adds	r3, r4, r3
 80070c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070c8:	464b      	mov	r3, r9
 80070ca:	eb45 0303 	adc.w	r3, r5, r3
 80070ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80070de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80070ee:	4629      	mov	r1, r5
 80070f0:	008b      	lsls	r3, r1, #2
 80070f2:	4621      	mov	r1, r4
 80070f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070f8:	4621      	mov	r1, r4
 80070fa:	008a      	lsls	r2, r1, #2
 80070fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007100:	f7f9 fca0 	bl	8000a44 <__aeabi_uldivmod>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4b60      	ldr	r3, [pc, #384]	; (800728c <UART_SetConfig+0x4e4>)
 800710a:	fba3 2302 	umull	r2, r3, r3, r2
 800710e:	095b      	lsrs	r3, r3, #5
 8007110:	011c      	lsls	r4, r3, #4
 8007112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007116:	2200      	movs	r2, #0
 8007118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800711c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007120:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007124:	4642      	mov	r2, r8
 8007126:	464b      	mov	r3, r9
 8007128:	1891      	adds	r1, r2, r2
 800712a:	61b9      	str	r1, [r7, #24]
 800712c:	415b      	adcs	r3, r3
 800712e:	61fb      	str	r3, [r7, #28]
 8007130:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007134:	4641      	mov	r1, r8
 8007136:	1851      	adds	r1, r2, r1
 8007138:	6139      	str	r1, [r7, #16]
 800713a:	4649      	mov	r1, r9
 800713c:	414b      	adcs	r3, r1
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800714c:	4659      	mov	r1, fp
 800714e:	00cb      	lsls	r3, r1, #3
 8007150:	4651      	mov	r1, sl
 8007152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007156:	4651      	mov	r1, sl
 8007158:	00ca      	lsls	r2, r1, #3
 800715a:	4610      	mov	r0, r2
 800715c:	4619      	mov	r1, r3
 800715e:	4603      	mov	r3, r0
 8007160:	4642      	mov	r2, r8
 8007162:	189b      	adds	r3, r3, r2
 8007164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007168:	464b      	mov	r3, r9
 800716a:	460a      	mov	r2, r1
 800716c:	eb42 0303 	adc.w	r3, r2, r3
 8007170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	67bb      	str	r3, [r7, #120]	; 0x78
 800717e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007180:	f04f 0200 	mov.w	r2, #0
 8007184:	f04f 0300 	mov.w	r3, #0
 8007188:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800718c:	4649      	mov	r1, r9
 800718e:	008b      	lsls	r3, r1, #2
 8007190:	4641      	mov	r1, r8
 8007192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007196:	4641      	mov	r1, r8
 8007198:	008a      	lsls	r2, r1, #2
 800719a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800719e:	f7f9 fc51 	bl	8000a44 <__aeabi_uldivmod>
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4b39      	ldr	r3, [pc, #228]	; (800728c <UART_SetConfig+0x4e4>)
 80071a8:	fba3 1302 	umull	r1, r3, r3, r2
 80071ac:	095b      	lsrs	r3, r3, #5
 80071ae:	2164      	movs	r1, #100	; 0x64
 80071b0:	fb01 f303 	mul.w	r3, r1, r3
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	3332      	adds	r3, #50	; 0x32
 80071ba:	4a34      	ldr	r2, [pc, #208]	; (800728c <UART_SetConfig+0x4e4>)
 80071bc:	fba2 2303 	umull	r2, r3, r2, r3
 80071c0:	095b      	lsrs	r3, r3, #5
 80071c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071c6:	441c      	add	r4, r3
 80071c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071cc:	2200      	movs	r2, #0
 80071ce:	673b      	str	r3, [r7, #112]	; 0x70
 80071d0:	677a      	str	r2, [r7, #116]	; 0x74
 80071d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80071d6:	4642      	mov	r2, r8
 80071d8:	464b      	mov	r3, r9
 80071da:	1891      	adds	r1, r2, r2
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	415b      	adcs	r3, r3
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071e6:	4641      	mov	r1, r8
 80071e8:	1851      	adds	r1, r2, r1
 80071ea:	6039      	str	r1, [r7, #0]
 80071ec:	4649      	mov	r1, r9
 80071ee:	414b      	adcs	r3, r1
 80071f0:	607b      	str	r3, [r7, #4]
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071fe:	4659      	mov	r1, fp
 8007200:	00cb      	lsls	r3, r1, #3
 8007202:	4651      	mov	r1, sl
 8007204:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007208:	4651      	mov	r1, sl
 800720a:	00ca      	lsls	r2, r1, #3
 800720c:	4610      	mov	r0, r2
 800720e:	4619      	mov	r1, r3
 8007210:	4603      	mov	r3, r0
 8007212:	4642      	mov	r2, r8
 8007214:	189b      	adds	r3, r3, r2
 8007216:	66bb      	str	r3, [r7, #104]	; 0x68
 8007218:	464b      	mov	r3, r9
 800721a:	460a      	mov	r2, r1
 800721c:	eb42 0303 	adc.w	r3, r2, r3
 8007220:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	663b      	str	r3, [r7, #96]	; 0x60
 800722c:	667a      	str	r2, [r7, #100]	; 0x64
 800722e:	f04f 0200 	mov.w	r2, #0
 8007232:	f04f 0300 	mov.w	r3, #0
 8007236:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800723a:	4649      	mov	r1, r9
 800723c:	008b      	lsls	r3, r1, #2
 800723e:	4641      	mov	r1, r8
 8007240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007244:	4641      	mov	r1, r8
 8007246:	008a      	lsls	r2, r1, #2
 8007248:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800724c:	f7f9 fbfa 	bl	8000a44 <__aeabi_uldivmod>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4b0d      	ldr	r3, [pc, #52]	; (800728c <UART_SetConfig+0x4e4>)
 8007256:	fba3 1302 	umull	r1, r3, r3, r2
 800725a:	095b      	lsrs	r3, r3, #5
 800725c:	2164      	movs	r1, #100	; 0x64
 800725e:	fb01 f303 	mul.w	r3, r1, r3
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	3332      	adds	r3, #50	; 0x32
 8007268:	4a08      	ldr	r2, [pc, #32]	; (800728c <UART_SetConfig+0x4e4>)
 800726a:	fba2 2303 	umull	r2, r3, r2, r3
 800726e:	095b      	lsrs	r3, r3, #5
 8007270:	f003 020f 	and.w	r2, r3, #15
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4422      	add	r2, r4
 800727c:	609a      	str	r2, [r3, #8]
}
 800727e:	bf00      	nop
 8007280:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007284:	46bd      	mov	sp, r7
 8007286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800728a:	bf00      	nop
 800728c:	51eb851f 	.word	0x51eb851f

08007290 <movingAverageInit>:
 */

#include "movingAverage.h"

void movingAverageInit(MovingAverage *movingAverage, uint16_t window)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	807b      	strh	r3, [r7, #2]
	movingAverage->index = 0;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	801a      	strh	r2, [r3, #0]
	movingAverage->window = window;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	887a      	ldrh	r2, [r7, #2]
 80072a6:	805a      	strh	r2, [r3, #2]
	memset(movingAverage->buffer, 0x00, MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS * sizeof(int32_t));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3304      	adds	r3, #4
 80072ac:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80072b0:	2100      	movs	r1, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 fbda 	bl	8007a6c <memset>
	movingAverage->sum = 0;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
	movingAverage->movingAverage = 0;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <movingAverageAddValue>:

void movingAverageAddValue(MovingAverage *movingAverage, int32_t newValue)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
	movingAverage->sum = movingAverage->sum - movingAverage->buffer[movingAverage->index] + newValue;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	; 0x4b4
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	1ad2      	subs	r2, r2, r3
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	441a      	add	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
	movingAverage->buffer[movingAverage->index] = newValue;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	605a      	str	r2, [r3, #4]
	movingAverage->movingAverage = movingAverage->sum / movingAverage->window;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 34b4 	ldr.w	r3, [r3, #1204]	; 0x4b4
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	8852      	ldrh	r2, [r2, #2]
 8007314:	fb93 f2f2 	sdiv	r2, r3, r2
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
	movingAverage->index = (movingAverage->index + 1) % movingAverage->window;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007324:	3301      	adds	r3, #1
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	8852      	ldrh	r2, [r2, #2]
 800732a:	fb93 f1f2 	sdiv	r1, r3, r2
 800732e:	fb01 f202 	mul.w	r2, r1, r2
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	b21a      	sxth	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	801a      	strh	r2, [r3, #0]
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <movingAverageGetMean>:

int32_t movingAverageGetMean(MovingAverage *movingAverage)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
	return movingAverage->movingAverage;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 34b8 	ldr.w	r3, [r3, #1208]	; 0x4b8
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <movingAverageGetWindow>:

uint16_t movingAverageGetWindow(MovingAverage *movingAverage)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
	return movingAverage->window;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	885b      	ldrh	r3, [r3, #2]
}
 800736c:	4618      	mov	r0, r3
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <movingAverageSetWindow>:

void movingAverageSetWindow(MovingAverage *movingAverage, uint16_t window)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	807b      	strh	r3, [r7, #2]
	if (window > MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS)
 8007384:	887b      	ldrh	r3, [r7, #2]
 8007386:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800738a:	d902      	bls.n	8007392 <movingAverageSetWindow+0x1a>
	{
		window = MOV_AVG_FIL_MAX_QTY_OF_ELEMENTS;
 800738c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007390:	807b      	strh	r3, [r7, #2]
	}
	movingAverage->window = window;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	887a      	ldrh	r2, [r7, #2]
 8007396:	805a      	strh	r2, [r3, #2]
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <pidInit>:

#include "pid.h"
#include "defs.h"

void pidInit(PidController *pidController, float kp, float ki, float kd, float offset, float bias, ControllerTopology controllerTopology)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b089      	sub	sp, #36	; 0x24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	61f8      	str	r0, [r7, #28]
 80073ac:	ed87 0a06 	vstr	s0, [r7, #24]
 80073b0:	edc7 0a05 	vstr	s1, [r7, #20]
 80073b4:	ed87 1a04 	vstr	s2, [r7, #16]
 80073b8:	edc7 1a03 	vstr	s3, [r7, #12]
 80073bc:	ed87 2a02 	vstr	s4, [r7, #8]
 80073c0:	460b      	mov	r3, r1
 80073c2:	71fb      	strb	r3, [r7, #7]
	pidController->kp = kp;
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	69ba      	ldr	r2, [r7, #24]
 80073c8:	601a      	str	r2, [r3, #0]
	pidController->ki = ki;
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	605a      	str	r2, [r3, #4]
	pidController->kd = kd;
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	609a      	str	r2, [r3, #8]
	pidController->controllerTopology = controllerTopology;
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	79fa      	ldrb	r2, [r7, #7]
 80073da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	pidController->currentError = 0;
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	f04f 0200 	mov.w	r2, #0
 80073e4:	60da      	str	r2, [r3, #12]
	pidController->previousError = 0;
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	611a      	str	r2, [r3, #16]
	pidController->sumOfErrors = 0;
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f04f 0200 	mov.w	r2, #0
 80073f4:	615a      	str	r2, [r3, #20]
	pidController->setpoint = 0;
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	f04f 0200 	mov.w	r2, #0
 80073fc:	619a      	str	r2, [r3, #24]
	pidController->controlledVariable = 0;
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	61da      	str	r2, [r3, #28]
	pidController->processVariable = 0;
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	621a      	str	r2, [r3, #32]
	pidController->differenceOfErrors = 0;
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	f04f 0200 	mov.w	r2, #0
 8007414:	625a      	str	r2, [r3, #36]	; 0x24
	pidController->minSumOfErrors = -10000;
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	4a0d      	ldr	r2, [pc, #52]	; (8007450 <pidInit+0xac>)
 800741a:	635a      	str	r2, [r3, #52]	; 0x34
	pidController->maxSumOfErrors = 10000;
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007422:	639a      	str	r2, [r3, #56]	; 0x38
	pidController->minControlledVariable = 0;
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	2200      	movs	r2, #0
 8007428:	63da      	str	r2, [r3, #60]	; 0x3c
	pidController->maxControlledVariable = 4095;
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8007430:	641a      	str	r2, [r3, #64]	; 0x40
	pidController->offset = offset;
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	62da      	str	r2, [r3, #44]	; 0x2c
	pidController->bias = bias;
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	631a      	str	r2, [r3, #48]	; 0x30
	pidController->interval = ((float) DELAY_25_MILISECONDS) / 10000;
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	4a04      	ldr	r2, [pc, #16]	; (8007454 <pidInit+0xb0>)
 8007442:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007444:	bf00      	nop
 8007446:	3724      	adds	r7, #36	; 0x24
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr
 8007450:	ffffd8f0 	.word	0xffffd8f0
 8007454:	3ccccccd 	.word	0x3ccccccd

08007458 <pidCompute>:

void pidCompute(PidController *pidController)
{
 8007458:	b480      	push	{r7}
 800745a:	b089      	sub	sp, #36	; 0x24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	pidController->currentError = pidController->setpoint - pidController->processVariable;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	ed93 7a06 	vldr	s14, [r3, #24]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	edd3 7a08 	vldr	s15, [r3, #32]
 800746c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	edc3 7a03 	vstr	s15, [r3, #12]
	pidController->sumOfErrors += pidController->currentError;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	ed93 7a05 	vldr	s14, [r3, #20]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	edc3 7a05 	vstr	s15, [r3, #20]
	pidController->differenceOfErrors = pidController->currentError - pidController->previousError;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	ed93 7a03 	vldr	s14, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	edd3 7a04 	vldr	s15, [r3, #16]
 8007498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	if (pidController->sumOfErrors > pidController->maxSumOfErrors)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	ed93 7a05 	vldr	s14, [r3, #20]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ac:	ee07 3a90 	vmov	s15, r3
 80074b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074bc:	dd09      	ble.n	80074d2 <pidCompute+0x7a>
	{
		pidController->sumOfErrors = pidController->maxSumOfErrors;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	edc3 7a05 	vstr	s15, [r3, #20]
 80074d0:	e016      	b.n	8007500 <pidCompute+0xa8>
	}
	else if (pidController->sumOfErrors < pidController->minSumOfErrors)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	ed93 7a05 	vldr	s14, [r3, #20]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074dc:	ee07 3a90 	vmov	s15, r3
 80074e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80074e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ec:	d508      	bpl.n	8007500 <pidCompute+0xa8>
	{
		pidController->sumOfErrors = pidController->minSumOfErrors;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	if (pidController->controllerTopology == P_CONTROLLER)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007506:	2b00      	cmp	r3, #0
 8007508:	d114      	bne.n	8007534 <pidCompute+0xdc>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	ed93 7a00 	vldr	s14, [r3]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	edd3 7a03 	vldr	s15, [r3, #12]
 8007516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751a:	edc7 7a02 	vstr	s15, [r7, #8]
		pidController->controlledVariable = proportionalTerm + pidController->bias;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007524:	edd7 7a02 	vldr	s15, [r7, #8]
 8007528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	edc3 7a07 	vstr	s15, [r3, #28]
 8007532:	e061      	b.n	80075f8 <pidCompute+0x1a0>
	}
	else if (pidController->controllerTopology == PI_CONTROLLER)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800753a:	2b01      	cmp	r3, #1
 800753c:	d122      	bne.n	8007584 <pidCompute+0x12c>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	ed93 7a00 	vldr	s14, [r3]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	edd3 7a03 	vldr	s15, [r3, #12]
 800754a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754e:	edc7 7a04 	vstr	s15, [r7, #16]
		float integralTerm = pidController->ki * pidController->sumOfErrors;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	ed93 7a01 	vldr	s14, [r3, #4]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	edd3 7a05 	vldr	s15, [r3, #20]
 800755e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007562:	edc7 7a03 	vstr	s15, [r7, #12]
		pidController->controlledVariable = proportionalTerm + integralTerm + pidController->bias;
 8007566:	ed97 7a04 	vldr	s14, [r7, #16]
 800756a:	edd7 7a03 	vldr	s15, [r7, #12]
 800756e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	edc3 7a07 	vstr	s15, [r3, #28]
 8007582:	e039      	b.n	80075f8 <pidCompute+0x1a0>
	}
	else if (pidController->controllerTopology == PID_CONTROLLER)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800758a:	2b02      	cmp	r3, #2
 800758c:	d130      	bne.n	80075f0 <pidCompute+0x198>
	{
		float proportionalTerm = pidController->kp * pidController->currentError;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	ed93 7a00 	vldr	s14, [r3]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	edd3 7a03 	vldr	s15, [r3, #12]
 800759a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759e:	edc7 7a07 	vstr	s15, [r7, #28]
		float integralTerm = pidController->ki * pidController->sumOfErrors;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80075ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b2:	edc7 7a06 	vstr	s15, [r7, #24]
		float derivativeTerm = pidController->kd * pidController->differenceOfErrors;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c6:	edc7 7a05 	vstr	s15, [r7, #20]
		pidController->controlledVariable = proportionalTerm + integralTerm + derivativeTerm + pidController->bias;
 80075ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80075ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80075d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80075da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80075e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	edc3 7a07 	vstr	s15, [r3, #28]
 80075ee:	e003      	b.n	80075f8 <pidCompute+0x1a0>
	}
	else
	{
		pidController->controlledVariable = 0;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f04f 0200 	mov.w	r2, #0
 80075f6:	61da      	str	r2, [r3, #28]
	}

	if (pidController->controlledVariable > pidController->maxControlledVariable)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800760a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800760e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007612:	dd09      	ble.n	8007628 <pidCompute+0x1d0>
	{
		pidController->controlledVariable = pidController->maxControlledVariable;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	ee07 3a90 	vmov	s15, r3
 800761c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	edc3 7a07 	vstr	s15, [r3, #28]
 8007626:	e016      	b.n	8007656 <pidCompute+0x1fe>
	}
	else if (pidController->controlledVariable < pidController->minControlledVariable)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	ed93 7a07 	vldr	s14, [r3, #28]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800763a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800763e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007642:	d508      	bpl.n	8007656 <pidCompute+0x1fe>
	{
		pidController->controlledVariable = pidController->minControlledVariable;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007648:	ee07 3a90 	vmov	s15, r3
 800764c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	pidController->previousError = pidController->currentError;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	611a      	str	r2, [r3, #16]
}
 800765e:	bf00      	nop
 8007660:	3724      	adds	r7, #36	; 0x24
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <pidClearParameters>:

void pidClearParameters(PidController *pidController)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
	pidController->controlledVariable = 0;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f04f 0200 	mov.w	r2, #0
 8007678:	61da      	str	r2, [r3, #28]
	pidController->currentError = 0;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f04f 0200 	mov.w	r2, #0
 8007680:	60da      	str	r2, [r3, #12]
	pidController->differenceOfErrors = 0;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	625a      	str	r2, [r3, #36]	; 0x24
	pidController->previousError = 0;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f04f 0200 	mov.w	r2, #0
 8007690:	611a      	str	r2, [r3, #16]
	pidController->processVariable = 0;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f04f 0200 	mov.w	r2, #0
 8007698:	621a      	str	r2, [r3, #32]
	pidController->sumOfErrors = 0;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f04f 0200 	mov.w	r2, #0
 80076a0:	615a      	str	r2, [r3, #20]
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <pidGetKp>:

float pidGetKp(PidController *pidController)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
	return pidController->kp;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	ee07 3a90 	vmov	s15, r3
}
 80076be:	eeb0 0a67 	vmov.f32	s0, s15
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <pidSetKp>:

void pidSetKp(PidController *pidController, float kp)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	ed87 0a00 	vstr	s0, [r7]
	pidController->kp = kp;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	601a      	str	r2, [r3, #0]
}
 80076de:	bf00      	nop
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <pidGetKi>:

float pidGetKi(PidController *pidController)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
	return pidController->ki;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	ee07 3a90 	vmov	s15, r3
}
 80076fa:	eeb0 0a67 	vmov.f32	s0, s15
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <pidSetKi>:

void pidSetKi(PidController *pidController, float ki)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	ed87 0a00 	vstr	s0, [r7]
	pidController->ki = ki;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	605a      	str	r2, [r3, #4]
}
 800771a:	bf00      	nop
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <pidGetKd>:

float pidGetKd(PidController *pidController)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
	return pidController->kd;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	ee07 3a90 	vmov	s15, r3
}
 8007736:	eeb0 0a67 	vmov.f32	s0, s15
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <pidSetKd>:

void pidSetKd(PidController *pidController, float kd)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	ed87 0a00 	vstr	s0, [r7]
	pidController->kd = kd;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	609a      	str	r2, [r3, #8]
}
 8007756:	bf00      	nop
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <pidGetInterval>:

float pidGetInterval(PidController *pidController)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
	return pidController->interval;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	ee07 3a90 	vmov	s15, r3
}
 8007772:	eeb0 0a67 	vmov.f32	s0, s15
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <pidSetInterval>:

void pidSetInterval(PidController *pidController, float interval)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	ed87 0a00 	vstr	s0, [r7]
	pidController->interval = interval;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <pidGetSetpoint>:

float pidGetSetpoint(PidController *pidController)
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
	return pidController->setpoint;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	ee07 3a90 	vmov	s15, r3
}
 80077ae:	eeb0 0a67 	vmov.f32	s0, s15
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <pidSetSetpoint>:

void pidSetSetpoint(PidController *pidController, float setpoint)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	ed87 0a00 	vstr	s0, [r7]
	pidController->setpoint = setpoint;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	619a      	str	r2, [r3, #24]
}
 80077ce:	bf00      	nop
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <pidGetProcessVariable>:

float pidGetProcessVariable(PidController *pidController)
{
 80077da:	b480      	push	{r7}
 80077dc:	b083      	sub	sp, #12
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
	return pidController->processVariable;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	ee07 3a90 	vmov	s15, r3
}
 80077ea:	eeb0 0a67 	vmov.f32	s0, s15
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <pidSetProcessVariable>:

void pidSetProcessVariable(PidController *pidController, float processVariable)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	ed87 0a00 	vstr	s0, [r7]
	pidController->processVariable = processVariable + pidController->offset;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800780a:	edd7 7a00 	vldr	s15, [r7]
 800780e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <pidGetControlledVariable>:

float pidGetControlledVariable(PidController *pidController)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
	return pidController->controlledVariable;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	69db      	ldr	r3, [r3, #28]
 8007830:	ee07 3a90 	vmov	s15, r3
}
 8007834:	eeb0 0a67 	vmov.f32	s0, s15
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <pidGetOffset>:

float pidGetOffset(PidController *pidController)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
	return pidController->offset;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784e:	ee07 3a90 	vmov	s15, r3
}
 8007852:	eeb0 0a67 	vmov.f32	s0, s15
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <pidSetOffset>:

void pidSetOffset(PidController *pidController, float offset)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	ed87 0a00 	vstr	s0, [r7]
	pidController->offset = offset;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <pidGetBias>:

float pidGetBias(PidController *pidController)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
	return pidController->bias;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788a:	ee07 3a90 	vmov	s15, r3
}
 800788e:	eeb0 0a67 	vmov.f32	s0, s15
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <pidSetBias>:

void pidSetBias(PidController *pidController, float bias)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	ed87 0a00 	vstr	s0, [r7]
	pidController->bias = bias;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <pidGetMinSumOfErrors>:

int32_t pidGetMinSumOfErrors(PidController *pidController)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
	return pidController->minSumOfErrors;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
	...

080078d4 <pidSetMinSumOfErrors>:

void pidSetMinSumOfErrors(PidController *pidController, int32_t minSumOfErrors)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
	if (minSumOfErrors < MIN_SUM_OF_ERRORS_ALLOWED)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	4a0a      	ldr	r2, [pc, #40]	; (800790c <pidSetMinSumOfErrors+0x38>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	da02      	bge.n	80078ec <pidSetMinSumOfErrors+0x18>
	{
		minSumOfErrors = MIN_SUM_OF_ERRORS_ALLOWED;
 80078e6:	4b09      	ldr	r3, [pc, #36]	; (800790c <pidSetMinSumOfErrors+0x38>)
 80078e8:	603b      	str	r3, [r7, #0]
 80078ea:	e005      	b.n	80078f8 <pidSetMinSumOfErrors+0x24>
	}
	else if (minSumOfErrors > MAX_SUM_OF_ERRORS_ALLOWED)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	4a08      	ldr	r2, [pc, #32]	; (8007910 <pidSetMinSumOfErrors+0x3c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	dd01      	ble.n	80078f8 <pidSetMinSumOfErrors+0x24>
	{
		minSumOfErrors = MAX_SUM_OF_ERRORS_ALLOWED;
 80078f4:	4b06      	ldr	r3, [pc, #24]	; (8007910 <pidSetMinSumOfErrors+0x3c>)
 80078f6:	603b      	str	r3, [r7, #0]
	}
	pidController->minSumOfErrors = minSumOfErrors;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	c4653600 	.word	0xc4653600
 8007910:	3b9aca00 	.word	0x3b9aca00

08007914 <pidGetMaxSumOfErrors>:

int32_t pidGetMaxSumOfErrors(PidController *pidController)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
	return pidController->maxSumOfErrors;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <pidSetMaxSumOfErrors>:

void pidSetMaxSumOfErrors(PidController *pidController, int32_t maxSumOfErrors)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
	if (maxSumOfErrors < MIN_SUM_OF_ERRORS_ALLOWED)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	4a0a      	ldr	r2, [pc, #40]	; (8007964 <pidSetMaxSumOfErrors+0x38>)
 800793a:	4293      	cmp	r3, r2
 800793c:	da02      	bge.n	8007944 <pidSetMaxSumOfErrors+0x18>
	{
		maxSumOfErrors = MIN_SUM_OF_ERRORS_ALLOWED;
 800793e:	4b09      	ldr	r3, [pc, #36]	; (8007964 <pidSetMaxSumOfErrors+0x38>)
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	e005      	b.n	8007950 <pidSetMaxSumOfErrors+0x24>
	}
	else if (maxSumOfErrors > MAX_SUM_OF_ERRORS_ALLOWED)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	4a08      	ldr	r2, [pc, #32]	; (8007968 <pidSetMaxSumOfErrors+0x3c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	dd01      	ble.n	8007950 <pidSetMaxSumOfErrors+0x24>
	{
		maxSumOfErrors = MAX_SUM_OF_ERRORS_ALLOWED;
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <pidSetMaxSumOfErrors+0x3c>)
 800794e:	603b      	str	r3, [r7, #0]
	}
	pidController->maxSumOfErrors = maxSumOfErrors;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007956:	bf00      	nop
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	c4653600 	.word	0xc4653600
 8007968:	3b9aca00 	.word	0x3b9aca00

0800796c <pidGetMinControlledVariable>:

int32_t pidGetMinControlledVariable(PidController *pidController)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	return pidController->minControlledVariable;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <pidSetMinControlledVariable>:

void pidSetMinControlledVariable(PidController *pidController, int32_t minControlledVariable)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
	if (minControlledVariable < MIN_CONTROLLED_VARIABLE_ALLOWED)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	da02      	bge.n	800799a <pidSetMinControlledVariable+0x16>
	{
		minControlledVariable = MIN_CONTROLLED_VARIABLE_ALLOWED;
 8007994:	2300      	movs	r3, #0
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	e006      	b.n	80079a8 <pidSetMinControlledVariable+0x24>
	}
	else if (minControlledVariable > MAX_CONTROLLED_VARIABLE_ALLOWED)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a0:	db02      	blt.n	80079a8 <pidSetMinControlledVariable+0x24>
	{
		minControlledVariable = MAX_CONTROLLED_VARIABLE_ALLOWED;
 80079a2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80079a6:	603b      	str	r3, [r7, #0]
	}
	pidController->minControlledVariable = minControlledVariable;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <pidGetMaxControlledVariable>:

int32_t pidGetMaxControlledVariable(PidController *pidController)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
	return pidController->maxControlledVariable;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <pidSetMaxControlledVariable>:

void pidSetMaxControlledVariable(PidController *pidController, int32_t maxControlledVariable)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]
	if (maxControlledVariable < MIN_CONTROLLED_VARIABLE_ALLOWED)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	da02      	bge.n	80079e8 <pidSetMaxControlledVariable+0x16>
	{
		maxControlledVariable = MIN_CONTROLLED_VARIABLE_ALLOWED;
 80079e2:	2300      	movs	r3, #0
 80079e4:	603b      	str	r3, [r7, #0]
 80079e6:	e006      	b.n	80079f6 <pidSetMaxControlledVariable+0x24>
	}
	else if (maxControlledVariable > MAX_CONTROLLED_VARIABLE_ALLOWED)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ee:	db02      	blt.n	80079f6 <pidSetMaxControlledVariable+0x24>
	{
		maxControlledVariable = MAX_CONTROLLED_VARIABLE_ALLOWED;
 80079f0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80079f4:	603b      	str	r3, [r7, #0]
	}
	pidController->maxControlledVariable = maxControlledVariable;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <__libc_init_array>:
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	4d0d      	ldr	r5, [pc, #52]	; (8007a40 <__libc_init_array+0x38>)
 8007a0c:	4c0d      	ldr	r4, [pc, #52]	; (8007a44 <__libc_init_array+0x3c>)
 8007a0e:	1b64      	subs	r4, r4, r5
 8007a10:	10a4      	asrs	r4, r4, #2
 8007a12:	2600      	movs	r6, #0
 8007a14:	42a6      	cmp	r6, r4
 8007a16:	d109      	bne.n	8007a2c <__libc_init_array+0x24>
 8007a18:	4d0b      	ldr	r5, [pc, #44]	; (8007a48 <__libc_init_array+0x40>)
 8007a1a:	4c0c      	ldr	r4, [pc, #48]	; (8007a4c <__libc_init_array+0x44>)
 8007a1c:	f000 f82e 	bl	8007a7c <_init>
 8007a20:	1b64      	subs	r4, r4, r5
 8007a22:	10a4      	asrs	r4, r4, #2
 8007a24:	2600      	movs	r6, #0
 8007a26:	42a6      	cmp	r6, r4
 8007a28:	d105      	bne.n	8007a36 <__libc_init_array+0x2e>
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
 8007a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a30:	4798      	blx	r3
 8007a32:	3601      	adds	r6, #1
 8007a34:	e7ee      	b.n	8007a14 <__libc_init_array+0xc>
 8007a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a3a:	4798      	blx	r3
 8007a3c:	3601      	adds	r6, #1
 8007a3e:	e7f2      	b.n	8007a26 <__libc_init_array+0x1e>
 8007a40:	08007bb4 	.word	0x08007bb4
 8007a44:	08007bb4 	.word	0x08007bb4
 8007a48:	08007bb4 	.word	0x08007bb4
 8007a4c:	08007bb8 	.word	0x08007bb8

08007a50 <memcpy>:
 8007a50:	440a      	add	r2, r1
 8007a52:	4291      	cmp	r1, r2
 8007a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a58:	d100      	bne.n	8007a5c <memcpy+0xc>
 8007a5a:	4770      	bx	lr
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a66:	4291      	cmp	r1, r2
 8007a68:	d1f9      	bne.n	8007a5e <memcpy+0xe>
 8007a6a:	bd10      	pop	{r4, pc}

08007a6c <memset>:
 8007a6c:	4402      	add	r2, r0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d100      	bne.n	8007a76 <memset+0xa>
 8007a74:	4770      	bx	lr
 8007a76:	f803 1b01 	strb.w	r1, [r3], #1
 8007a7a:	e7f9      	b.n	8007a70 <memset+0x4>

08007a7c <_init>:
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	bf00      	nop
 8007a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a82:	bc08      	pop	{r3}
 8007a84:	469e      	mov	lr, r3
 8007a86:	4770      	bx	lr

08007a88 <_fini>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	bf00      	nop
 8007a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8e:	bc08      	pop	{r3}
 8007a90:	469e      	mov	lr, r3
 8007a92:	4770      	bx	lr
